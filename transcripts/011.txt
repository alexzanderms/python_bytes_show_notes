Python Bytes Transcript
Episode #11: Django 2.0 is dropping Python 2 Entirely, Pipenv for Profile Functionality and Pythonic Home Automation

Michael KENNEDY: This is Python Bytes. Python headlines and news delivered directly to your earbuds. This is Episode #11, recorded Monday, January 30th, 2017. This is Michael Kennedy. I’m here with Brian Okken. 

Hey, Brian.

Brian OKKEN: Hey.

KENNEDY: Are you ready to talk about Python news and some cool things we found this week? 

OKKEN: I am. I’ve got a little bit of a cold but I think we can get through it.

KENNEDY: I think you’re going to be just fine, you sound totally good to me. So, hang in there for a short bit while we talk about these things. 

One of the things that makes Python fabulous is the so-called “batteries included” story. Sometimes that means standard libraries, sometimes that means PyPI and the 97,000 packages there. We’re not done improving how we work with those, are we?

OKKEN: No, we’re not. One of the things that came up recently, I think it was last week, is Kenneth Reitz announced a new tool that he wrote, I guess, over the weekend called Pipenv. We’ll link to both his announcement and a Reddit thread where people are talking about it. There are other projects out there that do the same thing, or similar things. This is a way to bring Pip and virtual environments together in the same tool chain and also Pipfile. Since we talked about Pipfile, I think it was last week. 

This is something that I just started using. I just started using Pipenv. So far, even just the simple environment of setting up a new directory for a project and setting up a virtual environment, this has helped me just make that faster. Just Pipenv install something and it creates a virtual environment. And I like the Pipenv shell, which brings you into a shell terminal in that environment; that works with my workflow pretty good. Supposedly, it automatically finds your project home recursively by looking for the Pipfile.

KENNEDY: Yeah, so one of the things that’s really cool about this is it will create a virtual directory in one of these Pipfiles and if I’m reading this right, that means you don’t have to activate your virtual environment to manage it in the particular shell. 

OKKEN: Right.

KENNEDY: You just have to be in the directory somewhere and then your package management commands with Pipenv will apply to that virtual environment dedicated to that project. 

OKKEN: Yes.

KENNEDY: Which is really nice.

OKKEN: Yeah, and the magic of virtual environments where it switched out a different Python for you and different paths, you still have to be activated with that but that’s where the Pipenv shell command comes in handy. You also don’t have to be in that environment, like you said, to update the Pipfile and there’s a run command where you cannot go into the environment with your shell but just run a command within the environment.

KENNEDY: Yeah, that’s pretty sweet. And it automatically adds, basically, to what would be the equivalent to requirements.txt when you install a package and automatically removes that requirement from the Pipfile, the new replacement for requirements.txt when you uninstall it and keeps your Pip up-to-date. It’s very cool. Leave it to Kenneth to say, ‘Instead of watching television this weekend, I completely re-wrote how you manage packages in Python.’  

OKKEN: Yeah, well the entire toolchain for Python hasn’t gone over to Pipfile yet. We still have to deal with requirements.txt. I’m still not sure how this fits together. I’ll give it some more playing and we’ll work at it. 

KENNEDY: Sounds good. It definitely looks promising and I’m excited to start using it myself. 

One of the continuous messages that I think we are getting known for probably is our advocacy of everybody moving forward to Python 3.x.

OKKEN: Yes. 

KENNEDY: That’s where all the core developers are focusing their effort. That’s where Guido van Rossum is focusing his effort. To say we’re all going to stay on Python 2 is really just kind of silly I think. We’ve just got to suck it up and go. 

There have been some interesting watershed moments that have made big step changes in the percentage of adoption of Python 3.x. Obviously, the Wall of Superpowers and a lot of the packages there becoming Python 3-supported or even having Python 3.x only as an option of for some of those is a big one. Another one that comes to mind is something that Django did. I can’t remember when it was, it was a couple of years ago, where they switched the default instructions in their “Getting Started” docs in tutorials into Python 3.x. They just said, ‘What you do, is you start Python 3.x and do these steps…’ I was looking for the article and I couldn’t find it; I think Donald Stuft wrote an article. But it made something like a 7% difference, or some significant difference in the amount of Python 3.x deployments just by switching the tutorial in the “Getting Started” docs, with Python 3.x as default, which I thought was really cool. 

So, my next item is something from the Django team as well, and this is like that turned to 11. It’s one thing to say the default documentation is to be in Python 3.x, you can do Python 2 if you want. But the next major release of Django, Django 2.0, is dropping support for Legacy Python. There will not be support for Python 2.x at all and they’re actually cutting out the code to support it. They’ve said that that actually makes the code more maintainable, easier to evolve, because there’s not these 2 worlds they’re living in, they’re just doing Python 3.x. It’s going to be great.

OKKEN: Yeah, I think that’s a good call. I’m not sure how long they’ll support the 1.x branch. 

KENNEDY: The next release is Django 1.11 and that’s a Long-Term Support (LTS) release. That’s the last one to support Python 2.7. They have a support policy for the various LTS versions and I believe that it’s on the page that we’re linking to on the show notes. I think the statement is like, ‘We’re willing to support 1 month longer than the Python version that we’re aiming for.’

OKKEN: Oh, okay.

KENNEDY: So, there’s 1 LTS that was targeted at Python 3.3 and that drops security fix support in February. Sometime in 2017. That’s when they’re dropping support for that version of LTS Django. 

There is a policy. I don’t remember exactly what it is. This would be something to the effect of 2020; that’s when Python 2 is stopping its support and security fixes and so on. 

OKKEN: Well, that totally makes sense.

KENNEDY: This is good news though, right? This is a major step in the right direction. 

OKKEN: Yeah, I think it is. Some of the code I’ve seen that tries to support 2 and 3 just sometimes doesn’t make sense. I think it will help the readability of the Django code. 

KENNEDY: Absolutely. If you want to add a feature, there’s less to do. If you want to evolve it, there’s less to do. It’s going to be good news all around. 

OKKEN: Speaking of readability, one of the things I came across… I was reading a blog article about requests and since we’ve talked about that a lot, I’m going to skip that article. But we all love Kenneth, so we know that. The article referenced, and it had some code that referenced a package called attrs. It’s from Hynek Schlawack, very good person in the Python community who’s done quite a bit of good things. 

I hadn’t run across this before. It’s a library that helps you right objects and classes, I guess, in a more natural way. You can have small, tight classes and it doesn’t take up a ton of code and they act normal. Things like adding a whole bunch of attributes to a class that have default values if the class is constructed without any parameters that some of the values just show up already, some default values. And you don’t have to write all the dunder methods. 

Since I come from C++ background, this seems very natural. Similar to Pipenv, I’m just starting to use this. It’s pretty clean. I wanted to highlight it.

KENNEDY: Yeah, it’s really nice. I’ve definitely heard people rave about how effective it’s been for their projects. A couple of things that is does, you can easily say class_person: dunder_init_self.name, self.age, whatever. You pass those in and you can store them, that’s fine. There’s a bunch of stuff that you might need to do. What if you want a human-readable representation? Well, you’ve got to implement repr and maybe str as well. If you want to take 2 of those things and compare them to see if their equal or not by comparing the values, that’s another thing you’ve got to write. Well, once you write the compares, you probably need to have a “not equals” and then you’ve got to do the hashing, there’s just so many different things, you have to have an initializer to set all of them. All of that stuff is handled by attrs, which is pretty slick.

OKKEN: Yeah, it does all those methods and the time cost is at construction time. So, runtime, your objects are just as fast as not using this. That’s pretty cool.

KENNEDY: That’s really cool. Excellent.

Speaking of going fast, there’s an article that I ran across that is called, “Go faster Python.” We all want our Python to go faster. In fact, I think it’s really interesting that some of the core developers coming back to Python 3.x were talking about ‘What is the thing that we could primarily do to absolutely make people say, Fine, I’ll do the extra work to switch my project over to Python 3.x’ And making you code faster was one of the things they were focused on. Python 3.6 goes a lot faster and uses a lot less memory than previously, 3.5 and before that and so on. 

People are really interested in making their Python code go faster. This article is kind of an introduction article; it’s not super deep but it shows you how to do profiling for your Python code and benchmarking and timing and stuff. Both for regular Python code and code that’s executing inside Jupyter Notebooks.

OKKEN: Oh, wow. 

KENNEDY: So, there’s special commands like %timeit that you can run to time a little block of code in a Jupyter Notebook to time it directly and this like that. It also talks about how you figure how long an overall set of code is taking with benchmarking, how do you do function profiling to say which ones you’re spending your time in actually, and then you can actually get down to line profiling with an external package called line_profiler. 

All that is cool. I think the reason I put this in here is I feel like it’s good to remind ourselves that we should use these tools and we should look at how fast our code runs. It’s not intuitive sometimes. 

OKKEN: A regular thing to tell people now is to not do premature optimization. Write code that looks clean and is easy to maintain. And then after you’ve for things working, the look at profiler and see where you can speed things up and where things are surprising to you.

KENNEDY: That’s great advice. 

OKKEN: But it’s not obvious how to do that, so I welcome all tutorials like this to help people with this. 

KENNEDY: Yeah, and I think the takeaway is, it’s like a few commands and it’s not major. You can totally do this and things like PyCharm have graphical profilers built into them. It kind of does the same thing but gives you a slightly different representation. I’ve certainly worked on projects where I thought, ‘Okay, this thing right here. This is the part of my code that is too slow.’  Thankfully, before I’ve tried to optimize it, I’ve run a profiler against it and wow, that part’s actually really fast. Good thing I didn’t make it unreadable. It’s definitely worth measuring before you make changes. 

OKKEN: Yeah, definitely.

KENNEDY: One of the things I think is a challenge for us around Python 3.x and getting things moved forward in that space, we’re going to keep beating that drum for a few years, I suspect. But Django, the newest, most awesome version of Django that’s coming out is only going to support Python 3.x. But what if want to run that on like Red Hat Enterprise Linux or something like this. 

OKKEN: Somebody contacted us and said he’s really grateful for what we’re doing here and wants to be part of the community and he feels like we’re creating a community that’s just Python 3.x, because he can’t, in his environment, use Python 3.x yet. So, that’s really what we want to highlight right now, just to say that we know that for some people it’s not their choice to run Python 3.x, they have to run 2.7 right now because of their environment. I guess I kind of feel like since I’m somebody that writes tutorials also about Python, I’m trying to focus on 3.x now. But I think it’s similar to the Django model. I will try to make sure the book I’m writing runs on 2.7 also. The wanting tutorials by default to show 3.x and encourage people to use 3.x, it’s not up to people sometimes. I’m hoping that everybody, the people at Red Hat and everywhere else that does the distribution will try to give those choices to users and ship with both of them at the very least. 

KENNEDY: Absolutely. At least have Python 3.x as not the main option, but as an option, right?

OKKEN: Yeah. I know there’s tutorials out there on how you can get 3.x running on some of these environments and I just hope that that the right people, the sys admins (systems administrators) or whoever’s in charge of what the development environments are, try to get that figured out so some of the projects can be on 3.x also.

KENNEDY: I think that’s a great message and the more that we can move those things forward… I hear from a lot of people, ‘Hey, we just finished upgrading from 2.6 to 2.7. What is this Python 3.x business you’re talking about?’ 

More options are definitely better. 

OKKEN: I don’t think we’ve really covered that much stuff in this podcast so far in all of our episodes that really is 3.x only. We have covered it a lot, but a lot of the things, for instance, the attrs, that’s 2.7.

KENNEDY: Yes, absolutely. 

The next thing I want to talk about I think actually is Python 3.x only, yeah. It’s pretty cool. This is a project that you can take and you can make part of your smart home. You can actually make it the hub of your smart home. So, we’re all getting more devices that are living in our house. We maybe have a Nest, or maybe we have some Arduino or a Chromecast, things like that. There’s this place at home-assistant.io. What this is is a web application that you can run, written in Python 3.x, and it will let you track and control all of your devices and home automation.

OKKEN: That’s neat.

KENNEDY: Isn’t that cool? So, instead of saying, ‘Well, the way I work with my home automation is I open up my iPhone and there I’ve got my home kit, or whatever that thing is called.’ I don’t have a smart home so I don’t really mess with that. It’s got the few things that it can do. Here’s a full-on, open source web app that does all sorts of things. It says that you can install it in less than a minute. You can track the state of all of your devices in your house, so things like smart lights, garage doors, television, cameras, you name it. You control them all from a mobile-friendly little web app. You set up automation so you can do things like have your lights turn on when the sunsets and you’re home. Or have them turn on when somebody comes up and it’s dark. You can have them automatically dim when you start watching a movie on your Chromecast, and all sorts of stuff like that. Isn’t that sweet?

OKKEN: Yeah, it’s like “If This, Then That” but for your house. 

KENNEDY: Exactly, for all your smart things. And it’s written in Python and that’s cool.

To get a sense of what it’s like there’s a demo at home-assistant.io/demo and you can just go straight there and check it out. There’s some pretty stuff you can play with there and get a sense. 

The other notable thing – well, many notable things here – but one of the things that is notable to me is this is based on aiohttp. So, that’s an asynchronous http client/server framework in Python. All the cool Asyncio, async and await stuff, you can’t apply that to things like Flask and Pyramid and so on, because basically the WSGI protocol was built before this concept of asynchrony. This framework is built on top of that. 

It’s an interesting implementation of this modern Python web server framework as well. Even if you’re not interested in home automation it’s still kind of cool to look through the source code on GitHub for that reason alone.

OKKEN: Yeah, definitely. I want to look through this because I do see that Arduino is a part of it. I haven’t seen so far if you can look up Raspberry Pi stuff. 

KENNEDY: I don’t know either but definitely something I’d like to start playing with. It looks cool; very neat. It’s open source, so you guys can all check it out.

Well, that’s it for the news this week. Brian, anything else you’ve got going on that you want to chat about?

OKKEN: No, just trying to get over this cold. How about you?

KENNEDY: I was on a mission this weekend. I’m on a mission to get my next course done. My “Python for Entrepreneurs” course, I’ve done as much work as I can do on that. I’ve handed off and it’s now on the pipeline to be finished so now I’m writing a new course called “Consuming Services in Python” for REST services and SOAP services and all kinds of data on the wire from Python. 

OKKEN: Well, that will be interesting. 

KENNEDY: Yeah, it’s fun. I worked on that all weekend and I’m making good progress.

OKKEN: Now, didn’t you announce some extra thing that you guys were giving away with the last course?

KENNEDY: Oh, yeah, with the “Python for Entrepreneurs” course. We’re partnering with Digital Ocean and PyCharm, so everybody who takes the “Python for Entrepreneurs” course gets $50 of credit for Digital Ocean for new customers, and something to the effect of $25 worth of PyCharm licenses. It’s pretty cool. The course costs $59 but you get $75 worth of stuff for free just by signing up. It’s really cool. I’m super happy to be able to partner with those guys.

OKKEN: I like that you’ve started to do a highlight page to highlight projects that people have finished that have gone through the course.

KENNEDY: Yeah. What I wanted to do was all the students that are taking classes with me, I want to make sure that they build something they’re proud of, they can share it with other people and let everyone know. I think it’s training.talkpython.fm/showcase. I got a few more submissions now. People are starting to submit things so I’ve got to get them entered there. People are creating their websites, businesses or open source projects, so those will be featured. 

OKKEN: And if anybody’s curious, this wasn’t a canned plug, I’m actually just interested in what Michael’s up to. (Laughing)

KENNEDY: (Laughing) Thanks, Brian. I appreciate it. It’s cool stuff and really fun to be working on. It’s like my life is a dream. I get to work on this stuff all day long; it’s fabulous. 

OKKEN: Well, I enjoyed talking with you again this week. 

KENNEDY: Yeah, as always. We will be back next week with another round of Python goodness for everyone.

OKKEN: Thanks a lot.

KENNEDY: By, Brian. Bye, everyone. 

Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.  
