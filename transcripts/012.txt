Python Bytes Transcript
Episode #12: Expanding Your Python Mental Model and Serving Millions of Requests Per Second with Python

Michael KENNEDY: This is Python Bytes, Python headlines and news delivered directly to your earbuds. This is Episode #12, recorded on February 6, 2017. This is Michael Kennedy, one of your hosts, here with my co-host Brian Okken.

Hey, Brian. How’s it going, man?

Brian OKKEN: It’s going really good.

KENNEDY: I’m super excited to talk about what we have to cover today. But I also want to say thank you. Thank you to Rollbar, because they’re sponsoring this episode and I’ll tell you more about the cool stuff that they do later.

Let’s start out with the way that you think about programming because learning to program is somewhat learning the syntax but it’s also learning the mental models of what programming means, right? 

OKKEN: Yeah, and I did realize that the way you think about Python and the problems and problem-solving is different in Python than another language just because of the idiosyncrasies of the language and how people tend to do things. A couple of good articles that I stumbled across… There’s “Python Functions Aren’t What You Think.” This is on a site called powerfulpython.com. It’s a short, little article just talking about that functions are really just objects that happen to have a name, that’s the name of the function you gave it. They aren’t really that much different than giving a variable the value of 5, you just give a variable the value of a function. If you can think about functions that way, then you can change the way you do some things. 

KENNEDY: Not surprisingly, I think it really enables functional programming-type of metaphors. Just the whole concept of treating functions as first class objects, right. Functions are like variables are like classes are like whatever. I think that’s really interesting. It’s really super important for things like lambdas and closures, that we can treat functions this way. Even normal functions are basically the same thing, right?

OKKEN: Yeah, and you can just throw one in a data structure and use it later. It is cool.

KENNEDY: What I thought was weird was you can change the dunder name of a function. That was news to me. 

OKKEN: Oh, yeah. I’ve never tried to do that. It seems a little evil. (Laughing)

KENNEDY: (Laughing) Little bit.

OKKEN: And then another article called the “The Tao of Python” which I think is just a cute name. It’s actually a Jupyter notebook that talks about the relationship objects classes and meta-classes. It’s a similar thing of not just functions are objects but even classes themselves are objects.

KENNEDY: Right. Their classes are meta-classes, which is very crazy. It’s definitely a mental shift, especially the meta programming and that’s something I could learn more about personally as well. 

OKKEN: Yeah, me too. I haven’t made use of it a lot. It’s kind of one of those things that if you can think about the whole thing and how it fits together and just kind of a little mental overview, I think it helps. 

KENNEDY: Yeah, excellent.

Number 2, the one that I chose is an article by friend of the show Dan Bader. His article he wrote, which I helped him a little bit with, you’ll see at the very end, is called, “Why Learn Python? Here are 8 Data-Driven Reasons.”

People send me messages and say, ‘Hey, Michael. I’m thinking about changing careers or aspects of my career. Maybe I’m a Java Developer and I’m considering learning Python. Is it worth it?’ You’ll see from this article that the answer is, ‘Yes, yes and absolutely yes.’ Python is the second most popular language in the world according to the Popularity of Programming Language Index. It’s one of the hottest job skills to have according to Dice. Dan lays out 8 really well-researched reasons why this is the case. Basically, to support these trends. He says you can learn pretty much anything with Python, it’s widely used by data scientists. Python pays well, in fact it’s number 2 only to Ruby developers, according to Guru, but it has many more job openings than Ruby does. It’s on average, above all the other developer salaries if you are looking in the US. For example, Indeed says, ‘The average Python developer in the US across all the regions, they’re thinking it’s something between $103,000 and $116,000 a year,’ which is amazing, really.

That’s a good place to be, right?

OKKEN: Yeah. I remember when C++ was up near one of the tops and it’s down at number 7 now. 

KENNEDY: Yeah, it’s a Python world. 

OKKEN: One of the things that he didn’t list, which I’m confused by, was that you can listen to this podcast. 

KENNEDY: It’s totally bizarre that he forgot that. There’s a couple of good Python podcasts around, at least, right? 

OKKEN: (Laughing) Yeah. That’s one of the good reasons to learn Python.

KENNEDY: So, we’re going to add one in there, that’s for sure. It definitely helps you. 

Demand is growing for Python developers, it saves you time, it’s beginner-friendly but you don’t top out really quickly. It can be an advanced language, as well. All the big companies are using it, so if you want to get a job somewhere cool like YouTube or IBM or Mozilla or Cora or Instagram, all these companies are making major use of Python, so this could be your ticket there. 

And finally, Python has a great ecosystem.

OKKEN: Yeah, and one of the great things about articles like this are, we’re preaching to the choir, of course. But a lot of people get those questions of, ‘Well, why should I learn Python?’ and all I usually have is, ‘It’s fun and cool and why not?’ These are better reasons.

KENNEDY: This a really great article and, of course, we’re linking to it. It’s great to be preaching to the choir but it’s also interesting to provide this as fuel for people having these debates. Maybe they’re working on a team and they’re like, ‘What technology should we choose for our next project?’ And having all that information there is like, ‘’Hey, look, choosing Python is a really good bet. You’ll have lots of people who know it. It’s a good bet.’ I think that this will help people make that case.

OKKEN: And I’m also a firm believer in just resume building. You don’t know what the next job is going to be like and it probably will use Python somewhere.

KENNEDY: Yeah, absolutely. 

I bet people do some testing with Python.

OKKEN: Yeah, they do. And I was thrilled to have somebody write a Pytest article because it’s one of my favorites. There’s Kevin Ndung’u’s “Testing Python Applications with Pytest.” It’s a good introduction article to try to not scare people off too bad about some of the advances features but after jumping into it a little bit, he shows how easy it is, of course, to write tests. He also takes a look at one of the common things that happens, which is you grow a whole bunch of tests then you want to refactor them. There’s a little bit about refactoring your tests by using fixtures and pulling out some of the common starting state. Then he jumps into one of the nice features of Pytest is the parameterization of easily being able to throw multiple data sets at an individual test function. That was demonstrated pretty cleanly; I liked that.

KENNEDY: Nice. 

OKKEN: Good job, Kevin. I liked the article.

KENNEDY: Yeah, I really liked the, ‘Let’s treat test code as production code.’ I feel like a lot of people will write tests and they’re like, ‘These tests are hard to maintain.’ And then you look at their test code and it’s, ‘Why did you duplicate this bit of code 20 times? Would you ever do this in a real app?’ That’s insane. Why is this not a function or some other thing that you can use throughout your test, right?

OKKEN: Yeah, definitely.

KENNEDY: Speaking of production… You don’t want errors in your production, do you? 

OKKEN: No, of course not. 

KENNEDY: Not too much. One of the first steps in solving errors in production is knowing about them. That’s where Rollbar comes from. Rollbar is supporting the show this week. Thank you, Rollbar. I’ve used Rollbar for a long time on the website that delivers Python Bytes and my training courses, and all those things. I would say at least 5 times, Rollbar has saved me from some seriously bad choices that I’ve made. I’ve tested something locally where there was data in the database and I put it in the production I was about to start putting data in but it was empty at the time and the code couldn’t deal with empty sets, and all sorts of stuff going on where something crashed on the site. I didn’t realize it and, of course, Rollbar sent me a message, popped up on my phone immediately and said, “Error in Production. Here’s the exact details of what you need to fix.” Five minutes later, it was fixed. 

So, thanks Rollbar for helping me out then and thanks for sponsoring the show.

OKKEN: Awesome.

KENNEDY: They have a special offer for listeners and I’ll put that in a link in the show notes, right at the top. 

Speaking of production… We would all like our code to run a little bit faster. I feel like we’re in this cool place with Python, especially Python versus Legacy Python. Python 3.5, 3.6 and 3.7 – the one that’s coming – have really been focused on performance. We talked about a web framework called sanic that was based on aiohttp, which is an async pipeline for web processing. Well, here comes another one. This one, it turns out, if the benchmarks are to be believed, is dramatically faster than even sanic and lots of other things out there. It’s called japronto, I’m not sure how you pronounce it, but we’ll link to it. It describes itself as, “A screaming-fast Python 3.5 and above web micro-framework integrating with pipelining http servers based on uvloop and picohttpparser.”

It came out just a few months ago, it has 2,600 stars on GitHub and the title of the article introducing it was, “Handling a Million Requests Per Second with Python.” I think that’s on one server. That’s crazy.

OKKEN: It is crazy-fast. It’s pretty exciting. 

KENNEDY: If you read this article that we’re linking to, the guy who built it, he’s doing a crazy amount of careful thought and low, low, low-level OS-type of optimization. So, just to give you a sense, most of this is written in C, although he’s thinking of rewriting it in Rust. He talks a bit about that and says, ‘Japronto tries to delay the creation of Python counterpart’s internal structures until explicitly asked.” So, for example, normally when a request comes in, the request’s object would be populated with headers. Well, this framework won’t actually create the headers dictionary unless you try to access it. It gives you only what you need at many levels and has some really cool low-level optimizations around pipelining. It’s quite cool.

OKKEN: Yeah, the pipeline description; I thought that was pretty interesting. 

KENNEDY: Yeah, I hadn’t really thought too much about that, so super cool. 

OKKEN: Related to this, I think that somebody on Twitter was commenting, ‘Why are we worried about speed? Why isn’t it better to be correct?’ I guess I like both and I think I’m intrigued by other people trying to get performance up. I think to me it’s important because I would hate to have somebody say, ‘Eventually, you’re going to scale out of Python and you’re going to need to switch over to Go.’

KENNEDY: Exactly, that’s the primary thing, I think. And even if you’re not going to scale out, if you start to hear lots of major companies say, ‘We’re all abandoning Python because they won’t run our workloads.’ Even if that’s not the situation you’re in, it starts to cast a shadow over the general ecosystem. Whereas, if you say, ‘Look at these amazing things that are being done with Python in the web,’ your stuff is going to be way lower traffic-load than that, surely this will work for you as well.

I think it’s really interesting. To be honest, Pyramid plus micro-WSGI plus (SOUNDS LIKE) Engine X (12:35) just straight up is way fast enough for what I’m doing even with a couple million http requests a month. But it’s super cool to see that it’s sort of expanding the upper bound. I think that’s going to have some great stories down the road. 

OKKEN: Yeah, definitely. So, the next topic we’ve got is a good news thing that was just announced today. I’m not sure if you had RethinkDB on?

KENNEDY: I did, I had him on my show. I can’t remember the number, I think it’s in the sixties on Talk Python to Me. We talked about RethinkDB and the company behind it. 

OKKEN: I think I heard about of because of Talk Python to Me. It was really intriguing and I liked the idea of somebody, just from the ground up, rethinking how databases work with live data and real-time data. In September of last year, the company shut down and I was curious, like everybody else was, about what’s going to happen with RethinkDB. But somebody called Cloud Native Computing Foundation, they made an announcement that purchased the rights to the source code and contributed to the Linux Foundation. It’s changing the licensing as well, to the Apache license, version 2. Everybody can continue using it now and will be able to have this project live on.

KENNEDY: That’s really cool. So, RethinkDB is supposed to be a real-time document database that is a real-time database for your server. It’s definitely got some interesting components. I believe the team that worked there has made their way over to Stripe; I’m pretty sure that’s what’s happening. Everybody who used to work at Rethink has kind of moved over to Stripe and that’s really cool that they had a soft landing somewhere. And it’s great to see the Linux Foundation taking up this project and keeping it going.

OKKEN: And I guess there were some companies that are relying on it and wanted to donate to somehow keep it going and there wasn’t a way to do that at first. Now there is and they’re under the Linux Foundation. Stripe put together $25,000 in matching funds to match other donations. So, I wish them all well and hope RethinkDB lives a long time.  

KENNEDY: Yeah, they definitely occupy a cool space in the database world. Happy to see them rolling. 

Let’s round out this conversation with my 6th item here, which is, “The Python Top 10 Articles of the Past Year.” This comes from this interesting work reading app or technical reading app called mybridge.co. This is kind of like Zite or Flipboard, but it’s specifically focused on technology and reading for work and your career. It’s an interesting iPad app and whatnot. What they did is, they said – they had some crazy number of articles – that, “For the past year, we read 10,000 Python articles and we picked the top 10 stories with a .1% chance that it will help you advance your career in Python.”

OKKEN: Nice criteria. 

KENNEDY: Yeah, it’s really nice, right. So, the first one is Kenneth “Hitchhiker’s Guide to Python” Reitz’s Best Practices Guidebook Written for Humans, that’s really cool. And then “SciPy Lecture Notes,” “30 Essential Python Tips and Tricks,” “Computational and Inferential Thinking for Data Science,” “Welcome to Python Cheat Sheet,” “Data Mining in Python,” “Python FAQ: Why should I Use Python 3?” “An Introduction to Stock Market Data Analysis with Python,” “NumPy Tutorial Data Analysis with Python” and “Build You Own Python and Django Application.”

I like this pick for a couple of reasons. One, it’s just cool to have some really nice reading. This is kind of a cool app, this mybridge.co thing; I’ve just started playing with it. I think it gives you a pretty interesting view into the Python space. People ask, ‘What can you do with Python? What should I learn with Python?’ Well, this is like 60% data science, 25% web and 25% language, by my super-quick estimation. I think that’s an interesting map to draw. 

OKKEN: Actually, I hadn’t run across a lot of these articles, so I was pretty glad to see some of these.

KENNEDY: So, even though that’s our 6th item, actually I have on more for you. 

Last week we talked about Red Hat Distribution, Red Hat Enterprise Linux and how people were having trouble using Python 3.x because they keep sending this message, ‘I can’t use Python 3.x.’ Well, friend of the show, Chip Warden, added a comment. If you want to add comments at the end of the show, there’s a whole “discuss” section at the bottom of each show page. He said, “Hey, what do you mean people can’t do this? They should just check out Red Hat Software Collections.” So, I checked it out and absolutely, people should check this out. It’s the latest stable updates of development technologies for Red Hat Enterprise Linux. It’s cool. If you want to work with Node, Pearl, PHP, Python and Ruby, it is basically an approved Red Hat Enterprise Linux way of getting Python 3.x, for example, on your environment. 

OKKEN: Perfect.

KENNEDY: It’s cool. It’s definitely going to be in the show notes. Well, that’s one more reason to switch to Python 3.x. 

OKKEN: Definitely. I can’t believe we’re done already. It’s gone so fast.

KENNEDY: I know. Well, I think we’re going to have to scour the internet for more cool Python stuff for next week, what do you say?

OKKEN: Yes, and I want to encourage anybody to help us out by sending what you think we ought to cover next week. 

KENNEDY: Yeah, we don’t always cover everything people send but if it matches up, we try to cover it. So, please help us out. If you know of something, like Chip did here, that we didn’t cover, send it our way. 

Thank you, everyone, for listening. Brian, great to catch up with you like always, man. 

OKKEN: Thank you.

KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. 

 
