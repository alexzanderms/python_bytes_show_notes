Michael KENNEDY: This is Python Bytes, Python headlines and news delivered directly to your earbuds. This is Episode #13, recorded Monday, February 13, 2017. 

Hey, Brian. I want to start by saying, ‘Thanks’ and ‘Hello.’ I want to say thanks to a new sponsor of the show.

Brian OKKEN: We have a new sponsor? That’s wonderful. 

KENNEDY: I want to say thank you to Metis. They’re a data science training company. They have some boot camp-type stuff that’s really excellent. I’ll tell everyone about that later. 

I’d kind of like to learn about ‘Alternate Python Implementation’ and where they are these days.

OKKEN: We’d heard about Pyston, developed by Dropbox, and an announcement came out at the end of last month saying that Pyston is no longer to be supported by Dropbox.

KENNEDY: Yeah, this is a really interesting development. It’s a little unfortunate. I don’t really know how to interpret it as a positive or negative. There could be, ‘There was an experiment; we’re moving on to the next experiment.’ What is was is an alternate version/implementation… I have a hard time calling it an interpreter when it’s actually JIT-compiled. An alternate interpreter for Python and the idea was it supported Python 2.7 and it did JIT compilation instead of interpreting. So, its main goal was to be a very fast but highly compatible alternate implementation of Python 2.7. 

OKKEN: Yeah. So, there’s a couple blog posts; one on the Pyston and one by Kevin Modzelewski and one on his own site, kevmod.com. It looks like there’s lots of reasons around it but the general flow of it is the cost and benefit. It costs more than they were hoping and it benefited them not as much as they were hoping. 

KENNEDY: We look at the different implementations of Python. We’ve got, obviously CPython and its versions. We’ve got Pyston. We’ve got Unladen Swallow. We’ve got Sython, PyPy, Iron Python, Jython. There’s a bunch of different ones and they all have these trade-offs. So, they were actually able to make Pyston pretty quick in the benchmark story. They got it up to 95% than CPython 2.7. But they also ran into other drawbacks. They found actually, when it ran the Dropbox code itself, it was only 10% faster but it put a lot more memory pressure on it because it does GC instead of reference counting.

I’ve got mixed feelings about it. I like that the project was out in the open, open source, and people could watch this experiment. I wasn’t really thrilled that they were targeting 2.7 to start with. The outcome of them, I guess, just not working on it anymore, it only makes sense but I guess it’s just a thing. It’s interesting.

KENNEDY: Yeah, I think it’s a case of a couple of things. Nobody said it, but I feel like moving to Python 3.x is also causing sort of a re-thinking of this as well. If they’re going to be moving to Python 3.x then they have to re-do this work and so on. One of the problems or criticisms – mild criticisms, let’s say – is that this was a ‘from scratch’ thing. It didn’t build on existing stuff. It didn’t build on PyPy because PyPy wants to be fast at the cost of compatibility. And to run a multimillion-line Python application like Dropbox, compatibility is super critical. So, they’re like, ‘We can’t have any incompatibility.’ But it wasn’t directly based on CPython even though it took a bunch of pieces in. It was like this ‘other’ experiment. The thing that gives me the most hope right now is Brett Cannon and Dina Veeland are working on with Pyjion at Microsoft, where they’re trying to add JIT-plugin capabilities to the existing CPython. 

OKKEN: There is some more CPython news… 

KENNEDY: There’s big CPython news. CPython has, just as of 3 days ago, moved. It used to be – long, long ago in 2006 – it moved to Subversion (SVN.) And from 2006 to 2011, it was on Subversion, then it moved to Mercurial. Kind of interesting, because that’s when Git came out on Mercurial. All this whole distributed version and control system story happened around then. Mercurial is interesting because it’s written in Python. For example, Facebook does some really interesting things with Mercurial. So, it seemed like a natural home for Python to live on Mercurial. But GiHub has really been the place where people go to do open source. Not just a container for open source stuff, but there’s a whole social ecosystem where everybody comes and collaborates in GitHub. 

So, the big news is, as of Friday, Python, CPython and a few of its pieces have moved to GitHub.

OKKEN: I think that’s great and I think that one of the great things about it is the culture around GitHub. Whether you’re a pro-GitHub person or not, that’s where a lot of people look for opportunities to help out on open source projects. It’s a higher incentive for people to get involved with helping to maintain CPython. 

Absolutely. That’s actually the main motivation which is interesting. So, there’s a link to the mailing list where they talk about it. We’ll put that in the show notes. There’s obviously a link to the repository in GitHub. There’s a Reddit thread where people are talking about this and a lot of people are bemoaning the fact that it’s not on something totally open source. It’s not on something that is based on Python. It used to on a source control system built on top of Python. And, while that’s cool, my opinion is that you shouldn’t do that at the cost of people loving to work on the project. 

The real thing that you want to read to get the deep insight on this is at snarky.ca. This is Brett Cannon’s blog and it’s the history behind the decision to move Python to GitHub. He talks about how he worked with a bunch of people to come to this decision. He says, ‘Back in 2007, it became really obvious that working on the source code and doing code reviews and collaboration was actually a burden.’ There were people submitting patches and stuff. And they would sit there for maybe years, before somebody actually reviewed it. How excited would you be to work on a project to contribute to open source, if you submit a patch and it doesn’t get looked at for a year, right?

OKKEN: Right.

KENNEDY: So, the work flow in GitHub is just so much easier for pull requests and reviewing. Basically, Brett said, ‘I want it to be so easy that I can take my tablet and sit on the beach where I have some kind of internet connectivity and review pull-requests and chill out.’ That’s just not how it works now. You’ve got to have a machine with SSH keys and all sorts of stuff. The main driver behind this is trying to make it easier for core developers to be more responsive to people who contribute to the project, which I think is super positive.

OKKEN: Yeah, I’m really excited about it. Actually, I had never really considered contributing myself but I’ll definitely consider it more now. 

KENNEDY: Yeah, I definitely consider it more accessible now. I think this is absolutely the right move, even if it’s breaking some conventions like, it’s moving off of Python as this thing that supports it. It’s moving off of a full open sourced thing to a somewhat closed thing, which is GitHub. Still, I think it’s great. 

So, remember last time when we talked about the “Top 10 Python Articles of 2016”? 

OKKEN: Yes.

KENNEDY: Yeah, so let’s just take a survey of the kind of category of these things. I would say a full two-thirds or more of those were data science. Data science is definitely important in Python. I want to tell you about our sponsor Metis.

So, Metis is a data science training company, based in New York, San Francisco, Chicago and Seattle. They provide full-time, immersive boot camps and evening courses. So, if you have a full-time job you can come like 2 nights a week for 6 weeks and take classes on all sorts of data science things. Machine learning, things like that. If you are wanting to learn more about data science, especially in a hands-on way; you live in New York or San Francisco or you’re willing to spend some time there, check out thisismetis.com/talkpython. And maybe we’ll feature your article next year. 

OKKEN: Yeah, that actually sounds pretty interesting. 

KENNEDY: I would love to go and do more data science. TensorFlow, they’ve got classes on that. All sorts of cool stuff. Check it out: thisismetis.com/talkpython. 

You know what you do a lot of in data science? A lot of functional programming, a lot of expressions, things like that, right?

OKKEN: Yeah. Actually, I don’t know. I’m not a data science person. 

KENNEDY: (Laughing) The ones I’ve hung around seem to. 

OKKEN: There’s an article called “Using Functional Programming in Python Like a Boss: Generators, Iterators and Decorators.” All three of those – generators, iterators and decorators – are things that trip up intermediate Python people. Beginner people just ignore them for now. But this article is a Jupyter notebook; I like this trend of people publishing Jupyter notebooks as articles. It actually is good and there are some good diagrams in here. All though, the use of really large images is kind of annoying to me, but it’s okay. 

This article also talks about basically, what a function is, and what things can act like functions and then talks about generators, iterators and decorators and how they all work together to make your code more expressive. And it seems like kind of an esoteric thing to think about but it’s good. I like this article about thinking about this stuff.

KENNEDY: I really think this is one of those things that, when you come to Python from other languages, it takes you awhile to get into these. The concept of a generator is quite different for somebody coming from C or Java; I don’t think Java has this. Things like that. Once you get the Zen of them, they’re amazing and they make such a big difference, but it’s really a nice mental shift. I really think it’s great that he’s covering it. 

OKKEN: Also, it’s one of those topics that I don’t think I remember when I finally grokked what people were talking about. It took like 3 or 4 different articles talking about it for it to sink in for me. Here’s another one.

KENNEDY: Excellent. We’ll link to it. And by some strange coincidence… Just so everybody knows, the way that we pick things for the show is, I go find a couple of interesting things. Brian goes and finds a couple of interesting things. We throw them together and then we just talk about them. It happens to be, the very next one is the same person in a Jupyter notebook, but it’s actually a totally different topic but presented in a similar way. 

This one is called, “It’s Metaclasses All the Way Down.” This is a quick but fairly deep dive into what metaprogramming is. It starts out by saying, ‘Look, metaprogramming is the technique for writing computer programs that can treat themselves as data, so you can introspect, generate and/or modify them while running.’ That’s definitely Python. You can at run time, create types. You can add functions or even remove features from classes and objects. But mostly meta programming comes down to metaclasses, where you can actually control what the class does. There’s all sorts of interesting examples of how you might use them. It starts out with an interesting quote saying, ‘Look, metaclasses are a deeper magic than 99% of the users should ever worry about. If you wonder whether you need them, you don’t.’ 

That was a quote by Tim Peters. If you don’t deeply understand, like, ‘Totally, I’m going to solve this with a metaclass’ then you probably shouldn’t mess with it. They are the power that makes a lot of the magic inside Python happen. 

A couple examples: One if Django ORM. We could substitute Alchemy ORM or Peewee ORM models. So, when you define a model in Django or SQL Alchemy, you put what looks like column types with database constraints as the fields of the class. But when you interact with them at runtime, they look like strings and integers and dates. In that transition, that two-faced behavior of these things, they can be used in a database query in one way and act as normal objects in others. That’s metaclasses.

Another example: There’s a cool example about using them to make abstract classes and abstract functions that have to be implemented by things that inherit it and so on. Again, this is a nice Jupyter notebook. It has some cool pictures, but it really does help you understand stuff pretty well with nice examples. 

OKKEN: Yeah, I like this too. It’s funny that we both picked the same person’s articles.

KENNEDY: It’s a small world. 

OKKEN: Yeah. I think we’re going on the ‘stuff that most people don’t need’ train right now. Next up is lambdas. Speaking of another thing that newbies get a little confused by, there are lambda functions. Lambda functions are just unnamed functions that you can put the entire expression on one line, so they’re convenient in a lot of places. 

Here’s an article from Dan Bader titled, “Lambda Functions in Python: What Are They Good For?” What I like about this article is it’s just a fairly quick jump into it. I think everybody that thinks of themselves as just a little bit more than a beginner in Python should at least understand lambda functions. The thing I really like about this article is that it talks about places to not use them. Because when you finally get your head around lambdas, all of a sudden, it’s your hammer and everything looks like a nail. He talks about a couple places like creating class methods and other places where maybe you shouldn’t use a lambda for that. You can but don’t. 

Also, there’s some places where list comprehension and dictionary comprehensions are wonderful and they’re way more expressive. But you could use lambdas in those cases. 

KENNEDY: Yeah, absolutely. I think the trick with lambdas that make them so wonderful is there’s little places in your code. Your like, ‘I could just pass a behavior here. I don’t want to go out of where I am and write a function and give it a name and say the name here.’ I just want to go, ‘sort by this reversed’ or ‘grab this value out,’ ‘transform it.’ Lambda functions are beautiful for that. They’re not so beautiful for writing your whole program. 

OKKEN: Yeah, actually sort is one of the places where one of the parameters is you can pass in a key, or how to find the key. I’ve used lambdas a lot there because I don’t really need a named function. I just need a function to pass it and do the work. 

KENNEDY: A list of customers I want to sort by last names, [UNCLEAR 15:22 lambda C goes to C. last name] Done. Beautiful. 

OKKEN: Yeah, it’s great.

KENNEDY: So, you wanted to do a quick follow-up in Japronto. That’s our super, super fast web framework, right? 

OKKEN: Yep. That’s what we were talking about last week. But I ran across a Reddit thread, that we’ll post in the show notes. It is titled, “Sticking with Flask Versus Switching to One of the New Faster Frameworks.”  The Japronto author actually posted on this and said, ‘If you’re looking at Japronto, please read the READ ME there because I’ve noted that it’s not ready for production.’ 

“As stated in the READ ME, you should not build anything serious with Japronto now because it’s gonna probably eat your laundry. Remember, it’s hand-coded in C and this needs a lot of testing. On top of that, I plan to do several iterations of API changes in largely incompatible ways. I hope, though, it’s gonna make a serious player in the field one day.”

I applaud the other for putting it out there. He’s basically developing in the open, but he’s not promising to stick with the same model or the same API. I think that’s completely fair and he’s pretty open about it. 

KENNEDY: Yeah, that’s really great of him. And he is seriously optimizing this stuff in some really interesting but out-there ways. And all that part is done in C. It probably needs a little bit of careful validation before it becomes a thing that you really depend on for your e-commerce site or whatever. It’s got so much promise, that project. I hope he gets there. 

OKKEN: We’re already done, so there you go. 

KENNEDY: That’s all the news we’ve got for this week. Anything you want to share with everyone while we’re wrapping things up, Brian? 

OKKEN: No, nothing right now. 

KENNEDY: Alright, awesome. Well, I’m cranking out some classes. I pretty much finished up my Consuming Restful Services course. Hang tight for that. It’s going to be out in a week or so. 

OKKEN: Alright, cool.

KENNEDY: Fun to be building new things for everyone. 

Thank you everyone for listening. Brian, thanks for chatting with me today. 

OKKEN: Thank you.

KENNEDY: See you all later. 

Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. 