Michael KENNEDY: Welcome to Python Bytes. Python news and headlines delivered directly to your earbuds. I’m Michael Kennedy:
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’re here to share the Python news with you and basically share the cool stuff that Brian and I found for the week.
Brian, you know what I think is cool? I can go to any Python object, module and even function and just say, ‘Tell me what is in you.’ Dir( ) this thing and out pops its capabilities; mostly anyway. 
OKKEN: Yeah, I love that. Do you know what REPL stands for? 
KENNEDY: Read, Eval, Print, Loop. What you get when you type Python.
OKKEN: Most of the time now, the only time I open that is to try out something little or actually, to use the dir( ) command. 
KENNEDY: You know what, I do do that, as well. ‘I’ll just put a dir( ) here.’ Back to work. 
OKKEN: Yeah, exactly. Just to look at the interface for something. 
So, I was excited to see a new project from laike9m on GitHub called pdir2. It’s pdir2 when you’re installing it. When you’re using it, it’s just pdir. It’s just a replacement. It’s cool because it’s all colorized and it splits it out and splits it up into one line per item. It pulls the doc string out of each item so you can see that. For whatever I’m using it for when I pull up the REPL, it does what it should do automatically and I like it. 
KENNEDY: Yeah, it’s cool. It’s kind of like if you typed help a thing, but it gives you meaningful stuff even if there’s no real help to be had. And it will categorize, ‘Here are all the classes,’ ‘Here are all the functions, ‘Here’s the stuff that I have no idea what it is but we’ll put it over here.’ And if there’s doc strings it will put the doc strings there, for like, ‘Here’s the description of each thing.’ It’s really nice. 
OKKEN: Yeah, and it puts all the dunder functions out of the way so they aren’t in the middle of everything, too. 
KENNEDY: Yeah, those land in the other.
OKKEN: It’s part of my repertoire now; I’m never going to let it go. One of the things that I would like to ask somebody to do is help out with the project and convert the Readme to whatever that other thing is. 
KENNEDY: Restructure?
OKKEN: Yeah, Restructure. It looks good on pypi. The Readme is in markdown and pypi still doesn’t like markdown. 
KENNEDY: Did you look at it on pypi.org versus the older one?
OKKEN: No, I haven’t.
KENNEDY: It’s worth looking at that one. I have no idea what it will look like there either but that’s the new one. Maybe it understands markdown. Who knows?
I would also like to recommend that people pair this with ptpython. Do you know ptpython?
OKKEN: I don’t.
KENNEDY: Oh, my God; ptpython is awesome. I don’t use the REPL very much. Everyone knows I love pycharm and I kind of live there. But when I do go into the REPL, it really annoys me that I need to completely type everything that is there; that it doesn’t autocomplete. Especially when I’m exploring something new, which is like why we said often we go into the REPL. Well, ptpython is basically, I think it’s a little bit based on EMacs but it’s like a different version of the REPL. It has code completion and a little bit of a UI over the terminal; it’s really nice. These days if I want Python, I type ptpython. 
OKKEN: Okay, well, I’ll have to check that out. Just to let people know, I take back that request because I looked it up on pypi.org and it looks great. It even has that animated gif on there.
KENNEDY: Oh, yeah, there’s a little animated gif that shows you how it works which is quite cool. Check out this project, it’s easy to use. The one thing to notice is you’ve got to pip install pdir2 versus pdir but then the model’s just pdir. There’s a little bit of a nomenclature funkiness, but it is cool. 
OKKEN: I just want people to remember that and speaking of memory…
KENNEDY: Speaking of memory, absolutely. So, this has happened to me once in my life; I’ve not used these tools to solve it. Here’s the deal: suppose that you somehow, through probably your fault but it could have been a hard drive failure or something, somehow, you’ve lost your source code. 
There’s a guy who was using source control wrong and wiped away all of his files off of his directory but he still had the program running in memory, and it was a Python program. He used two really interesting packages I’d never heard of. Have you heard of these?
OKKEN: No, I haven’t.
KENNEDY: One of them is Pyrasite (like parasite but for Python). The other one is Uncompyle6, because apparently, it’s one of the few that supports both Python 2 and Python 3 and multiplication is awesome so Uncompyle6. 
So, the idea with Pyrasite is you can attach to any running Python process and you basically get this REPL, like we were talking about, to just explore its memory and see what its values are. You can even force it to load other scripts and run them. You can go to in-memory, like singleton object and work with its data; all sorts of stuff you can do in real time while it’s still running around. 
OKKEN: That’s pretty cool.
KENNEDY: So, basically what he did is he said, ‘I’m going to hook up to it with Pyrasite. I’m going to force the thing to load Uncompyle. I’m going to call Uncompyle on itself and get my code back.’
OKKEN: Wow. Does that work?
KENNEDY: It worked. It actually worked. There’s a GitHub gist at the bottom and they’re like, ‘Oh, my God. I had to try this. I didn’t believe it would work. That’s so awesome.’ 
I think there’s either a video or gif that basically shows you how it works if you go to pyrasite.com. That’s the coolest takeaway for me in this whole thing. 
OKKEN: That’s awesome. Good job.
KENNEDY: You know what I think? You and I are on a mission, right? To make sure that Python is Modern Python, not Legacy Python, right?
OKKEN: Yes, definitely.
KENNEDY: I was really surprised that they’re still entering quite interesting and new data types to Python 3. 
OKKEN: Even stuff that’s been around for a little while that I just haven’t heard of, because of this show I learned about the simple name tuple class with capitals, but let’s get into this. There’s an article called “New Interesting Data Types in Python 3” and it just goes through 3 that I really like. The 3 types are types.MappingProxyType, types.Simplenamespace, typing.NamedTuple. 
The MappingProxyType is really cool. It takes something like a dictionary – I can’t think of anything other than dictionary – it says it’s mapping types.
KENNEDY: Yeah, it’s really cool but it’s a read-only dictionary basically, right? 
OKKEN: Yeah, so you take a normal dictionary, and if you had an API or something and you wanted to expose that dictionary through the API, you’d wrap it in this MappingProxyType and return that. I tried it out so, for instance, if one part of your project could use the MappingProxyType version and read everything, the part of your system that still has write access, that is synchronized. It isn’t a copy so you when one part writes to it, it gets updated in the other part, too. 
KENNEDY: Oh, it’s like a view into an existing dictionary.
OKKEN: Yeah, it’s a read-only view, so, that’s nice. Not too long ago, I started using – where I really wanted classes or something and I was using things like tuples or lists where there really should have been something more structured, I’ve been using the lower-case name tuple.
KENNEDY: Right, out of the collections module, right? 
OKKEN: Yeah, out of collections. There is this thing called types.Simplenamespace that uses a similar sort of functionality. If you define a type to be that type, the parameters when you instantiate it, those just become elements inside the object. It’s pretty convenient. 
KENNEDY: That’s cool, so you can do a little more organization. Of course, the typing.NamedTuple class is really nice. I hadn’t been using it, I’ve always used Collections.NamedTuple, but I think I’m going to be switching. 
Now one word of caution, I suppose, is that a lot of these, they require pretty modern Python. Some of the techniques they show require 3.6.1. Like, 3.6.0 is not enough; just be aware that some of these require pretty new versions. 
OKKEN: Yeah, and I guess it’s hard for me to remember because I’m usually just trying to stay. I don’t go into the “in development” Python but I try to use the latest released one. 
KENNEDY: I do as well. You know where that bites me though? On my digital ocean servers. It’s running the version of Ubuntu that only has 3.5.2, or something like that. So, if it’s literally a 3.6 feature, I’ll put it in my app and I’ll be like, ‘Oh, it doesn’t work. What was I thinking!’ (Laughs)
OKKEN: And I forget that, that 3.5 – for version 3.x – 3.5 is being used more than 3.6 now. 
KENNEDY: Yeah, just because of the distributions I think. It’s in my mind that that’s the minimum bar for 3 stuff is 3.5. 
OKKEN: I think these are great things to adding to your repertoire. If you have control over where it’s going to run, those are good things. 
KENNEDY: Yeah, and some of them come from Python 3.3 or 3.4 that are fine, there’s just a few techniques that are brand new.
OKKEN: One of the things I like about this article is that it’s pretty short and it gives examples of how to use these pretty concisely, and that’s good.
KENNEDY: Very nice. Speaking of how do I use things, wouldn’t it be awesome if I go to me Bash L and  type ‘How do I…’ and type a thing? I’d like to say, ‘Maybe I want to know how to print a stack trace or trace back in Python. I could say, ‘How do I print stack trace Python’ and just type that. 
OKKEN: Yeah, that’d be cool. 
KENNEDY: It’d be cool if my computer knew that, right? Well, it turns out, we ran across a project called, “howdoi” and if you pip install howdoi, it will give you instant coding and shell answers on the command line. So, I can say, ‘howdoi connect sqlalchemy’ and it will give me the Python code to connect for sqlalchemy. I can say, ‘howdoi python save dictionary’ and it will show me how to use the JSON.loads functionality right there in the command line. Sometimes it gives me a stupid answer; like if you type, ‘howdoi python load json’ it just shows you JSON, which is stupid but you can do a – (dash) A and it will give you all the answers it’s found on the internet related to that. Usually somewhere on that list is something decent. It has some sources like stack overflow and I don’t know where they all come from, they’re all over the place. It’s cool.
I can say, ‘howdoi debug python’ or ‘show me the pdb commands.’ I can say, ‘howdoi change my path in MacOS’ and it will show me how to do that, assuming I’m running Bash; things like that. 
OKKEN: Okay, I’m going to try it out. ‘Howdoi put a worm on a hook.’
KENNEDY: (Laughs) Exactly. 
OKKEN: Yeah, it doesn’t work. (Laughs)
KENNEDY: It’s got to be something technical, I think. 
There’s another one that I want to point out that I thought was funny but is actually kind of useful. It starts with a cartoon and basically, if you type in a command that you think you know on the shell and you get it wrong, you can curse at your shell and it will potentially fix it for you. This thing is called ‘the F’; I’m not going to complete it so we can keep our clean rating on iTunes but the link is in the show notes. Basically, you type that after you’ve made a mistake on the shell and it goes, ‘Oh, you probably meant this.’ Were you trying to do this git checkout branch thing you did a little bit wrong? ‘The F.’ ‘Oh, here’s the command.’ And it will automatically fix it for you. You get to let some frustration out on the thing, right?
OKKEN: Yeah.
KENNEDY: Alright, what you got for us next?
OKKEN: It seems like we just did the last episode.
KENNEDY: (Laughs) Just a few days ago.
OKKEN: We had a listener comment on the last episode. The last episode we did mention some feedback from a listener about async speeding up some work. And we have another one from a comment this time. 
This is a project that a listener shared with us and we’ve got a link in the show notes. It’s a project called pymarsys. I wasn’t familiar with emarsys and it doesn’t really matter. It’s a cloud-based CRM and it is Python interface. I’ll just read this and the gist of it is it sped it up and this is from Diego. Thanks, Diego.
“Another awesome episode. Thanks, Michael and Brian.”
And if you say we do something awesome we’ll totally put you on the show. 
“About asyncio being awesome, I had my own experience. I had to send information about hundreds of thousands of users to a CRM through their public API daily. Without Asyncio, it would have taken 50 hours daily, which we all know is just not possible. After developing async (using requests) and async (using aiohttp) client for their API, I managed to send the information about the users to the CRM asynchronously, and it takes… wait or it… 20 minutes.”
That’s 150 times faster, which is awesome.
KENNEDY: Yeah, they were using requests before and to update their CRM it took 50 hours per day which is a problem (laughs). So, they switched to the aiohttp client stuff that has async and await and 20 minutes. In fact, this is an interesting story. He said the first time he ran it opened so many connections that it crashed his Mac, so he had to implement a semaphore limiting the system, which is pretty cool.
OKKEN: Yeah, and I did like that he added that, that he added the semaphores. But in the GitHub link that he put up, I didn’t see any semaphore usage in there, so I also, in our show notes, linked another article that talks about using asynchronous IO with semaphores to limit how many connections you’re making. 
KENNEDY: Yeah. Thanks, Diego, for putting that up there.
Anybody who wants to comment on the show you can contact us on Twitter where we’re @pythonbytes. Also, every episode has a discuss section at the end, so if you want to talk about an episode, show link or whatever, drop in there. 
OKKEN: So, what’s the link to this episode”
KENNEDY: PythonBytes.fm/18. I made it super easy to find.
OKKEN: You know what else would be super easy is if somebody would make an easy way for me to do a Pyramid installation. 
KENNEDY: Right, so the way I made that (slash)/18 and you can still go to (slash)/list or whatever, is I used constraints in the routing infrastructure. One of the things I’ve been doing a lot of work with lately is with building pyramid web apps and trying to really help people jumpstart what they’re up to. I can go to Pyramid and create a web app and I get basically, a web app that runs, ‘Here’s the view function and here’s a template. Go.’ Go run the web app, from scratch. I kind of wanted to help the world not start from scratch but start from near the end. So, I’ve been doing a lot with Cookiecutter, more on that later, but I decided to create a Cookiecutter template that is an opinionated Cookiecutter template for creating Pyramid web apps that have most of what you need pre-built and pre-configured and factored the way you would for a large professional app, not for a 1 file starter thing. 
So, I created the Cookiecutter thing called cookiecutter-pyramid-talk-python-starter. This came out of my Python Entrepreneurs course, but you don’t have to have anything to do with that to play with this template. So, what you do with it, when you say, ‘Create the website’ it will create a shared layout so there’s one place for all your general navigation and look and feel goes. It has handlers for class management. It has secure user management using things like passlib and other techniques; Bootstrap, LogBook, Rollbar integration, MailChimp integration, Outbound for email integration, Bower for static. The list goes on and on. It’s very much closer to where you need to be for a professional Pyramid app to get started, in my opinion, other than basically here’s one file now create the whole thing from scratch. 
If people want to check that out, that’s on GitHub. You can use Cookiecutter (space) the GitHub URL and you’re off to the races. It needs a bit more documentation, I’m going to work on that this week, but it’s really close. 
OKKEN: But it’s a good start. I’m pretty excited about it and your course is one of the very few that I’ve seen that really teaches people how to do Pyramid as well.
KENNEDY: Thanks. Yeah, it’s definitely one of the few ones on Pyramid, which is great, so here’s one more resource. Basically, this is going to be part of the end of that course.
OKKEN: The first time I heard about Cookiecutter I really thought it was a little silly but it’s actually turning out to be quite a useful tool for a lot of spaces. 
KENNEDY: Yeah, the more I use it, the more I like it. I’ve been putting some effort to it and it’s great. 
OKKEN: That’s the end of our 6. Do you have anything to share with us, Michael?
KENNEDY: No, nothing. Nothing other than this template thing, that’s really all I have to share. I’ve just been cranking out my classes. 
I hear that you’re still writing on your book. It’s getting close though, isn’t it? 
OKKEN: Yeah, it’s getting a lot closer and I wish it was closer than it is. I’m kind of overwhelmed with both work and gratitude. I’ve had a lot of great people, incredible programmers and good writers help me out with technical reviews on the first 4 chapters and a lot of great feedback. Now I’ve got to go rewrite everything. Thanks a lot, guys.
KENNEDY: That’s awesome. I’m looking forward to the day when we can announce your book on here. Any day now with that book. 
OKKEN: (Laughs) The goal still is to have something to sell by PyCon. 
KENNEDY: Beautiful. Well, thanks Brian for sharing your news and thanks everyone for listening. We’ll catch you next week. 
OKKEN: Thank you. 
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. 
 