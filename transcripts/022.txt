Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your ear buds. It’s April 17, 2017. I’m Michael Kennedy. 
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We have a bunch of cool stuff to share with you, but before we do, Brian, we have to say thank you to Advance Digital. 
OKKEN: Oh, yeah. Thank you, Advance Digital. They’re a brand-new sponsor of the show and they have some really cool Python job opportunities. We'll talk about that later.
Let's talk about the PYTHONPATH now. 
OKKEN: I liked this. Somebody came out with a – I should write names down - let me look it up, just a second. Moshe Zadka came out with an article called, “PYTHONPATH Considered Harmful.” This is a good article, it’s very short. I guess I had forgotten about the PYTHON PATH because fairly early in my Python career, I realized it's not useful, it's only bad, ignore that it's there. So, what the PYTHONPATH is, it's an environmental variable that you can put directories in, so that you add to the places where Python will look for import modules, or modules or packages to import. Every time I've ever thought maybe I had a good use for it, I've regretted it later. One of the classic examples is that if you had a package, you would, I guess, maybe you want to add that top directory for a local package to the path but there's a whole bunch of stuff in the top directory that's not appropriate to be imported like this set up.
Just, I guess, a public service announcement: Don't use by PYTHONPATH. Is there a good use for it? 
KENNEDY: Yeah, I don't know. We have virtual directories; those work pretty well. You can Python and setup.py develop if you want to kind of inject something into the path. There's a lot of options that don't involve that, necessarily. 
OKKEN: Also, one of the reasons might be, if you're developing a local package and you want to be able to import from it – like from your test directory – but that's still the best. The best recommendation is to do a pip install-e as install editable is the best way to do that. 
KENNEDY: Yep, exactly. 
So, the one that first one I want to talk about are actually algorithms. There was a really interesting article about how – I think we talked about this one – I’m not sure if it's a blending in my mind with another article I read. But basically, that we can use languages like C and stuff to try to make our code faster by trying to get closer to the metal, but a lot of times a way to make your code faster is actually to have better understanding and visibility of the algorithms.
You could try to make the bubble sort really, really fast and see, or you could just use Quicksort, or pretty much any language and it is way faster. I ran across this GitHub Repo that is just a bunch of minimal examples of data structures and algorithms in Python. It’s github.com/keon/algorithms. There's just tons of really cool examples. There's different topics like arrays and grafts and trees. So. like in arrays, there might be like, the ability to flatten an array or to merge invals on arrays, or in graphs you can clone it or traverse it or find paths to it. All those types of algorithms that are like, ‘Wow, that actually solves exactly what I need and here's a little example.’ I thought it was really cool. I think it helps professional programmers but if you're looking for a job, there's a lot of, sort of interview type questions around algorithms and data structures, so it might also be worth studying there. 
OKKEN: That’d be a good place, yeah.
KENNEDY: I'm not sure how many there are, maybe 50 data structures and algorithms but pretty cool. If you want to brush up on your algorithms, then there is the place to do it. 
OKKEN: Speaking of data structures, in Episode #11, we talked about a package called ATTRS. 
KENNEDY: ATTRS has a lot of fans. People love that library. 
OKKEN: Yeah, it's a cool package to be able to make classes easily and the attributes of classes are easy to define.
KENNEDY: It kind of makes them complete, as well, right? Give them the equivalency tests in all the various things, not just, ‘Oh, here are the fields’, right? 
OKKEN: Right. This is an older article from last year; I guess, it's not that old. It's from Glyph and it's just a really good article. The article is titled, “The One Python Library Everyone Needs” and he talks about the annoying bit of having to create your own classes and make sure that the copies in less than all work and the sorting, and just letting ATTRS work for you. He also discusses, briefly, some problems with namedtuple, but I'm a huge fan of namedtuple still and I don't know if I buy is slamming on it too much. 
KENNEDY: (Laughing) It's been all good for me, I think, but this is really cool. I need to be trying out ATTRS. I haven't done it yet, but it seems like it really does add a lot. I should just make it a habit. 
OKKEN: Anyway, it's good article. 
KENNEDY: You know where I would like to try out some new stuff? 
OKKEN: Where?
KENNEDY: At a new job, building cool stuff with Python. 
OKKEN: I would love that. 
KENNEDY: Yeah, so our sponsor Advance Digital, they sponsored this episode of the podcast because they're looking to work with you. Everyone out there who knows Python and wants to build cool stuff with Python. 
So, Advance Digital – I’d never heard of them – but they actually run one of the 10 largest news sites in the U.S. by traffic. They are a really high scale Python shop. They’re located in Jersey City, just across the river from Manhattan, so beautiful view. See Manhattan at night and take the PATH over there. They fund employee development and conferences, so you can go to PyCon and things like that. They do mostly Python, but they also run other things. If you want to work in environment like that and do Python for your job, check out python.advance.net and those guys will hook you up. 
OKKEN: That's great. 
KENNEDY: Yeah, it sounds fun, right? Cool. 
So, one of the things that makes high traffic web sites run well is concurrency, right? We kind of beat this drum often, because it's an awesome drum. Last week I had David Beasley on Talk Python to Me to talk about a project he created called Curio. You’ve heard of Curio? 
OKKEN: I have, I haven't played with it though. 
KENNEDY: Curio is an interesting project in that it's kind of like, halfway between a framework that you can just grab and use and half like really low level building blocks. But the idea is, we have a asyncio in Python since 3.4 and it's got this event loop and allows the sort of asynchronous programming through callbacks. But David said, ‘Well, what if we actually started from scratch and we had async and await available? We had these asynchronous co-routines as the primary concept and an async library for Python. What would that look like?’ Well, that's Curio.
It is a library for performing concurrent I/O operations and system programming tasks like launching subprocesses or threads or whatever. It's solely concerned with the execution of async co-routines. Cool, right? 
OKKEN: Yeah, very. 
KENNEDY: It's got all these really neat data structures. So, it has this thing called a UniversalQueue and queues are one of the primary ways to communicate between threads without locking. You’re not sharing the data. You make a copy, put on the queue. So, you are not worried about race conditions and things like that. But one of the problems is the threading model that works for say, queues between threads, is not the same that goes between asyncio execution. That's also not the same that goes between Curio. So, he added this thing called a UniversalQueue that spans all three of those worlds and lets them intercommunicate with each other. He has async threads for sort of managing computational execution and threads as if they were a synchronized co-routine, all sorts of stuff like that. You really learn a lot about async if you dig into this thing. 
OKKEN: You said it is sort of halfway between something low-level and high-level. 
KENNEDY: Exactly. So, if you want to make say like a TCP/IP (Transmission Control Protocol/Internet Protocol) game server, with TCP or UDP (User Datagram Protocol). It's actually got constructs to say, ‘Watch TCP server, that's async, plug in the call backs’ and things like that. 
But there's no there's no HTTP layer, so it's not like a web framework. It's not like Sanic or Japronto or one of those things. But it's not super low-level. It has all these building blocks. It's like, if I was going to build a framework thing of some sort that did a bunch of asynchronous and I wanted it asynchronous at its core, maybe using Curio as the core of your project to build that framework on top of might be perfect. But it’s not, itself, a framework, really. Not yet, anyway.
OKKEN: Okay, interesting. I’ll have to keep an eye on it. 
KENNEDY: The built-in concepts for tasks and threads and queues and what not, very, very neat. 
OKKEN: Neat.
KENNEDY: Yup. Alright, you have some package sorcery? 
OKKEN: (Laughing) Yeah. I was a playing with the src and trying to figure out if this section should be packaged src-ery or “Use the src, Luke” or “To src or not to src”. 
KENNEDY: These are all great questions.
OKKEN: Well, speaking of great questions... In Episode #15, we talked about Python packaging. One of the listeners, Kristof (Claes), had a question last week. The question really was that he was reading some other articles that were in conflict and actually starting with the pytest documentation and pointing to an article by ionel called, “Packaging a Python Library”. The conflict really is whether or not a distribution package for if you're going to push it up onto PyPi, should it have all of the module or the source packages, should they be top level directories or should they be under a src directory? Some people recommend, and pytest did as well, using this src directory instead. The argument that ionel puts forth is referenced in lots of places and it actually all sounds good. Some of the problems are based on using talks and other testing tools to be able to install things a lot and uninstall easily and not muck with the name space too much. 
So, I went out and tried to find some examples that used this and actually had difficulty finding some. If this is such a good idea, I guess my question is, why is this not promoted more by the python package authority and their documentation? And pytest itself, even though it recommends this, that package doesn't use it. I guess my question to the Python community is, ‘Should be should we be using a src directory or not?’ 
KENNEDY: Okay, yeah. Well, this is a good place to point out at that bottom of every episode we have a discuss section and people come in and they ask questions and give us feedback on the various episodes. This one came out of one of those, right? 
OKKEN: Yes. 
KENNEDY: Yeah, this conversation. So, if you want to comment on one of these shows, like this is Episode #22, pythonbytes.fm/22. Go to the bottom and pick it up. Feel free to jump in. This was probably on Episode #21 where this conversation was happening. 
OKKEN: Yeah, and I get why a lot of existing projects like Requests don't have this in it because they didn't before. But there's a lot of people like Kristoff out there, that are trying to come up with some new code to share with people and they wanted to do it the right way. So, a legitimate question is, ‘What is the right way?’ 
KENNEDY: Absolutely. Yeah, great topic. 
Now this last one I have is a bit of a downer but I want wanted to cover it because I think it's an important topic and we've talked about it a few times. I'm going to say two companies’ names but for you think anything negative about these companies these are the two companies that were funding a thing that nobody else was funding so, thank you to them for doing it. But it turns out that Intel is pulling funding from its OpenStack effort like a sort of an initiative that it started with Rackspace. So, Intel and Rackspace were collaborating on a project called OpenStack innovation center and that started back in 2015. It was supposed to be funded through 2018, but it got pulled out early. 
There was a lot of good things that got done there. They said the objective was to create the world's largest OpenStack developer cloud and developer enterprise capabilities with OpenStack and it quickly accomplished the first goal and made a great progress towards the second.  So, that's all good that that was done, but it turns out there's 30 Rackspace employees who have been working on this, now have two weeks to find another job within the company. 
I guess the story here is just you know we need to be vigilant and careful about how we fund our open source work. Maybe a little bit of diversification, not in terms of what people are doing but in terms of the companies that we have supporting us. The more companies contributing smaller amounts, I feel, is probably a safer place to be than a few companies contributing huge amounts. We have the same problem with PyPA or PyPi and the Packaging Authority, and all those guys and that whole set of projects. 
I don't know. I'm going to try to talk about this a little bit at PyCon this year. We’ll try to do an open session or something if I can pull it together. 
OKKEN: There's not really a good time of the year to try to find another job in two weeks. 
KENNEDY: No, definitely not.
OKKEN: Sorry for you guys. 
KENNEDY: Yeah, that's a real bummer and OpenStack is awesome. This is not pulling support from OpenStack, this is this initiative that was on top of it. 
OKKEN: Okay, so it’s not all of OpenStack, it’s just one part of it? 
KENNEDY: This was an initiative specifically that they were doing, trying to bring people together around OpenStack and some other stuff. 
Alright, well, that's our news for the week. Brian, you got anything in particular? 
OKKEN: No, I don't. 
KENNEDY: Yeah, no worries. We’re still awaiting that book release. That's gonna be a good day. 
OKKEN: I'm frantically in the middle of edits. I'm finally working through a lot of the feedback I got from people and I’m just still very humbled by the help I've received by the community. It’s great. 
KENNEDY: Yeah, that’s awesome.
I have a quick piece of news for everyone. If you are in Europe or you would like to spend a little time in Europe, EuroPython at europython.eu, be sure to check that out and get your tickets. They've already sold out the early bird tickets and the main tickets are on sale. I've already heard from some people who were hoping to go to PyCon this year in the U.S. Not going. Tickets are sold out. So, if you are in Europe and you want to go, don't wait. These things sell out and then you'll be sad. 
OKKEN: Are you going to go, Michael? 
KENNEDY: No, not this year. I was supposed to go last year, I really wanted to, but we were moving back to the U.S. within a few days of it running, so it just didn't work out. Maybe next time. 
OKKEN: Yeah, maybe we could both go. 
KENNEDY: That would be awesome. 
Alright, well, Brian, thank you for sharing everything with us. 
OKKEN: Thank you. 
KENNEDY: Yep. See you all later. 
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. 