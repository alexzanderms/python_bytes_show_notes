**PYTHON BYTES TRANSCRIPT**

**Episode #28:** **The Meaning of _in Python** 

Michael KENNEDY: Hello and welcome to _Python Bytes_, where we deliver Python news and headlines directly to your earbuds. It’s Tuesday, May 30th, 2017 and this is Episode 28 of _Python Bytes_. I’m Michael Kennedy.

Brian OKKEN: And I’m Brian Okken.

KENNEDY: Brian, can you believe that we've done 28 episodes already? 

OKKEN: No, I can't. I was telling somebody about the show recently and I said, ‘Oh, we've only done like, gosh, we've done like, 27 episodes already.’ 

KENNEDY: Yeah, we've done over half a year. In the history of Python podcasts, I think over half a year's worth, over twenty episodes, makes it one of the longest running podcasts of all time, actually. A lot of the other ones, they sort of cut out in the early twenties. 

OKKEN: Yeah, that's true. 

KENNEDY: Talk Python and Podcast.init, they’ve been going on for a while, but still. 

One of the primary rules or documents or enhancements, that tells us how we should write or code is PEP8, right?

OKKEN: Yeah, definitely. Everybody that's really into Python knows about PEP 8, but sometimes when you mention, ‘Hey, you should follow PEP 8,’ to somebody new, it's not really that easy to get them up to speed. It's not that hard to read, but I didn't know about this thing called pep8.org and I just stumbled across this recently. It's from Kenneth Reitz and it's easy to use; it is the just PEP 8, the style guide. It's a nice web page, styled nicely. It's got red for bad examples and green for good examples, and it's got a nice index on the left that you can click through. 

KENNEDY: Yeah, it’s definitely a really nice and navigable thing. You're right, the green ‘Do this’ and red ‘Don't do that’ and even little touches, like the code samples that demonstrate good and bad – basically any of the code samples that demonstrate anything – are color coded, which is surprisingly delightful.  

OKKEN: Yeah. I also like, because there’s an index there, they're all anchors in the web page. So, you can take one of those and if you want to mention a particular guideline to somebody, maybe a co-worker that's not following it, you can email them that link and say, ‘Hey, could you read this?’ 

KENNEDY: Exactly. Yeah, put that in your git issue response, like, ‘I'm willing to take your PR, but hold on. You’ve got to fix this first.’ 

OKKEN: Yeah, but one of the things that I always want to mention when I talk about PEP 8 is don't be a PEP 8 bully. The first line of PEP 8 talks about hobgoblins or something like that. 

KENNEDY: Yes, blindly following rules is the hobgoblin of little minds, or something to this effect. 

OKKEN: Yeah, so somebody might have a decent reason for not following PEP 8, so tread carefully when you try to get somebody to follow it. If you haven't stumbled across PEP 8 before, which is kind of hard to think this is possible if you're listening to this podcast, it does describe itself as being the style guide for the standard library for Python. But it's a lot more than that. Most open source Python projects follow it to some degree, don’t you think? 

KENNEDY: Right, yeah, and you can set up linters that will mention violations. So, for example, I think Cookie Cutter, if you do a PR back to them and you do something like say, write an 81-character line, it will fail the automated build and say we're not going to accept it because it fails Flake 8, or something to this effect. 

I suspect everyone, pretty much everyone’s heard of PEP 8, but I'm not sure everyone is actually taking the time to read through PEP 8. I think that this thing is more readable, so if you are in that group, then go check it out, pep8.org. 

OKKEN: So, what's next? 

KENNEDY: I want to talk about asynchronous stuff. Is it surprising? I always talk about asynchronous stuff. 

So, there's this new project called Tokio. And at the heart of asyncio and async and await stuff are the things called async event loops and whatnot. This is one of those; we’ve previously spoken about sanic and some of these faster web frameworks. Their magic was that they run on top of this thing called uvloop and uvloop is, I think, implemented in C and is an alternate implementation of this internal asyncio loop. Well, Tokio is a similar concept but implemented in Rust. So, Rust is a compiled low-level language like C. I mean, you can debate that it’s low-level; I feel like it is. It's closer to the medal anyway, it's a compiled language and it's supposed to be a little better for threading, a little better for memory management and safety, so it's a little bit of a safer, more modern, low-level way to implement this. I just thought it was kind of an interesting example that you could go check out and say, ‘Here’s an integration of Python with Rust.’ 

OKKEN: Okay. So, it's a Python thing? 

KENNEDY: Yes, you use it from Python, but instead of having a C extension, you have a Rust extension. 

OKKEN: Okay, that makes sense. It took me awhile to catch up. 

KENNEDY: Yeah, so like the heart of the asyncio event loop is written in C when you're looking at a uvloop; here it is written in Rust. So, here's an interesting internal bit, but you basically plug it into your Python code and then you can you work with the async event loop, like you normally would. 

OKKEN: Okay. And I'm guessing it might be pronounced ‘Tokyo,’ but I’m just guessing.  

KENNEDY: Yeah, okay. Tokyo. You're probably right. (Laughs) 

So, yeah, cool. The project is still super early stage development, so if you're into Rust or you want to play with Rust… a lot of people ask me, ‘Hey, I want to do something open source. Is there an approachable small project?’ This thing’s pretty early days, so it's probably not too complicated to jump in and play around with, if people are looking for some project to get involved with. 

OKKEN: Well, that's great. 

KENNEDY: Yeah, absolutely. 

Tell me about some boilerplate. 

OKKEN: I've got another project that is fairly early, I guess I was just assuming it's fairly early in the project, but I came across this a website called Python Boilerplate. It’s python-boilerplate.com and it’s addictively fun, at least right at first. I wouldn't try it on a phone, actually I haven't tried it on a phone, but it's got a whole bunch of push buttons and stuff and you can say which sort of boilerplate you want to have it spit out. You can select Python 2 even, or Python 3. Luckily, it does default to Python 3. You can say whether or not you want, whether it's an executable script or and whether or not you want argparse stuff in there. Which actually, somebody that wants to add argparse stuff, it's kind of nice to have some built in boilerplate with examples. 

KENNEDY: Yeah. So, it's a little bit like what Cookie Cutter does for large projects, where you can say, ‘I want to generate kind of a starter code, a starter skeleton,’ but it's more like that, but for command line apps, CLI apps, right? 

OKKEN: Yeah, smaller little projects. It even puts together a preliminary, like for instance if you add Flask or Pytest, it'll add your requirements.text to it. It's a similar vein as Cookie Cutter, but a little more interactive and it's fun. 

KENNEDY: Yeah, I like it. People should check that out. So, that one's fun. 

We recently went to PyCon. It was awesome, right? 

OKKEN: It was very awesome, yeah. 

KENNEDY: Hopefully, this year people will take us seriously when we say, ‘Get your tickets before it sells out.’ (Laughs) 

Anyway, one of the things that's really cool, that I really liked from PyCon was the presentation that the folks from Instagram did. Luckily, this is all on YouTube, so people can check it out. 

So, Instagram, they're probably not the biggest but they're one of the biggest, by traffic number of users, whatnot, consumers, or users of python for their web apps and their backend services. They seriously use Python. They use Django and many, many places. They had found themselves in a bit of a situation, like many, many of our listeners probably find themselves, but to a degree that is way, way higher. So, they've got hundreds of millions of users, who knows how many thousands of lines of Python and they were stuck on Python 2.7 and Django, I think they said, 1.3, which is years out of date. It is quite out of date. The current one is 1.8. The one people working on is 2. The big news about Django 2 is, it's only going to support Python 3, right, that was the big news there. 

So, they said, ‘We somehow need to get onto Python 3. A lot of companies have this huge bit of code, and so well, I'll throw my hands up in the air, we just couldn't possibly switch. It is just too much work, it's too much risk.’ 

If you watch this presentation, there's almost no way you can look at this and go, ‘Oh, there's no way we can switch to Python 3 after you see what they went through.’ It's really intense. So, for example, they don't believe in branches in there git repo. 

OKKEN: Wow, I must have missed that. That's interesting. 

KENNEDY: Yeah, it's interesting, right? Because I think, to some degree, rightly feel that the further you are away from master, they’re calling it, the more it's going to be hard to integrate that back in; the more you could introduce trouble by merging that back in. So, what they do is they use feature switches so if you’re working on your feature, there's a config on your dev server that says, ‘Enable this feature,’ but in production it might be turned off. So, they're shipping, they said they check in to the master branch quite often, like many times a day, and within hours of that check in, it is pushed to production. Even if the features are not done. So, now they have this huge, huge branch of Python code where lots of the libraries and modules and stuff are shared across different services, in different servers. It runs on our old version of Django and Python 2.7, and they’re like, ‘What we're going to do is, we're going to upgrade to Python 3 and we're not going to branch. We're going to keep shipping on this main branch and convert it to Python 3. We’re going to upgrade like, years’ worth of Django. We’re going to keep shipping on Python to production and so on.’ 

And so, the process that they went through and the little steps that they took and the testing procedures they went through to make this work, was really, really interesting. Basically, I'll give you guys the summary but if you want to watch the video, I highly recommend it. It's really a concrete roadmap for every large project, every large company with lots of users in traffic. to switch. So, they said they got between 12% and 40% performance improvement, depending on where you look. I like to say, the web tier versus the async Q tier and so on, and I think like, 30% better memory. Just straight across the board, everything was better and they haven't even started using the asyncio stuff. They're super happy now that they can switch to the new version of Django, something cool comes out in terms of performance, they like Python 3.7, some function call becomes much faster, they just get that. They don't have to go, ‘Well, that would be nice.’ They basically said they get to be part of the forefront of Python once again and they’re happy about it.  

OKKEN: Didn’t they start converting their code base so that it could run on Python 3, but they were still deploying on Python 2.7? 

KENNEDY: Yes, exactly. And then eventually one of the steps they made was, ‘We're going to make all the developers run and develop on Python 3, but still deploy to Python 2.’ So, that was one of the main checks and balances; the developers will start hitting these bugs locally and we’ll never push it out. And then they didn't push it out to production fully then, they pushed it out to just Facebook employees, and then they pushed it out to .1% of their users to see how that worked. Then finally, they switched to 20% and then they pushed it all the way out. Something like that. It was really interesting roll out. 

Then on their testing, they had at first, there was a bunch of tests that couldn't be fixed. So, they set up like, ‘These are the tests that are included in the automated build.’ And slowly, as they migrated tests, they added them to also include this, so they would not regress back to be broken. They kind of chopped their way through that. Then eventually they said, ‘Okay, the default is new tests all have to pass on Python 3 and the old ones are going to go into the exclude list, until we get the failing one to zero.’ 

OKKEN: I really liked the presentation and I liked how they talked about a lot of the points that they went through. I think the example is a good example for any project but I also really liked just the reality that it's not trivial. 

KENNEDY: Yeah. It was like six months or four months or something huge. 

OKKEN: But very doable, and while in production. That’s pretty cool. 

KENNEDY: Yeah, and they also kept shipping new features, that was one of their requirements. So, they shipped a bunch of new features at the same time. 

I bet they use at least one underscore in their code when they did that. 

OKKEN: Probably several underscores. We’ve featured Dan Bader on this show a lot, but this is a pretty cool article. “The Meaning of Underscores in Python.”

KENNEDY: I think this falls into the realm of like what you said with PEP 8, right? A lot of people are seeing these, but maybe they haven't really looked specifically at what it's about. 

OKKEN: Yeah, and also, he goes through pretty much all the different meanings but one of the things it took me a while to understand, is that when people say, ‘dunder’ they mean something with two underscores on both ends. Shortened of double under score. 

It's a good list. He talks about the leading underscore meaning, that it’s sort of, by convention, private or for internal use only. I added a note in our show notes, that doesn't apply to named tuple. Named tuple has its functions starting with leading underscore, but you can still use them. That's what they're for. 

KENNEDY: Nice, yeah. I was just comparing with somebody today and said, ‘What does class_ (underscore) mean? Why is the underscore there?’ 

OKKEN: Oh, yeah, right. So, that's the trailing underscore. It's because somebody doesn't want to collide with a Python keyword or something. 

KENNEDY: Yeah, exactly. You can’t use class so class_. 

OKKEN: I do like that convention a lot better than having ‘my class’ or ‘this class’ or something like that. 

KENNEDY: I know, that really bugs me. 

OKKEN: And one of the things that a lot of people don’t, that I was surprised by when I first learned about it, is a single underscore by itself. 

KENNEDY: Yes, that's my one of my favorites. 

OKKEN: That’s a ‘I don't care’ variable that you can, like if you have to assign something to a variable but you’re not going to use it anymore or use it at all, that's a decent one. And you don’t get a warning for that, if it's something assigned and never used. 

KENNEDY: Exactly, it's meant to not be used. Yeah, the couple of places that I see that, like a tuple unpacking when you don't care about all the values, which is kind of good. If you say, ‘I just want to do a loop from 1 to 10, but I don't care about the number, I just want to do it 10 times,’ you could say, ‘for underscore in range 0, 10’ whatever. Things like that. 

OKKEN: That's a good use for that. 

KENNEDY: Yeah, yeah. The other place that I really like this is where I have function signatures I have to match, but I don't care about the variables. For example, in the web methods, a lot of them take request as a parameter. If you don't put the request parameter there, the framework will fail to try to pass it, and won’t match it and it will crash and all that. But I don't care about calling the request variable to working with it, so you'll get a Flake 8 violation you're not using it, so underscore. 

OKKEN: In that case, can you use it multiple times? Like, can you have multiple parameter names that are _ (underscore)? 

KENNEDY: I think so, yeah. I mean, you just blast away the previous value store and underscore, but if you're really using it as like, ‘I don't care,’ then that’s fine. 

So, the underscore is definitely good. If you're not familiar that, check out Dan’s article; it's a good one. 

Let's close this out with a little bit of a look towards the future. We talked about recently, the Stack Overflow tools, trends tool, and when Stack Overflow released it, one of the things that they featured, right up in the front, was language popularity for a few languages, including Python. It looked pretty good, right? 

OKKEN: Yeah. 

KENNEDY: Yeah, so I want to come back. There's a guy who wrote a _Medium_ post that actually dug into this quite a bit and played around with it, and said, “The Future is Looking Bright for Python.” And he basically took that tool and did a little better analysis with it then than we did. There's one chart that they put up as a standard chart at Stack Overflow since we covered it, called the Most Popular Languages trend chart. That's got like 15 languages or something silly; it’s really completely overwhelming but if you hover over the language and names, it highlights them and dims the others so you can actually see it. 

What’s really interesting is, if you go through that chart and you hover over the languages, there are only like 2 languages that have upward trends and recently. And which one is the most steeply upward? Has the most positive derivative? 

OKKEN: Well, probably Python.

KENNEDY: Of course, it does. Actually, by quite a large margin. There's also a trend chart on there for Python 2 versus Python 3, and last year Python 3 overtook Python 2.

OKKEN: Oh, nice. 

KENNEDY: So, same kind of idea with this trend, but just digging in with a little more detail and it is kind of interesting. I thought to be fun to tie that together with the Instagram story, so you can go back to your company or your boss or whatever, and go, ‘End-of-life in 2020 for Python 2. Django is no longer supporting Python 2. Python 3 is growing here.’ Just like all the good stuff. Bring it all together to help get a little more Python versus Legacy Python in the world. 

OKKEN: Yeah. I definitely don't hear… a couple years ago we still heard people coming up with good reasons to stay on 2.7, but I don't hear anybody talking about that anymore. 

KENNEDY: Nope. We've definitely crossed over some sort of boundary, for sure. 

OKKEN: Well, hopefully also in the future, it will bring us at least another half year of _Python Bytes. 

KENNEDY: I'm pretty sure we can at least get another year. 

OKKEN: So, that's all of our topics, but any news for us, Michael? 

KENNEDY: No real news for me. I'm just recording podcasts like crazy, trying to get ahead for the summer. Like i was just telling you the before I opened the show and hit record, I have like 8 episodes of _Talk Python To Me_ I’m recording over the next 6-7 days. So, there's going to be a whole bunch of good stuff lining up and I'm excited about what's coming. 

How about you? 

OKKEN: I'm kicking off some more recording also. The book is still going strong and I’m doing a lot of work on that. I recorded an interview this morning and I'll have at least a couple coming out in the next couple of weeks, so _Testing Code_ is not dead. It will come back. 

KENNEDY: What was the topic? What did you record on today? 

OKKEN: Actually, I recorded somebody that does mobile testing, so mobile application and mobile and responsive web page testing. It's a company that offers a service that you can rent a device. Somebody tells you that your website or your web application or something doesn't work on this particular device. You don't have to go out and buy it, you can go and rent it; I think their prices are like, 10 cents a minute, or something like that. I have no idea what their prices are actually, I can't remember. But it's a commercial product. I want to make sure that testing code isn't just about open source stuff; it's also companies that are helping out that area. 

KENNEDY: Yeah, that’s cool to cover the whole whole spectrum. Can you imagine what their data center must be like, with a thousand different phones running? 

OKKEN: I also asked him silly things like, ‘Okay, so I operate my phone with my finger. Are you paying somebody to move their finger or something?’ They said, ‘No,’ they've got that he figured out, automated. 

KENNEDY: Perfect. Well, Brian. Thanks for her sharing the news this week and meeting with me. 

OKKEN: Yeah, thank you. 

KENNEDY: You bet. Bye.

Thank you for listening to _Python Bytes_. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. 

