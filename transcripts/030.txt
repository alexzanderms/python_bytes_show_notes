Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #30, recorded on June 13, 2017. I’m Michael Kennedy. 
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We have tons of good stuff to share with you today. I am very excited about all of our items, but first, we have a brand-new sponsor. I want to say, ‘Thank you.’ 
OKKEN: That's exciting. 
KENNEDY: It's super exciting. So, I want to welcome Datadog to Python Bytes as a sponsor. Datadog has this cool thing where if you do a little test integration with them you actually get a free shirt. So, I'll tell people how to get a free shirt later. 
OKKEN: Wonderful. 
KENNEDY: I heard that not everybody writes software at the scale of Google. 
OKKEN: (Laughs) Yeah, I think that's probably true, especially of me. But there's a couple articles that i want to talk about today; actually, mostly one. There's an article by Ozan Onay, which is a pretty cool name, called, “You are Not Google.” Also, he goes on to say, that you're also not Amazon and you're also not LinkedIn. It isn't to say that Google, Amazon, LinkedIn all have applications that might look similar to normal folks’ applications, but the scale is definitely different. So, just be aware of that. I guess it's a reaction to people chasing a lot of the shiny, new technologies like Asynchronous I/O and other things. I'm guilty of that as well. When looking at solutions, he presents a model called UNPHAT, which is try to understand the problem that your first, enumerate multiple possible candidate solutions, read papers or articles about the solution that you're going to try, look at the historical context of why the solution came to be in the first place, list out the advantages and disadvantages and don't forget to think. Make sure that that solution really fits your problem. I think it's a good discussion about how a lot of the architectures and stuff that people write about and how Google and others do things might not apply to you, so it’s just a heads up. 
KENNEDY: I think it's a super interesting article and it's a good reminder. On one hand, it's really interesting to think about computation at a massive scale, like some of these data center things. And the incredible fail over and possibly global redundancy that some of these companies like Google operate at. People read these things and are like, ‘Oh, we're going to do our startup and if we're lucky, we'll have a thousand users after three months.’ Well, maybe you don't need to architect around the same things that say, Google or LinkedIn or Amazon are architecting around. Maybe you need to architect around, ‘Let's get this thing working as fast as possible and then we'll deal with a scale later.’ 
So, there's a quote in here and it’s pretty nice. It says, ‘The thing is, there's like five companies in the world that run jobs as big as Google. For everybody else, you're doing all this I/O and fault tolerance and things you don't really need.’ 
OKKEN: Yeah. 
KENNEDY: It's really just this idea of it's cool to study these patterns, but these patterns were created within a context of a problem. Do you have that same problem? is like the recurring theme. I really like it. 
OKKEN: Yeah. Also, even if you are huge, even if your problems are big, they still might not be the same. One of the things he talks about is, maybe your data store, maybe the number of rights is more important than how often it's read, or vice versa. So, even at large scales the problem might be different than somebody else's. 
KENNEDY: Yeah. For example, Amazon optimized for right tolerance on the database that backs their shopping cart. Is that is that your primary concern? If it is, maybe do what they are doing. If it's not, then maybe that's not the best database for a general database, for example. 
OKKEN: Yeah, it's good. 
KENNEDY: Speaking of databases… Oh, let's talk about your microservice one as well, that ties into this. 
OKKEN: Along the same line, I ran across another article that is called, “Enough with Microservices.” It's a similar type of article, it's also well written. It’s by Adam Drake and will have a link up. Mostly, it’s a similar sort of discussion about microservices and dependencies, and how that's a complexity that adds to your cost, so make sure that you are aware of that before you try to jump into it. 
KENNEDY: Yeah, I recently had Miguel Grinberg on Talk Python. I haven't released that episode yet because I have three months of backlog of stuff that’s recorded that's got to get out, but it's on its way. It's a really good episode around microservices. So, if you’re really thinking about microservices, check that out. It’s really enlightening. Actually, I learned a lot from talking to him. But I think one of the takeaways is that switching to microservices makes your application simpler than it otherwise would be. Instead of having one complex application, you now have six very simple applications, but your dev ops and deployment and coordination in your infrastructure store gets way more complicated. So, you are kind of pushing the complexity of your application around and does it make sense to push programming complexity into infrastructure dev ops complexity? I think it depends on your organization, how many people are on your team, how complex is your app, but certainly a lot of small apps probably shouldn't be microservices. 
OKKEN: It's interesting that you bring that up with what your organization looks like because there's a lot of small startups and small organizations and sometimes just individual people. Pay atention to what you like to spend your time on and what your skills are. When you just said that, I was like, ‘Wow, I better be very careful about that because dev ops is not my strong suit.’ 
KENNEDY: Exactly. I'd rather have the complexity in my app and carefully factor that thing, rather than push it to a bunch of servers that coordinate. 
OKKEN: Yep.
KENNEDY: Pretty interesting. 
So, speaking of databases and things that are complex and things that scale super high, let's actually not talk about a database with this thing called, NoDB. 
OKKEN: Okay, I haven't heard of this at all, so tell me about NoDB.
KENNEDY: So, NoDB is a Pythonic Object Store that uses Amazon S3 as the back end. So, as a programming interface, it looks like a simple NoSQL database but what it is actually doing instead of running a server or something, is it’s talking to S3 and storing your objects there. So, you can insert into the database and you can figure your connection string for the database is, ‘Here’s is my S3 account and here's the folder I want to store into.’ Then you just ‘insert query update and delete from this database’ but what actually happens is it stores it over there. I believe the default is actually the pickle the Python object, so you even get like type preservation. You could insert a customer and then boom, out comes a customer with its functions and everything. 
OKKEN: Okay, interesting. 
KENNEDY: Yeah, interesting, right? So, this was done by Rich Jones. He released it in April and it sort of ties in with some of the serverless architecture. This is the guy that works on Zappa. We talked about Zappa last time, which lets you run web applications on Amazon Lambda, which is already pretty interesting. 
So, if you don't have a web server, maybe you could get away with not having a database. It can handle a decent amount of load, but it's not like a full on super database. It’s more like for prototyping and things like that. 
OKKEN: Okay, cool. 
KENNEDY: Yeah. So, some of the examples of he said it might be good for is prototyping like I said, but also storing API event responses for like replay. If you are doing microservices and you want to store all the traffic that goes back and forth, you could just do that here easily. Capturing logs, simple data, like, ‘Here, add your email to this thing.’ One of the more interesting things is if you are doing AWS Lambda, you can have triggers that call the function based on S3 events. ‘This file was changed, this bucket had a new thing added.’ What that means is, you could insert into the database and it would call an AWS Lambda function as a result of that. So, you could insert this thing and the act of storing it also kicks off some action. 
OKKEN: Neat, that's actually pretty cool. 
KENNEDY: Yeah, it's pretty neat. 
OKKEN: Plus, the article has a nice picture of a fish skeleton. (Laughs)
KENNEDY: Yes, pictures are important. The one that you’re talking about next also has a cool logo. 
OKKEN: Yeah, I've heard of Elizabeth a few times. I do have to admit that the logo did bring me into this a little bit. 
KENNEDY: Yeah, we talked about Faker before which would let you create test data that looked real. ‘Give me an address,’ ‘Give me an email,’ things like that. This is a competitor to Faker, huh? 
OKKEN: Yes. If you haven't listened to Faker, that was on Episode #25. I looked it up this time. 
It's definitely a competitor to Faker. They even have some comparisons and it looks like on their project page, one of the main features that they're going for Elizabeth is performance. Apparently, it's faster than Faker. 
KENNEDY: Yeah, Faker’s kind of slow. Faker’s really nice but I tried to generate a database that had like, a couple of million entries with Faker, and it took a while, let's just say. 
OKKEN: I haven't tried anything huge. I’m curious to how Elizabeth compares. It definitely is a similar space but I think it is just another project. Maybe it fits better for your project. The articles were really well written. We’re linking up to Medium articles. And it looks like the same person wrote a pytest plug-in that is actually pretty darn cool. It allows you to, within a test as a fixture, you can bring in different parts of the fake data. 
KENNEDY: Yeah, that's really cool. It definitely looks nice. I feel like it's, in some ways, complementary to Faker. I'm not sure you would use both in the same thing but you can kind of get slightly different data. Depending on what you're after, one or the other may be better. 
OKKEN: It’s a slightly different model of how to pull the data out, so I think it's good for people to try both and see what style works best for them. It also does different localization, as well. 
KENNEDY: Yeah, the localization of all these is pretty impressive to me. 
OKKEN: Yeah, I wouldn't want to try to do that project myself but I'm glad it's around. 
KENNEDY: I'm glad it exists. 
OKKEN: Yes. 
KENNEDY: Are you ready to hear about how to get a free t-shirt? 
OKKEN: I really want a free t-shirt actually. 
KENNEDY: Yes, so Datadog, those guys came along and said, ‘Hey, we'd love to sponsor and support the show and get the word out about our project that we got here.’ So, Datadog is – we talked about Rollbar before and Rollbar monitors your application for errors – well, Datadog does something a little bit similar on a grand scale. Datadog will look at your application and all the layers of infrastructure on it. Let's suppose we have say, a Flask app. We could integrate Datadog and it will give us metrics about that Flask app, but it will also tell you about the NGINX web server, and your database, and the Linux machine that is running on, and basically the entire stack of your application from the servers, the database servers, the web server, all those things and put all that stuff together. So, you can have a really holistic view of what you're doing. You can even integrate with all these different things; it will integrate with things like AWS, it integrates with Rollbar if you use those guys. It integrates with many different things that you might already be using, so its super powerful. It integrates with GRASS, with MongoDB and so on. Very cool. 
Companies like Zendesk and Salesforce and even PagerDuty use it. If you haven't heard of Datadog, if you haven't tried it, go to pythonbytes.fm/datadog and they've got this little thing. You try it out and you get a free t-shirt. So, pythonbytes.fm/datadog. Support the show and get a shirt.
OKKEN: I think the shirt’s cute also. 
KENNEDY: Yeah, it’s nice. So, thanks Datadog. 
You know what? Let's talk about what's coming in Python. I feel like my next two items actually are both sort of future-looking Python things. 
I feel like we just talked about Python 3.6, didn’t we? 
OKKEN: We've been talking about it since the beginning, yeah. 
KENNEDY: Yeah, I guess it’s been out for a while now. So, they're starting to talk about what's coming in Python 3.7. 
OKKEN: Okay, I haven't looked at all so I’m interested. 
KENNEDY: I kind of want to highlight that there's a whole bunch of things that I put here that are interesting. Two that I think are super interesting and i'll just touch on the other ones. 
The first one is an optimization. So, Python works by having a bunch of op codes and then interpreting those op codes in this giant switch method in this file called CVal.C. It basically is a loop in a switch method and it looks at the op codes and it figures out what to do. So, they've added two new op codes, LOAD_METHOD and LOAD_METHOD. It allows them to skip some instantiation of a few objects and it results in potentially methods in Python 3.7 being 20% faster than Python 3.6. 
OKKEN: Oh, cool. 
KENNEDY: So, one of the big sort of trade offs that you make in Python is function calls are relatively expensive compared to other operations. We obviously want to write smaller functions and break our code apart for usability and readability but that can make things slow, so having faster functions can actually make a really big difference in Python. 
OKKEN: Okay, neat. So, 3.6 optimized dictionaries a lot and we might optimize function calls in 3.7. 
KENNEDY: Yeah, absolutely. So, there's some new modules. There's a new remainder function in math the dis-function which is a disassembly function. If you haven't done this, it's pretty cool. You can say, ‘Import dis.’ I think it’s dis.dis module.disassemble and you give it a function or a class or something, and it will show you the op codes. Kind of like that LOAD_METHOD, CALL_METHOD I was talking about. 
Another really interesting thing that's coming in 3.7 is async context manager. So, a context manager is a thing you can use in a with block, like a file handle database transaction, those types of things. Well, you could have asynchronous context blocks and this async context manager lets you basically make the instantiation step in those context managers asynchronous, which is pretty cool. 
OKKEN: That's cool. 
KENNEDY: Yeah. One more that's kind of for the crazy book is now functions can have more than 255 arguments. Apparently, that was a limit that was bothering someone and they said, ‘Well, let's make it possible for functions to have like 300 arguments because 250 wasn't enough.’ 
OKKEN: Yeah, I run into that all the time. (Laughs) 
KENNEDY: I do, too. It's really frustrating. (Laughs)
OKKEN: Why would you need that? 
KENNEDY: I have no idea. Especially when you’ve got *args and *kwargs. Anyway, it's now a thing or is going to be a thing and 3.7. 
OKKEN: Yeah, interesting. 
It looks like you wrote down bytes.fromhex() and bytearray.fromhex().
KENNEDY: Yes, so those are conversion functions that all parse hexadecimal strings into bytes. The change is that it used to have an error if there was white space on the beginning or end, which really didn't affect what the thing was but it wouldn't accept them. Now they basically strip off all the white space for you and so it’s a little more tolerant of input. 
OKKEN: Okay, cool. That'll matter for some people. (Laughs)
KENNEDY: More tolerant is always good in my opinion. 
I would love it if there was an army of people or things that could go test my code and find out what errors for me. 
OKKEN: Yeah. So, there's our article called, ‘Unleash the Test Army.” It is about a hypothesis. I'm glad this came around because since I talk about testing a lot I get questions about hypothesis a lot and I have never used it. I know that you've had MacIver (David R.) on the show. 
KENNEDY: Yep, I have, on Talk Python Episode #67.
OKKEN: You're ready too. Did you look that up? 
KENNEDY: No, I was talking about last night actually. 
OKKEN: It’s somebody's experience with working with Hypothesis. It's a good introductory article to kind of tell you what it is. So, hypothesis is a testing framework that will really just come up with a lot of different ways to throw, you set it up so that it throws different data at your code. It's more of a unit test-type thing, I think. You have to define the input and output of your functions and what not to make it work. It's really pretty quick about being abusive and getting at where the problem areas might be. This is the first article that I've read that kind of explained how to get into it quickly. Hypothesis doesn't look like something that you can really just pick up right off the bat but this is a short introduction. One of the things I like is at the end he talks about his conclusions with working with it. One of the conclusions he came up with is that it forced him to pin down his function specifications and really to consider special cases. So, really think about the interface to the function you're going to test, what are the good parameters, what is the expected behavior, and what are the bad outputs, what those look like. Making you think about your interfaces is a good thing so if Hypothesis helps people think about interfaces, great. 
KENNEDY: Hypothesis is interesting. I haven't had a chance to do a ton with it. But basically, instead of choosing examples like, ‘Let's see what's in edge case. If a register value is false and the email address looks like this and the price looks like that, that seems like a good example. Let's pass that to my test and see what happens.’ So, instead of doing that, you can go to Hypothesis, just write a regular test but add-on to it this decorator that says, ‘Okay, that thing is like an email address, that thing is a bullion and these are some numbers, here’s their range. Go after it.’ And it'll just do a bunch of different examples and record which examples worked and which ones failed and things like that and store that in a file. It's pretty cool. It can find those edge cases and other things you might forget about. 
OKKEN: And this example of kind of doing it in an interactive way. You've written some tests but you’re not really sure what inputs to throw at which test cases and making you think about where the edges are and the different corner cases, I think that’s a good thing. 
KENNEDY: It is a good thing. The edges and corner cases are super important part of unit testing, I think. 
OKKEN: Yeah, I'm still trying to figure out exactly what level of the development process and what level of testing this makes the most sense at, but there's definitely algorithmic pieces in your code that might be a little confusing. I don't think this would make sense to throw at every unit test in your system, but there's definitely places where this would make sense. 
KENNEDY: Yeah, it's cool. People should check it out and it's an approachable article for sure. 
The last thing is one of these Python versus Legacy Python things and chalk up one more win for Python. So, most people have heard of Heroku. Heroku is a platform as a service cloud provider. Kenneth Reitz works there, for example. His unofficial title is something to the effect of ‘Python Overlord at Heroku.’ That's on his business card or something.  Anyway, he and the crew there basically make it so you can say, ‘Here's my app and here's my requirements.txt. Run this, please.’ Until recently the default has been when you say, ‘Run this Python app,’ it's like, ‘Cool, you mean 2.7, right?’ And you could run it on Python 3 but you had to configure it explicitly. If you said nothing, it ran on Python 2. The big news is on June 20th, 2017, Heroku switching the default to Python 3.6.1. So, hurray for Python 3. Now if you go to Heroku and you say, ‘Run this,’ it's gonna be like, ‘Awesome. Python 3, right? That's what you wanted?’ 
This thing that I’m linking to basically links over or displays their blog post. Their post is super short that talks about it. It just says basically what I said, ‘Effective Tuesday, the default runtime is now Python 3.6.1
OKKEN: If you've already got a job running there, it won't switch, right? 
KENNEDY: Exactly, no. It is only for new projects. In the Reddit thing, there's a few interesting quotes. Somebody said, ‘Lots of new projects start out on Heroku all the time, so this is really great news for Python 3 adoption.’ Someone else said, ‘Python 3 is really happening. Yay!’ 
I was actually a little worried about the future of Python for a while, but I feel like it's all downhill from here. 
OKKEN: Yeah. Apparently, people that don't listen to our podcast. 
KENNEDY: That's right. Our listeners know better. There's a lot of these examples. We've got all the new frameworks that are exciting, but we also have Django 2 dropping support for Python 2. The newest version of Django is only going to be Python 3 only and things like that. It's really starting to pick up speed. 
OKKEN: That comment there was interesting is that a lot of new projects start on Heroku, so it must be people starting out a project and then later grabbing different server solutions or something. 
KENNEDY: I haven't done a lot with Heroku, to be honest, but I think it's really simple to basically just wire up a git repository, do a push to it and it'll just start running your app magically. So, it's really easy to get started and then maybe as you grow, maybe costs become a concern, or you just want more control or whatever. But it's super easy to get started, however you get started, on whichever version of Python is probably where you’re going to stay so that's good news.
OKKEN: Great. Well, cool. 
KENNEDY: Very cool. That's it for the news, Brian. You got anything else you want to share? 
OKKEN: No. So, wow, number 30 in the can, almost.
KENNEDY: 30, yeah. That’s awesome.
OKKEN: I’m finishing up the last chapter this week, chapter 7, for Python testing. So, that's going to be done soon. 
KENNEDY: Very cool. One of these days the book will be a thing that you've done in the past instead of a constant job of yours.
OKKEN: Yeah. I can’t wait until it's an actual physical copy so it will be good to have a stack of copies with that. 
KENNEDY: Yeah, that's awesome to hear you’re making progress. Thanks for covering the news with me. 
OKKEN: How about you? Do you have like now four months of podcasts ready? 
KENNEDY: I have about three months of podcasts that I recorded. I'm going to go on vacation for a while in the later half of the summer, so I'm trying to make sure that everything is going to be smooth and no interruptions. So, I have, I think, 13 or 14 episodes of Talk Python already recorded. There's tons of interesting stuff. I'm really looking forward to sharing. I don't want to hold it back, I've got to dole them out a week after week.  
OKKEN: How about this and as for this podcast? We haven't really decided yet, but if we do a break we’ll definitely let people know before that happens, so that they're not just hanging out there waiting. 
KENNEDY: Absolutely. We'll try to keep it rolling but we might miss a week or two with some trips there this summer. 
Alright, well thanks for sharing news with everyone and thank you to Datadog. Get your t-shirt, pythonbytes.fm/datadog. 
Thanks, Brian. See you next week. 
OKKEN: Thank you. 
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. 