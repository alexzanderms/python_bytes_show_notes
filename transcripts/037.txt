PYTHON BYTES TRANSCRIPT
Episode #37: Rule Over the Shells with Sultan
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #37, recorded July 31st, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve got a bunch of sweet stuff lined up for you.
Brian, let’s talk about contributing to Python. If there’s something in CPython itself we want to change and we don’t like how it works, maybe we can just go change it. It is Open Source, right?
OKKEN: Right, it is Open Source. There is and has been a developer’s guide for a long time for CPython, but the URL has changed recently, I think I saw that recently. But it’s at devguide.python.org. I bring it up mostly because the URL changed and I like that URL, but also it is how to contribute to Python. I was looking over the initial page where it drops in there’s some really cool links in there. One of them is just for everybody. It’s “How to Contribute to Open Source’ and another one is “Building Welcoming Communities” and those are both at opensource.guide. They’re pretty good articles.
I also liked basically the structure of some of the “Getting Started”. I think it’s a good onboarding thing. Even if you’re not going to contribute to CPython, I think it’s a nice outline of things to include in any large Open Source project to try to get people onboarded fairly quickly.
KENNEDY: Yeah, for sure. We’ve got, ‘Here’s how you propose changes to Python itself’, they’ve got some nice things that take you through the whole GitFlow style, the life cycle of a pull request, running and writing tests, talking about coverage. There’s a lot of good stuff here.
OKKEN: Yeah, and talking about the issue tracker. Apparently, there’s an expert’s index, which is kind of neat, like who do you send issues to. And even things like how to run the tests and stuff. It’s nice.
KENNEDY: Yeah, very nice. Cool, so if you have an idea for CPython. That thing is still changing a lot. We just covered recently the 3.6.2 changes and that was pretty extensive for just a little tiny release, basically a maintenance release.
So, how would you like to rule over your shell, Brian?
OKKEN: Rule over my shell? Yeah, sure.
KENNEDY: In fact, not just ruling over your shell, but over many of the shells. Even the shells that are in outer kingdoms. So, the thing I want to talk about next is called Sultan, and it says “Command and Rule Over Your Shell”. Basically, you can run shell commands using this library, this package called Sultan, in a Pythonic manner.
The simplest thing, like let’s suppose you want to install Tree, so you can type tree and you get this cool ASCII hierarchal view of your files. And you would just say, ‘pip install Sultan’ then you would say create a Sultan object, sultan.sudo(yum install -y tree).run and it will actually go and run that command as sudo on your system. That’s pretty cool.
You can do things like work with aptitude or yum or ls, all the shell commands. They also have a way to work with it inside a ‘with block’, a context manager, so that it will clean up with itself. It runs a slightly different command that I think has some sort of better cleanup. I don’t actually know all the details with yum.
It’s pretty cool. It even works remotely so I could say sultan.load and give it a host name and do that as a sudo, and then run that remotely on the server. If there’s any errors, it brings all that information back and prints it out for you, the warnings, I think.
OKKEN: I think that’d be useful, I’m thinking right off the bat some of the automation stuff that large projects have, like build scripts and whatever. I’d like to have it in Python but sometimes I don’t really know how to do it within Python itself, but this is kind of neat. I’ll have to check this out.
KENNEDY: Yeah, it’s pretty cool. I think it’s pretty focused on the use case that people have running stuff over SSH, remote servers, a lot of shell stuff. But if you find yourself doing that a lot and you want to do more of it in Python, here’s a pretty cool library. It’s pretty simple.
OKKEN: What is yum?
KENNEDY: Yum is a package manager. I don’t remember which distribution it’s for but, like Ubuntu has Aptitude, apt-get, yum if for some of the other distributions.
OKKEN: Okay, got it. I probably just haven’t run into that yet.
KENNEDY: It’s tasty.
OKKEN: (Laughs) Okay.
Next I want to talk about a tool that helped me a lot recently. I’ve been working on the book, which I’m not working on it anymore because it’s turned into my editor. But I’ve been using Sublime to write it, and write all the code for it. But one of the things I wanted to do was, I got harassed by not being PEP8 compliant in a couple places, so I wanted to quickly go through and just check everything.
Of course, I can use Flake8 on the command line, but once I know there’s a bunch of files with errors, what’s the fastest way to go fix them? For me, it was a Sublime Text plugin for lint. I know there’s a lot of Sublime Text linters out there, but this one did everything I needed it to do, just right off the bat and it was super easy. You just installed it and it worked, so I highly recommend Flake8 lint.
It’s got Flake8, of course, and it’s also got pydocstyle and some conventions, import-order and stuff.
KENNEDY: Yeah, I think having these automatic tools make tons of sense. Your editor should do as much of the work for you as possible, so definitely a good recommendation there.
OKKEN: One example is, I would bring up, if I knew there was a directory with a bunch of files that had problems, I would bring up a file. The default I would never change, the default is just to check it on save. When I would save the file it would check everything and then also pop up a pop up window with all the errors. I could just hit enter, it would take me to the very first error and I could just walk through the the errors. It was great.
KENNEDY: Nice. And it’s not just purely following the PEP8 rules. For example, it has Cyclomatic_complexity checking, which is pretty sweet. That’s like, ‘Hey, I’ve got a highly nested, 500-line method. What’s wrong with that?’ (Laughs) It only has 20 if blocks, loops, whatever; it would complain about that if it goes over 10. That’s cool.
So, how would you like to travel time and be sucked into say, a magic wormhole?
OKKEN: I’m pretty excited to hear about Magic Wormhole.
KENNEDY: Magic Wormhole is pretty cool. Maybe you guys have hear of this. So, the problem Magic Wormhole is trying to solve is, ‘I want to get things, be this text, be this a small file, be this a huge file, from one computer to another safely. So, encrypted in a way that other people can’t get to and things liked that.
Magic Wormhole is basically a command line thing, where you just type wormhole and it will come up with a code that your computer has. So, you say, ‘Create a wormhole and send this file.’ It will come up with a code and if you give that code to someone else, they can run wormhole receive on their command line, enter that code and then over an encrypted connection that will automatically connect the two computers, even if they both have firewalls blocking it. There’s like some sort of intermediary server that will link them together. And it will just do this, from what I understand, in an encryption between these two things. So, if you need to get something and you don’t want to put it somewhere public like Dropbox, or you don’t want to put it somewhere that’s hard to erase or is hard to actually physically transfer like a USB drive, you can Wormhole it. And there’s even a PyCon presentation on this at PyCon 2016, so you can check it out.
What do you think about that, Brian?
OKKEN: That looks pretty cool. I don’t think I’ve got a use for it, but I want to have a use for it.
KENNEDY: I know. Well, suppose you want to get something to some server you’re maintaining, say you’re on vacation and you want to send something back and you don’t want to send it over Dropbox, I can see some good uses for it. They talked about things like, here’s a way that you might be able to share SSH keys that you don’t want to put anywhere, but you’ve got to get them somewhere, things like that.
It’s pretty cool. One of the things I thought was a nice touch was the codes are short and human pronounceable. They had some nice examples. They one that they had as an example on the website is 7-crossover-clockwork. So, pretty long password if you will, but also you can tell it to someone over the phone. The idea is, this is when you have the ability to communicate with a person, but your computer and their computer don’t necessarily have a way to directly connect.
OKKEN: Great. So, you have to email them the secret code or something non-secure.
KENNEDY: Exactly. (Laughs) ‘I enable you the ISO. It’s only 3 gigs (GB), I’m sure it will be fine.’
And finally, there’s actually an API that’s part of this, so it’s not just a command line tool, you can actually make Wormhole capabilities in your own applications by importing the library.
Now that’s sounds even more fun. I don’t know what to do with it but it sure sounds fun.
OKKEN: It sure does, yeah.
KENNEDY: So, take us back to some fundamentals. One of the things I think we don’t do enough of as developers is virtual environments. What do you think?
OKKEN: It’s one of those things that I forget that it’s hard to figure out the first time. So, if you’re not using virtual environments, you need to be. There’s an older tutorial, but this is from realpython.com and it’s, “Python Virtual Environments: A Primer”. It covers what they are, why we need them, how to use them, of course. And then it also covers a few extra tools that a lot of people use like pyvenv, that came with Python 3.6, and virtualenvwrapper.
I point to it because this article is a pretty good description of why we need them and what they are. If you’re not understanding why you need them, this is a good document to talk about it.
The thing that I ran into recently is, I was trying to help somebody and install something. It turned out the problem that they were having was they were not using virtual environments and when they would pip install something, they weren’t able to import it from within the tests. The problem was that their pip was pointing to a different Python, the Pytest was using a different Python. So, when you pip install something, it goes in the site packages for that version of Python, not for all Pythons. So, his pip was 2.7, and it goes into 2.7 folder than.
For me, that’s one of the main reasons why I use it, because once you use virtual environments, your pip and your Python and your Pytest and everything are all using the same Python and they don't get confused.
KENNEDY: Yeah, it’s great. I use it a lot to make it very clear what versions a particular web app of mine is running and what I need to deploy and things like that.
It think your point about, it’s easy to forget why this should ever be hard, it’s just second nature for those of us who’ve been doing it for a long time but your example is perfect. Helping someone out who is somewhat new, it’s like, ‘I thought Python was simple. Why is this not working? What is this?’ That happens all the time.
OKKEN: And all the extra stuff, like virtualenvwrapper and py environments and all these extra things, those are great for the people who work with them. But if you try these out and they don’t work for you, it might not be your fault. Or maybe it is, but I haven’t been able to get any of these extra things to work. I tried virtualenvwrapper, it’s never worked for me, I don’t know what I’m doing wrong. Just the straight virtual environments work great, so that’s what I use.
KENNEDY: That’s cool. Nice to have a little reference there.
So, the last thing I want to touch on is an interesting article that actually highlights a couple projects. I think there’s four projects it highlights. The idea is Rust, the programming language from Mozilla, is a pretty interesting alternative to C. It’s kind of a systems level programming language like C is, but is has a type system, it helps eliminate memory leaks, it has proper interfaces, it has better inference, better support for concurrency, better support for first class functions, those kinds of things. So, compared to C, it’s a pretty nice language. And so, when you think of a lot of the important Python packages, many of their important internal low-level pieces are written as C extensions, right?
OKKEN: Yeah.
KENNEDY: So, could those be written in a better language than something like C? How about Rust?
So, here’s four projects that make it easier to implement what would be the C extensions, the native, compiled, hotspot type of code, but do it in Rust instead of in C.
The first one is Rust-CPython. So, that’s an interesting description of what it is. It’s A set of bindings in Rust for the CPython runtime. It allows Rust to connect to CPython using its application binary interface (ABI) which is a Rust thing. You can run Python programs from Rust or work with the representation of Python objects directly in Rust. So, this is for if you’re a Rust programmer and you want to hook into CPython and control of from the outside.
There’s PyO3, which is a way for people to write Rust software with bindings to Python in both directions. So, a Rust programmer can interface with Python objects in the Python interpreter and it connects Rust methods to the Python program the same way like a C module does. That’s pretty cool.
Then there’s Snaek, which is an early stage project but it lets developers create Rust libraries that are loaded dynamically into Python as needed and they don’t have to be statically linked against Python’s runtime, which is kind of cool. I think it pulls it off using CFFI, which is the C interop layer for PyPy, the alternate interpreter JIT compiler for Python, rather than CTypes. So, if you don’t have some old library that is based on CTypes, like say C and you want to upgrade, this might be a pretty sweet option.
Finally, there’s actually a cookiecutter template and it says, ‘The goal of this project is to be able to produce a binary distribution, a Wheel, which will not require the end user to actually compile the Rust code themselves.’ Which everyone would appreciate that, right?
So, here’s a bunch of cool options if you’re like, ‘I really don’t want to write this in C, but it probably should be written not in Python, in some other way.’ Maybe try Rust if you want to check that out.
OKKEN: That actually looks pretty cool. Have you done any Rust yet?
KENNEDY: No, it’s one of the languages I want to learn that I’m kind of intrigued by. I looked at Go a little while ago. I’m not a huge fan of Go, but people compares these a lot. I want to check out Rust, I think it’s pretty different than Go.
OKKEN: It’s definitely something on my To Do list, too.
KENNEDY: Do you guys have any used for Rust with all the hardware stuff you’re doing?
OKKEN: I’m sure we could invent some reason to use Rust.
KENNEDY: Perfect. How about you, any personal news?
OKKEN: Just that I’m not writing anymore.
KENNEDY: Congratulations, that’s awesome. How does it feel?
OKKEN: It feels incredible. To go from, ‘I’m writing a book’ to ‘I wrote a book’ is great.
KENNEDY: Was your wife and kids like, ‘Hey, there’s some random guy in our house! Oh, wait, no, it’s Brian.’
OKKEN: (Laughs) No, I try to limit the writing to obscene things like early in the morning and late at night.
KENNEDY: Yeah, punish yourself instead of your family.
OKKEN: Exactly.
KENNEDY: Well, I am packing my bags and I am going on vacation. So, either we might be a little bit intermittent or there’s some talk that we might have some guest co-hosts coming in here.
OKKEN: We’ll see. If you don’t see some podcasts in the next few weeks, don’t worry, it will come back. But you might see them anyway, with some new faces.
KENNEDY: Yeah, that would be awesome. So, either way, great chatting with you, Brian. Thank you for listening.
OKKEN: Thanks.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. Get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.