PYTHON BYTES TRANSCRIPT
Episode #40: Packet Manipulation with Scapy
Brian OKKEN: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #40, recorded August 21st, 2017. I’m Brian Okken. We have a guest host again, filling in for Michael (Kennedy), while he is still on vacation. This week we have Eric Chou.
Did I pronounce that right? Is it Eric (sounds like) Choo?
Eric CHOU: Yeah, I usually pronounce it Eric (sounds like) Ch-oh,
OKKEN: Oh, okay. Eric has agreed to do it with us. He’s the author of the book, Mastering Python Networking and a self-proclaimed, “network automation nerd”. Let’s jump in with Eric’s first topic.
CHOU: Hey, Brian. It’s good to be here. As you mentioned, I recently finished my book and in the book I introduce about a dozen or so Python tools and modules. I thought this would be a great chance to introduce three of the top ones, my go-to modules that I mention in the book so that I can share with everybody if they prove to be helpful for other people.
OKKEN: We have links on the show notes but you also have information about these in your book as well.
CHOU: Yeah, totally. So, for example, the first tool is Ansible. I actually spent two chapters in the book on Ansible, first just kind of introducing and the second would be more advanced topics, and so on and so forth. These are the ones that I kind of live by. The book is a reflection of the experience I have.
OKKEN: Okay, great. Let’s talk about Ansible.
CHOU: Yeah, sure. So, if you’re – I know we chatted a little about ops and so on – if you’re involved in operations in your company, you’ve probably heard of Ansible. It’s a general purpose automation framework, not just for networking equipment, but it can automate both servers, cloud operations like Azure and AWS, through what they call the modules in their “playbooks”. It’s a good framework, especially for network engineering because it has the most vendor support. In the network engineering world, the tool kind of lives and dies by vendor support. Ansible has the most support because it’s agentless and they can execute locally calls to APIs on the remote network devices, which therefore allows a lot of flexibility, allows the vendors to shine and so on.
OKKEN: That’s cool. And Ansible is written in Python? That’s neat.
CHOU: Yeah, it’s written in Python. That’s another thing that’s great. You obviously start out as a user of the tool, but if you know a little bit about Python, you can actually start contributing to the modules rather quickly. So, I’m a network engineer by nature and I don’t write a lot of code, but I was able to write modules for it rather quickly.
OKKEN: But you can also drive it obviously from Python scripts or Python modules to control your Ansible tool chain? Or is it something you use outside of that?
CHOU: The heart of the tool actually revolves around playbooks. So, they have this playbook and that is in the YAML format. In the YAML format you can actually specify the modules that you want to use. For example, if you want to use Cisco iOS for NTP configuration. So, you use the iOS command module and within your playbook you only have to specify the parameters for your NTP server IP address. That allows you to quickly spin out and be a user of Ansible, but the iOS command module, that is running in Python.
If there’s a module that you want to use but it does not exist, you can just go ahead and write that module. For example, for me, I work for A10 Networks and A10 Networks didn’t really have a lot of modules so I went ahead and put one of the modules into our latest API and so on.
OKKEN: Okay, cool. Well, thanks.
I’m going to jump into an article that I found and I like the topics. The article is “Python Practices for Efficient Code: Performance, Memory and Usability”. I’ve got to preface this that I’ve got a lot of opinions about some of this stuff but it’s not meant as a disrespect to the author, Satwik Kansal.
It’s got 6 different practices that he talks about, I’ll just list them off. Try not to blow off memory, whether you use 2 or 3, write beautiful code, speed up performance, analyze your code and testing and continuous integration.It’s a pretty short article but it’s a really good overview of a lot of things that you should care about when you’re getting serious about code.
First off, the memory bit. I think it is important to talk to people about using generators when they’re using large data sets because that’s something by default. My brain doesn’t think generators right off the bat, so making sure that generators are used for big things, big number crunching use Numpy. And a little bit on using classes and strings. He mentions don’t use + for formatting large strings. I just don’t see that that much. His recommendation for classes, if you’re going to use classes use slots. And I say, just use attrs is you’re going to use classes, because attrs is awesome.
Python 2 versus Python 3. He kind of goes on this a lot but I guess I just say, use Python 3 unless you really have to.
Writing beautiful code, he has a lot of good reasons, I think, for why you should because you’re writing for other people as well, not just yourself. I use to be like, everybody should learn how to read other people’s code but now I think it’s a maintenance cost thing. And maybe it’s my foray into management, but just picking a style, sticking with it, using static analysis, it’s a cost thing; it’s going to save you money.
The next couple topics, I can’t really talk about too much. Speed up your performance, multi-processing versus multithreading. I’ve got to admit that I don’t really use either in most of my Python code so far.
And then analyzing your code with cProfile and memory_profiler and stuff. I haven’t done enough of that to really comment.
And then the last bit, testing and continuous integration (CI), I really appreciate that he links to pythontesting.net and some of these tutorials. That’s awesome. But I think for testing, the shorter answer is use pytest.
I didn’t really tell you all about what his thoughts are but it’s a well-written article so go read it.
CHOU: Yeah, I agree. I read it and I totally agree with your point about Python 2 and Python 3. I’ve read studies on how much users were on Python 3 and Python 2. It seems like last year we reached the infliction point where most users are starting to write their new code in Python 3, as opposed to Python 2. I don’t know if you agree or not.
OKKEN: Yeah, I think so. And also, a couple years ago there was a problem with some really crucial projects and packages not being available for Python 3, but I think that’s totally changed. I think it’s just some of the little corner case things that may not even be being used on new projects anymore that are Python 2 only.
CHOU: It seems that once Django moved over, it’s like the world is wide open now.
OKKEN: Yeah, and I think that has a lot to do with a lot of new people are just following the tutorial and the default. I think the next hurdle will be trying to get all of the default distributions and even Mac to ship with Python 3 instead of Python 2. That’d be good.
CHOU: Yeah, good luck with that. (Laughs) I think that Ubuntu 16.04 ships with 3.4. I forgot, when you type in Python does it come up with 3.4 or 2.7?
OKKEN: On my Mac it was 2.7 but I’ve had this Mac for awhile so I’m not sure.
That’s all I’ve got on that one. I’m actually pretty interested in this next tool that you’re going to talk about, so let’s jump into that.
CHOU: Yeah. So, the second tool I want to mention is the Scapy program. It’s a Python-based interactive packet manipulation and library. You can use it both in interactive mode, where you can just kind of Fuzzing and trying stuff out. Once you’re happy with it, you can write a program and reuse it.
The biggest difference between Scapy and other tools, and I’m just going to be mainly security-focused, so I say hping3 for example. The biggest difference between Scapy and hping3 is that for Scapy, your crafting a packet from the ground up. So, you’re not really limited to the features and functions that are provided by the program itself. For example, using Scapy I was able to write a malformed packet using IP version 3 in the packet and see if it passes through my network or of it crashed my infrastructure  or servers or anything like that. It’s mainly a very much security-focused tool for me. But I could imagine other people have other use for it. On the tutorial for Scapy, and it’s in the show notes, it shows how to use Ping of Death where you have a large payload of the packet and that’s a Ping, see if it crashed your host. It’s pretty much an outdated vulnerability but who knows. Some new service comes out and will still have this vulnerability. You have your Land Attacks and so on and so forth.
There’s a lot of useful things that you can test with and just Fuzzing or TCP scanning and stuff like that.
OKKEN: This is actually awesome. I can’t wait to play with this. And in testing and stuff, being able to muck with [9:56 SOUNDS LIKE] 8 or 211 frames. Yeah, this is great.
CHOU: Yeah, and it’s been around for a while. I think if you’re running something quick and something that’s already included in say, hping3, go ahead and just use hping3 because it’s quick, you don’t have to spend all this time crafting your packet. But for the 20% of stuff that you really need to clamp down on what you want inside of that packet, either through the header or the payload, Scapy is kind of your go-to tool for that, and it’s based in Python. Use the Python shell to interact and play with it, that’s even better.
OKKEN: I’ll definitely have to pass that along to some of the people I know.
CHOU: Yeah, let me know how it goes.
OKKEN: I wanted to talk about Headless Chrome which I haven’t actually played with, but I just heard about it because Miguel Grinberg wrote a post on using “Headless Chrome with Selenium”. With testing web applications, it’s a common practice to use Selenium in Python but usually a lot of people are using Firefox as their default browser to interact with a website.
He starts off with an example that does use, I think, Firefox. Yeah, he starts off with a FIrefox example and then shows how to change it. He’s using unittest; I have to get on him about using pytest more. But using a Headless Chrome, the nice thing about that is you don’t get the dialogue window or the window pop up all the time when you’re running tests. So, the magic trick I guess is there’s an option to Selenium. With the webdriver you pass it a headless option. Like I said, we’ve got a link to Miguel’s post in the shownotes and he just shows you how to do it.
CHOU: Yeah. I’m a big fan of Miguel’s work. Obviously, he did the Mega-Tutorial on Flask and I learned a lot from that and also backed his Kickstarter campaign that’s going to come out next year when he’s revising his Mega-Tutorial. I definitely recommend, anything he publishes I recommend, go read it. (Laughs)
OKKEN: Yeah. He’s a super nice guy, too. He was the only person in Portland (Oregon) that I knew was going to EuroPython. He took a bunch of rocket stickers for the pytest book. He just carried them over there with him so I could have them handed out there, so that was cool.
CHOU: Yeah, I saw him at last year’s PyCon in Portland, but I was just too shy to go up and say, ‘Hi.’ (Laughs) Maybe next time I’ll say, ‘Hey, Miguel.’
OKKEN: You should. He’s a super nice guy. He’s pretty under-spoken. He won’t go out and tell you how awesome he is right off the bat, but we all know he is.
Again, looking at this list, it’s kind of fun getting new people in to talk about things. I love graph visualization tools, so tell me about Graphviz.
CHOU: Yeah, so as a network engineer, it seems that we spend a large chunk of our time, and rightfully so, it’s part of our job to document the network. You spend a lot of time drawing the graph. Whether your choice of tool is a Visio or the OmniGraffle, you spend a lot of time diagramming the network. By the time you’re done, it’s almost the case that your graph is outdated. The network access just grows and you either add a new vee LAN, you add a new box or just whatever it is that, because you take so long to automate it, you’re actually manually graphing these network diagrams.
So, this is an especially big problem with the data center being bigger. Now you have what they call the factory network where the middle is huge. You have server to server communication as opposed to server to client communication. So, this huge network presents a big problem because you’re having hundreds of links between each of the network layers and doing it manually is just not an option anymore.
A couple years ago I went out and started thinking about trying to come up with a solution and Graphviz is what I saw where you could actually describe your network in terms of a text file. I would, in terms of nodes and edges, say, ‘These two nodes should be placed together at the very top tier and these four nodes would be in the middle tier and they should line up and so on and so forth. Graphviz is a great tool for doing that. There’s a Python module that’s also named graphiz that allows you to come up with what they call a (dot) .file, where you use the Python module and you generate this .file, you run it through graphiz and voila, you have this beautiful graph that is up to your liking. So, the only thing – I guess it’s me that didn’t learn it enough - like coloring the graph. Say if I wanted to color all the spine boxes or I want to color all the leaf devices a certain color, I still haven’t learned how to do that. Sometimes when I do need that colorization, I launch OmniGraffle Pro and I can import that graph and color it to my liking. It’s an awesome tool. It allows you to automatically generate your graphs so it allows you to have less of a drift from your actual network versus your diagram.
OKKEN: Okay, nice. Actually, I didn’t know about the Python module for it or the package to use it. Python’s graphviz has been around for a long time. Working with the .file is pretty easy. It still is something that I’ll still learn. Yeah, I’ll have to check out the Python package, because that’s pretty cool. I like that.
CHOU: I think if you want a quick graph you can use matplotlib and you just quickly draw that graph. But graphviz is, to me, the most powerful. I know a lot of companies use that for drawing their eye candy kind of graphs. You’ve seen the Facebook graph where there’s lines all over the globe and so on. That’s the kind of graph that graphviz is capable of doing really quickly.
OKKEN: I don't know if those are helpful, but yeah.
CHOU: (Laughs) Helpful for marketing materials.
OKKEN: Yeah, some of the automated code processors use it for drawing class hierarchies and stuff.
CHOU: Right. And in a shameless plug for my book, I use an example where you’re inside and you use your Python script to go curry your network devices and basically say, ‘Tell me who your neighbors are.’ And you just kind of walk layer by layer and construct a graphviz file that represents your network in real time. So, every time you execute that script it will give you the most up-to-date network graph automatically. I think that’s a good use case for the tool where, like I said, the biggest problem that I face with network graphs is there’s always this drift between the actual network topology versus the graph that you present. If the graph is wrong, nobody is going to use it.
OKKEN: I just remembered a cool example of the .files. One of the projects I work on, one of the things we log is basically a running state machine example, an internal state machine that is a state machine as it’s running and where we are currently. That’s being output as a log file in the dot format so whenever we get a crush or something we can take that log file and just throw it through graphviz and see exactly where we’re at visually.
CHOU: Even a manager could understand it. (Laughs)
OKKEN: (Laughs) Yeah, like me. Cool.
Last topic I’d like to bring up is PyCascades. This is a new thing this year. I think I’m going to get it wrong but I think it’s a whole bunch of different Python groups in the area, coming together to try to do a regional Northwest Python conference. It is in January. It’s January 22nd 23rd, then they’re going to do Sprints the 24th.
But I like the format. I like what they’re doing. The tickets are not very expensive. I think they’re like $100 or something, they’re not bad. It’s in Vancouver, BC, which
even though I live in Portland I’ve never been there, so I’m looking forward to going.
The Call for Proposals (CFP) for talks is the 28th, so that’s the Monday. When this comes out, people will only have a couple days but I think there are still slots open, so please check it out. If you want to do a local talk I think it’s good. The talk slots are 25 minutes which I think is good. It’s a nice length. I think that anybody who has expertise on nearly anything at your job, 25 minutes shouldn’t be too hard to fill. I’m going to submit a couple talks and I encourage anybody else too as well.
CHOU: Yeah, so Vancouver is about three hours away from me as well, so I have to check it out. I’ve never been to the PyCascades but it seems like a good format and like you said, tickets are cheap.
OKKEN: It’s the first one this year.
CHOU: Oh, okay. Got it.
OKKEN: That’s our six topics. That went by really fast.
Tell me a little bit about what’s up with you. How long has Mastering Python Networking been out?
CHOU: It’s been out since June 28th, but only the digital version was out so I think you could start ordering a physical book like, mid-July. So, it’s been out for a month and a half. I’ll have the link in the shownotes, go check it out if you could. I really appreciate any feedback, any criticism, good, bad, ugly, whatever it is. I’m open to it. I appreciate that.
So, what’s happening with you, Brian?
OKKEN: Well, this last week I got the copy editing changes for the pytest book back and I just got those in yesterday. That’s going to be out and I’m so excited to get the physical copy out.
CHOU: Yay!
OKKEN: The physical form will be out in October. There’s like one minor tweak I’ve got to fix tonight. Other than that, my hands are completely off. Hopefully. I keep saying this every week. But once it goes in past copy editing and through the rest of it, the author doesn’t get to interfere with the process until it comes out as a hard copy.
CHOU: So, from start of this project to this point, how long did it take for you?
OKKEN: That’s a long answer but my interaction with Pragmatic (publishers) started June of last year. June 2016. So,  a little over a year but I think the first four or five chapters, I think I rewrote those like, four times to try to get it right. Initially, I was coming along the same lines as the tutorials I have on pythontesting.net but trying to understand how to write in a book format instead of a blog format is a learning experience for me. But still, even after doing all that, looking back a year isn’t all that terrible.
One of the other Python authors is Luciano Romalho. I wish I knew which book he wrote. He’s one of the reviewers and his feedback was really influential but added two or three weeks of my work.
CHOU: For me, I think the biggest issue was, not on myself but on the people around me, it’s almost like I have to be focused on the book, so my family has to go away. My wife has to take up the burden of taking the kids away for the duration of writing the book. It was both a draining experience but I’m very excited for you. When you see that paper copy, you’re going to be like, ‘Yay!’ (Laughs) It makes it real.
OKKEN: Yeah, it’s definitely going to be cool. Like you said, trying to find time in your life and trying to get distractions out because like you I’ve got a full-time job and kids and family. It was quite a few late nights at the coffee shop trying to get away from everything but it will be out.
So, that’s all we’ve got for today. Thanks a ton for helping out, Eric. We’ll keep in touch.
CHOU: Absolutely. Thanks, Brian. This has been fun.
OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. Get the full shownotes, including links at pythonbytes.fm. If you have a news story you’d like featured, visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. This is Brian Okken. On behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.