PYTHON BYTES TRANSCRIPT
Episode #41: Python Concurrency From the Ground Up and Caring For Our Community
Michael KENNEDY: Hello and welcome to Python Bytes where we bring Python news and headlines directly to your earbuds. This is episode #41, recorded August 30th, 2017. I’m Michael Kennedy and yes, I’m back from vacation. Thank you, Brian Okken, for covering, and all of our guest co-hosts.
It’s time to immediately start repaying Brian for his keeping things rolling while I was gone. He’s in Germany for some business and we have a new guest co-host. Welcome, Miguel Grinberg.
Miguel GRINBERG: Hello and thank you for having me, Michael. Happy to be here.
KENNEDY: Yeah, I’m happy to have you here. It’s going to be fun to talk about th items you’ve chosen for the week and what I’ve got as well. Let’s kick it off first by saying thank you to Rollbar, who is bringing you this episode, so check them out at pythonbytes.fm/rollbar, and get some good monitoring for your app. We’ll talk more about that later, but let’s jump to your first item, lolviz.
GRINBERG: I’d like to call it el-oh-el viz, but actually this is not anything to laugh about. This is a Python package that generates graphical representations of frequently used Python data structures. So far, they support five different structures anyone of them is a list of lists, which gives the lol name to the package. They also support dictionaries, lists, linked lists, and binary trees. They basically use graphviz, which you need to install on your machine, to generate these graphical representations.
One of the coolest things is that it integrates with Jupyter, so if you’re doing this from a notebook in Jupyter, then it will run these graphical representations right in your prompt. So, it’s super cool, especially I imagine for you and for me, people who use to teach Python having used this myself.
KENNEDY: Yeah, so am I. This can definitely be used to help people who are new to these data structures and new to these ideas and honestly, new to the concepts of pointers and reference types at all, I think it’s really great to learn it.
GRINBERG: The link list one is particularly interesting to help people who are not familiar with pointers, to visualize how that works.
One thing I need to mention is that if you try to pip install this in Python 3 today, it’s going to fail. I submitted a bug and the author told me that a fix is coming pretty soon with additional features. So, I’m glad to hear that he’s responsive and he’s working on more improvements.
KENNEDY: Yeah, this thing came out really recently. I don’t remember how old it is but it’s all quite new, like a couple of days and it’s already got 200 stars on GitHub and it looks like it’s going well.
GRINBERG: Yeah, it’s going pretty well. I see a bright future for it.
KENNEDY: I do as well. So, if you are out there teaching Python and you’re trying to help people understand pointers, data structures... Even if you’re not teaching it, I think looking at some of the different representations of these data structures that it draws is probably helpful for people who haven’t really thought a lot about it as well. It’s worth checking out.
Moving from visualizing different data structures to transforming data structures, the thing I want to cover first this week is Odo. This is a listener recommendation, as was lolviz. So, Odo migrates data between all these different formats. It knows how to read, let’s say, a Panda dataframe and then convert that to a MongoDB table or collection and save it, just like that. It’s literally one line like, ‘Odo, here’s your dataframe. Go to that database.’ Or, ‘Here’s your Postgres, go to CSV or reverse.’ If you find yourself pulling in data from one source and trying to convert it or save it, more or less, in the same shape, over to another source, then check out this thing called Odo.
GRINBERG: I wonder if it takes a list of lists, an lol, and writes a CSV file. That would be something that I could find useful tons of times.
KENNEDY: Yeah, absolutely. That would be really cool. It does take lists and transform them. I’m not entirely sure how flexible it is in that regard, but I think there’s also extensions, so you can write extensions.
Just to give you the rundown, it will work with Panda dataframes, with a list, with JSON files, CSV files, Postgres. So, you could take a CSV file, load it into Postgres, or Postgres into JSON. It even works with converting into MongoDB, like I said, like Pandas to Mongo or reverse. Not a whole lot more to it then that, but it seems really handy if that’s the problem you’re trying to solve.
GRINBERG: Very nice.
KENNEDY: So, tell us about concurrency. You chose this item and it’s not exactly new but it’s certainly something we haven’t covered and it’s really amazing. I agree with you that this is one of the really interesting things to cover in concurrency.
GRINBERG: This is a PyCon talk from a couple years ago, from the one and only Dave Beazley. I mean, who else, right? As a speaker, I found it interesting. Not only the content but also the way he presented his talk. This is a live coding session and the entire thing is Dave’s terminal. There are no slides and he’s speaking while coding and starts from an empty file actually. He codes everything in the talk.
KENNEDY: He just fires up Emacs and says, ‘Let’s do this’, right?
GRINBERG: Right, yeah. Just two or three terminal sessions, one with Emacs and the other two with Bash. It’s done all there. He goes to cover concurrency and the different ways you can do concurrency, with threads, with processes. He shows all the columns with both approaches, how the global interpreter log misses all this and complicates things. Then in the second portion of the talk, he goes and builds an asynchronous framework, pretty much like asyncio, a small version, minimal version, using Python generators without any other additional libraries, all in Python standard code. It’s pretty amazing. It’s only 45 minutes. The amount of knowledge that’s seen in those 45 minutes is unbelievable.
KENNEDY: Yeah, and I really love the style. Well done, David. Certainly the style of, ‘We’re going to build this up from scratch. I’m not just going to show you a bunch of slides and talk about it. I’m going to show you how it’s built.’ It really makes it feel accessible. You’re like, ‘Well, if he could literally do it from scratch in 45 minutes. I saw everything that went into it, it was pretty understandable.’ It really is well done, if people are thinking about Python concurrency or generators or asyncio and all these things.
GRINBERG: It’s even good for networking because he builds a little server. He doesn’t even use anything like Flask or Django. He builds a little server using, he calls it, “the socket framework”, just using network sockets.
KENNEDY: Yeah, that was like part of the devo. It was just like part of it, right?
GRINBERG: Yeah, it’s super awesome.
KENNEDY: If this sounds interesting to you, be sure to watch that video. It’s on YouTube and we’ll link to it in the shownotes. You’ll learn a bunch, especially conceptually what’s going on in this asyncio stuff. Super cool.
So, before we move on to the next segment, let me tell you about the sponsor for the show, Rollbar.
Rollbar let’s you basically just type pip install Rollbar. Type a few commands either in your config file or in code in your web app and it will continuously monitor your site, your web application, for any sorts of errors. And it will not just tell you if something happened but it will capture all the details. ‘What was the logged in user when it ran into an error? Who’s your customer? Who’s having the problem? What’s the called stack? What other errors have you experienced like this? What are the local variables passed to the function when it failed?’ You can probably fix the error without even debugging it or running your code, you can just so, ‘Oh, I see what’s wrong.’
I use Rollbar a lot. I love it. If you want to check it out, check it out at pythonbytes.fm/rollbar.
Alright, so next up I want to talk about some optimizations. This concurrency stuff that you brought up is certainly a form of optimization but this is kind of the future, trying to push CPython, the main default Python implementation, further. This is an article on Medium by friend of the show Anthony Shaw, covering work that Victor Stinner has done. Victor Stinner, have you been following what he’s doing? He’s killing it on performance.
GRINBERG: Yes, absolutely. I’ve been to his talk at this last PyCon as well.
KENNEDY: Yeah, so there’s just so many things that he’s doing that are amazing and he did give some good talks at PyCon as well.  So, this project is called, “FAT Python: The Next Chapter in Python Optimization”. Like I said, article by Anthony Shaw. He basically highlights this FAT Python project that was started by Victor Stinner back in 2015. The idea was, ‘Let’s try to make it possible to apply better static optimizers for Python.’
So, one of the big challenges that you have with optimizing Python is it’s super dynamic. You can’t necessarily just look at the code and say, ‘Well, it has this structure so we're going to go and change it around’, because you can go and dynamically add methods, functions, variables, whatever. So, that makes it a big challenge.
There’s actually three PEPs, Python Enhancement Proposals, that chain together that try to make things a little bit better, that Victor is working on as part of this project. One is PEP 511, which is a proposal to add a process to optimize ASTs. ASTs are Abstract Syntax Trees, basically what Python pulls up before it starts to execute your code, right?
GRINBERG: It’s basically a tree representation of the code that you write in a form that is easier to be interpreted.
KENNEDY: Right, an object-oriented representation of what your code is going to do, not just the text. The idea is that it could be possible to have an optimizer look at that AST and say, ‘Okay, this looks like Pandas code.’ And you’re doing this particular anti-pattern that is slow, so maybe we can change things around behind the scenes and you don’t even know it, to optimize or to fix that. Maybe people run linters that say, ‘You’re doing this thing that’s not amazing. What if we could have an optimizer that would just make it fast.
GRINBERG: Right, it would just make the change for you.
KENNEDY: Exactly. The proposal is to basically create some kind of hook for creating these optimizers. It might be built into CPython, it might even be some new pip install like, ‘Pip install the NumPy optimizer, or whatever, for my runtime’, which is really cool.
That also brings us to PEP 509. Like I said, this makes it really hard to optimize because everything is mutable at runtime. There's these things called guards that verify the last time it processed this bit of the structure that it hasn’t changed. PEP 509 is a process to add a private version of dictionaries to implement a different type of guards that are much faster.
We have PEP 510, which proposes a public API to CPython for specialized code with guards for function. So, the idea is you put it together, you take this optimizer, it generates a new high-performance version. It replaces the code that would normally run with this optimized version. As long as it doesn’t change, it can run that optimized code as a fallback.
So, taken together, all three of these create this FAT Python thing, which is really great. You can download this and run it. You have to compile CPython, like a special branch of it, to make it work but the article talks about it. The results are really good. For example, a basic function that you call, it returns a string 24% faster than Python 3.6,
GRINBERG: I was skimming through the article on the PEPs and cannot find for this implementation what are the gotchas, if there are any. It doesn’t look like there are, which is great. I was wondering if any code can run.
KENNEDY: I guess the gotchas would probably be like, ‘Can the optimizer deal with it?’ And, ‘Are you 100% sure the optimizer is not going to make a change that has a behavioral change?’
GRINBERG: Right, yeah. That was what I was looking for. Are there any cases where it can make a mistake at this point?
KENNEDY: I think this is basically cracking the system open so that these things could be plugged in. But then you’d probably have to look at the gotchas of the optimizers.
GRINBERG: Right.
KENNEDY: So, it was pretty good. A 24% improvement in function call speed. That’s 46% faster than Python 2.7. That is a big deal. One of the drawbacks of Python is function calls are really slow, so people don’t necessarily break their code into small functions as they should. So, this might really alleviate that. I think it’s great.
GRINBERG: Awesome project.
KENNEDY: Yeah, keep up the good work, Victor.
Alright, so suppose I’m sitting in a coffee shop. I’m sure it’s fine if I just go log into my bank, things like that. (Laughs)
GRINBERG: Yeah. We all here that it isn’t secure to go online in a coffee shop or hotel or airport, you know, all of those.
KENNEDY: Yeah, hotels and airports scare me way more, especially hotels these days. I don’t know why.
GRINBERG: Right. Very few people really understand what’s the problem. You may think if you only access sites that are https, the most secure site you find, you’re really not completely. All the content that you transfer to this site is going to be encrypted, but there are other things that happen before you get the connection that are not encrypted. For example, DNS searches. If you’re in a coffee shop getting to a lot of sites, it’s very easy for someone in the same network to find out what sites you visit, even though they cannot see what data you transfer to there.
KENNEDY: Right, and if somehow they happen to alter that DNS, which probably has no verification because it’s unencrypted, then they send you to their Google.com site.
GRINBERG: They take you to some other place, right. It’s very important that you take security when you go on a public wifi spot very seriously. I want to mention this, too, that many times I talk to people and mention it and they don’t know it. It’s super great. It’s called sshuttle.
Typically, the solution that you’re told is that you need to pay for a VPN service. Sshuttle proclaims itself as the poor man’s VPN. A nice advantage it has over regular VPNs is that it doesn’t require any software to be installed on the remote machine, the secure machine that you use for your connection. The way it works is basically, you need to have SSH access into a secure machine. In my case, I have it right here in my home. I have a chip machine that is a nine dollar computer, or could be a Raspberry Pi, or any of those.The only thing you need there is SSH and you get it by default if you install the next distribution. And then from anywhere you are, you use sshuttle to create a secure, encrypted tunnel into this secure machine that you have in your home. Then everything that you do goes through the tunnel and it’s forwarded into this secure machine and it happens on your secure machine, including DNS searches.
KENNEDY: That’s really cool. So, if I run sshuttle, and I got to gmail.com, it will actually funnel the traffic to my Raspberry Pi?
GRINBERG: In the coffee shop, there’s only going to be a connection to your Raspberry Pi, and then the Raspberry Pi will make the connection to gmail and then forward the results back into your connection in the coffee shop through an encrypted channel.
KENNEDY: That’s really cool. Everything you do is absolutely private. That’s super cool. And it’s written in Python?
GRINBERG: It is written in Python. It recently added support for Python 3, because that used to be a problem in the past. Now it works on Python 3 as well.
KENNEDY: Nice. That’s really cool. I’m definitely going to check that out.
So, the last thing is, I want to talk about something that might initially surprise people about the topic. I want to talk about Node.js. (Laughs)
So, Node.js, while Python developers sometimes are web developers that also play with Node.js, I don’t want to talk about it for that reason. Mostly, I consider Node.js like a similar, new, modern ecosystem and environment, similar to Python. It’s very Open Source, there’s a people who are excited and contributing to it, things like that. But Node.js has been in the news for the wrong reason this week. Basically, a bunch of the people who are in charge of the steering committee for Node.js quit. Like a third of the committee quit and just said, we’re done with this because there’s been a huge rift in the community apparently. So, I kind of want to talk about this community aspect and sort of give thanks for how well things are going at Python and in the Python ecosystem relative to Node.js.
Basically, there was – I don’t want to get into name calling, you can go read the articles – but there was some guy who was on the committee who was making decisions that a lot of people disagreed with. He was very much against the code of conducts, for reasons that may or may not be valid. I don’t know. Basically, they felt like he as not representing the community well. And the way the board worked or the system to enforce the code of conduct worked was they would look at individual things. They would say, ‘Is this sufficiently bad say, to have this guy removed from being in charge?’ And they said any individual thing was not a big deal, it was not big enough to take that action, but if you add up like, ten or twenty of these things, all of a sudden it’s a pattern. A pattern of behavior that says, ‘Maybe this guy is not representing us as well as we want’ or something like that.
So, they decided not to remove the guy. A bunch of people said, ‘That’s it. We tried for a long time to fix this we’re so fed up with it that we’re leaving. We’re no longer going to be on the committee.’ Some of the people said, ‘I’m done with Node.js.’ These are former steering committee folks who are like, ‘I’m done with Node.js entirely.’ And actually, maybe the biggest thing that came out of the people on the board, they said moments after the failed leadership vote, Kate Marchan pushed the button that created Ayo.js, a new Open Source fork of Node.js.
This has happened before. There was a problem with Node.js in the community. They created this thing called Io.js. This is Ayo.js, but phonetically they’re the same, right?
So, you had some pretty interesting insights on this, I thought. One of the things that you said – first of all, give thanks that things are working better here and we seem to have a better balance – but you also pointed out that we have a single leader who ultimately decides, right? We have have Guido (van Rossum).
GRINBERG: Right, we have a single person that sets the tone for the community, and I believe they don’t. They vote on different things and many people vote, and clearly they are very divided on their roles. Some people put technical over community and clearly, some other people it’s the reverse of that. So, yeah, I think we’re lucky that at least we have a model that follow.
KENNEDY: Yeah and I think it’s really important that Guido’s open to taking feedback from all the folks involved in the community but in the end, he makes the decisions. I think, credit to him, he’s made a lot of good decisions that keep people engaged.
GRINBERG: Yes.
KENNEDY: So, here’s a Node.js item for Python Bytes. And really, the story is, look what’s going on over here and let’s make sure this doesn’t happen to our community as well.
GRINBERG: Let’s hope not, yeah.
KENNEDY: Alright, well that’s all the items for this week that we picked out. Anything else that you’ve got going on? You just did an amazing Kickstarter, right?
GRINBERG: Yeah, that was actually a little experiment. For many years I wanted to update my Flask Mega-Tutorial. The tutorial I wrote more than four years ago and the amount of work is so big that I always have to give a preference to work.
KENNEDY: (Laughs) Gotta pay the bills, kids have to go to college, things like that, right?
GRINBERG: Yeah, so I decided to give a Kickstarter a try and basically I converted that task into work.
KENNEDY: That is really cool. So, you have this Flask Mega-Tutorial that you worked on and it’s really elaborate and you basically ran the Kickstarter and said, ‘I want to update this tutorial. Who’s in on helping me do this?’ And the community really responded, right?
GRINBERG: It responded in a huge way. The modest funding that I set up for the goal was met the first day. Then from then on I decided to start coming up with ideas to expand the tutorial and add more content to it.
KENNEDY: It got funded in one day?
GRINBERG: Yes, 100% funding the first day. But then it got something like 600% funding in the end. It ended up pretty good and I have some serious work to do because I have three completely new topics to add, that I will be working on as part of this so I’m super excited about it.
KENNEDY: That’s great, congratulations. How do people find out more about this?
GRINBERG: They can go to my blog, blog.miguelgrinberg.com and they’re going to find a little Kickstarter badge there and from there they can go to the Kickstarter page and find out what I’m planning to do, if they’re interested.
KENNEDY: Awesome. We’ll put the link in the shownotes as well.Cool.
So, I just have one piece of news as well myself, other than, ‘Hey, I’m back from vacation.’ While I was on vacation, I ended up finding a little bit of time to release my latest course, which is, “Building RESTful APIs with Pyramid”. This is an eight-hour course digging into the whole, ‘What is REST? How do you work with HTTP status codes?’ and verbs and all that and making this all happen in Pyramid. It was really fun to write so of that sounds cool to you, check it out at training.talkpython.fm. I’ll probably put that in the shownotes as well.
Miguel, thank you so much for filling in while Brian’s having his beer over in Germany. I don’t know what he’s doing, but I hope he had a beer. (Laughs)
GRINBERG: Thank you for having me.
KENNEDY: Yeah, it was great.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. And get the full shownotes pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.