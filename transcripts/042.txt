Python Bytes Transcript
Episode #42: Behold: The Python 2 Death Clock
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #42, recorded September 6, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We have the band back together again. How about that, Brian? Thank you so much for carrying the Python Bytes banner while I was gone. Then I got to pay you back straight away, a little bit.
OKKEN: Yeah, it was fun listening to the one with you and Miguel (Grinberg). And it was kind of fun to talk to some new people. But I’m not ready to replace you yet.
KENNEDY: No, I think this idea, maybe every now and then having someone else drop in and give it a fresh set of topics might be cool, but it’s great to be back together.
Before we get started, I just want to say thanks to DataDog for sponsoring the show. Check out their special offer at pythonbytes.fm/DataDog which is actually really cool, you get something out if it, that’s sweet.
Let’s talk about one of the prolific Python developers out there, just in one week, what he’s been up to.
OKKEN: Yeah, I think it was last week. Kenneth Reitz has been very prolific. I don’t know of he’s got insomnia and he’s not sleeping lately but he’s put out a bunch of stuff recently and instead of spreading it out entirely for an entire episode, we’re just going to lump it all together.
KENNEDY: This basically could be an entire episode.
OKKEN: It could but, you know…
KENNEDY: (Laughs) That would be wrong.
OKKEN: That would be wrong. First off, I think this is cool. If you’re a Mac user and maybe you use Homebrew to install stuff. One of the things he’s put together is Homebrew Pythons, which is a Tap. I didn’t know there was a thing called Homebrew Taps. It’s a way that you can get all Python 2.5 through 3.6 installed easily with just a couple command lines.
KENNEDY: Yeah, it’s beautiful. You just basically register Kenneth’s Tap and then you just say, ‘Brew install Python-3.6 or 2.7’ or whatever. I really like Brew. I’ve been starting to use it more and more for my Mac. The next time I set up a fresh operating system – which seems to be yearly, I get frustrated and format the thing – I’m just going to brew install as much as I can, like MongoDB, Python, Node.js, all the things that you need. It’s beautiful.
OKKEN: Yeah, okay. Well, moving on… (Laughs) Next up, we’ve got requests-threads, which is something that I think is built on top of Requests that uses Twisted’s Deferred objects as a return object for Request. So, you can either use it with async and await or with Twisted to have asynchronous reading through Requests easily.
KENNEDY: Yeah, it’s really cool. So, basically you create this async session and you say await session.get. You have actually two ways, you can do async await Python 3.6-style, which is really cool. Or you can use Twisted’s Deferred, which work in every version of Python. So, you actually can pick and it’s really cool.
I’m looking forward to seeing that rock and it looks like the last activity on everything was a couple of days ago, so it’s kind of new.
OKKEN: And also, before we move on, you interviewed somebody about Twisted recently. I really enjoyed it.
KENNEDY: Oh, yeah, that was Glyph (Lefkowitz). That was #127 on Talk Python.
Yeah, he’s doing amazing stuff and that kind of riffs on this as well.
OKKEN: Now, instead of threads, you might want to have a background task and Kenneth has that, too. He’s got a repo called Background, which just runs stuff in the background.
KENNEDY: Yeah, it’s beautiful. You basically put a decorator on a function and it becomes this async background thing that you just kick off, like ‘fire and forget’ style. It’s really cool. You can do it for CLIs, you can do it for web apps. I use this on the Talk Python training site – I use this kind of stuff. I don’t use this because it’s new. When I first built it and gave it the capability to email thousands of people and update, it turns out that that’s really bad to do in a serial on the main thread. You have to kick that stuff off on the background threads or things like Celery, and this is a really cool way to do it.
OKKEN: I know that there is Celery and other things, but having a simple way to just ease into multi-process programming and it’s really hardly any code at all.
KENNEDY: Right, there’s no extra service, it just runs in process. It’s simple and easy.
OKKEN: Last up from Kenneth, although I’m sure I’m missing something that he’s been doing recently, is setup.py for humans. This isn’t something you run. He’s got a repo that’s an example setup file. Directly off it:
“This repo exists to provide an example setup.py file, that can be used to bootstrap your next Python project. It includes some advanced patterns and best practices for setup.py, as well as some commented-out nice-to-haves.”
I had a quick look through it and I like it.
KENNEDY: Yeah. So, get out there and make that module package. Very cool.
OKKEN: So, Kenneth, either slow down or we’re going to have to have another podcast just to talk about your stuff.
KENNEDY: (Laughs) And he has his own podcast which is pretty long form, so maybe he covers this stuff there as well. I’m not sure.
So, up next is a really positive thing but it sounds kind of negative. I want to talk about the Python Death Clock. I’m over here on pythonclock.org and it says, ‘Python 2.7 will retire in 2 years, 7 months, 5 days, 7 hours, 33 minutes and 35 seconds.’ That’s pretty neat, right? Here’s this and it’s a running animated countdown until the 2020 timeframe and Python 2.7 is going to be no longer maintained when it goes out of support, and things like that.
OKKEN: Yeah, so it’s counting to a best guess for when PyCon in 2020 is.
KENNEDY: Yeah, isn’t that interesting? When they said they were going to retire Python 2.7, they didn’t say, ‘We’re going to retire it on June 1, 2020.’ Or, ‘We’re going to retire it on December 31st, 2020.’ It’s just, ‘Ya know, within that year.’
So, there’s a couple interesting things here. This guy’s like, ‘Alright, so when would be the ideal date? To retire this? It would be PyCon 2020, of course.’ So, he says:
“I hereby suggest we make PyCon 2020 the official end-of-life date and we throw a massive party to celebrate all that Python 2 has done for us. Python 2, thank you for your years of faithful service. Python 3, your time is now.”
(Laughs) I think this is a really cool idea to encourage people to move from Legacy Python over to Modern Python.
OKKEN: It’s fun to have up when you’re leaving your desktop open and going to get some coffee. You can just remind everybody around you that Python 2 is dying.
KENNEDY: That’s right. Or if your non-technical manager says, ‘We can’t really afford to upgrade that old Python 2 code’, you can say, ‘Well, here’s the Python 2 Death Clock, to this is our time frame.’
This other one you want to talk about is pretty interesting. It’s kind of a design pattern, almost a pushback on some of the intense design patterns, I would say.
OKKEN: Yeah, so my red flag goes up whenever anybody follows something dogmatically. ‘This is a best practice. Follow it or else.’ I don’t like that. This is an article called, “Small Functions Considered Harmful”. There's a quote from here:
“General programming advice doled out invariably seems to extol the elegance and efficacy of small functions.”
I have seen that, like the author has, to an extreme where people will go to the point where they’re writing very small functions, one line functions. I think that’s okay for some cases, like complicated math maybe it makes sense. But small functions that are only used in one place, it actually doesn’t help.
She (Cindy Sridharan) goes through and talks about a few problems with small functions. There’s a lot of fun things that she talks about but I think it just makes the code harder to read, to me and especially to newcomers. One thing I didn’t think about was if you’re using classes a lot, adding more class functions just litters up your class name space, your interface, and it’s harder to tell what the class is supposed to be doing.
KENNEDY: Yeah, you almost have to go to the level of using double underscores to make that stuff not show up, right, to sort of hide it. These are internal things, little stuff I’ve broken into.
I have mixed feelings about this. I am sympathetic to what Cindy says. I feel like she has a really good point and certainly some of these DRY principles, some of the design patterns taken too much to an extreme are really painful. I would say one of the hardest applications I’ve ever worked on is this like 50 to 100,000 lines of code that was just fully abstract everything, design pattern this, dependency injection that. Every time I wanted to do something, it was like, ‘Where does this live? How can I tell what it does? I know that somehow it’s assembled at runtime so this thing happens but there’s so many pieces and patterns contributing to it.’ It was really not good. I think that’s what she’s kind of riffing on. But I also think that it doesn’t hurt to necessarily encourage people to write small functions, but if they get too small it’s certainly a problem. My rule of thumb that I use is, ‘Does the function need documentation to tell what it does. If it does, it’s probably wrong.
Now, that doesn’t necessarily apply if it’s an API in a public package and you’ve never seen it. But in your own code, so you need comments to tell you what that function does, or does a short simple name tell you what it does? I feel like any time I’m about to write a comment and Martin Fowler – thanks, Martin Fowler – has a really interesting way of talking about comments. He says, “Comments are deodorant for bad code.” (Laughs) So, I feel like if I’m about to write a comment about a function, I’m like, ‘Oh, this probably should be rewritten so it’s really clear what it does.’ It’s certainly a tension, but I guess maybe the warning is, ‘Don’t take it too much to the extreme.’ It makes it at least as bad.
OKKEN: I want to touch on one more thing because I’ve been thinking about agile and agility a lot lately, especially with refactoring code. One of the comments she brings up is that breaking up your code into small pieces can create premature abstractions. So, you’re breaking it up into multiple pieces and that might make it harder to refactor to completely understand the problem space. I think the time to break up things is after you’ve mostly solved the problem and you’re just making it maintainable for the future.
KENNEDY: Yeah, that’s an interesting point, once you fully understand and have solved the problem you can apply some refactoring tooling concepts against it. And then it’s much more likely to be stable and you’ve got the big picture and then you break it up. I agree. Nice.
You know what I’ve been thinking about lately?
OKKEN: What?
KENNEDY: DataDog. So, DataDog, they’re sponsoring this episode. Thank you, guys. What they do is, basically they let you have an entire view of your entire system, not just your applications. You’ve got your Python code, but maybe your Python code is running on a web server, it’s built on Flask, it’s talking to MongoDB, it’s hosted on a set of scaled out Ubuntu servers running Engine X and Micro WSGI (whisky), you can actually integrate DataDog into all those things that I mentioned and get an entire view of how your overall system, those things all taken as a whole work. Not just books or performance monitoring for your Python app. Which is pretty awesome of you have a big system.
They actually have a cool little tutorial you can take at pythonbytes.fm/DataDog and it takes just a few minutes. They’ll even send you a cool DataDog t-shirt if you do the tutorials, so check it out at pythonbytes.fm/DataDog. It helps support the show.
OKKEN: If I do the tutorial can I get a t-shirt?
KENNEDY: You can get a t-shirt. I don’t think you’ve been excluded. We can both go get a t-shirt. Awesome.
So, we talked about the Death Clock a little bit, let’s talk about more sugar, less of a stick-type of thing, to encourage people to use Modern Python. I ran across this site, I can’t remember where I found it, but it’s really cool. It’s called, “Why Python 3?” If you pull it up, there’s a simple little code sample of some Python 3 feature that’s awesome, that you can’t use. There’s a button like, ‘Show me another cool feature.’ And it will randomly generate another code example of something that you can do. Isn’t that cool? It’s really simple and quick. I hit it a few times and I got ‘annotations,’ so I type annotations like function, save. It takes two integers and returns a string, or something like that. ‘Keyword only arguments,’ which is pretty cool, so a way to say that you must pass these certain arguments as keywords, which is not a thing in Python 2. ‘Yield from,’ for basically consuming generators and turning them into generators, ‘enums’ and a bunch more. You can sit there and keep clicking, ‘Give me another random sample.’ It’s fun, right?
OKKEN: That is nice.
KENNEDY: Just go play around with that. Actually, there’s a few things that I learned about that I didn’t know, like ‘secrets’. I just have no reason to play with the a cryptic graphic secret stuff, but that’s apparently in Python 3 and pretty nice.
So, let’s talk about something that’s a little above the code but something that happens a lot in technical spaces. Drinking.
OKKEN: Drinking, definitely. And speaking of secrets, there’s a secret that is not so much a secret, not everybody drinks alcohol. I actually thought about this a lot because Trey Hunter brought it up recently on Twitter. He said that a lot of the conferences and tech events that he goes to, and I’ll quote him.
“I sometimes feel excluded when events include nice alcohol but cheap soda.”
I never really thought about that before and I want everybody else to think about it. There’s this acronym called EANAB, which is Equally Attractive Non Alcoholic Beverage, and I think it’s a cool idea. Trey also linked us up to a Stanford site because there is an alcohol.standford site, which is cool. EANABS are required for all Stanford parties and it’s a cool idea. Let’s say where’s having a get together and you’ve got some specialty beers, well, go out and try to find some specialty local sodas also. Or if you have a spiked punch, make sure you have a non-alcoholic version. The Stanford site also has quite a few mocktail recipes that look easy and delicious.
KENNEDY: That’s cool and this is pretty easy to do. Here in Portland I know that we have a bunch of locally brewed root beers, for example, and things like that.
OKKEN: Yeah. Hot Lips sodas.
KENNEDY: Yeah, Hot Lips sodas are really nice and not alcoholic unless you spike them.
OKKEN: And I think most events now think about having non-alcoholic stuff, too but it’s the equally attractive part. Make sure you’re not getting cheap stuff if you’re going all out on the alcohol.
KENNEDY: (Laughs) You could have either that cool minty cocktail or RC cola.
OKKEN: Yeah. And if you’re in the Portland area and you are serving cocktails, let me know and I’ll show up. (Laughs)
KENNEDY: Exactly. I’ll be there with you guys. Awesome.
So, there’s probably a theme, or maybe I was just in a particular mood today because I’ve kind of chosen related topics. But we touched a few times on the popularity of Python. I keep coming back to this, not just to be a cheerleader and ‘Rah, rah, rah, things are great.’ But people bet their careers, at least short term, on studying certain technologies and pursuing one thing over the other – Node.js over Python web apps – or something like this.
So, there’s a really interesting article from StackOverflow. And StackOverflow, I think, is killing it in terms of deep insight into the developer community. The title is not so bad, it’s “The Incredible Growth of Python”. How about that?
OKKEN: Yeah, this is actually a fascinating article, so I’m glad that you brought it up.
KENNEDY: Yeah, so it came out today, just a few hours ago. I’m like, ‘We have to cover this today.’ They previously wrote an article exploring how wealthy countries, those that are defined as ‘high-income countries’ by the World Bank, tend to visit a slightly different set of technologies than the counterpart of developers in the world. And they said, ‘If we actually look at that set, the largest difference we saw was among Python programmers and the Python programming language. In high countries, Python is even more popular, more extreme in its popularity than things like StackOverflow trends, Google trends and other language rankings would make it out to be. They basically said, ‘In this article, we’re going to make a case that Python has a solid claim to be in the fastest growing, major programming language.’
So, did you look through some of the graphs in there?
OKKEN: Yeah. Well, the one that I didn’t understand and I’m hoping that you can explain to me is the ‘predicting future growth’. It looks like an even larger gap between Python and everything else.
KENNEDY: Yeah, yeah. They started out by saying June 2017 was the first month that Python was the most visited tag on StackOverflow. Of course, all this conversation is restricted to these ‘high-income’ nations; U.S., Europe, Canada, Australia, those type of places. But if you restrict your attention to those areas, Python is by far the most visited, and it’s actually grown 2 ½ times in popularity since 2012. There's a graph called, ‘Python compared to smaller growing technologies’. But what was the first one you asked me about?
OKKEN: ‘Looking at future growth’.
KENNEDY: Right, ‘predicting future growth’. If we’re going to look at these graphs from 2012 until now – the guy who wrote this article is actually a data scientist and he said he used to so a little Python but he only does R, so he doesn’t have much of a horse in this race – he said, ‘Let’s apply statistical modeling to the growth curve out to 2020. If you look at that, it’s like crazy. So they say, ‘Maybe there’s going to be a back-and-forth with Java as students go back to school this month and they’re going to look up issues for their homework because Java’s taught a lot to the first year computer science students. But if you follow this trend, it’s domination. That’s basically what he said.
There’s another one that’s really interesting because I feel like people compare this a lot. ‘Python compared to smaller growing technologies’. Python often gets compared to things like Go and Rust. In the data science world, it gets compared to R. And there’s a graph showing it like 10, 20 times more popular and steeper goth curves than all those languages. Which I think is really interesting because people kind of see these shiny new languages and go, ‘Oh, my gosh. I should just abandon and go write Go’ or whatever. And that may be true for some particular case, but not in general.
OKKEN: Yeah, and some of the strong languages that have been around for awhile like PHP, C++, Java, it’s interesting to see that those charts have been relatively flat or slightly declining for the last few years.
KENNEDY: Yeah, a lot of the standard, well-known ones, the ones you named, they’re definitely slowly trending down, which is not amazing for them.
Also related, there’s another article. I almost covered this one, but I thought that one was just so neat and had so much data behind it. There’s another one that says, “Python Overtakes R to Become the Leader in Data Science, Machine Learning Platforms”. These are of course related, so I link to that one as well.
And finally, one wrap up. This applied to high-income countries. If you applied it to countries that are not in that group, they said Python has the exact same growth curve, it’s just starting at a lower point. So, they expect in the future few years to also be able to make these kind statements there, but there’s a lag. They talk a little bit about that and it’s interesting.
OKKEN: I’ll have to go back and read that other article because I don’t understand why there’s a difference between different countries.
KENNEDY: I didn’t get a good, solid answer there. But definitely worth checking out.
OKKEN: Hey, that’s our six, man. That was fun. What’s up with you? Any news?
KENNEDY: Well, I’ve been doing a couple things. I’ve been learning the joyful bit of the decay of online courses, and have been re-recording some of my online courses, sections of them, as the web properties they’re dependent upon; like web services or something, changed their model or went away. So, that was fun. (Laughs) But it’s good to be able to keep that stuff fresh.
Also, I’m going to PyCascades. This is a new PyCon in Vancouver, British Columbia, a beautiful place in the world, in January 2018. So, I already booked my flight. I’m trying to get you to go and you're on the fence, man.
OKKEN: Yeah, I really want to go. I don’t know what my January is going to look like yet. But I should decide soon so I can get a flight.
KENNEDY: Yeah, you definitely should. Awesome. How about you? What else is new?
OKKEN: Well, I just got back from Germany. One of the things I did there was… I want to shout out to everybody at the Munich Python User Group, that on less than a week’s notice decided to come together and hangout with me for an evening, which is totally awesome and was a lot of fun. We talked about pytest, of course, but we talked about quite a few other things as well.
KENNEDY: That’s awesome that they were able to put that together on short notice for you.
OKKEN: Yeah, and then something happened just today and I didn’t even know it was going to happen. The pytest book I’m now no longer working on, the last beta was beta 5, but beta 6 just came out today which is the one where I wasn’t involved at all but it’s all the copy editing changes. They fixed all my typos.
KENNEDY: Nice, so this stuff has been pushed off to the editors and they’re rolling it back out to the readers, huh?
OKKEN: Yeah, so there’s just some magic machine that turns it into a physical book.
KENNEDY: Does your book have a version number? Like 1.3? 0.7?
OKKEN: (Laughs) No. Well, all of it’s stored in revision controls. It has versions that way.
KENNEDY: Awesome. Well, it’s great to be back together with you, Brian. I think we’re both going to be relatively stable for the next few episodes, so that will be good.
OKKEN: Yep, definitely. Thanks a lot.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. Get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.