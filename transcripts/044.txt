PYTHON BYTES TRANSCRIPT
Episode #44: Pip Install Malicious-Code
Michael KENNEDY: Hello and welcome to Python Bytes, where we bring Python news and headlines directly to your earbuds. This is episode #44, recorded on September 19th, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: It’s been a big news week, hasn’t it, Brian?
OKKEN: Yeah, very big.
KENNEDY: We’ve got, I would say, the most listener feedback and request to cover a particular topic, which we’re going to jump right into as the first thing. But before we do, let’s just say thanks to DataDog. They are sponsoring this episode, as they have some others. They have some great tools and even a way to get a free t-shirt at pythonbytes.fm/DataDog. We’ll talk more about them later.
Why don’t you tell everyone what the big news is?
OKKEN: Apparently, there’s malicious libraries found on PyPI.
KENNEDY: Right, so pip install virus not so joyful as the pip install anti-gravity would make it.
OKKEN: It actually, I think, scared people more than the real threat but let’s talk about it.
KENNEDY: Yeah, you know, I didn’t see what the actual code vulnerabilities, what the thing was, than sort of a proof of concept. So, I don’t know how big of a deal this is in terms of actual viruses and malicious code, but it certainly shows that the door is open for somebody to sling some very bad things.
So, the story is that there were a number of malicious libraries found on PyPI. These are basically packages that you would pip install. They either did some sort of typo squatting or they grabbed the name of something that was already in the standard library. For example, people might try to use urllib and didn’t import it, so they get an error. ‘Cannot find library urllib.’ So, then they go type pip install urllib. Well, guess what? That actually goes out to PyPI and grabs a thing. And I think there’s a misspelling, urllib with one L, not two. But they would grab those things and they would put those packages up there. To be even more devious, what they did was they actually took the implementation and put it into those libraries.
OKKEN: So, they would actually work like it should…
KENNEDY: You might not notice it. You saw a thing, you imported a thing, it works. But the problem is that the setup py, the actual setup code that installs and executes during setup when this is installing, that was where the viruses or the malicious code lived. So, that’s bad.
OKKEN: I look into it and the code that they were putting in there, it said ‘proof of concept, no harm no foul’ or something. But it was collecting the username and your host IP address and sending that to some server in China.
KENNEDY: Absolutely. I think the best write up on this was done by Dan Goodwin, I think, on Ars Technica, that’s the primary link here to that article. And the conversation, I find Ars Technica to be the best place for the comments to actually be really meaningful. There’s a great bunch of things in there, but let’s cover a little bit more of the details.
Slovak security authority that actually discovered these packages, they discovered these packages then sent a message to the Python Package Authority and they took those down right away. So, those are supposed to be gone but that doesn’t obviously get them off of your server, get them off of your developer workstation if you pip installed something bad. There’s actually a message from the PSF (Python Software Foundation), they did an official response to this. We talked several times about the fragility of PyPI and how we’re dependent upon this thing that there’s really not a lot of resources put into. We talked about Donald Stuft and I’ve had him on Talk Python and things like that. The PSF said, and this is just part of what they said:
“Unlike some language package management systems, PyPI does not have any full time staff devoted to it. It is a volunteer-run project with only two active administrators. As such, it doesn’t currently have resources for some of the proposed solutions, such as actively monitoring or approving every new project published to PyPI. Historically and by necessity, we’ve relied on a reactive strategy of taking down potentially malicious projects as we’ve become aware of them.”
Does that make you feel better, Brian?
OKKEN: Not really, no.
KENNEDY: (Laughs) It doesn't make me feel very good either. It’s like, ‘If someone notices a virus, of course we’ll take that down, but other than that, good luck.’ It’s basically they’re saying. So, there’s some interesting comments like I said, on the Ars Technica article and I’ve linked to four of them.
I’ve been thinking about how you deal with this. Do you digitally sign these things? Everybody’s going to get a key and how do you know when a bad actor’s key gets used? It’ll just regenerate. There’s a lot of issues with getting trusted keys, SSL style. But this guy or girl who goes by HueHueHue says, “What if pip gets more paranoid?” So, if you say, ‘pip install a thing’ and there’s a very light misspelling or slight change to that that is much more popular, it will instead of just install it, it will give you a list of things and say, ‘It looks like you might be trying to install this other thing that’s way more popular than this thing.’ And that might be real interesting. If the thing you’re installing has two downloads and the thing you were trying to get had a half a million downloads, maybe you don’t need to say error, maybe you need to say ‘force it’ or something to that effect. So, what do you think about that?
OKKEN: I’m uneasy with that, giving preference to popular projects just because they’re popular. Maybe we’re swinging too far.
KENNEDY: Yeah, possibly. There’s actually some stats on the downloads of the bad packages. They were not really bad, they were really quite small numbers. There’s some graphs and stuff. There’s a person on the comments section that says, stestagg, they said:
“I’m sitting on a lot of the misspellings of common package names.”
So, that’s pretty cool. They apparently created packages that do nothing, that are typos, so typo squatters can’t actually do nefarious stuff with it. There’s an undergrad, I think in Germany, who studied this capability and said, ‘Actually, there’s this problem.’ A year later he said, ‘Look, this can be a real problem.’
But we could, I guess, feel a little bit better that they also did the same thing to Ruby and also did the same thing to NPM for Node.js. So, it’s kind of a common theme that there’s this challenge across all the official package repositories.
OKKEN: Yeah, and one of the notes also was that people like trying to pip install something that’s part of the standard library that should come from PyPI. So, there has been a change to new packages that have the same name as standard library packages have. They have to go through an approval process for that.
KENNEDY: Yeah, and you linked to a PR, pull request,  for 09 on PyPA/warehouse. That’s pretty interesting, that conversation. I see how people are talking about solving the problem, which ones are there, how to deal with ones that are already there but are actual back ports. So, if somebody wants to bring asyncio to Python 2 or to a lover version of Python 3, then maybe they put that package up there and it would look like one of these bad named things. But they said the solution that they’re considering is basically, you can’t create new ones without some sort of admin getting involved to say, ‘Yeah, I see what you’re doing and it’s okay.’ But the ones that exist, they won’t kill them off or anything.
OKKEN: Yeah. One of the big examples of that is Mock is in the standard library in Python 3, but in Python 2 it was separate. So, I guess Mock is part of the unit test library.
KENNEDY: Right, but it has a legitimate place both in the standard library for Python 3 and PyPI.
OKKEN: Yeah, there are some legitimate back ports that show up. There’s legitimate reasons to have the same name.
KENNEDY: That’s a pretty nice segue to this news that Jonas Neubert sent us about the new version of PyPI which is called Warehouse. It’s finally moving.
OKKEN: Yeah, so this was great. Jonas sent this email and essentially, he did all my research for me, which I love that. Feel free to do that.
KENNEDY: Thank you, Jonas. (Laughs)
OKKEN: He was writing an article and he was talking about the research he did for a topic when he wrote the blogpost which we’ll link to called, “Publishing Your First PyPI Package By/For the Absolute Beginner”. It’s a pretty nice, quick article.
One of the things he talked about when he emailed us is, things have changed. So, a lot of the tutorials that are out there aren’t valid anymore. For instance, PyPI.org is no more. It used to just be read-only when we were just playing with it, but now it’s really where you go through to publishes packages you write to there. The old API is at PyPI.Python.org, so you have to use the new one.
KENNEDY: Right, and if you have one of those hidden .pypirc files that you can configure like your package username, password, URL and so on. You have to change that URL, right?
OKKEN: If you’re already done packages and pushed them up before, some of this makes sense. But of it won’t, if you read Jonas’ article all of it will make sense.
KENNEDY: Absolutely. It also had some good news, like things like markdown support for the README.MD files.
OKKEN: That would be great. I refuse to write restructured texts so when I need it I convert it from markdown.
KENNEDY: Yeah, that’s great. This is good news.
OKKEN: One of the other things I thought was interesting was that apparently, I didn’t know this but you can change some aspects of the old PyPI, some aspects of your projects like the description or something. There was a way to change that through the web interface or through the API without changing your package itself. A lot of those have been closed down and you really just have t re-upload your stuff if you want quite a few changes. I actually think that’s the way you should do it anyway.
KENNEDY: Yeah, sounds good to me. I’ve been long waiting for PyPI.org t be the thing. It’s just a nicer interface, it’s built in Pyramid which is kind of cool and I know that it’s a huge revision of a very old code, so if you also open up PyPI for more contributions and collaboration with other people.
OKKEN: Yeah, and I’d really like for them to – I think it’s totally useable now – have them take down the red notification at the top. It makes it look like a warning. I don’t think we need that anymore.
KENNEDY: Yeah, it feels like it’s going to go pretty soon but definitely that should move to the old one and that should be gone from the new one. I’m ready for the switch to happen. I understand that pip actually references PyPI.org and searched for URLs internally; it’s kind of there anyway, but it feels a little gradual.
OKKEN: Apparently, the one holdout is you have to still create your user account on the old website.
KENNEDY: A, maybe that’s why that red bar is still there.
Last week, we had a lot of fun talking about David Beazley’s fun of reinvention, right?
OKKEN: Yeah, I loved that. I loved the talk, too, if anybody hasn’t watched that, go back and watch that.
KENNEDY: Yeah, we’re basically linking to it again because it was awesome.
OKKEN: One of things he he did well was he had these really cool live coding during the presentation and he had some cool backgrounds and stuff. We have no idea how to do what David did. We asked him and he won’t share it yet.
KENNEDY: If anyone knows, go to pythonbytes.fm/44 and add a comment at the bottom, so we can all figure out how that cool trick was done.
OKKEN: Yeah, definitely. But for now, you can’t do live coding. I like live coding as a presentation but it can go wrong. I have a presentation that’s coming up and I was thinking about whether I wanted to do this. So, I found a few links talking about it, about advice. One of them was basically advice for live coding. It’s basically, ‘Practice a lot but have a backup plan.’ That’s the real meat of it. And also, one thing is while you’re coding a lot it might be fun for you just to code, but you have to talk at the same time. So, if you can't talk and code at the same time, then maybe it’s not for you.
So, if you want to have the same effect but not live code, there’s a couple other articles called, “Not Quite Live Coding” and “Avoiding Live Coding”. They’re kind of cool, they talk about basically how you can do GitHub labels to pull in new parts of your code if you want to watch it.
KENNEDY: Right, you can basically go from tag to tag to tag and then talk about the new code that’s appeared without actually typing it. Though I’m with you, I’m for the live coding. That is the most legit but these are fallbacks and I think that's not bad.
OKKEN: The last one was doing a fade-in, like all your code showing up on a slide, but instead of a huge Idiagram of code  – nobody knows, are they supposed to read all the code at once? – to fade-in the code a snippet at a time, highlight the piece that you’re talking about and then for the next slide or the next fade-in, fade-in the new piece of code.
I hadn’t actually seen how to do that before, but it talks about using Reveal.js and some other tricks to do that.
KENNEDY: Yeah, that’s a real nice effect if you’re going to have code up there or even lots of text in any sort of presentation, definitely don’t blast it all up there, let it come in piece by piece or somehow indicate the little sections you’re talking about. That definitely makes it more engaging, for sure.
OKKEN: I brought this up also today because I was curious about your choice. It sounds like you like live coding as well, watching it at least.
KENNEDY: Yeah, I’m definitely for the live coding. If people don’t do it well, when it goes bad it kind of makes me squirm and be uncomfortable. But done well, you as an audience member, if you see something being presented and you actually saw every step of it and in the end you see the outcome, you’re like, ‘Well, I saw every bit of it, there was nothing that was crazy there and now it’s doing this. I could totally do that. There's nothing scary about it anymore once you see it done live. I think a lot of times you can skip over that and fling pieces of code together and then you’re like, ‘Well, those are slides. Maybe this is way harder than it sounds.’ If you see it done live, you kind of know how hard it is.
OKKEN: Yeah, I agree. I think I’m going to opt for something almost there. I’d also like to hear from listeners. I’d like to hear some live coding horror stories, and also some tips for Python live coding, if anybody has some tools to share, that’d be great.
KENNEDY: Yep, sounds awesome.
Before we get to our next topic, let’s talk about DataDog. They’re sponsoring the show and they’re doing really cool stuff. So, if have performance bottlenecks in your application, that maybe in your code but it might be somewhere in the whole stack that you’re using. Let’s say you have a Python web framework, web app running Flask, it’s built upon Mongo and on Ubuntu and it’s running Micro WSGI, with DataDog, you can monitor all of those pieces as a whole. So, that’s super powerful if you want to understand why your app’s slow and not just why your Python code is slow. They have a great getting started tutorial and you can check that out and get a free DataDog t-shirt. So, just visit pythonbytes.fm/DataDog and see what they’ve got to offer. It’s pretty cool.
OKKEN: That’s cool.
KENNEDY: Thank you, DataDog for keeping the show rolling.
Speaking of web, let’s talk a little bit about REST. So, I mentioned Flask, I mentioned Pyramid. There’s Django, of course. Those are the three high-level web frameworks and they’re great. They’re good for building web applications. There’s extensions or they themselves are even good for building RESTful services, but there’s two really interesting web API frameworks in Python that a listener suggested we talk about and I’m excited to talk about them.
There’s two – one is Falcon and one is Hug – those are pretty good names for frameworks, right?
OKKEN: Yeah, I’ve heard of Hug but I’ve never heard of Falcon.
KENNEDY: Yeah. So, I just had the Falcon guys on Talk Python last week on Episode #129. That is a super low-level, really high performance, RESTful framework. They call it a bare-metal Python web API for building very fast app back ends and micro services. ANd they don’t see it as competing with the frameworks I mentioned, but they see it as more complementary. You write your app in that and if you need that super fast little service, you use this. It even works on PyPy for an extra speed boost.
So, that’s cool. You can use Falcon and it’s real low-level. And then there’s Hug, which is actually a web service RESTful API built upon Falcon. So, Hug is using Falcon for its low-level capabilities, but then Hug is like a simplification on top of these APIs. So, you can do really interesting stuff with Hug like you can put a decorator onto a function and all of a sudden it becomes an API that you can work with. It might be a method on a class but you can work with that really simply. One of the unique things about it is it comes with built-in, self-documenting APIs. You can sk it what your functions are and it will give you a description and you can expose them in different ways. Maybe you have an API that you can access over an HTTP, but I can also make that a Python package, where it exposes the API and make it like a command line thing where it exposes that as a command line thing. Those are all the same bits of code, just exposed differently with Hug. That’s pretty neat, right?
OKKEN: That’s cool. I’ve got to try that out.
KENNEDY: So, if you’ve built in RESTful services, give these two things a look, depending which level you want to work at. They’re kind of neat.
But you might want test those, right?
OKKEN: You should test those. So, if you are testing them, you might want to test them in multiple environments, so tox would be a good thing.
KENNEDY: Yeah, we had a nice conversation with some listeners on Twitter, like, ‘Hey, what is tox? Will you tell us what tox is?’ Brian, tell me what tox is.
OKKEN: Well, first up, we’re going to get a little sneak peak on what tox is, but I think it does quite a bit. I reached out to one of the tox developers, Oliver Bestwalter, and he has agreed to come on Testing Code to have a longer conversation. We haven’t scheduled that yet, but I’ll let you know when it’s up. But for now, tox.
This is a quote from Oliver:
“The name of the tox automation project derives from ‘testing out of the box.’ It aims to automate and standardize testing in Python.”
It’s conceptually above pytest or whatever else you use and serves as a command line frontend. I think of it as similar to something like a Travis CI or something, that you can do on the command line.
KENNEDY: Right, it let’s you pick certain versions of Python, so you could say, Python 2.7 and Python 3.5 and it basically depends upon pytest or something like that. It’ll orchestrate running your test on pytest in those environments, for example.
OKKEN: Yeah, and one of the things I really like about it is when you are distributing something, it’s not just your code that you need to test, it’s also the packaging and installation process and all of that. You want to make sure all of that works. So, essentially what it does – this is a normal use model – is to list a handful of Python versions. Then what tox will do is use your setup.py file, create a source distribution and then create a virtual environment. Then it will install dependencies and install your package, then run the test, then do all of that for each of the different Pythons. So, using different versions of Python to run the setup all the way through running the tests.
KENNEDY: That’s really cool.
OKKEN: And if you let it all do all that, you have to wait for it. It’s slower because you’re creating that distribution every time and other things. There’s a couple of links in the show notes on some tips and patterns. You can speed things up if you need to, but having this ability just at your desktop in a command line is really great for testing your stuff.
KENNEDY: Yeah, that’s really cool. And I believe there was something to do with Python 2 and that original vulnerability stuff that people discovered on PyPI, right? Like the vulnerable code only ran on Python 2 or something, and that’s how they discovered it?
OKKEN: I think that’s that case but I don’t have it.
KENNEDY: I don't have it pulled up either but yeah.
OKKEN: A source to verify that… Like on Twitter somebody said, ‘Oh, yeah, we found this because of tox and testing this stuff on Python 3.’
KENNEDY: Yeah, it’s beautiful. Alright awesome.
So, last one, I want to talk about Legacy Python a little bit as well. So, there’s flake8, which is a linter and talks about your code and tells you what you’re doing right and wrong, things like that. There’s a plugin called flake8-tidy-imports. And one of our listeners said, ‘Hey, I added this cool feature to tidy-imports.’ And I thought it was pretty cool so I thought I’d highlight it here. People who are moving to Python 3 might want to check this out. So, you can declare Python 2 to 3 as a banned-module import in flake8. Then it will go through and actually find any of the modules that would have worked in Python 2 but not in Python 3. For example, mock. You used to say, ‘Import mock’ but now you would just use ‘Import unittest.mock’ or something like this. It would actually give that warning, ‘In Python 3, you don’t use mock anymore, you use unittest.mock.’ It gives you a nice, useful message. Not just, ‘You shouldn’t use this anymore’ but ‘Here's the thing to use instead once you do this upgrade.’ So, it kind of shames people a little bit for using the old stuff, which is good.
OKKEN: Yeah, I really like it actually. I use that as well.
KENNEDY: Very nice.
I have a bonus one for us and I want to throw it in really quick. So, Jesse Davis from MongoDB, PyMongo Driver, stuff like that. He actually is the organizer for PyGotham, that is the PyCon for New York City. He’s really into helping and mentoring people, especially people who are new speakers so he’s running this project where he’s trying to raise money to hire a speaking coach to work with and mentor first time speakers who he’s getting to come speak at PyGotham. He's trying to raise $1,200. It turns out as of today he’s raised his goal, but I’m sure he can do more if he has some more money. So, I’m linking to his article called, “Help Me Offer Coaching to First Time PyGotham Speakers”, which I thought was a cool project and I’m happy to spread the word for Jesse. It’s great to have more people coming into the community.
OKKEN: Yeah, I think that things like this are awesome and I like covering it anyway. I asked him to maybe write up something after the conference because I’d like to hear how that goes. I’d like to hear from the people that got coached and how the process went, if it helped things.
KENNEDY: Yeah, that’d be really cool. Sort of retrospective, like, ‘Was this actually useful? What did you learn?’ To see if it’s something we should be doing as a community.
OKKEN: And the other conferences, and I don’t have any links right now, but some conferences do mentors for submitting your proposal. So, a talk proposal, they’ll have a mentor program so you can work with somebody to build up your proposal in the first place.
KENNEDY: Yeah, that’s kind of the first step to being a first time speaker. Awesome. Good job, Jesse.
How about you? What do you have going on? Have you forgotten about your book and you’re just relaxing and living life again?
OKKEN: It’s printing now. I haven’t forgotten, but I am relaxing a lot more and there’s sunshine outside. I get to go outside more, which is good. Not actually today, but I’ve seen the outside.
But you can order them now, apparently they’re printing and shipping, so that’s awesome.
KENNEDY: Yeah, very good. That’s great to hear.
So, remember last week when I talked about adding switch to Python and I said I would put it up on GitHub?
OKKEN: Yeah and you did.
KENNEDY: I did. And I would say about 75% of the people said, it was ‘awesome, so cool’ and 25% said, ‘Please, no. Don’t do this.’ You can’t please everyone and it’s not changing the language. It’s just a package on GitHub, you can do whatever you want with it.
So, anyway, it was actually in the top Python trending packages on GitHub out of all Python repos.
OKKEN: Wow, really?
KENNEDY: Yeah, last week. It was pretty awesome.
OKKEN: That’s great.
KENNEDY: It had like 175 comments on Reddit or something, so it’s an interesting set of conversations that have come up around it. So, that was a follow-up to last week where we talking about that.
Also, I’m writing a free MongoDB course that’s going to complement my paid MongoDB course. A short one that’s an intro. There’s a link at the bottom of the show notes, people can sign up to get notified. I finish writing that this week and I’ll probably have that out in a few weeks. Should be fun.
OKKEN: Great.
KENNEDY: Well, Brian, thanks for doing all the research and having our listeners do research for you. (Laughs) It was really fun to talk about this and if you guys have thoughts, especially on the PyPI security thing, go to pythonbytes.fm/44 and add your thoughts at the bottom. This is kind of a big deal.
OKKEN: And thanks everybody for helping come up with ideas for the show. We always appreciate it.
KENNEDY: Yeah, keep them coming. They’re very much appreciated.
Bye, Brian. Bye, everyone.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. Get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way,. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.