Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode #46, recorded October 4th, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve got a bunch of cool stuff lined up for you as always. But before we get to it, we have a bit of big news, Brian.
OKKEN: We do?
KENNEDY: Yes, we have a new sponsor, a brand new sponsor for Python Bytes, who’s come on to actually support a bunch of the show, DigitalOcean. They want to let you guys know about this thing called Spaces, which is kind of like S3 but ten times better. The audio you’re listening to actually came to you over it. We’ll talk more about that later.
I want to hear about spicy code.
OKKEN: Spicy code?
KENNEDY: I want to hear about scipy lectures. I misread that. It’s all the same. (Laughs)
OKKEN: Yeah, it’s all the same. (Laughs) You threw me off. I’m like, ‘What story are you looking at?’ Anyway.
Scipy lecture notes. I hadn’t come across this before but they did an update just recently. It looks like they update it at least once a year to make sure it’s all current. For somebody that’s doing Just-in-Time (JIT) learning for scientific Python usage, this is pretty darn cool. Their tagline is:
“One document to learn numerics, science and data with Python.”
It runs the gamut. It starts off with a Python language tutorial if you want to take it. You can learn about NumPy, Matplotlib, scipy. It’s got topics like debugging, optimizing, image manipulation and things like how to deal with statistics and machine learning even.
KENNEDY: Yeah, this is really cool. I think a lot of people are getting into data science and getting into Python because of it. But also, I think this is a great way to learn a lot of these techniques, these little short-focused iPython notebook-style examples.
OKKEN: Yeah. And for somebody that really needs to jump in and find, the way they have it set up it’s almost like a table of contents for a reference book, so you can just jump in and try to learn whatever you need today, just right away.
KENNEDY: You know what’s cool about the JIT stuff is it has prerequisites. For example, on the profiling part it says, a prerequisite is you must understand line profiler. It’s pretty cool.
OKKEN: I thought it was a great source for people who aren’t patient enough to go through a course or don’t know what they need to learn yet.
KENNEDY: Don’t you think that’s like 95% of the people?
OKKEN: Yeah, especially since we’ve talked about before that Python is often a language that people pick up after their primary language.
KENNEDY: Yeah, and also, I think we’re increasingly asked and expected to build more and more complicated apps, bringing together more and more disciplines. So, would it be unreasonable to say, ‘I would like you to write a web application that talks to the database but also uses machine learning and the GPU.’ I could see it being a totally normal request, whereas they used to be their own specialties. This ability to jump and pick up a little bit on demand is only going to be more required, I think.
OKKEN: They also split up some of the stuff into beginner stuff that you have to know to start with and then they have some more advanced things a little bit later.
KENNEDY: Yeah, nice.
So, the first thing I want to talk about this week is desktop notifications. This caught my eye because I feel like – I’ve said this a couple of times – one of the weaker points of Python is the whole desktop/GUI-type of thing of thing. I know you can do it but it’s just not as easy as it should be. So, here’s a real simple and easy way to build a notification, like a desktop toast-type of notification for Linux using Python.
OKKEN: Well, that’s cool. What do you mean by toast?
KENNEDY: Well, so there’s a little thing that pops out, on Mac it’s on the top right, on Windows it’s on the bottom right by the clock. It would pop up and say, ‘Your friend just liked your thing on Twitter’ or ‘Somebody invited you to connect on LinkedIn’ or ‘
Your server just went down.’
OKKEN: I finally get the toast reference.
KENNEDY: (Laughs) Because it pops up. At least in Windows it pops up. I guess if you tilt your toaster on the right, then in Mac OS it’s also toast. I don’t know.
Anyway, an example, a little app that says, ‘Let’s write a thing that will do web scraping and a Bitcoin value location.’ It will go to the website and pull that off and give you a periodic notification of the value of Bitcoin. While that’s not super valuable, it does show you a really interesting use case of this package called notify 2, which if you have something actually practical and interesting you want to nifty people about, that’s a pretty cool use case.
OKKEN: Hey, I think I might use this. This would be great.
KENNEDY: Cool. What would you do with it?
OKKEN: For instance, we’ve got a bunch of remote machines for me. I’ve got a bunch of VMs that are dealing with builds and whatever. Some way to keep track of them, make sure everything is alive.
KENNEDY: That’s cool, like a ‘build passed, build failed,’ ‘machine no longer responsive’-type of notifications. Yeah. That’s awesome. It’d be really fun and it looks like a couple lines of code. That’s really cool.
Would you consider performance, like if your app becomes much slower after a check-in, like a performance degradation, like a failed build?
OKKEN: Well, yeah. Definitely.
KENNEDY: And how would you test for that?
OKKEN: Well, funny you should ask… (Laughs) The next topic is tool called pytest-benchmark. This actually came up because I’m actually looking for this. I need to have chunks of functionality that we need to know whether or not we need to time them, make sure they’re not getting slower with successive releases of the software. What’s interesting is the much slower or much faster or just very random timing, people might actually notice that. If you’re dogfooding your own application you’re using it, you might notice this. A measurement is now – it used to be two seconds and it was for lots of releases – and it’s now two and a half seconds. Normal users might not notice it right then, but it would sure be good to check this.
So, this is pytest-benchmark and it’s a very easy little thing that you can add in to your code and your pytest testing to say, ‘Hey, this chunk of code is at least this fast.’ At first you don’t know how fast it should be, so there’s a lot of tools within it to do some graphing and table-driven showing you what the numbers are right now. And then also have an ability to have some golden numbers and save off bench mark data into an adjacent file and then on future runs compare against that.
I’m going to use it.
KENNEDY: Yeah, that looks super interesting actually. It has nice graphs over time and things like that. Sometimes timing doesn’t matter, other than how users feel about it, but in certain types of real time systems, rating systems, there are actual numbers you cannot fall below. If you’re processing inbound data in real time and it’s appearing every hundred milliseconds, you have to be lower than a hundred milliseconds in the processing time or you won’t be able to keep up.
OKKEN: Often Python’s used for other things, too. I’ve heard some people use it to
control test instruments.
KENNEDY: Yes, that’s possible.
OKKEN: So, for instance, checking to make sure application turn-on and measurement times don’t slow down because these instruments are used in production lines and it will slow down your customer production line if you slow down.
KENNEDY: There’s all sorts of factory automation and all kinds of things. Cool.
So, that’s really nice. If I had a use case for that I would definitely use it. I just don’t have anything that I can say must be this fast or it’s a problem, but it still would be cool to actually see the speed over time.
Before we get onto the next one, let me say thanks to DigitalOcean and just let you guys know about Spaces. So, you’ve probably heard of Amazon S3. I think that was their first thing. But like I said, DigitalOcean just released Spaces and I definitely think it’s better. As soon as I heard about it, before they even said, ‘Hey, we want to sponsor the show and have you tell the world about it,’ I’m like, ‘I’m switching to this thing.’ For one, it’s like nine times cheaper than AWS. It’s super predictable pricing. There’s all kinds, as you use to manage your S3 thing, so same APIs and everything. For example, I use this cool program Transmit for my Mac to manage all my files in S3. I just point it at DigitalOcean Spaces and it just keeps working. It’s awesome.
It’s $5 a month, 250 gigs for free and storage, a terabyte for free, bandwidth. That is quite expensive if you pay nine cents per gigabyte at AWS, but it’s completely free here and it’s a really nice service. Just as fast but much more predictable. Even in-bound data is 100% free. So, check them out. It’s a really super simple API. It’s one you’re familiar with. The tools work and you can actually get – whether you’re a new or existing customer – you get two months free if you go to do.co/python. So, check it out.
OKKEN: That’s great, cool.
KENNEDY: Yeah, it’s a super cool project. I’m so happy they came out with it and I’m
happy to be using it for this podcast and other stuff
So, we’ve talked – you’ve talked more than I have – but we’ve both talked a fair amount about projects and how they do packaging, Python packaging, how you should structure those and so on. I want to highlight an article that is a fun article but it’s super in depth and a deep look inside of how Python works and how packages are built and why they’re built that way. It’s an article by Vicki Boykis and it’s called, “Alice in Python Projectland.” It’s got some cool little graphics and stuff but the idea is she’s a data scientist learning data science and those things, so doing a lot of Java and doing a lot of Python. And it’s like, ‘Look, Python is so much better except for it’s really hard to package up things.’ Like, ‘How do I take some code that I’ve written and make it so that I can give it to you and you can use it,’ for example. So, instead of just going, ‘These are the four steps you do to create a Python package,’ she said, ‘Let’s look at the internals of how Python actually works. How it runs, how it understands and links things together.’ So, you will know how to not just put things together, but you will understand why. Very, very interesting article. Pretty in depth. Packaging has always been this kind of weird thing that you just follow the steps, so check this out. It’s a good article.
OKKEN: Like you said, it’s in depth which makes it kind of a long article but the writing is really good. It moves along pretty fast.
KENNEDY: Yeah, it sure does. And it answers a lot of questions like, ‘Should you use setuptools? Should you use pipenvs? What does _init_.py do? Should I mess with PYTHONPATH?’
And another thing I saw that she referenced in there that was pretty cool was called pipreqs. Have you seen this?
OKKEN: No.
KENNEDY: Yeah, so I think pipreqs, you point at your code and it looks at all your imports and it then knows what to create for your requirements.txt.
OKKEN: Cool.
KENNEDY: So, instead of remembering, ‘Oh, yeah, there was a thing that I used, Colorama or whatever and I forgot to put it into a requirements file so it’s not going to work.’ This will just discover it. It’s really cool.
If you want have an understand of how Python packaging and assembly of modules at runtime work, definitely check out this article. It’s super approachable and well done.
OKKEN: The next article is, “How to Teach Technical Concepts with Cartoons.” I personally, since I came to computer science from the fine arts, I started out in fine arts, I actually gave up because I was frustrated with my ability to draw. But drawing things to help people understand concepts, it helps. It’s easier to understand things and nobody expects you to draw really great pictures.
The article starts off – I love this – by saying that she draws not that great. It has really three horrible pictures of a dog, a cat and an elephant. I don’t think I can do better, but they’re not great drawings. Then she goes through and talks about how people should use drawings more when trying to teach things and some tips on that to make it personable.
KENNEDY: I think it’s a really cool idea. You certainly can personalize and humanize technical concepts is you use pictures. Like you said, they don’t have to be super fancy. So, she has a dog, cat and an elephant and those sorts of things. But not far down, she says, ‘Oh, let’s do something about a mutex (mutual exclusion object).’ And actually represents how mutexes are used to for shared memory, or something like that. It’s completely approachable but somehow it just makes it much more… If you looked at the formal definition of a mutex, you’d thin, ‘Oh, my gosh. What is that thing?’ But here it’s like, ‘Okay, that’s totally simple.’ I think you can really convey a lot and disarm people with some nice drawings.
OKKEN: One if the things I like about this article is while it itself is a mix of hand lettering or just normal printing and some simple drawings with text. That’s what the tutorial is. It breaks it up a lot. I think a lot of technical people, when they’re trying to teach something, they’ll think a drawing is a good idea but they’ll get out a tool to make all the lines straight and draw it with vector graphics. Sometimes I think just pen and paper might help convey the information better.
KENNEDY: Yeah, absolutely. I think this is really cool and will inspire some people to do a little more freehand stuff. It doesn’t always have to be perfect.
So, keeping it graphical for our last item, I want to share the Halo with you. It’s a project called, “Beautiful Terminal Spinners in Python” which is what it sounds like. It’s a really simple library that will give you, ‘I’m loading’ or ‘I’m working’ or ‘I’m thinking’ type of spinners. A lot of cool features. So, you can have a little spinner go around and you can have different styles. You have ‘successful outcomes,’ ‘failed outcomes,’ the little spinner will spin and it will go to a check mark if it succeeds or if it fails it will go to a cross and you can make it red or something like this. So, that’s really cool.
We talked about progress bars, where you have the progress going across. I think one of the better ones is tqdm. Sometimes you don’t know what the progress is going to be, right? I hate progress bars that go, ‘It’s 5%, It’s 5%. It’s 91%.’ Then it goes forever. There’s a great xkcd. I’ll put it in the show notes. It’s really fun about the guy who built the Windows progress bar.
The reason I bring it up, sometimes progress bars aren’t the answers but little spinners sort of solve that problem because it doesn’t indicate progress, it’s just like, ‘We’re busy.’ So, here’s a really cool way to put that into your program.
OKKEN: It’s very simple and it really looks nice, too.
KENNEDY: Definitely. It has a unicorn. A colorful unicorn. Who doesn’t want that?
OKKEN: I’m not sure how the unicorn displays progress though.
KENNEDY: Maybe in the horn.
OKKEN: Oh, that would be cool if the horn had colors.
KENNEDY: If the horn flashed rainbow. (Laughs) I don’t know if it does that or not but it should.
If you’re looking to add som sort of user feedback, like ‘Hey, we’re busy. We’re not locked up.’ Halo, super easy, very cool.
That’s it, Brian, for our topics. You got anything else?
OKKEN: I don’t think they would have made a full story, but I wanted to let people know that the Python 3.6.3 is out now, so go upgrade. I don’t think there’s anything major in it, I haven’t looked through it, but it’s around. Keeping current is good. There’s also a bug fix release I noticed in pytest. That’s around. I’m not sure what’s in it, but it’s around so people can pay attention.
KENNEDY: Okay, very cool. Check those out.
OKKEN: The last thing I wanted to mention is I warned people that I was going to start podcasting but it took me a while.
KENNEDY: You warned them. ‘I’m gonna do it.’
OKKEN: There are a couple, so at the end of September and just a couple days ago I released a couple different Testing Code episodes, one of them related to the testing pyramid. The last one, #32, is an excellent one by an amazing speaker named David Hussman. He’s a brilliant man.
KENNEDY: Yeah, that’s a really cool one. I’m glad you got that one out. That’s awesome.
OKKEN: How about you? Anything going on?
KENNEDY: No, nothing new. I’m working on my courses like crazy but the announcement is going to have to wait until next week for anything to be actually out for anyone to check out.
OKKEN: Well, thanks a lot for doing this today.
KENNEDY: You bet, it was great to catch up with you and share all these ideas with everyone. Catch you later.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.