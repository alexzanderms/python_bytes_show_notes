Michael KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode #51, recorded November 7th, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And we’ve got a bunch of awesome Python news lined up for you as always. Before we get to that though, let’s say thank you to Datadog.
OKKEN: Yeah, thanks, Datadog.
KENNEDY: Datadog is sponsoring this episode. They’ve got some really cool whole platform monitoring tools, and you get a t-shirt if you do their little tutorial, so we’ll talk more about that in a minute.
Now, I would like to explore the United States with some data science.
OKKEN: Yeah, so I ran across this article called, “Exploring United States Policing Data with Python.” Since that’s actually kind of a hot topic in a lot of parsing some of that data, I thought this would be a fun thing to walk through. So, I walked through about half of the paper. It goes through using Jupyter and iPython and all those fun tools like Pandas and Numpy to grab some publicly available data. It’s in a CSV file that’s zipped. You can just import that directly, or read it directly with the appropriate tools, with a Jupyter notebook and ask some questions like, ‘The race of people that get pulled over more often’ and things like that.
I know it’s a very political topic and I don’t want to get into that part of it. It is interesting but mostly I think it’s a very riveting example for walking through why it’s important for more and more people to be able to examine public data and be able to figure out what’s going on.
KENNEDY: Yeah, I thinks it’s really interesting that you bring this up, this example of working with public data. There’s a ton of data that we could be asking and answering questions about, policing data as an example. Is it fun for you to play data scientist and play with Jupyter and Matplotlib and stuff like that?
OKKEN: Yeah, it really was. One of the things was the example goes through pretty quickly because it doesn’t stop to tell you exactly what all the code does. It just has a code snippet that you just plop into a Jupyter cell and hit shift-enter and it just runs it and plots things. I know I can look that stuff up later. There were a few gotchas that I ran into that I’ll put in the show notes. Since this was my first time playing with Jupyter I didn’t really know that you have to hit shift-enter, but I remember hearing that from somebody else, to get to Turing.
KENNEDY: Yeah, it’s kind of its own world, but it’s really nice.
OKKEN: Yeah, the example starts with – if you’ve never run it before you can walk through some of this – it’s pretty cool.
KENNEDY: There’s some really interesting stuff you can do with police data and data science. I don’t remember exactly the details, so take this as kind of a general idea, but I think on Partially Derivative they had someone on talking about analyzing this kind of stuff and it was something like, when there was some kind of complaint or episode of violence involving some kind of police, it was pretty frequent that the policeman involved in that violence had previously somehow just come off of some horrible thing. Like a policeman who would deal with a suicide and then pull somebody over who was non-compliant was much more likely to have a violent interaction with that person at the traffic stop. So, you do things like say, ‘Well, let’s change our policy so that people who just had some traumatic event get the rest of the day off so they can process that. These are really powerful and important things.
OKKEN: One of the things I want to caution people for is, I’m clearly an amateur data scientist because I just did this one thing and just followed a tutorial.
KENNEDY: I have that title. (Laughs)
OKKEN: Be careful when you draw conclusions and plot things and show charts. Suddenly, it looks more legitimate. Yes, there’s good information you can find but you have to be careful as well. At the beginning of this article, for instance, not all the data is filled in for all police stops, so you have to deal with fields that are empty. What do you do with that? This article deals with it by just throwing them away. It picks one field and says, ‘Well, I can fill that one in, but the rest of the rows, if there’s any empties, just throw them away.’ I don’t think that that’s valid. I think that there’s probably a better solution. If you’re going to publish something, you should discuss what you did to clean up the data also.
KENNEDY: One of the things we’ve talked a lot about here on the show is performance. Sometimes that performance comes in terms of asynchronous programming and you’re waiting on the network and things like that. Where other times you’re maybe looking things like PyPy. So, most people know that there’s all these different implementations and run times for Python, but if you’re a new listener and maybe new to Python, we have CPython which is what most people mean when they talk about Python. We also have a JIT, Just In Time compiler version of Python called PyPy. We have IronPython, we have Jython, we have Cython. There’s all these different variations. One of the ones that promises to take basic working Python code and make it a lot faster is PyPy. You’ll hear people talk about, ‘Hey, you can make your code five times faster with PyPy under a whole bunch of constraints.’
The thing I want to talk about this time on this show is how somebody went and took their code for IoT (Internet of Things) stuff and made it 80 times faster with PyPy.
OKKEN: That’s incredible, 80 times.
KENNEDY: Yeah, and I don’t think they even really changed the code much. They did change one little bit of an interloop but that was about it.
Here’s the deal. This person was working on evolutionary algorithms. They were trying to create, basically, a self-learning adjusting algorithm that could evolve a logic to control a quadcopter, one of these drone things. It was a simulated one, but it could be hooked to a real one, it didn’t really matter. In order to drive the quadcopter, this object basically had to run a certain operation every so often. So often is like 100 times a second, so quite often. They would input this Numpy raid, do some processing on it and output another one, like how much thrust goes to each motor and things like that. So, this is happening a hundred times a second. And they ran it with CPython and the tests that they ran, not just once but a whole bunch of operations, took about six seconds. They said, ‘Okay, let’s try PyPy. Using PyPy makes it faster.’ So, instead of typing Python [Space] my program, they typed PyPy [Space] my program and, it turns out it was – wait for it – 5 ½ times slower.
OKKEN: Oh, no. That’s not faster.
KENNEDY: Exactly. It’s like, ‘Who sold me this bill of goods, man? I thought this was supposed to be faster.’ So, it turns out that the integration with Numpy, which is what they’re using, actually some of the C interop stuff is quite a bit slower, so they actually used this PyPy implementation of Numpy. It’s called NumPyPy instead of Numpy and that worked, that made it faster so now it was two times faster by switching out the imports and the libraries, so that’s pretty good.
But they said, ‘You know, we actually think we could do better.’ So, what they did is that they started profiling it and they looked at where it was slow and they said, ‘We can actually just rewrite this algorithm, just a tiny bit, so it’s more friendly to the JIT compiler.’ And they got it to go 80 times faster than the original CPython+Numpy version.
OKKEN: Oh, that’s nice.
KENNEDY: It’s awesome. That was even 35 times faster than the native PyPy+NumPyPy version. I think it’s a really interesting lesson.
OKKEN: Yeah, nice use of profiler, too.
KENNEDY: Exactly, that’s the point I was going to make. It’s one thing to throw PyPy or some other technology at it, but it’s not always going to be this silver bullet that solves your problem. But PyPy plus a little attention to problem solving, that made a huge difference for these guys.
OKKEN: Yeah. You said that this was a simulation?
KENNEDY: Yeah, their data is a simulation.
OKKEN: Okay. I don’t know whether or not you can PyPy on a little tiny quadcopter controller.
KENNEDY: I guess it depends on your definition of tiny. If it’s Raspberry Pi, I think you probably could. If it's Adafruit style, that might be too small. I actually don’t know.
So, the next one is an interesting one that I saw go by and I saw that you picked here as well. It has to do with the longevity of Open Source projects.
OKKEN: Yeah, this is actually a Wired article called, “Giving Open-Source Projects Life After a Developer’s Death.” I hadn’t really thought about that too much before. But as the article goes on, we’ve got more and more critical projects using Open Source projects and there’s a lot of them that don’t have that many maintainers, or sometimes just a handful. Really, how do you deal with that? Part of the article is just talking about this as a problem, but then also there’s possibly some solutions. I was just wondering if we had any solutions. I also had some terrible puns I was going to throw in. ‘What to do after you hit your corporeal segfault (segmentation fault) and raise an end of life exception.’
KENNEDY: (Laughs) Yeah, it’s definitely something that people really want to think of. I guess if you’re in a business they do talk about, ‘What if So and So gets hit by a bus? Will that kill the business?’ Well, if this Open Source Project is used by many businesses, it could be that it kills a lot of projects, a lot of companies.
OKKEN: Yeah, so I didn’t know this was out there but apparently there’s a place called libraries.io that has a ‘bus factor’ evaluator for different libraries. So, you can plug in a library that you depend on and look up it’s ‘bus factor.’
KENNEDY: Really?
OKKEN: Yeah, how many of the core developers would have to be on a bus that got hit before the project went away. But one of the things that it did bring up, I looked up some of the Python stuff and some of them are core things that even though there’s a handful of maintainers I think it would get picked up anyway because it’s part of the standard library. There’s definitely others that are of concern and one person points out that perhaps we could build some more things into GitHub or PyPI or other places to maybe have errors put in place. You could say, ‘If I don’t check in for six months, then transfer ownership to these people.’
KENNEDY: That’s a pretty cool idea. Almost like an escrow for Open Source.
OKKEN: Yeah, like if you get a big investment account, you’ve got to list who gets it if something happens to you so maybe something ought to be like that for Open Source projects.
KENNEDY: That sounds like a project somebody could create and integrate with GitHub.
OKKEN: Yeah, maybe. One of the other solutions that I have seen is like the pytest community for a lot of the plugins, trying to encourage people to once you get quite a few users of your plugin to push it over to a development group on GitHub. Then anybody in the group ban maintain it if necessary.
KENNEDY: Yeah, that makes a lot of sense. You could always fork the repo and just
say, ‘The real one is here.’ But I can see a lot of skirmishes around, ‘No, your fork is not real, my fork is real.’ People could fight over ownership.
OKKEN: Yeah, and that’s doable on GitHub, but you can’t really do that on PyPI that I know of. I don’t know how to transfer ownership on PyPI.
KENNEDY: Yeah, I think you’ve got to contact them directly and lobby your case, right? Which doesn’t sound like a great long-term, widespread solution.
OKKEN: I don’t have that problem currently, of having any super popular packages.
KENNEDY: Yeah, that’s cool. Definitely worth thinking about.
Before we get to the next topic, let me tell you about Datadog. So, performance and bottlenecks, these don’t just exist in your application code. Just because your code is slow, well, you could be waiting on the database. The database could be waiting on some Linux internal behavior. Who knows, right? These are layers upon layers across systems that we really build our apps with. Datadog lets you view all of those with one whole thing.
Let’s say you have a Python web app running on Flask, it’s built on Mongo, hosted on a scaled out set of Ubuntu servers running Nginx and Micro WSGI. Datadog will let you view and monitor all these things like one system. So, that is really super awesome and the more you scale out the more diverse your system gets, the better Datadog can help you. They’ve got a Getting Started tutorial. Just take a few moments and if you finish it, they’ll send you a sweet Datadog t-shirt. So, check that out at pythonbytes.fm/datadog and see what you’ve been missing.
OKKEN: I still have to do that. I need that t-shirt.
KENNEDY: Yeah, we’ve got to get our t-shirt.
So, maybe this is the wrong season here in the Northern Hemisphere. (Laughs) Maybe this is going to resonate more with our Australian friends. This next project I want to talk about is a solar-powered, Internet-connected lawn sprinkler.
OKKEN: Oh, nice.
KENNEDY: Lenin, one of our friends of the show sent this in and said, ‘Hey, I created this really cool project I’d like to share with everyone.’ I thought this was a really neat example so I thought we’d throw it in here. The idea is he went and got this little tiny Adafruit Feather HUZZAH board. And this is like a little tiny microchip type thing but it has WiFi, so that’s important. You plug it in somewhere and talk to it and it works with MicroPython. So, MicroPython is the Python that works in the smallest devices. I’m not sure if you can get PyPy to run on this one, but MicroPython is so super level. It basically is the operating system. Your app is basically the operating system. So, you can take a Lambda function and connect it right to a hardware interrupt directory. That’s how low level. That’s insane, right?
OKKEN: That’s nice, yeah.
KENNEDY: And he combines a couple other interesting things. He combines Home Assistant, which is the biggest home automation project in Python, like a really cool app that integrates tons and tons of IoT and smart home things. And he gives a really nice list of, ‘Here’s every single piece of hardware I used. Here’s the solar board I used. Here’s the container for the Feather HUZZAH board.’ It’s just a really nice example of a small, compact IoT project.
OKKEN: And useful and not creepy. I like it.
KENNEDY: Yeah, exactly. The more we seem to go back and forth on these little IoT things, I really want to create one that goes on my front door that used machine learning to determine what type of person is on my front door before they ring the doorbell.
OKKEN: Yeah, or dinosaur.
KENNEDY: Yeah, or dinosaur. That’s right. And also, I put a link in here to Talk Python Episode #108, where I had the guys from Adafruit come on and talk about a whole bunch of these different projects. Nice job, Lenin. This is a cool one.
OKKEN: And shout out to Adafruit too for doing all sorts of cool stuff with hardware and software. I like that.
KENNEDY: Yeah, they have a big educational aspect to them. Not just education-education, but teaching people who want to learn about IoT. I’m definitely planning on playing with some of these little devices in MicroPython. It just seems really fun.
OKKEN: Okay, so I am going to be perfectly honest with this last one. My last thing that I was going to talk about was going to be another packaging story but I kind of went down a rabbit hole. So, instead of getting into that, that’s my homework for next week. I've already set up what I’m going to talk about next week.
But what I want to highlight is some books that came out. There are some new Python books that came out recently.
KENNEDY: It’s a big week for Python books.
OKKEN: Yeah, we’ve got Python Tricks from Dan Bader. That came out. And Matt Harrison’s Illustrated Guide to Python 3. I’m going to read, at least peruse, both of these. I just started Python Tricks and I like the format; it’s cool. And then I’m going to take a read for Matt Harrison’s book. The cover is awesome. Actually, I want to have that around my office, then other people can look up Python3 stuff pretty easily.
KENNEDY: It seems really nice. I looked through it as well. The illustrated aspect is cool on Matt’s. Congrats, both to Dan and Matt on this. This is cool.
OKKEN: Yeah. Then the last thing, I was on Twitter and I was talking with a handful of people, authors. There are some Python books out there that really could use some Amazon review love. So, I’m going to drop a link to my book and Harry Percival’s Test-Driven Development with Python, which has been out for awhile but it’s only got six reviews. And I know a lot of people have read this stuff.
KENNEDY: Yeah, Harry’s book is really great. ‘Obey the testing goat’ and all that stuff.
OKKEN: And also, the Greenfields’ Two Scoops of Django. I know a lot of people who
have started Django or have gotten a lot better at it using this. So, go out and show some Amazon love to these.
KENNEDY: Definitely. I think it really helps if you’ve read a book, to write a review. If you've taken a class, give a review. These things actually make a big difference.
OKKEN: Yeah, it really does. And we’re all trying to do things the right way and trying to support the community.
KENNEDY: Awesome. Well, the last one I want to talk about sort of harkens back to the first one that you did about the data science space and the Anaconda Distributions. You probably know that Anaconda distribution is an alternate distribution for Python. It’s basically CPython but instead of being a stand alone Python where you pip install stuff, it comes packaged with most of the machine learning, data science and popular libraries you already need, pre-compiled for your machine. So, if you want to use some weird package that requires a 4-tram compiler or something, you can just install it. Either it’s come with Anaconda or you Anaconda install it and it actually downloads to the binary version, so there’s no worries about it not installing correctly.
OKKEN: Yeah, there’s also both paid and free distributions but even the free one is one of the few multiple package distributions that is completely legitimate to do within a company, as long as you’re not reselling that itself.
KENNEDY: Yeah, that’s awesome. So, the news about Anaconda distribution is version 5 is released. They have a hundred packages updated or added. They have Jupyter Lab alpha preview included. Updated MKL, that’s the Intel high performance compiled stuff, so it uses the Intel low-level speed ups for the machine learning and computational stuff. New compilers for MacOS and Linux. So, what is that? That’s Clang and GCC, respectively. But what’s important here is they flipped the flags on the compiled stuff for all of these things to use the newest and most compatible flags for security. So, the stuff that gets compiled out of her is less likely to suffer from things like buffer overflow attacks and stuff. So, that’s really cool. The compiler is now a little safer for you. They’ve got updated conda-forge and some other things that create another channel that has to do with this new compiler thing I talked about and so on. So, pretty cool.
OKKEN: I still have on my to-do list to go check out Jupyter Lab. Have you done any of that?
KENNEDY: I have not checked out Jupyter Lab.
OKKEN: Okay. It looks fun.
KENNEDY: It definitely does. There’s a lot of cool stuff happening with Jupyter and
social coding and stuff these days. It’s exciting.
Well, that’s it for my news this week, Brian. Anything else you want to add?
OKKEN: I did find out last week that Python Testing with pytest is available on Safari Books Online. It’s now there.
KENNEDY: That’s awesome. Tons of people have that available to them as part of their company, right? So, they can now get your book that way.
OKKEN: Yeah. I don’t think I do. I’m going to check it out. People can check it out. I have no idea if any of that money comes back to me with that, but I’m glad that a lot of people can read it.
KENNEDY: I think one of the things that’s great about creating something like a book or a course or whatever or even a podcast per se, is that people use it and enjoy it, right? You put a lot of energy in creating it and if it just sat there, digitally silent, that would be sad.
OKKEN: Yeah, it would be.
KENNEDY: Cool. I’m glad it’s out there and yet another channel for people. Alright, well, Brian, thanks again for everything this week and talk to you all later.
OKKEN: Thank you. Bye.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.