PYTHON BYTES TRANSCRIPT
Episode #53: Getting Started with devpi and Git Virtual FS
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #53, recorded November 21st, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve got a ton of cool things we picked for you today. Well, six plus a few more but it feels like a lot of good stuff to share with you guys. I’m looking forward to it. How about you, Brian?
OKKEN: I’m really looking forward to it, yeah.
KENNEDY: Definitely. Before we get into that, let’s say, ‘Thank you, Rollbar.’ If you think that there are errors lurking in your app and you want to get notified right away, go to pythonbytes.fm/rollbar. Check it out. We’ll tell you more about that.
Right now, Brian, I want to know your philosophy on line length. Are you a strictly 79 or less sort of person, Brian?
OKKEN: I’m trying to do the 79 thing but it’s really short. We do like, 120 in my work group at work.
KENNEDY: Do you guys use 44-inch HD TVs for your monitors, or what? (Laughs)
OKKEN: It’s still pretty good to have it a little bit shorter so you can do side by side diffs easier and stuff.
KENNEDY: Yeah, for sure.
OKKEN: But 79 is really tight. How about you? What do you use?
KENNEDY: It is tight. I guess I do stick to 79. If the editor says, ‘Hey, this one is too long. You should reformat,’ I guess I do. But I feel like it has a tendency to put pressure on you to make bad decisions. For example, if you have an expression involving, say five variables and a string, Say you’re formatting a string, it would encourage you to have those variables super short and non-descriptive so they fit within 79. But of they’re long and descriptive, the might be 100, right? So, I feel like there’s this pressure but I guess I succumb to it anyway,
OKKEN: Things that I share on GitHub or something, I try to keep to 79, but I don’t know if it’s a good idea or not. Mostly because I do testing and enough people will run Flake8 over my code and say, ‘Hey dude, how come your code isn’t clean?’
There’s an article from Jake VanderPlas. He’s the astronomer guy that did the PyCon talk, did the keynote.
KENNEDY: Yeah, he did the keynote there and he also did another talk. He’s great. He’s up at the University of Washington, doing all sorts of cool Astronomy stuff. So, what did he have to say about line lengths?
OKKEN: Because of the switch of Twitter between 140 and 280 that they’ve done, he was intrigued by looking at the statistics and did an exploration of line lengths in Python packages. He did it like a Jupyter notebook-type article so that you can follow through all of his stuff. And mostly, looking at NumPy, SciPy, Pandas, ScikitLearn, Matplotlib and AstroPy. I didn’t know about AstroPy, but that makes sense because I’m not an astronomer.
KENNEDY: (Laughs) Yeah. How often do you analyze telescopic images with machine learning?
OKKEN: So far, zero times. (Laughs)
KENNEDY: It sounds fun though, doesn’t it?
OKKEN: Yeah. It's kind of a neat look. I wouldn’t know how to do this right off the bat but it’s pretty simple to write a little bit of code to import a bunch of modules and check out the line lengths and examine that. And graph it and plot it, and clean it up. It’s a pretty cool article. Then just sort of looking it at, it looks like most of them follow a distribution.
KENNEDY: A normal distribution?
OKKEN: It’s not exactly normal.
KENNEDY: An abnormal distribution? (Laughs)
OKKEN: A log normal distribution. That’s it.
KENNEDY: Oh, wow, okay.
OKKEN: That’s more statistics than I understand, but it’s sort of normal, I guess. But it follows is log normal distribution, except there’s an artificial bump near the right side, the 80-character side because many of these packages are trying to hit 80 or less. There’s an argument there that you don’t really need it because code naturally fits anyway. It’s a cool look at it. I was thinking about using the code within this to take a look at our code at work to see where our line lengths are at work.
KENNEDY: Yeah, that’d be an interesting analysis to run some PEP8-style metrics across your organization. You know what I think people should do, some enterprising listener out there should build a little package that we can drop in and do cool stuff with.
OKKEN: Yeah, and at the end of the article, he asks about what different popular packages fit into the line length distribution match, so that’d be neat.
KENNEDY: And in other languages, like how did this compare to JavaScript and C++ versus Python? Things like that are also interesting to know. I don’t have those answers so they’re open questions for now.
So, it’s yet another good day for Modern Python. The sun continues to set on Legacy Python. This time around – you mentioned this package previously – NumPy.
OKKEN: Yeah, there’s some interesting news with NumPy.
KENNEDY: So, NumPy is dropping support for Legacy Python. They say, ‘We know
that the Python care developers are dropping support for Python 2 in 2020.’ It’s still an open question on the day. I like that guy who voted for the keynote of PyCon 2020 as the official end date. Who knows what day it is? It hasn’t been officially announced but they say this requirement to continue supporting Python 2 makes it harder and harder to advance NumPy, so they’re going to drop it.
OKKEN: I think that’s great. I can see that.
KENNEDY: It’s such an important library and data science has definitely moving towards Python 3. So, there plans are, December 31st, 2018. Up until then, they’re going to support Python 2 and Python 3, 100%. That’s not very far away. A little bit of time on that one. And then January 2019, all new features will be Python 3 only, and then the year after that, I guess when Python 2 support goes out, it probably goes out of here as well.
OKKEN: It isn’t just a spiteful thing. They’ve got real reasons to do it because increased burden of trying to be Python 2 compatible is unreasonable.
KENNEDY: Yeah, it definitely means there are features that are not in NumPy because it works on Python 2. So, it’s time to say thank you and goodbye to Python 2, they say. Which is, I think, great.
Speaking of data science, one thing I’ve tried to learn a lot but I haven’t done a great job of is Pandas.
OKKEN: Actually, Pandas and kind of the whole data science tool chain is something I’m curious about but I’m not sure how to go about it. So, I really like this article from Ted Petrou about how to learn Pandas and how to go about it. His opinion, of course, but it seems like a pretty reasonable thing. He was recommending reading the documentation and reading about Pandas and how it works. But then also, kind of jumping back and forth and using it for small projects. I guess with any tool, that makes sense. But he gives more details about how to do that so you can jump back and forth and know what to learn first.
KENNEDY: Yeah, I think one of the challenges that I have learning Pandas – I can do a few things with it but not a lot – I don’t really have a project to use it on. I just kind of poke at it and go, ‘Oh, okay. It does this cool stuff.’ But I haven’t done data science-y things or financial analysis things. So, he talks about things like, ‘Here’s Jupyter notebooks. Here’s some Kaggle kernels and data sets in the form of Jupyter notebooks.’ Some concrete ways to play with it, not just fire it up and poke at the API.
OKKEN: Yeah, or maybe go back to that Jake article and examine your line lengths.
KENNEDY: Exactly. There’s an example.
OKKEN: One of the things I thought was a nice ending is when you think you have it fairly well, go a little bit further and start answering some questions on Stack Overflow. Measure yourself against what people are running into problems with. I think that’s a cool idea.
KENNEDY: That is a cool idea. And the people on Stack Overflow will let you know if you’re wrong. (Laughs)
OKKEN: (Laughs) Yeah, definitely. It’s one of the nice and not nice things about the Internet, the best way to find out if you’re right about something is to post the wrong answer.
KENNEDY: (Laughs) Yeah, people don’t really hold back on you too often, do they?
OKKEN: No, you get that right away.
KENNEDY: If you have a thick skin or you’re willing to grow a thick skin, that’s actually a great way to do it. Reddit will probably also work, too.
OKKEN: Also, I’m sure the data science people are similar but the Python community as a whole is fairly gentle with people. They’ll tell you you’re wrong but they’ll be nice about it and probably use more words than you’ve written to explain why you’re wrong about it.
KENNEDY: Yeah, maybe they’ll have a good explanation of your misunderstanding and you can connect some more dots.
OKKEN: I depend on that a lot.
KENNEDY: (Laughs) Nice.
Before we get to the next one, which is some more social coding and stuff, I just want to say, ‘Thank you’ to Rollbar. If you have a web application and it’s running on the Internet, it’s probably crashing at some point and it would be great to know about that. How often do you go back and read logs? Do you go back and read logs of your work very often, Brian?
OKKEN: Actually, more than I want to, yes. I’m a manager also, so I get to tell other people to do it.
KENNEDY: Here’s a problem and a log can fix that, yeah. But you don’t want to have to depend on reading that if you can avoid it. Just getting notifications right away, that’s be awesome.
So, Rollbar – I normally talk about it in the context of Python and that’s totally true – but it actually supports 26 languages and frameworks. So, Python, obviously, Flash, Django, Pyramid, etcetera. Node.net. It even has a Flash plugin and Client-side JavaScript. So, totally cool. Whatever you’re using, you can use Rollbar. It’s awesome.
And they have this thing called People Tracking. For example, on my training site, people are logged in and if there’s a crash, I can emit a little thing that will tell Rollbar, ‘This is the user that had this error.’ So, not only do I know what the error was, I can actually go back and send that person a message. ‘Saw you ran into a crash. Here’s how I fixed it.’ It’s like, ‘Woah, I didn’t even tell you what happened. That’s kind of creepy but awesome.’
Anyway, if you want to be creepy and awesome, check out pythonbytes.fm/rollbar and solve the problem before your users even tell you about it.
Alright. So, one of the things that came out recently was an announcement from Microsoft and GitHub. I’m not sure what the order of it was, but I think it started at Microsoft. They want to use Git, and everybody wants to use Git because Git is awesome. But the problem is, they actually have some pretty large projects. And it turns out, they tried to use Git and it was basically unusable for some of their projects at Microsoft.
So, Brian, you’re probably thinking Git was built for Linux and Linux is a huge project, right?
OKKEN: Yeah.
KENNEDY: So, what’s up with these Microsoft people? They must be doing it wrong. And I kind of actually thought that when I read this first as well. It turns out, if you look at the Linux kernel, it’s like 640 mgs (megabytes) of data in the source code repository. It’s quite big, but it turns out if look at the Visual Studio Tools, those are 3 gigabytes, which is five times bigger than Linux. They’re trying to use it for that and that was kind of a little sketchy. Then they wanted to use it for Windows, and apparently the repository for Windows is 270 gigabytes, or 421 times larger than Linux.
OKKEN: Wow. No wonder it’s slower.
KENNEDY: That’s a little bit bigger. And there’s 4,000 people committing to it all day as their job. So, it’s got a lot. of contention as well. What they’ve done and the announcement is, “MIcrosoft and GitHub team up to take Git virtual file system to MacOS, Linux.” The GitHub part is to make this work on other platforms, MacOS and Linux and things like that. So, what they did is they said, ‘Look, the problem is we literally have thousands, maybe millions, of files when we do a checkout.’ So, a regular Git checkout, it would take 12 hours to clone their repository, three hours to do a straight checkout of a branch, eight minutes to ask Git status and 30 minutes to commit one file. It was pretty broken. The reason they said it was broken primarily, is that there were all these files and generally, you’re only working with a little sub-part of them. What they did is they created a virtual file system that understand Git repositories and it only checks out a directory listing.
OKKEN: Wow. Cool.
KENNEDY: And then if you interact with it, it basically will create those files by getting them from the server on demand. It doesn’t have to be some plugin, it’s at the file system level. So, if I open up command prompt or I open up some editor and I just type, ‘GCC’ and it has to touch ten files, that will automatically get them from Git of they weren’t there. Isn’t that crazy?
OKKEN: That sounds a lot like ClearCase before ClearCase started to suck.
KENNEDY: (Laughs) Yeah, exactly. So, they built this for Windows and they got really good success and they said instead of 12 hours to clone it, it takes 90 seconds. Instead of eight minutes to do a Git status it takes three seconds, instead of 30 minutes to do a commit it takes eight seconds. So, they’ve actually been pushing about half of these changes back upstream into Git, and they’ve been working with Git developers to make this a general thing, not a Microsoft thing, which I think is pretty noble. That’s definitely a new Microsoft, not the old Steve Ballmer Microsoft.
OKKEN: Is it just for GitHub or can we use it with other Git?
KENNEDY: This is just purely for Git. So, they’re pushing this back to the Git developers, not for GitHub. But where GitHUb comes into this is, GitHub maybe has this problem for projects hosted on GitHub, but people are already using those projects on GitHub, so it’s probably okay. But they’re trying to sell Enterprise GitHub, which is like a box you put in your company to run those things. And these Enterprise projects can be huge like this Windows problem. So, GitHub is trying to expand this to Linux and MacOS, so that they can make that part of their enterprise story.
OKKEN: I’d like to have it be part of the GitLab.
KENNEDY: Yeah, so hopefully this makes it back into Git proper and then the OS support can come from Microsoft and GitHub. That’d be awesome.
OKKEN: Yeah, this is pretty cool, actually. I’ll keep an eye on this.
KENNEDY: Yeah, we’ll see where it goes. They’ve already got demos and stuff working for Microsoft Windows and there’s actually a 10-minute little video. As they work through the stuff, you can check it out. It’s really short.
Speaking of downloading stuff from servers and getting your libraries all put together…
OKKEN: I don't know of I’m just dense or what, but the multiple times I’ve tried to set up a devpi server for caching PyPI stuff locally… I need to do this, partly because if you want to do a laptop setup while you’re on the plane or something, but also behind a firewall so I can have my belt server and not have to go outside the firewall and stuff like that. I’d like to have a local one. I ran across this article and I haven’t actually gone through it, but it looks pretty good. It’s from Stefan Scherfke and it’s called, “Getting Started with devpi.”
Basically, he had the same thing. He needed to set up a local server again, couldn’t remember how to do it. The documentation is okay but still has some issues. And so he just sort of walks through the whole thing and shows you how to do it in at least one use case, which is pretty close to what I think most people need. Mostly, mirroring the packages from PyPI that your company actually uses, not everything, just the stuff you’re using. And then also, being able to store your own local things there.
KENNEDY: That’s a great combination. I think the caching bed is really nice. You can just point to this thing and it will just pass through and get the ones from full PyPI, right?
OKKEN: And then you can tell it to refresh occasionally and stuff. Then you can also push up your own local ones so that you can share your own stuff around.
KENNEDY: I think that’s a really great thing that probably not too many organizations are doing. If you have different teams working on different packages, you can publish it to your company through these things, which is pretty awesome. We also have a PyPI white list, that might be really positive given some of the recent security scares we’ve had there. Depending on how paranoid you are.
OKKEN: One part of the article is talking about user management. For me, I’d probably set up things for all of my local dev team plus the build to be able to get things. But he was having it locked down to just the belt server being able to do it, which is an interesting idea as well.
KENNEDY: Nice. So, the last thing I want to cover this week is what I think a lot of people who are developers or work for a company building a product that are kind of new to it, sort of a technical company, maybe miss, is the whole marketing side of software. The hardest thing about making something successful, whether it’s a web map or a regular app or it’s a SAS thing or whatever, is not building it. Building it maybe challenging, but that is not the hardest thing. The hardest thing is getting people to notice it in a busy world and getting the word out. The whole marketing thing is something that most of us developers are not super good at.
So, there’s this GitHub repository called, “Marketing for Engineers.” It’s a curated collection of marketing articles and tools to grow your product.
OKKEN: That’s nice.
KENNEDY: Isn’t that cool? So, these guys created some kind of IOS app and they’re like, ‘Uh, it took us almost two years to learn how to market our project. It was painful. So, we’re trying to help that.’ They said, ‘Look, we’re going to come up with a bunch of resources that help you solve practical marketing tactics, such as finding beta users, growing your first user base, advertising your product without a budget, all those different things.’ They have a whole bunch of different areas that if you’re new to this, you can really learn a lot from it. How to market on social media, where are the right places, how to leverage Quora, how to leverage product time and business models, all kinds of stuff. I thought that might be useful. There’s about 4,000 people who started on GitHub, they probably also thought it was useful.
OKKEN: That’s a huge list.
KENNEDY: Yeah, it’s massive.
OKKEN: One of the things I saw on there, it’s near the top, is ‘Doing things that don’t scale,’ which I love that advice.
KENNEDY: Yeah, I like that as well, yeah. Definitely. Do things that don’t scale.
OKKEN: As I was writing the pytest book, I tried to help out as many people as possible on the Slack channel. Even if it meant a couple times that I asked people, ‘Hey, are you available? Can I just call you on the phone?’ I just talk to people about their issues with pytest and with testing. Clearly, you can’t do that on a huge scale but when you don’t have any users at all yet, it’s pretty easy.
KENNEDY: Yeah, for sure. The behavior creates super advocates for you and it also let’s you realize some of the challenges. So, maybe in the final version of your book it reflects some of those challenges that that one person had but maybe there’s a thousand or more people who actually have it. They didn’t call you because they just read your book.
OKKEN: I love this because a lot of us nerds don’t become nerds because we really like talking with people.
KENNEDY: I use to laugh at the people in business school. Now, I’m like, huh. They probably know something. (Laughs)
Awesome. So, that’s it for this week. Those are all the fun things. Thanks for sharing them, Brian. You have one more bit of crazy, American-flavored shopping madness around Python for us, right?
OKKEN: Yeah, I guess I forget that there’s plenty of listeners outside of America. But one of the traditions we have is the ‘Black Friday’ sale, which has spilled over into online things as well. Starting the day after Thanksgiving usually, but I think we’re doing it a little early here. Maybe not.
If anybody doesn’t know, I wrote a book. I’ve been talking about it for years, so you probably do. Python Testing with pytest is through Pragmatic and Pragmatic has a book sale going on – November 22nd through December 1st – and you get 40% off all ebooks.
KENNEDY: That’s awesome. So, get in there and get it. The reviews are awesome for that book. Is this a global thing, even though it’s terminology and date is U.S.-inspired. Can people of the world get it for 40% off?
OKKEN: Yeah. To get the discount, just use coupon code TURKEYSALE2017.
KENNEDY: Awesome. Alright well, go and get that book, if you’ve been on the fence.
OKKEN: One more thing that just came up, I had somebody from the testing Slack channel asked me if I could mention PyCon Colombia. Tickets are available. They’re going to have their first Colombia PyCon in Medellin, February 9th, 10th and 11th of 2018. We’ll put a link in but it’s pretty easy to find. So, that will be fun.
KENNEDY: Yeah, awesome. Check it out, if you’re down in South America. It could be a good time. Or if you want to go visit there.
OKKEN: How about you? Do you have any news to share with us?
KENNEDY: I have no news. There’s no news for me. (Laughs) I’m actually working on some stuff. I don’t want to announce it yet but absolutely got some cool things I’m working on. I’m always trying to juggle too much which is kind of the curse of my personality, but it’s fine.
OKKEN: You’re doing a lot of cool stuff though. I can’t wait to see.
Oh, back on the PyCon Colombia thing, they have a really cool logo. So, if anybody is going to that and you could snag me a t-shirt, that would be cool.
KENNEDY: Yeah, order the t-shirt. They come with the logo. (Laughs)
OKKEN: Well, thanks for talking to me this year.
KENNEDY: You bet. Thank you, Brian. Thank you, everyone as well, for listening. See you later.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your for friends and colleagues.