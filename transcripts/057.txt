PYTHON BYTES TRANSCRIPT
Episode #57: Our Take on Excel and Python
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #57, recorded December 19, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve a bunch of really cool stuff to share with you as always. We’ve been looking through all the news sources and finding all the Python goodies for you. Brian, what’s the first goodie that you found?
OKKEN: Anthony Shaw – or I know him as Tony, or on GitHub his handle is @tonybaloney – he has been working on a tool called retox. This is a tool that you can run anything with it, but the original intent is to run your tests. What tox does, tox is a tool that will run your setup is you have packages and you can turn that off if you don’t want the setup to get tested. But it will test your setup and then run it in different environments. The typical example is running all you tests in multiple Python versions or multiple library versions to make sure all your tests pass. There is a detox version that can distribute that across processors, can speed it up two to four times faster, or more if you run it on distributed processors.
KENNEDY: Or if you spent $15,000 on a new iMac Pro and got 18 cores.
OKKEN: Yeah, it could be 18 times faster. Or 16, or something.
Anthony put together retox which does all this but also does it with a nice GUI, so you can watch your tests run, which is really kind of cool. He did it for Python 2 first, and then very quickly within a week, imported it to Python 3 with some problems along the way but he worked on them, which is nice.
KENNEDY: Yeah, well done.
OKKEN: It also has the capability of watching a directory. You can have this GUI sitting up on a monitor somewhere, if you have a couple monitors, or in your corner window. You can have it watch your source code and as you save changes, it tests everything on multiple versions of Python or multiple hardware or whatever you want to do.
KENNEDY: Yeah, that’s really cool. I’ll just describe kind of what it looks like. So, you run it in terminal or command prompt and you get an antsy art-type of interactive thing. It shows you different columns for the different tests, like Python 2.7, Python 3.6, Lint, PyLint, all these things running in parallel and their status. It’s pretty cool, right?
OKKEN: Yeah. One of things I was trying to do this morning but I didn’t get a chance to quite get it done with meetings and all, but instead of running Python 2 versus 3 and stuff, what I’m going to use it for is running the same set of tests for the same Python, but against different instruments so I can run across multiple hardware.
KENNEDY: That’s cool. So, you’re parallelizing the same code running. You’re parallelizing the hardware, not the versions of Python.
OKKEN: Yeah.
KENNEDY: That’s pretty awesome. That’ll be good.
So, I thought this episode I’d talk about some of the tools I’ve been using for a little while that I really enjoy but just haven’t thought to bring up on the show. The first one I want to talk about is a database management tool for MongoDB. It used to be called RoboMongo. It got bought by a company – which is an interesting story in and of itself, called 3T – so now it’s Robo3T. But in my heart it will always be RoboMongo.
What this thing is is a shell for MongoDB that you type, so a command line type of interaction with it, but all the results appear as a GUI results. So, you have this part where you type in and you run commands against Mongo, but all the results show up in maybe a tree view or you can right click and interact with them once the results come back and stuff. It’s really nice if you’re doing anything with MongoDB. It runs on all the platforms. Check it out, Robo3T.
OKKEN: Nice way to visualize your database. That’s cool.
KENNEDY: It’s one of the best, simple, visual interactions with databases because the majority of what you do is still the CLI, it’s still the straight interface for working with it, but all the results that come out of that interaction are GUI-based, which I think is cool.
It’s also interesting in an Open Source way. On one hand it’s number 34 most popular repository on GitHub, which is cool. It’s built with QT, which makes it look like a really nice cross-platform app, which you could build out with PySide or Pyqt, I think, and get the same looking app, so that’s a really interesting example. It was an Open Source project that was started somewhere in Eastern Europe – I don’t remember where – and became really successful and this other company bought it. So, here’s this successful, interesting business model around Open Source stuff. So, if you’re doing anything with MongoDB, check out Robo3T.
OKKEN: Sometimes we talked about, in the new version of Django, you don’t have to do regular expressions (RE) anymore…
KENNEDY: For the routes, right? For the route definitions, which I think is a positive thing, for sure.
OKKEN: Yeah, definitely. But there’s definitely sometimes… I’ve been using regular expressions for as long as I’ve been programming, almost.
KENNEDY: So, programming’s always been hard?
OKKEN: (Laughs) Yeah, yeah. Shortly into my CS (Computer Science) program, I got thrown a Pearl book and said, ‘Learn this.’ So, yeah.
Anyway, there’s a couple articles that came out recently that I thought were really good for people who need to get a hand on regular expressions quickly. One of them is, “Regular Expressions Practical Guide” and it is kind of a nice article. It talks through using the RE package to do things like parse email addresses, phone numbers and URLs. Those are good examples. Even if you don’t have to do that, everybody knows what they look like so it’s good to learn some of the regular expressions with that.
KENNEDY: Yeah, I really like the example-driven approach as well, like, ‘Here's how you match a bunch of different things you want to.’ Also, the fact that it’s using the Python libraries and not just, ‘Here’s a random regular expression’ means it's really quick to just drop in directly, which is cool.
OKKEN: There’s another article called, “Regular Expressions for Data Scientists” that does some of this, then also it’s mostly focused around parsing texts, of course, with regular expressions. It’s also a good intro and it dives a little bit deeper into ‘find all and search.’ Check both those out if you want to bone up on regular expressions.
KENNEDY: Yeah, that’s really cool. I like the motivational introduction for the data science one. ‘Sometimes, this might include searching massive corpuses of texts. For example, suppose you’re asked to check out who’s been emailing whom in the scandal of the Panama Papers. That’s 11.5 million documents. We need regular expressions. Let’s go.’ Very exciting, very exciting.
Cool, so before we go on, let me just tell you about the sponsor for this week’s episode. That is DigitalOcean. Thank you, DigitalOcean for sponsoring the show, as they are the major sponsor for the show. They definitely sponsor it more than anyone else and for good reason. They have really cool things going on over there. There’s a lot of places you can get your cloud computing sources but a lot of them are overly complicated, overly expensive and so on. Not with DigitalOcean. Go over there and quickly set up a server, set up some storage, link them together. It’s really wonderful. This site’s running on DigitalOcean, among other things that I’m running as well. Definitely a great place to check out. You can get started by going to pythonbytes.fm/DigitalOcean.
So, keeping with my theme of things that I want to talk about that I’m using and really enjoying but I haven’t bothered to bring up on the show, to complement the other side of the story with the MongoDB thing is MongoEngine. You’ve heard of SQLAlchemy, right, Brian?
OKKEN: Yeah, definitely.
KENNEDY: Yeah, that’s probably the most popular way in Python to talk to relational databases. Well, the MongoDB equivalent of SQLAlchemy is this thing called MongoEngine. There’s a handful of these so-called object document mappers, because you don’t have a relational, so it’s not an ORM, it’s an ODM. There’s a handful of these for MongoDB but this one really is quite needed. It lets you take a class, derived from a base class and map it into MongoDB. The way you work with it is very similar Django’s ORM, actually. You map a class, create an instance of it, call save, you can do queries on it, all sorts of stuff, while leveraging the hierarchical document DB-nature of MongoDB. It also adds new features. MongoDB doesn’t really have schemas in general. They’re starting to add some of these features but there’s no schema definition, it’s just whatever you put in there. On MongoEngine, you have a schema that matches your classes, so you have some reliable data structure. MongoDB has no concept of required fields or constraints, like, ‘This number must be within 10 and 1,000’ but MongoEngine does. Relationships, all sorts of cool stuff. It really provides a lot of nice structure around working with a no SQL, schema-less database.
OKKEN: That’s nice. I’ll definitely check that out.
KENNEDY: I found this to be super helpful. Actually, a lot of my sites are implemented, including pythonbytes.fm, for example. The one thing that’s a little bit of a pain is the deserialization speed is not awesome. If you retrieve 100,000 records from MongoDB, that’s really fast, probably. But then it will drag on, turning those into MongoEngine documents. But if you’re getting 50 or 100, it’s totally fine. For whatever reason, it’s just not that fast deserializing stuff. Usually, it’s plenty fast, but if you do it 100,000 times it starts to show up.
OKKEN: Okay.
KENNEDY: Alright, what you got for us next?
OKKEN: Another PrettyPrinter. It’s an article called, “Introducing PrettyPrinter for Python.” I think it’s an extensible one, which is kind of nice. It’s 3.6 and above only. Somebody was taking a look at all the different ways to PrettyPrint their output for debugging your code and wasn’t really happy with them, so added yet another. But this is extensible and cool. If you have a particular way you want to print your classes or your calls or different functions, you can customize that. It’s a pretty simple interface and I like it.
KENNEDY: It’s really nice. If you’re in, say, the Python REPL, you can ask it to print out some stuff and it will actually do things like format the dictionaries according to PEP8 with the line breaks and indentation. It will colorize all the values, like the keys will be one color and the values will be another. Things like that. So, it is really nice like that.
OKKEN: The colorizing is very nice. That’s pretty cool.
KENNEDY: I would say the colorizing and also the reformatting for human-readable parts is quite nice as well. It’s very nice and has a nice declarative API as well, so you can even extend it, right?
OKKEN: There’s an example in there to be able to extend your call with comments even, to have the comments pop out.
KENNEDY: So, let me ask you a question. What do you think the most popular database in the world is?
OKKEN: MySQL.
KENNEDY: MySQL is definitely a good one. I’m going to say Excel. (Laughs) At least it turns an amount of data that a number of people use to create new databases. Excel is this weird thing that people who don’t know programming or technology use it to play the same role. You’ve got relationships, you’ve got formulas and whatnot. So, Excel is really super important in the business world all over the place. It so happens that Microsoft is considering replacing the macro scripting language for Excel which is built into it – VBA – with Python.
OKKEN: That would be very nice.
KENNEDY: So on one hand, I’m like, ‘Wee.’ I don’t really want to program Excel. It doesn’t make me super excited or happy. On the other, look at what the adoption of Python in the data science base has done for Python in general. It’s really complemented it and made it a better place. I think that’s what would happen if Python became the main scripting language of Excel as well. There are all these people who are not really working in the space now and all of a sudden they’d be super interested in contributing things and who knows what they’d actually come up with.
OKKEN: This is actually pretty cool. I’m imagining a manager working with a spreadsheet and wanting to add some macro capabilities and getting a little bit too deep into it and getting a little lost then grabbing a developer and saying, ‘Hey, can you help me with this.’ And right now, if it was me, I’d say, ‘Nah, you’re on your own. I don’t want to do that.’
KENNEDY: I would hide under a desk. ‘No, Michael’s busy. Michael can’t talk right now.’ (Laughs)
OKKEN: But if it’s a Python interface then I’d help out. I think the interaction between developers and managers would increase dramatically if Python was in Excel.
KENNEDY: Yeah, I think it would be super cool. Who knows what the chances of this actually happening are? I tried to get Python into Windows, because you know it doesn’t ship with Windows. So, Microsoft has this place called UserVoice – maybe it’s not even a Microsoft thing, but they use UserVoice – which lets you vote on features and lets you make requests and things like that. So, I actually got over a thousand people to vote for shipping Python 3 with Windows 10 before it actually came out but, no dice. However, they did put Python into SQL Server, which you can do in process machine learning against your data. So, there’s one example of them doing this and if they’ll do it for SQL Server, they may do it for Excel. It would be awesome.
So, everyone listening can have a voice on this. If you go there, click the link, upvote the little item and there’s a survey you can fill out and tell them, ‘Python 3, please. We’ll take more of that.’ That’d be awesome. If this sounds cool to you, be sure to at least upvote it so that they know this is something we all want.
OKKEN: And call your Congressman.
KENNEDY: That’s right. No, that was Net Neutrality, which didn’t really help so much but this might, so this is awesome. (Laughs)
Alright, well that’s our items for this week. How about you? Any personal news?
OKKEN: We’ve been getting over being sick but we have a tree up now, but we haven't decorated it. So, we have to decorate for Christmas.
KENNEDY: That will be a fun thing. Kids going to be home from school pretty soon?
OKKEN: They’re all home now so that’s fun.
KENNEDY: So, work is super productive these days? (Laughs)
OKKEN: Yeah, I can actually get to work at a decent time, so it’s good.
KENNEDY: That’s cool. Well, for me, I have a webcast that I’m doing and one more MongoDB thing. So, I’m doing a webcast that I call, “Let’s Build Something in MongoDB and Python.” It’s February 22nd. There’s a link at the bottom of the show notes so if you’re interested you can attend the webcast. It’s free and it might be fun.
OKKEN: I’ll definitely go. Don’t you have an “Intro to Mongo” also?
KENNEDY: I do have an “Intro to Mongo.” A free one, actually. It’s at freemongodbcourse.com. Thanks. And it uses MongoEngine and it uses RoboMongo. How about that? But it doesn’t use Excel.
OKKEN: Good. (Laughs)
KENNEDY: (Laughs) Well, Brian, thanks so much for finding all these things and sharing with everyone.
OKKEN: Yeah, thanks.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.