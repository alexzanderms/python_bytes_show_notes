PYTHON BYTES TRANSCRIPT
Episode #58: Better Cache Decorators and Another Take on Type Hints
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #58, recorded December 19, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We have a bunch of awesome stuff to share with you. First, I want to say this episode is brought to you by DigitalOcean, so thank you, DigitalOcean.
OKKEN: Yeah, thanks, DigitalOcean.
KENNEDY: Indeed. Love their stuff. We’ll talk a little bit more about that later. Let’s start with monkeying around a bit.
OKKEN: There’s so much monkey, I’m not sure why, in Python.
KENNEDY: There’s a lot of monkeying, you’re right.
OKKEN: Yeah, we’ve got Monkey Patching and stuff. But this is MonkeyType from Instagram. In Episode #54, we talked about PyAnnotate, which is a way to add type annotations to your code while it’s running. It’s from Dropbox, but it was only Python 2 at the moment. This one is a similar sort of thing but it’s from Instagram and it’s Python 3 only. It doesn’t do the comments, it does the Python 3 style type annotations, so I’m really excited to try this out.
KENNEDY: Yeah, that sounds really cool. You know, I’m definitely heartened to see a lot of people who have large code bases – Dropbox, Instagram and so on – making these tools. They’re going to bring everybody along to Modern Python really nicely.
OKKEN: It’s very good and I like the way that types are moving. I was kind of lukewarm at types for Python at first, but using it to try to solidify the quality of your code base for large code bases makes total sense, and I like what they’re doing with it.
KENNEDY: I really like adding the type hints, just in a couple places where the autocomplete falls down. Last week, we talked about MongoEngine. You do a query for MongoEngine and as far as the tooling, it’s just like, that’s a random thing that came back. It has no idea what it is. But if you add just a few type hints, the rest of your application can automatically… Well, Editor can detect the rest of your applications working with one of these concrete types. So, just a little type hints here and there goes a long way. I guess that’s probably for new code, right? But for older code, you want to switch to Python 3 from Python 2, having that as a solid foundation so you really know what you’re working with as you move it around. That’s even really valuable right there on its own.
OKKEN: The article I linked to, one of the things it talks about is, what happens is that you’re actually running code and it pays attention to which types are going through different parts of your code. You can run it through while you’re running tests but it did have a note – which I thought was interesting – to say if you have the style of testing where you’re using a lot of mock objects, the types are going to be all messed up. So, be aware of that; you may want to generate your types some other way.
KENNEDY: Oh, right, because it will see the mock and think that’s what suppose to go there, not the thing it is mocking.
OKKEN: Yeah, exactly.
KENNEDY: Interesting. Cool.
So, sometimes you can make your code fast by optimizing it. Maybe it talks to a database and you’re going to put the right kind of indexes in there and of course, it should be fast. Other times, you’re working with things that are out of your control. You need to call a web service, some kind of stock quote or whatever, and it can only be as fast as that web service. Unless, you’re willing to hang onto it for a little bit and do some caching, right?
OKKEN: Yeah.
KENNEDY: So, Python, I don’t know how many people know, but there’s something called Funk Tools in Python and in there there’s a decorator called lru_cache. And you can put that on to any function and it will look at the arguments going in there and if it sees that argument series again, multiple arguments, if it sees arguments it’s seen before, it will just return that value instantly. That’s pretty cool, right?
OKKEN: I did not know that. That is cool.
KENNEDY: Yeah. Suppose I’m calling a weather API and I’m doing it from my website and I’ve got all these different people come in and calling it and it turns out to be slow, I can actually throw that onto it. And it would say if two people ask for the same zip code, potentially it’s just going to return that instantly, just out of memory. So, that’s really cool, but it only works in certain ways. For example, if that method takes a list, lists are uncacheable; lru_cache decorator requires all the things it’s going to hold to be cacheable, for example. So, it’s cool but it’s kind of limited in a certain way.
So, there’s this other project that’s kind of inspired by this idea and it goes much further and has a lot more options, called cachetools. I’m guessing you probably haven’t heard of cachetools if you haven’t heard of lru_cache.
OKKEN: I have not.
KENNEDY: So, this is a project that has a bunch of different cache implementations, as well as a more flexible decorator. Actually, a couple decorators you can use in exactly the same way. So, it defines a basic cache, a LFUCache, Least Frequently Used, because eventually your cache may get full and run out of memory and you can say, ‘Only hold 100 items.’ Well, when you get to 101, which one do you throw away? Well, you can use the LFUCache and throw away the one that was least frequently used, an LRUCache, or one that was Least Recently Used, or have what’s called a TTLCache, which is a time-to-live. Cache everything for five minutes. I’m sure we have memory for this. How could that be bad, right?
OKKEN: (Laughs) Yeah.
KENNEDY: And then you get that call in the middle of the night. ‘Server’s down.’ (Laughs)
OKKEN: The TTLCache, that seems like… Your example of grabbing some weather data or something, you could hold onto the weather data for at least a few minutes before refreshing that.
KENNEDY: Right. What’s really cool about the TTL one is it naturally expires the data in a way that you can predict and might understand. So, if you’re like, ‘Look, the weather’s not going to change that much in ten minutes. Cache everything for ten minutes.’ It will automatically go get a new one after the eleventh minute. That’s a really nice way to do it.
So, these are cache implementations. Then there is what’s called a memoizing – so memoization is this concept that we’ve been talking about – memoizing decorators, cachetools.cached, which is the other one we talked about before. But you can plug in all sorts of stuff. You can plug in any of the cache implementations we’ve talked about or even a straight dictionary. It takes a function that will generate the hash, so it can cache non-hashable things. You can generate some kind of indicator like an ID out of a database object or something. You can pass interesting things like a weak value, a weakref.WeakValueDictionary, so you don’t actually hold onto the memory of the things, which is pretty cool. It even has a locking object that you can pass for thread safety, if you have to recreate stuff in the hash. So, really, it’s like the idea of the LRUCache and Funk Tools, but way more flexible and configurable.
OKKEN: Wow, this is nice.
KENNEDY: It’s insanely easy to use them. You just throw a decorator on a slow function and now it’s a fast function. Just make sure you understand what that
means.
OKKEN: Yeah, so definitely in conjunction with safe measure before you prematurely optimize.
KENNEDY: Yeah, it’s cool though. Speaking of going fast…
OKKEN: Yeah, speaking of going fast, one of the things that people often start with with a new project is for a database, instead of deciding which one they’re going to use down the road, they’ll throw SQLite in. But since it’s built into Python and you don’t have to install anything extra – I guess Python calls it SQLite 3 – I don’t know, were there two of them before that?
KENNEDY: I guess so.
OKKEN: That’s something folks use and they sometimes migrate to something else, and sometimes there’s a lot of applications that stick with it. There’s an article called, “Going Fast with SQLite and Python.” It talks about some of the ways this fellow came up with to make it quickly. (Laughs) Make it run faster.
KENNEDY: Yeah, that’s great. So, SQLite is an embedded database, it ships with Python, you don’t have to do anything to have it, you just have it. It runs in process, so there’s zero latency over the network overhead or anything like that. It’s actually really powerful if you’re to have an in process database.
OKKEN: Yeah, and I had the impression that it was simpler than it is. But it does quite a bit of cool things as I was reading through this. I didn’t know you could do user defined functions and you’ve got control over transactions and autocommits and things like that.
KENNEDY: It’s gotten to be pretty feature rich. It’s cool.
OKKEN: It’s a pretty dense article but I think it’s a good to throw yourself into the deep end, if you want to jump into SQLite 3.
KENNEDY: Yeah, it’s definitely cool. Certainly a good way to get started so you don’t have to worry about extra servers and network connectivity and keep that safe, and all that. Pretty cool.
So, before we get onto the next item, I want to talk quickly about DigitalOcean. This website that hosts the podcast, delivers the podcast feed and a lot of the other stuff that I’m doing online, runs on DigitalOcean. Very, very nice experience. They’ve got incredibly fast, reliable and cheap servers. Five, ten dollars, you can have servers based on SSDs, up and running in 30 seconds. You just SSH in, get them all set up and ready to roll. If you want nice, fast servers, check them out. DigitalOcean.com. Let them know that we sent you their way.
OKKEN: They’ve been really good about sponsoring the show. We really appreciate that.
KENNEDY: Yeah, definitely. Thank you, DigitalOcean.
One thing, I think, many people got their first programming experience on is a graphing calculator. Remember back when you were in middle school or something and you had a TI (Texas Instruments) whatever, and you could make it do dumb things?
OKKEN: Well, yeah. I even started programming my HP (Hewlett Packard) calculator and it didn’t even graph. I was programming that.
KENNEDY: Yeah, so HP or TI or whatever. So, one of the really cool finds that we’ve dug up recently is this graphing calculator by this company called Numworks. You might think, ‘Okay, why is this graphing calculator very interesting?’ Well, the way that you program it is you program it in Python.
OKKEN: Yeah, that’s cool.
KENNEDY: It’s really cool. The programming language literally is Python and it will do visual math. It’s got even a free emulator, so that you can run it on your Mac or your PC. Check it out there. It does graphing, all kind of stuff. It even has a way for you to work with the hardware. It gives you some stats on 3D printing and things like that, if you want to do more hardware-oriented things. But definitely, this concept of a full-blown graphing calculator, where you program it in Python, that’s awesome.
OKKEN: And hackable. And yet, it’s supposedly going to be okay for use on the SAT even, in August of next year.
KENNEDY: Yeah, that’s actually a big deal. I know some of the graphing calculators are banned because people use them to cheat or they do too much or whatever. At least for now, until they figure out pip install SAT helper.
OKKEN: Yeah, exactly.
KENNEDY: That’s pretty fun, check that out. It’s nice to see that showing up in the calculator space because that is the first programmable thing kids have to interact with.
OKKEN: We don’t really see it too much anymore in consumer things but in test and measurement we see some programmable features show up in different sorts of devices. Having the programmable language be Python in more places is good.
KENNEDY: Yeah, definitely. We talked about last week having Python be the programming language of Excel, for example. It seems like a really great choice. If you want to add a little programmability to whatever is its you’re doing, Python seems like a great choice for that language, so it’s nice to see it here as well.
OKKEN: It’s nice.
KENNEDY: One of the problems you might have with the data science base if you’re working with a Jupyter Notebook and you just have access to the notebook, but you need a library that’s not on the server, what are you going to do?
OKKEN: I didn’t know this was a problem, actually. I haven’t been using Jupyter Notebooks enough to run into this issue. A lot of people get their Python in Jupyter from installing a conda package or some other bundled thing and you can’t just go off and pip install. I didn’t know you couldn’t. But Jake VanderPlas wrote an article on installing Python packages and there’s a couple – I’m not even going to try to write this – but I pulled out some of the cheats for pip and conda and on how to install from within it. There’s some magical incantations. But the article also goes through about all the different reasons why you have to do this.
KENNEDY: Yeah, they’re not obvious at all. I would have never figured those out.
OKKEN: Yeah, so it’s good that somebody figured it out.
KENNEDY: Yes, that you Jake. (Laughs) That’s awesome. If you’re doing data science on Jupyter Notebooks, this is really cool.
So, last thing I want to share for us is the videos from PyConDE, as in Deutschland, are online. Miroslav (@euromiro) let us know on Twitter about this and there are a ton of interesting talks over here. Quite a bunch of cool talks. I’m not sure how many but I’d guess 50 or so.
OKKEN: Are they all in German?
KENNEDY: Here’s the thing, as far as I can tell, I’ve only seen English ones and I looked through a bunch of them. There’s a cool talk called, “Technical Lessons from Pythonic Refracturing at Yelp” by a woman named Yeni Chung, and a bunch of other ones. It’s kind of hard to read all the titles right here but I looked through and I’m definitely filling up my playlist with stuff that I need to start watching because there’s a lot of cool stuff here. Yves Hilpisch, who is on my podcast, talks about how Python has taken over in finance, for example, and we don’t even have it in Excel yet. So, there’s lots of cool stuff here. It was in Karlsruhe in Germany, which is a lovely place. I wish I could have gone to the conference but the second best thing is to watch it online.
OKKEN: I’m really glad that we have this. Can’t wait.
KENNEDY: Yeah, all the PyCons do such a good job of getting their content online straight away, within a day or two of the presentation, so it really makes a big difference. Especially since they sell out.
OKKEN: Yeah, definitely.
KENNEDY: We’re definitely going to be at the one in Cleveland, PyCon US. Are you going to make it?
OKKEN: Yeah, I think so. That’s the plan.
KENNEDY: That’s the plan. It’s going to be fun. But for now we’ll enjoy the ones in Germany.
Any news? End of the year?
OKKEN: End of the year, yeah. I’m trying to come up with some fun Python projects to work on in my free time.
KENNEDY: Get a Raspberry Pi and do something with it. Maybe plug it in to home assistant, things like that. But I haven’t done anything.
OKKEN: Me either. I’ve got two of them sitting there.
KENNEDY: (Laughs) If you could just put some code on them and make it do something cool. Right on.
Well, Brian, thanks again for sharing the news with everyone. It’s great to chat with you as always.
OKKEN: Thank you.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.