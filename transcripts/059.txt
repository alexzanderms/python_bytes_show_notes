Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #59, recorded January 4, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And we’ve got a bunch of awesome stuff lined up for you for this very first episode of 2018. So, let’s say ‘Thank you’ and Happy New Year’ to DigitalOcean.
OKKEN: Yeah, thanks and definitely ‘Happy New Year.’ It’s exciting to be back.
KENNEDY: It’s very exciting to be back and the Python news doesn’t stop coming. I think, if anything, it’s just picking up speed. I’m afraid we might scare people a little bit with some of your picks this time, Brian.
OKKEN: What? (Laughs)
KENNEDY: The stuff near the end.
OKKEN: Oh, okay.
KENNEDY: Another thing that’s kind of scary is turning off garbage collection (GC). Seems like that might be bad, right?
OKKEN: I was surprised and very interested when I was listening to the Instagram talk at PyCon about turning off garbage collection. There’s an article that they put out again that said that they have turned it off last year, then they were having memory problems. They wanted to try to turn it back on a little bit but they still have concerns.
KENNEDY: Yeah, so maybe we should take a moment to step back and describe the original thing. Why did they start down this path of turning off garbage collection in the first place? What they found was, they were running many instances of the largest Django deployment on Python in the world. So, they’re running lots of servers with this. They found that the shared memory across multiple processes running that on a single server was completely falling apart because garbage collection was shifting stuff around. They said, ‘Well, could we turn it off?’ And it turns out that they could. But this article you’re referring to says they basically we're losing those gains again.
OKKEN: And we talked about this a couple times. If you turn it off, then eventually it will run out. But if you’re restarting tasks every once in awhile, that completely cleans it up.
KENNEDY: Yeah, exactly.
OKKEN: They were losing some of those gains and they wanted to get some of those back. This is really interesting, and I had to read the article three times, it’s called, “Copy-on-write Friendly Python Garbage Collection.” It’s a pretty interesting story, but the end punchline is that you’ve got a new addition to Python that’s going to go into Python 3.7, or it’s already in there, that is called GC Freeze. What happens is, they get their main stuff running with all the shared objects, but before they fork off a bunch of threads, they call this GC Freeze and all the stuff that’s in memory right now, at this point, doesn’t get garbage collected. But everything from this point in time on, will be garbage collected, which is pretty interesting.
KENNEDY: Yeah, that’s really interesting. So, Python memory management is a little obscure. People don’t talk about it very much. I don’t think there’s a lot of good write-ups. You actually found a really fantastic write-up on the intricate details of Python memory management. The short version is, most things are cleaned up through reference counting. So, a number of things pointing at it, when that goes to zero it goes away. But the problem with reference counting is cycles. I have one object points at another, that object points back at the first. They both have a count of one or higher forever and then they get leaked. So, there’s this secondary garbage collection phase it goes through and looks at these items, cleans them up and so on.
So, this GC Freeze says, ‘Let’s take all this stuff that exists now and just tell the garbage collector to ignore it. Don’t touch it, don’t mess with it. Leave it alone.’ So, you get basically your app into it’s normal working state and then freeze it one time, and then all the new stuff that would make the memory grow and grow over time, is going to be continually GC. But the core essence of your app – Python Runtime and a bunch of other things that get started – should be kind of fixed, right?
OKKEN: Yeah, and I think that’s a pretty cool idea because that’s a common model for applications, to get connections up and your normal sitting state, idle state, running. And then before you get requests in and spawning stuff, just at that point, you’re like, ‘Well, this is all the shared stuff. We don’t need to move this stuff around. It’s always going to be there.’
Anyway, it’s a cool idea and apparently it saved them. They were at linear memory growth and they slowed that down quite a bit.
KENNEDY: Yeah, it looks really interesting. Instagram is doing amazing stuff, I think, in the Python space and the web space. If any of those guys are out there listening and want to come talk about Python and Instagram on Talk Python, they’re more than welcome to come over. It’d be fun.
OKKEN: I definitely appreciate that they are very open about this. Saying, ‘Hey, this is what we’re trying. It’s not perfect yet, but it’s better.’
KENNEDY: Yeah, it’s super cool. Do you know if GC Freeze is approved or just proposed for 3.7?
OKKEN: So, we have a link to the pull request and it looks like it’s already in.
KENNEDY: Oh, it’s merged? Yes, it is merged. This is pretty awesome, right? We have CPython on GitHub, with a pull request merged in with its comment history. That’s new, right? That’s a 2017 bit of magic that’s on GitHub.
OKKEN: Yeah.
KENNEDY: Cool. It’s so nice that we can actually track that.
So the next thing that I want to talk about is a little bit different. I think this will be mostly of interest for data science folks. This is a little bit lower level than it sounds, but this thing is called SpeechPy. It’s a library for speech processing and recognition. This is a pretty interesting Python project. You can come along and basically give it some spoken words and it can pull out various effects and things that are the essence of what you need to do speech recognition. You don’t just feed it like, ‘Here’s a .wav file’ and out pops text of what it said. But it gives you what you would need to feed to a machine learning system. It basically takes the spoken words to a representation that you can feed to some kind of algorithm to actually get the text. So, I think that was pretty cool. One of the things that I wanted to bring this up for is they have a really nice citation statement. So, if you look at the GitHub repo, kind of near the top, it says, “If you’re going to use this package, please cite it as follows.” That’s interesting because there’s some talk in the scientific space – more true science, not data science – around people want to publish their software. They want to work on advancing software, but in the academic space, you have to publish articles, or the whole “publish or perish” type of thing. The way you get credit for your work is to be cited in other articles. So, this is showing a way to cite this work, which is not a paper but is an Open Source project, in the same sense that the person or people who created it might get the same level of academic credit for their thing being cited. I think that’s pretty cool.
OKKEN: Yeah. I don’t get the syntax, but…
KENNEDY: It must mean something but I have no idea what it is. I thought it was kind of neat if you’re doing machine learning and you need to turn away forms into something you can process, this is pretty cool. The other thing that’s kind of nice is, if you look at it here, and I think it’s in the documentation or the tutorial, they actually show you how to process .wav files from SciPy, which is also cool and handy.
OKKEN: Yeah. That’s actually something I need to be doing something with, .wav file processing.
KENNEDY: Well, SciPy apparently has it. (Laughs) Nice.
How about the next one?
OKKEN: Next up we’ve got our friends at PyBites. Is that what they’re called.
KENNEDY: Yeah, PyBites.
OKKEN: They’ve got a new platform and I suddenly forgot the URL but there is ‘Code Challenges’ but the ‘es’ is after the dot. ‘Code Challeng.es.’ (Laughs) Clever though.
We’ve covered others things before. There’s a game one, where you’re going through a game and doing code challenges. There’s code katas around. This is a similar sort of thing. You are able to do these little code challenges called “Bites of Py” and are self-contained, 20 to 60-minute code challenges and you can write them and verify them in the browser. I did two of them this morning and I had a lot of fun with it. It was fun.
KENNEDY: Nice. And you verify them by writing pytest unit tests, right?
OKKEN: You don’t write it, it has pre-written pytest code that checks your answers.
KENNEDY: I see. You’ve got to do some sort of thing, you check it in and it runs, basically, the test against your code and says, ‘Thumbs up, thumbs down’?
OKKEN: Yeah. For instance, on the second challenge you have to write three different functions to manipulate a list of names and it has tests for all of these. I went ahead and just solved on at a time, for instance. So, I tried to solve the first one and ran the test and noticed that the first one passed, and then just did that. And looking with the help of the test output, it helped me solve the rest of them.
KENNEDY: That’s really cool. I also learned something by the transitive property through you.
OKKEN: You did? (Laughs)
KENNEDY: I did. I learned what you learned, in that min() takes a key, like sort() and sorted() does, that way you can sort some complex object based on an attribute of it.
OKKEN: I didn’t know that. I just discovered that this morning. So, my solution for one of the challenges is to try to find the name with the shortest first name. I went ahead and sorted the list by the length of the first name and then just picked the first element. Their solution uses min(). Instead of sorting the list, you can just find the min() length, which is pretty cool.
KENNEDY: Yeah, that’s really awesome. It’s gotta be quicker than a full-on sort.
OKKEN: One of the things I like about these sort of quick challenges is you can probably do them on your lunch break or a couple lunch breaks to do one of them. They just take a browser, so you can just do it on your laptop. It’s pretty fun.
KENNEDY: Yep, that’s cool. You can even maybe do it on an iPad or something, if you really wanted.
OKKEN: Yeah, well, I don’t know. I haven’t tried that. Probably.
KENNEDY: If it runs on the browser, I bet it would. Nice. That’s really cool. I do like that you learn these little things, like, ‘Wait, min() takes a key? I didn’t know that.’ You wouldn’t think you’d pick up these little things so quickly, but the little challenges are nice like that.
So, before we get to the next item, I want to say thank you to DigitalOcean. They’re sponsoring this episode and many, many other episodes. They’re really a big supporter of Python Bytes. So, as many of you know, many of our bits of code, our stuff on the web and our files are MP3 files that get sent down to you, all go through DigitalOcean. Python Bytes is basically delivered in all of its forms to you through DigitalOcean. They have a bunch of servers there that are super easy to work with; very quick, very reliable. You can create a new server – a new droplet, they call it – in 30 seconds. Then you SSH in and you’re off to the races. So, really, really nice and affordable so check them out at do.co/python and let them know that you heard about it on Python Bytes.
So, this end of the year thing, Brian. We’re on the other side of it, but this is when you get together with your family, right? People maybe you didn’t even know. ‘I have a second cousin? From where?’ (Laughs) Python’s like that, right?
OKKEN: Yeah.
KENNEDY: We’re talking about, what is the place where you can do sort of game-ified code challenges? That’s CheckIO. The reason that’s relevant and I’m coming back to it, there’s an article by the guys at CheckIO called, “How Big is the Python Family?” This is really nice. Some of you, I’m sure, are aware of it. But many people, I don’t think are aware of how varied Python is as a platform. So, when you say Python, typically you mean CPython. Hopefully, you mean Modern Python 3.6, not Legacy 2.7 Python. Well, we’ll let that slide for now. There’s also thing like Jython. Jython will let you write Python code, but execute it on the JVM and interact with Java objects. IronPython is the same thing for .NET. There’s also Python for .NET, which I think is a more up to date, modern variant on the same thing. There’s Cython, which is compiled, slightly different Python. There’s PyPy, which is a JIT version. MicroPython, which is Python as an operating system on microchips, basically. And on Talk Python, you and I talked about Grumpy, right?
OKKEN: Yeah, which is on Go.
KENNEDY: Grumpy is from the YouTube guys, which is instead of using C to implement CPython, they said, ‘Well, what if we wrote the same thing but in Go.’ That’s kind of interesting.
So, I thought this was just a nice grouping of all of these ideas; there’s a quick paragraph or two on each of them. If you bring in people onto your team and you’re like, ‘Wait a minute, there’s actually a lot of types of Python. Here, check this out.’ Also, maybe a reminder to give PyPy a try. They just had a big release for both Python 2 and Python 3 versions.
OKKEN: One of the things that I like about this write up that they did is, it reminds you why some of these are around. Like if you had to work with .NET, then working with IronPython or Python.NET might be a better thing than trying to do it other ways.
KENNEDY: Yeah, and one of the advantages there might be if you’re working on a .NET app, you want to add scripting. What are your choices? You probably don’t want to give them C # (C sharp) and even if you did, it requires full-on compilations and how do you deal with that, right? This could be a really nice way to plug in scriptability into your enterprise app, which could be pretty cool.
One more thing I wanted to throw in on this conversation is, a lot of times I’ll say “Python runtime.” I know often people say “Python interpreter.” This is what the Python interpreter does, it does this and that. Well, if you look at the whole Python family, only some of them are interpreters. Some of them are compiled execution engines, right? PyPy, for example, or Cython. Those two definitely are not interpreted in the traditional sense. PyPy starts out that way but it converts to a JIT version for the hotspots. I often say “Python runtime” because I feel like when you say interpreter, you really have the mindset of CPython, which is the most popular but not always. What do you say? Do you say interpreter?
OKKEN: I don’t usually say either. I just say Python.
KENNEDY: (Laughs) Yeah, there you go. Cool. So, anyway, I think this is a nice write up and good to have it all in one place.
I like the one that you have coming up next. One of the problems I often see is, I want to do some work, but I don’t care if it happens right now. I want to start it and let it go somewhere. I don’t have a great answer for that.
OKKEN: That’s processing stuff, and one of the common things often people bring up is Celery. To be honest, I’ve tried to get into Celery a couple times but the learning curve on it – maybe it’s just me – I had a little bit of trouble getting into it. I was interested when I heard an interview on Podcast.init about a library called Dramatiq. Since it’s task-scheduling, it’s quite complicated internals, I’m sure. You just declare an actor on some code; it’s pretty easy to get started. I thought I’d point people to it.
KENNEDY: Yeah, it’s quite cool. You basically put a decorator onto a method, then that method, instead of running locally, you can send work to it. And that sent work actually kicks it off on – an example they used was RabbitMQ – there’s a producer of the work and there’s another process that hangs out and consumes anything that lands on the queue. It’s pretty cool.
OKKEN: Yeah, so you can configure what your defaults to RabbitMQ, I think. And there’s just good defaults that work off, just if you don’t care. And then you can configure it to use other things if you need to. The person that developed this used it on quite significant projects. It isn’t a toy project but it’s pretty easy to get started and you can configure it to be all sorts of fancy stuff if you need it to be. One of the things I liked about the conversation is he brought up that he intentionally kept the documentation fairly terse and small so when you’re looking for something that you saw before, it's pretty easy to find again, so that’s cool.
KENNEDY: Okay, yeah. That’s an interesting point. And it looks like you can run out on top of RabbitMQ or Redis; take your pick. One final thing I want to point out that I thought was interesting, it’s licensed under AGPL (Affero General Public License), but it also has commercial licenses available upon request. I thought that was an interesting variation that I saw.
OKKEN: Really? I didn’t pay attention to that. I’m not sure that the AGPL is.
KENNEDY: Yeah, I don’t actually know either. You might want a commercial license instead.
So, the last one I want to talk about is a little bit similar to what you’re talking about, running async work. But it’s the challenge of taking advantage of async things, but not making that a problem for people trying to consume it who don’t want to think of things that way. This article is called, “Controlling Python Async Creep” from friend of the show Cristian Medina. He says basically, if you’ve got some library that is written in an async way, you’re supposed to await it. But anybody who is going to call that and take advantage of that, that caller also has to be async, and then the caller of that has to be async. So, you could be way, way down somewhere and trying to do something async and it creates a sort of chain reaction of, ‘Well, the callers of this have to be async. Well, the caller of those things have to be async’ and so on. It can become quite a problem.
So, he wrote this nice article basically going through three examples of where you can sort of put a stop gap. You can say, ‘Okay, at this level, we’re no longer worried about async but we’re still taking advantages of it internally.’ One way you can do that is you can wait for blocks of async codes. If you’ve got to contact a database, two web services, read something from the file system and you want to do that asynchronously, you could creep those pieces of work, but then wait on them as a group. There’s some built in ways in asyncio how to do that, which is really cool. It’s got some nice examples on that. It says you can just use a thread and let that threads main bit of work be the async thing, but you don’t have to deal with it. The most interesting thing I think is mixing async and synchronous calls. What he does is he actually detects by looking at the trace back, I think, detects whether the caller is calling it as an async function or as a regular function and implements an async behavior or a synchronous behavior the same. So, you could a single library, and if anyone in Python 3.6 wants to do that in a fancy async way, it becomes magically async. But if somebody from 2.7 calls it – or something like that, an older version – or they just don’t call it in an async way, it just magically is a syncronous call, it doesn’t use that whole stuff.
OKKEN: Okay.
KENNEDY: This is really an interesting way to make it possible to bring async into your package or your libraries without having the consumer of the libraries have to care about the fact that it’s async. But still make it into something that could take advantage of.
OKKEN: Wow, that’s great. I’m going to have to read this. This remind me of the learning hurdle that people go through in the C and C++ world, when you go from single-threaded applications to multi-threaded applications. You have to look in all the corners.
KENNEDY: (Laughs) It’s definitely a mind shift, yeah. It’s very much like that.
Cristian did a great job on this and I really like his solution at the end. Actually, he has it done in ‘if statements.’ I feel like you could create a decorator that would basically wrap that up; a magic async-able or await-able decorator. It’s really close to having some sort of decorator magic, making this even better.
OKKEN: Yeah. Cool.
KENNEDY: Well, that’s all our news for the week, except for that it’s not.
OKKEN: (Laughs) Well, yeah.
KENNEDY: We have an extra one really quick. I just want to let people know that the PyTennessee Conference in Nashville is coming up in almost a month from now. If you are in the Nashville area or willing to travel there February 10th and 11th, they’ve got their schedule out. The tickets are on sale and things like that. They even made a special discount code for Python Bytes. If you want to go to PyTennessee, you can use the discount code PYTHONBYTES and you get 10%off.
OKKEN: Cool. Neat.
KENNEDY: Yeah, very cool. You have some interesting news that’s not directly Python-related, but very much affects all of us. Write codes on server, especially in the Cloud.
OKKEN: I don’t know what to do about this but I saw it this morning and it’s important enough to not ignore it so I thought I’d drop a link.
KENNEDY: What do you think, like unplug all the internets, just go hide in a corner? Something like that?
OKKEN: It’s like one of those things like having the credit services get hacked, you have to just be aware of it and pay attention.
KENNEDY: It’s very much like the Experian… What was that credit service?
OKKEN: Equifax, maybe?
KENNEDY: Equifax. I’m not going to say it because I don’t want to say the wrong one. The E-credit agency; for some reason I’m forgetting. I think you’re right. But basically you’re told, ‘Your world is crashing down. We’re sorry.’ (Laughs) And this is kind of like that. You quote a couple articles, let me read what they said in The New York TImes. ‘Basically, there’s two problems called Meltdown and Spectre, could allow hackers to steal the entire memory contents of computers including mobile devices, personal computers and servers running in so-called Cloud networks. There’s no easy fix for Spectre, which could require a redesign of processors, according to researchers. As for Meltdown, the software patch used to fix this could slow down computers by as much as 30%.’ So, your AWS, DigitalOcean, whatever
server, may just get 30% slower now. Wonderful.
OKKEN: Yeah, so most of the places, I think Google, Amazon and Microsoft have all said that the servers are changed to deal with Meltdown but Spectre is still a problem.
KENNEDY: I don’t think there’s a ton of concrete details here, at least not that I ran across. It’s sort of vague. Apparently, not all the details about the exploit are out. But I’d recommend people check out risky.biz, which is my favorite developer security podcast. It’s super good. And those guys are definitely going to have an insightful conversation on this next time they’re on deck.
OKKEN: In case we were too vague about it, it was a design flaw found in all microprocessors that allow attackers to read the entire memory of a computer. Bummer. (Laughs)
KENNEDY: (Laughs) I hope you’re not doing anything on the Internet. (Laughs)
So, the last thing, this is a more positive thing, I think at least. I just announced all my courses – not all of them actually, only a few of them – for 2018. But I announced this new deal that I’m having for all the Talk Python courses called, “The Everything Bundle.” So, talkpython.fm/everything gets you what would probably be 120 hours of Python course awesomeness. Including some new one, “Mastering PyCharm,” “Python 3: An Illustrated Tour,” “Introduction to Ansible,” and tons more are coming.
I was just finishing some of the videos for the PyCharm course right before we chatted, so it’s almost done.
OKKEN: Cool, so is it going to be out this month then?
KENNEDY: That is going to be out, probably next week. Definitely soon. It’s so fun to create these courses and keep exploring the different areas and helping people get better with them. Lots of fun.
OKKEN: Yeah, and you so things like working with companies if they want to get access to these for everybody that works there, or a handful of people.
KENNEDY: I definitely have special programs for site licenses and things like that. I’ve even talked to some universities about having the courses for all of their students or something like that. That would be wild. Still talking.
OKKEN: You’ll have to increase the price for them, maybe.
KENNEDY: But they’re students, you know. (Laughs)
Cool. Brian, thanks for sharing all your news.
OKKEN: Thank you.
KENNEDY: Nice to be back together after the whole holiday time off. Catch you later.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.