PYTHON BYTES TRANSCRIPT
Episode #61: On Being a Senior Engineer
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #61, recorded January 10th, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And we have, again, some really cool stuff we want to share with you. The best of what we found this week in the Python space. Before we get to it though, I want to say thank you to DigitalOcean. This podcast, these MP3 files, everything is coming to you directly out of DigitalOcean servers. We’ll tell you more about that later.
Right now I want to talk about dictionaries.
OKKEN: Yeah, I want to talk about dictionaries, too. So, thanks to Raymond – I’m going to reference Brandon Rhodes actually for later on – but Raymond Hedinger is probably the person that I have to thank for telling me how cool dictionaries are in the first place because he’s talked about them at different PyCons in the past. And basically, tons of Python is built on top of dictionaries. But one of the things that I did not know was how awesome dict key sharing is. One of our listeners on Twitter, Ned Letcher, keyed is in on this and said, ‘Hey, if you haven’t checked it out, you should go look at Brandon Rhodes, “The Dictionary Even Mightier” talk from PyCon 2017.’ And so I did, and yeah, the key sharing thing is something I didn’t know about, which is totally cool.
KENNEDY: It’s kind of funky to think that it’s not that way until you really think about how it works, right? When you create a class and you create an instance of an object, everyone of those has a _dict_ (dunder dict) and what goes in the keys are the names of the fields of the class and what goes for the values are, well, the values, right? When you say _init_ (dunder init) you say self.name=this, self.id=that. Those are putting entries in that dictionary, right?
OKKEN: Yeah.
KENNEDY: But the thing is, if I create a million of those, I have a million times the string name as the key and a million times the string ID as the ID. So, basically every instance you create stores a seperate copy of names, not just the values, but the names of the fields which can be super problematic, right?
OKKEN: The names of the fields are… And in Brandon’s talk, he talks about since it’s a dictionary there can be hash collisions for figuring out where to put it. So, that happens for every single object has to figure that out. I think it was Python 3.3, 3.4 where they changed it to where… So, here's the trick. As long as you it all of the fields that you’re going to use for your class objects, you initialize them with something, you init function, then all of your objects can share the same dictionary for the key look up.
KENNEDY: Yeah, it’s really cool. So, I think that’s quite awesome. It should really help with performance, as well. Especially memory-wise.
OKKEN: Yeah, it’s a little bit of a weird thing. You have to think about how this is implemented. But Brandon does a really good job of walking you through it so that it’s obvious how the savings is. And apparently from the PEP 412 that this was started with for object-oriented programs, the memory reduction is like 10 to 20% less, using quite a bit less memory so that’s definitely worth it.
KENNEDY: Oh, yeah. That’s always a nice benefit there.
So, I have an interesting project that is recommended by a listener as well called, “Python Hunter.” Have you heard of this?
OKKEN: Well, just because it was recommended to us, but I haven’t looked at it yet.
KENNEDY: Yeah, so it’s pretty interesting. The idea is a little bit like code coverage and it’s a little bit like a debugger in that you enable it on your code, and then as you interact with the code you get a report. But what you actually get here is it will give you basically, as your program runs, it will show you the internals of any module or package you want to point it at as it executes. There’s an example where they turn it on and they call it os.path.join, and it shows you all the internal implementation running, like printed to the console intermixed with your output.
OKKEN: Interesting.
KENNEDY: So, if you are like, ‘I would like to explore what this does when I call this function. I don’t want to route through all the source code and figure out what piece this is referring to.’ You can just turn this on, call the function and it will show the path through the external code it took.
OKKEN: Oh, okay.
KENNEDY: So, pretty interesting. It has some integration with debuggers and things like that, so you can also overwrite it. It doesn’t happen for every bit of code you call. You point it at a module and say I’m trying to work on POSIX Path. I want to understand my interaction with that module. Then you call os.path.join and off it goes. Pretty sweet actually.
OKKEN: Like for instance, if I want to mock out my requests interaction to external database or external sites, I could point it at requests to find out exactly what my application is doing with requests.
KENNEDY: Yes, exactly. And you would say, ‘This is the part where it goes to the network. That’s the one thing I have to mock out. The rest I could just ignore.’
OKKEN: That would be a great tool, especially for people that are trying to isolate bits of their application.
KENNEDY: Yeah, it’s cool. So, this was recommended to us by Ivan Pejic, so thank you for that. Kind of interesting that it’s built on Cython, so it’s nice, high-performance; it’s always cool to see Cython making an appearance. Nice.
So, you know, I always feel like, when I’m working with bash I could do a better job. In fact, I don’t use bash that much these days. I use oh-my-zsh, but same thing. There’s all this stuff about the shell I could do better.
OKKEN: You use zsh?
KENNEDY: I use oh-my-zsh. I love it. It’s really got some nice integration with Git, the history and the search and autocomplete, like a tabbed selection of various things. If you type a few characters and hit tab it will show you the list of all the things that you’ve done involving that. It’s kind of cool.
OKKEN: Okay. I’ll check that out sometime.
KENNEDY: But I think more people use bash, actually.
OKKEN: I went through a phase where I started out learning ksh in college and in my first job. And then I tried bash and I went to Z shell for awhile but it had support issues on whatever operating system I was using at the time. But bash is just everywhere so we can just use it as is. The place where you have to jump through a few hoops is on Windows. Before we get into this article, there’s an article called, “Ten Things I Wish I’d Known About bash” which is a really great little QuickStart. It’s just some fun things and somebody trying to sell a book in it, but it’s only like five bucks, so go for it, dude. But kind of things that I’ve always wanted to know, like what the difference is between back tics or $( ) (the dollar sign paren) or placing bits in your command. The gist of it is, they’re identical but one is easier to read if you have a whole bunch of them.
KENNEDY: Very cool.
OKKEN: And then globbing versus regexps (regular expressions), that’s something that confused me at first, so that’s a good thing. Dealing with exit codes. Number four is the one I really like the most because that one confused me. When you’re using ‘if statements,’ what’s the difference between [ (bracket) and [[ (bracket bracket). And I’m not going to talk about it here, but these are some good things.
I also wanted to bring up, I spend a lot of time trying to hunt for a good bash application for Windows and right now what I’m using the most is Git for Windows and it has Git bash embedded in it. I think that’s great, even for people that are not using Git because it’s just a good bundle of all of your bash tools and it just always works so I’m pointing everybody at that now, even if they’re not using Git. We did have a recommendation from one of our listeners a long time ago about a tool called cmder (commander), I think.
KENNEDY: Yeah, I’d say commander.
OKKEN: cmder.net, I think there’s a reference on here that it’s related to Git for Windows somehow. Not sure, but if you don’t want to try Git for Windows but you want some emulator working on Windows, check out cmder also.
KENNEDY: Yeah, it has the Monokai theme, cmder looks cool. I saw it on my Windows 10 machine. One more thing I’ll throw on the list here while you’re talking about these – I don’t remember what version of Windows 10 has these, it’s not the original but maybe the one last fall, I can’t remember when it came out – but they’ve added the Ubuntu subsystem for Windows, which is pretty cool. But you have to turn that on like you turn Windows features on and off; it’s off by default.
OKKEN: And I’m glad you brought that up because I want to try to revisit that. I did try those and I had issues with being able to launch external applications.
KENNEDY: Yeah, they’re like really isolated. The Ubuntu part and the Windows part, they don’t really communicate very well. So, it’s not the same I don’t think.
OKKEN: It’s not like you have to do that a lot, but I just want to open up my text editor from a command line.
KENNEDY: Yeah, exactly. Cool. Those are all nice things to check out especially on Windows. It needs the most help with the shell actually.
Cool. So, before we get to the next one, which is a bunch of pretty pictures, I hope we’ll help people understand the definition of microframeworks versus, you know, batteries-included frameworks, things like that.  We want to tell people about DigitalOcean. Those guys are doing awesome work over at do.co/python, so check that out. This is where I have all my servers; I probably have eight servers for the various things all working together now, failover and database servers and whatnot. It’s great. Super easy, 30 seconds, you’ve got an Ubuntu machine or what other. There’s a bunch of distributions and pre-configured servers. Go over there, set them up. They’re doing a bunch of great stuff and it’s definitely affordable and reliable and fast. Cool.
So, there’s this thing called Snakefood, which is a tool written by Martin Blais and it creates Python dependency graphs. So, I’ve got one package or one module or one class that depend upon some other thing and it will put them in a graph and it will draw lines between them. That’s pretty cool. I haven’t done a whole lot with it. You can combine that with GraphViz and it will create these nice visualizations of Python code bases.
OKKEN: Oh, nice.
KENNEDY: So, that’s pretty cool. And this is not a brand new item but I had seen it a while ago, it’s from the Grok code guys. I think I had them on Talk Python Episode #8 or something, so it’s been awhile. They took this Snakefood plus GraphViz and they turned it on a variety of the frameworks that we know and love, and it’s really interesting to pull up the pictures and just look at the relative complexity. So, if somebody tells you Bottle is fast because it's simple, but it doesn't do very much for me so you’ve got to bring a lot of pieces in. Django is much more full-featured and more complex, but it has a lot of things built in. Flask is somewhere in the middle and Pyramid just a little more than that. You can look at these pictures and get a sense. Do you have the pictures pulled up?
OKKEN: Yeah, and you can totally see that that’s the case.
KENNEDY: Bottle is incredibly simple. I’m actually blown away that it is as simple as it is, but you can just tell straight away by looking at it.
OKKEN: It’s so elegant. There’s no cycles.
KENNEDY: Yeah, there’s no cycles. It’s an acyclic-directed graph. That’s quite interesting, isn’t it?
OKKEN: Yeah.
KENNEDY: Cool, so then Django. How would you describe Django?
OKKEN: It's like if you clean out a comb after it’s been used for a year, that’s what it looks like.
KENNEDY: (Laughs) Yeah, it’s a little bit like one of those ink blot tests. And Flask and Pyramid, they’re sort of on the same scale. Pyramid’s just got a little more going on. They’re definitely not simple but they’re not insane. They’re not like Django-level of interaction. Then they go and they do this for Celery and RQ as well. You can tell Celery is way more complicated. It’s more complicated than Pyramid or Flask, by the way. But it’s also more complicated by a ways than RQ.
Let’s see, what else do they cover? They cover Twisted and Twisted is pretty insane. It’s probably more tied together than Django, I would say. Mercurial, quite interesting as well. Requests is in here. Requests has got some pretty nice look, actually.
OKKEN: Yeah, it’s oddly elegant and pleasing.
KENNEDY: It is. IPython, not so pleasing. I recommend everyone pull up this Snakefood link and just have a quick glance through the pictures. I think it’s quite insightful. It gives you the technique for applying this to other code bases as well.
OKKEN: Yeah, these would be fun things to just print on your wall and tell people that you’re using it as a reference.
KENNEDY: Yeah, absolutely. Cool. (Laughs) ‘Yeah, I just follow the graph when need to know how things work. Uh huh.’
OKKEN: (Laughs)
KENNEDY: Your next item is about being a good Senior Engineer.
OKKEN: The new year, it’s 2018 now. There was somebody that posted on Twitter and said, ‘Hey, it’s a new year. You should go read this again.’ It’s a 2012 article called, “On Being a Senior Engineer.” It’s from a website called Kitchen Soap, which is funny. I think there’s just a lot of really good advice. I just went through and pulled out a bunch of the headlines, but it’s some things that I’ve been thinking about lately as I’m hiring people and thinking about always with evaluations and stuff like that. What does it mean? What does an Engineer versus a Senior Engineer mean? These traits, I think, fit well.
KENNEDY: I think these are all really good. Maybe we don’t have to cover them all but “Don’t practice CYAE.”
OKKEN: Yeah, “Cover Your Ass Engineering.”
KENNEDY: Exactly. I think that’s a really good point. A lot of people who, when they’re starting out are trying to make sure they’re never perceived as not knowing everything. By the time you’re a Senior Engineer, you’ve been beaten with the fact that you don’t know stuff and new stuff is coming along that you also don’t know continuously, right?
OKKEN: One of the top ones is, “Seek out constructive criticism of your designs.” And yeah, you're just trying to find out another perspective to make sure you haven’t missed something.
KENNEDY: One I really like is, “Life the skills and expertise of those around you.”
OKKEN: Yeah, well, you and I are definitely trying to do that, so that’s good.
KENNEDY: I think a lot of people try to keep the recognition for themself when they’re new, right?
OKKEN: Yeah.
KENNEDY: But I think one of the biggest skills someone can be providing on a team is actually any time someone gets stuck they kind of float over to that part of the group and help that person keep moving. They can almost write no code, but be sure to float around and make sure nobody’s stuck. That can be a massive boost to the team.
OKKEN: Bringing up a couple more items, estimating how long something’s going to take or how much work it is, it’s always hard. As you grow in your career you realize you can’t avoid it, so you just need to embrace it and be okay with giving ballpark estimates to people and then trying to get better at it. Keep track of what you did and try to improve.
The other one that’s difficult is trade offs. You know that you can’t get all the information before you start working, so making good trade offs between information and risks and benefits and making judgements. Those are things you just have to practice.
KENNEDY: Yeah.
OKKEN: Another thing I wanted to bring up is there’s a list of cognitive biases, so just knowing when you’re making a decision, there are biases in yourself that you will need to be aware of and try to make sure those are there and compensate somehow.
KENNEDY: These are all really good. I like, “Understand that not all projects are filled with rock-star-on-the-stage work.” You’ve for to become a finisher and a lot of times there’s little details that nobody likes that are part of it.
OKKEN: Probably the first half of my career, most of my job duty was, I would be taking on the things that everybody else didn’t want to work on and forgot about, and wrapping them up and finishing. But then I was often getting credit for finishing projects that most of the work was done by other people, they just didn't finish it.
KENNEDY: Yeah, become a finisher. It’s good stuff.
And then there’s finally, “The Ten Commandments of Egoless Programming.” Want to take us quickly through the them?
OKKEN: “Understand and accept that you will make mistakes.”
“You are not your code.” Each of these could be episodes themselves.
“Know matter how much karate you know, someone else always knows more.”
“Don’t rewrite code without consultation.” Oh, I’m guilty of that, definitely.
“Treat people who know less than you with respect, deference and patience.”
“The only constant in the world is change.”
“The only true authority stems from knowledge, not from position.”
“Fight for what you believe, but gracefully accept defeat.”
“Don’t be the coder in the corner.”
“Critique code instead of people – be kind to the coder, not to the code.”
These are good.
KENNEDY: Yeah, these are all great. I really connect with a lot of these, so I’m glad you brought this up.
OKKEN: And no where in here does it say, don’t make fun of PHP.
KENNEDY: No, you can totally make fun of PHP all day long. (Laughs) But you can also make fun of Python, unfortunately, a little bit, for its lack of UI framework. We talked about that last week, how that’s one of its last remaining places where it really quite a bit could be better.
One of the things that we didn’t read above was ‘No empty complaints’ and one of my rules is I don’t like criticizing stuff without offering a better alternative, or at least some kind of constructive thing. So, here’s my attempt to backfill my criticism of the lack of UI frameworks. Here’s where we are and here’s some things that seem like they’re working and a little bit of constructive-ness.
So, I went through and I said, ‘Alright. What are the options for Python UI frameworks, right?’ I’m not loving what’s available right now in a lot of different angles, but what can we do? We talked TKInter, not super amazing. I have a link to an example. Brian, pull it up and tell me how you feel about that application. Does that look like a classy, new app from 2018?
OKKEN: No, it looks like it’s running on Windows 95.
KENNEDY: Yeah, it’s like battleship grey. It looks like whoever built the original Minesweeper on 3.1.1, they built this. That’s kind of what the current UI looks like in Python, which is a problem, right?
So, what are the options? We have that but we have PySide and Qt. Actually, Qt is pretty nice in terms of how it looks; it looks like it belongs on the platforms. There’s a designer for it, a draggy/droppy designer-type thing, which is pretty good. But the licensing is a little weird. PyQt is GPL. PySide is like an LGPL way to try to go around it, but PySide is slightly out of version with Qt. There’s just a real messiness around it, but it’s still a pretty nice thing. There’s Kivy and there’s PyGame. There’s also PyOpenGL. But to me, if you go to Kivy and you look at the showcase or the examples of people and what they built, they all look like AR-type things or games or other types of simulation stuff. I know you said people have created a few things that are not quite like that, but it’s not really the focus of the platform, right?
One that actually looks pretty good is wxPython. Click on the example for that.
OKKEN: That’s one that I’ve used before.
KENNEDY: Yeah, this looks pretty good. This could certainly be at least circa 2005 on Windows. It looks pretty different. And it has a couple of GUI designers, it has these widgets; that’s pretty cool and then there’s all the Electron.JS stuff. So, Electron.JS is basically Node.JS plus hosted headless Chrome plus JavaScript and HTML for the front end. There’s actually a couple of attempts to create what I really think should be called Proton.py instead of Electron.JS, a Python equivalent where the running backend is Python you could use Sculpt or something to actually make the JavaScript side also Python, like the Animal guys are doing which is pretty cool.
So, there’s this thing called Eel, which is a library for making Electron-like, offline HTML JavaScript GUI apps. Like I said, you could put Python in the front end of that Sculpt bit. That looks pretty interesting. So, you get basically a local app packaged up as a .app or .exe, but it’s more or less like a web front end that can do local machine Python capabilities. So, that’s pretty cool.
And then there’s a bigger version called CEFPython. That name is not amazing, but it’s “Chrome Embedded Framework” Python and it’s the same type of thing. It’s a little more advanced but it’s also a little less obvious how to get started with it. But both of
these look like interesting Electron.JS-like things.
OKKEN: These are people trying to solve the problems we have, so that’s good.
KENNEDY: Yeah, it’s good to see them doing it. And last week we talked about possibly having an open session at PyCon in Cleveland in May about this, so it’d be really fun for people to get together and join us there. I think Paul Hildebrand is kicking that off but we can all go and be part of it.
OKKEN: Definitely.
KENNEDY: Awesome. Here’s my research bit I did on Python UI frameworks. None of them are like, ‘Yes, this is the answer.’ But maybe it will spark some thinking and get us going in the right direction.
That’s all I’ve got this week, Brian. Anything else from you?
OKKEN: No, that was a fast six items.
KENNEDY: It was because they were so fun. I really like the one that you got about the Senior Developer stuff. It’s not totally from 2018 but it’s that evergreen material that just lasts, right?
OKKEN: We talked about quite a bit of those but every single item that we talked about has a paragraph or more of discussion on the articles. Please go read that, everybody. It will make you a better person.
KENNEDY: Absolutely. Very cool. Well, Brian, thanks for sharing this with everyone.
OKKEN: Thank you. Bye.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.