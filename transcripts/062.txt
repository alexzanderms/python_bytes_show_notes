PYTHON BYTES TRANSCRIPT
Episode #62: Wooey and Gooey Are Simple Python GUIs
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #62, recorded on January 25th, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And we have a bit of a surprise and some pretty excellent news to share with you all this week. Before we get to that, let's say thank you to Datadog, pythonbytes.fm/Datadog. Check them out, they’re doing really cool stuff. We’ll tell you more about it later.
Hey, Brian. What’s the surprise?
OKKEN: Actually, this is funny because you told me that Dan was going to be on the show with us. We’ve got Dan Bader here.
Dan BADER: Hey, guys. How’s it going?
OKKEN: Hey, Dan.
KENNEDY: Hey, Dan. Welcome to the show.
OKKEN: I also wanted to bring up the news with him because Dan is taking over Real Python.
KENNEDY: That’s awesome. Let’s jump right into that. So, Dan is just coincidentally going to be on the show. I was supposed to meet with him. I was like, ‘Dan, we’re doing the recording now so you’ve got to move it, or you can just stick around and be part of it.’ So, Dan nicely agreed to be here.
BADER: I literally picked up the Skype call and it was Brian and Michael on the call. (Laughs) No, we had some pre-planning, but that’s what it feels like.
KENNEDY: (Laughs) Little warning. But coincidentally, the very first thing that you chose, Brian, also has to do with Dan Bader. Has nothing to do with why he’s here though.
OKKEN: It doesn’t make sense for me to tell anything about it. So, Dan, what’s going in with you taking over Real Python?
BADER: That’s pretty much what’s going on. Moving forward I’ll run RealPython.com and all the social media stuff, the newsletter. And it’s just been a pretty crazy couple of weeks for me to work myself into the site and understand what all the content is there. I actually also rewrote the whole thing and put it on Django. That was a lot of fun and a lot of work, too. So, basically at some point a couple of months ago I reached out to Michael, Fletcher and Jeremy and just asked if they were interested in potentially selling the site and we worked out some deal over the last couple of weeks. So, moving forward, I’ll be running RealPython.com. I think it can grow into a really fantastic resource for Python development. Of course, on the Internet there’s a ton of really good guides and solid tutorials. It’s just a treasure trove of content.
OKKEN: I think it’s a great thing. I’m going to link the announcement email that, I think, Michael sent out. But the reason why they’re letting this go is not because of anything bad. They’re being successful in their own careers and need to move on and do other things. So, I’m glad somebody’s going to take it over and I’m excited that it’s you.
BADER: Yeah, same here.
KENNEDY: It’s really awesome. Dan, what’s the plans? Where are you going with this?
BADER: With that sort of transition, it’s always easy to break something that fundamentally worked well, and I don’t want to do that. I’m working really closely with everyone on the team. Actually, Michael just published a fantastic Docker and Python wheels tutorial on RealPython.com. So, I’m more of the managing director and I’m working with authors to put really awesome content on the site. And I think that’s also where the biggest value is on the site. Just a lot of free, really good content. It’s getting close to half a million page views a month. It’s a really popular resource for Python, so I think I want to grow on top of that and have it grow even further and have really awesome tutorials and guides that people can go to and learn about Python, learn how to program Python, learn about web development with Python and just turn it into a really awesome, nice community that people love going to an a really good resource that they enjoy learning from.
KENNEDY: That’s cool. I know you’ve done it before and I think you can do it.
OKKEN: Does this mean that any of your other stuff is going to slow down? Are you going to slow down activities on any of your other projects that you’re working on?
KENNEDY: Or do you just sleep less?
BADER: It probably means I need to grow a couple more so that I can write more content and record me videos. (Laughs) I don’t plan to. I haven’t really fully made up my mind yet. To be honest, one of the challenges with my stuff was it was all under a personal brand of sorts, and I think that’s really great but the challenge is that it’s very hard to bring in some other people and say, ‘Hey, this person is an expert at web scraping.’ I don’t know a whole lot about web scraping, for example. It always felt a little bit… It’s didn’t feel natural to put that on my own private blog. That’s how it started out. I just started blogging on my own private portfolio site and now it’s turned into something bigger and I’m offer ending courses and stuff. But the challenge was always, you’re buying a ticket to see some show or some band play and it’s someone completely different. In a lot of cases these tutorials are actually better than my own stuff, but it didn’t really feel natural. I think with Real Python, the expectation is much more that, ‘Hey, this is everything about Python and not necessarily from any one single person that’s driving all of that content. And I think it could go either way. Maybe in the long term, I’ll actually merge my own stuff 100% together and I’m just another author on Real Python, or I’ll actually keep it seperate. I think in the beginning I don’t want to move too quickly because, again, it’s really easy to break something that works but it could happen. I don’t know yet. (Laughs)
OKKEN: Okay. Well, moving on. (Laughs)
KENNEDY: Congrats, Dan. That’s cool. I’m looking forward to more nice stuff coming from there.
So, Brian, you know that I’ve kind of somehow put us out there as carrying the torch for Python GUIs, with my, ‘This is a weakness we need to work on.’ We got a lot of feedback and a lot of people agreed.
OKKEN: A lot of feedback and a lot of people agreeing, and also a lot of people
saying, ‘Hey, it’s working great for me. This is what I use.’ That’s wonderful.
KENNEDY: I really appreciated that because there are some things that I didn’t know about and some of them are really interesting and simple. Some of them are more full-featured. I still stand behind that I think this is actually a place where there need to be a lot of reinforcement to make it more solid in the world. But I want to introduce you to two things I’ve never heard of and they’re surprisingly similar in their name. One is called Wooey and one is called Gooey. Have either of you heard of Wooey or Gooey?
BADER: No, but both seem like horrible names to find on Google. Although the projects themselves are awesome.
KENNEDY: (Laughs) Brian?
OKKEN: Yeah, well, I wonder if they’re related because I get Gooey, that it’s like GUI, but maybe Wooey is… I don’t know.
KENNEDY: There may be a relationship between these. Let me tell you what Wooey is, and while I’m at it, why don’t you guys click through the link and go to the demo server which is at the bottom of that page and run one of those.
So, what Wooey is, it’s a Django app that creates an automatic web UI for Python scripts. So, if you have some sort of command line script but you somehow want to expose this to people who may be don’t want to run it on their own computer, but you don’t want to write a full web application. What you can do it, you can basically give it the command line arguments that it needs. And say one of the examples if solving a chess problem or something like that and one of the command line arguments is a number. So, there’s just a numerical drop down for that and you press ‘go’ and it runs on the web server instead. There’s a cool app on Heroku that you can go check out and play with. It’s pretty cool. What do you guys think of it?
BADER: I think it’s a fantastic idea. The last job I had, we were working with a data science team and they were producing all these scripts that were, in some cases, running really important processes for that business and it was always a challenge to get that stuff to run, just as a one-off job. I feel like the Wooley thing would be amazing if it could host that in the Cloud somewhere and you have this interface to kick off these jobs. I like what it’s doing with the outputs as well. Like this cat picture example, it actually gives you these downloadable images. It’s not just throwing a bunch of texts back at you and I think that’s pretty cool.
KENNEDY: Yeah. It’s pretty cool. Brian, do you see a use for this?
OKKEN: Yeah, sometimes for things like this, we’ve been actually doing small Jenkins jobs that you just push to start. But this seems pretty much a lot easier. It’s pretty neat.
KENNEDY: Yeah, it’s pretty cool. So, I think the Wooey part must be for web GUI, and then Gooey is just a GUI. This one is similar. It will turn almost any Python command line program into a full GUI application with one line. If you check out the screenshots here, this one is really cool. It will create these full-desktop applications. The example they have on the screenshot is really like a Windows application and it has a nice little header with a description. It’s got the arguments that are either like options selects or places you type. It’s really similar and the same idea but this is actually, you could package this up with Briefcase from BeeWare guys or you could package up with cx_Freeze or something like that and just say, ‘Here, we built an application.’ Python doesn’t have to appear in that statement, right? What do you think, Brian?
OKKEN: Of course, I’m often building tools for development teams and for something like that, I think that’s a great idea. Instead of having somebody that’s not used to working on the command line so much be able to give them a command line tool where it describes all the input.
KENNEDY: Yeah, it’s cool.
OKKEN: Again, these aren’t generic, you can build any application with this. These are still shims that bridge command line programs to user interfaces, but this isn’t the final solution.
KENNEDY: No, this certainly doesn’t cover everything but this covers a really quick, ‘Hey, I want to take some arguments from a user and I want to be able to click a button.’ But you’re not going to go to a secretary at a dental office and say, ‘Okay, you’re going to need to pip install the requirements and then run the CLI command and the thing is going to work.’ But if you give them this, the same effect will basically happen, right?
BADER: You know what it reminds me of? There’s this GUI version of cURL, the C-URL, the download command. And that’s something that somebody had to build around or re-compile it and add all that GUI stuff. And with this Gooey framework or tool here, it looks like you can just take any Python script and have something really similar, like some kind of Windows front end or I feel like this is cross-platform.
KENNEDY: I think so, yeah.
BADER: Just have that within a couple of minutes potentially, so this is really cool.
KENNEDY: It’s really tricky. It really is a sweet trick for a nice, small CLI. What would be the Gooey equivalent CLI app, for sure.
And one more shot out I want to give. I can’t remember if I already did this, because this is like Week 3 or 4 that we’ve been on this journey, but Toga as well, from the BeeWare guys. They’re doing pretty good stuff. This is like a framework that lets you build truly native apps, which is really cool but I feel like it’s not quite polished enough for people to be building full-on things with. Mostly, what I mean around that is the  two things that you’re like, ‘These are really awesome. Let me check…’ The two that we had a conversation around that you are able to run the demo server and get the cat pictures. Or you were able to see these awesome screenshots of all these examples. I feel like the Toga project could totally use some showcase of what people have built because right now there’s really none. If any one has built anything cool, try to work with the guys over there to showcase what you’ve already built, because I think that would make a big difference in the adoption of that.
BADER: Yeah, and I think they’re super receptive to that. They have a really good first time contributors’ guide on how to get your pull request reviewed and stuff like that, so I think it’s a really welcoming project, too.
KENNEDY: Yeah, absolutely. Brian, do you think that Python’s readability might be a little misleading? It lulls people into believing this is just a simple little thing?
OKKEN: Right. A lot of times we’ve said that the way to convert a pseudo-code to working Python is to change the extension from text.txt to .py.
KENNEDY: (Laughs) Exactly.
BADER: I wish. (Laughs)
OKKEN: Here’s an article from Ned Batchelder, who I hold in highest regard, but he’s got an article called, “Python’s Misleading Readability.” And I wanted to point it out because it’s something that I didn’t really think about. Often we’re bringing new people up on a team and teaching them Python, or at least enough to run some code that you’ve got to some test code. And some of the pieces of it are so readable that they are misleadingly wrong. So, a couple of the examples are, ‘is’ and ‘or.’ We use those and they almost read like English. ‘If name is Ned’... Well, that’s not going to work. We really need a quality there. And then a similar thing with ‘or.’ Something interesting that I wanted to point out. A lot of people get this messed up.
KENNEDY: I think that’s a really interesting angle. I feel like it also means that people don’t fully commit to learning Python when they come from another language. ‘I know Java. I got dropped into a Python project. I did some tutorials over the weekend. I now know Python in my mind.’ But it’s actually the whole Pythonic code, the proper idioms, the 125,000 PyPI package libraries that you don’t know to use. There’s so much to learn but it doesn’t feel like it at first glance.
OKKEN: You can read somebody else’s code and understand it easily to reproduce it, right? So, if you’re learning Python, don’t get afraid of it but make sure you learn what all the operators do and the core data structures are like. I have a lot of co-workers who are learning Python, coming from C. One of the thing you don’t do in C – Ned puts an example at the end of his article – if you’ve got a possibility if a variable could be many different values. A common thing in C would be, ‘if X is 3’ or ‘if X is 7’ or ‘if X is 8.’ The Pythonic way is to say, ‘If X and’ and then a list of the possible options. That’s a mind shift that freaks people out when they first see it, if they’re coming from C or something else.
BADER: A lot of this stuff could be caught by a linter. I’m really enjoying the article that Ned put together. I definitely agree it’s a double-edged sword if you have a language that’s relatively easy to get into or you just learn enough to be dangerous with it, but it kind of creates this false impression that you already know everything is you can write a bit of Python. It’s definitely not like that.
KENNEDY: (Laughs) Yeah, I totally agree. There was a great talk at PyCascades –which I’ll talk about later, that was just this week, actually; I literally got back last night – by Thomas Ballinger. “Python is Not Java or C++.” It was really interesting. He’s a Python developer, I think, at Google. I can’t remember but somewhere like that. Basically he said, ‘A bunch of people are coming into this company and getting into projects that are Python projects, but they have maybe Java or C++ experience. These are the pitfalls that developers have when coming to Python. These are the common pitfalls that C++ developers have. If you’re aware of them, you can help shepherd them along and make the transition easier.’ So, that’s also worth checking out. I’ll like to that in the show notes.
Before we move on, let’s talk about Datadog really quick because they are making this show possible. So, thanks for supporting the show, Datadog. If you don’t know about them, they are a monitoring solution that provides deep visibility and let’s you track down issues for distributed Python applications. So, not just your Python code but deep down into the systems, like inside MongoDB or inside Linux and things like that. You can quickly investigate bottlenecks in your code and actually explore them in rich dashboard, which is really cool. You can visualize your Python performance today and get a free trial. And if you go through their little tutorial, you can even get a free t-shirt. It’s got a cute little dog on it. So, pythonbytes.fm/datadog. Check them out and help support the show, and check out a cool product.
So, I mentioned that I was at this conference, PyCascades, which was the first time it was ever run. It was a big success, very fun. Like I said, I’ll talk more about that later. But one of the big messages was around Python 3 and I think this whole ‘Legacy Python versus Python’ thing is starting to have an effect, Brian.
OKKEN: Yeah, I think it. Definitely.
KENNEDY: We’ve heard from a number of people that have said, ‘Hey, you guys, I’ve heard it enough. I’ve switched. Here’s my commit that makes my project actually Python 3.’ I’ve seen that more than once for us.
OKKEN: Yeah, it’s kind of neat. We didn’t really ask people to but I’ve been enjoying having people contact us saying, ‘I’ve switched. I love Python 3 now.’
KENNEDY: (Laughs) That’s right. It’s awesome. So, one of the ways that I think people get stuck is, there’s some particular package they depend on. This is less and less but it still is the case. Or there’s part of the code where they’re like, ‘I really just don’t want to touch that. The person who wrote it left. Nobody knows how it works. I don’t want to break it because that makes it mine, so we’re just going to leave that alone.’
So, one of the interesting projects that I ran across is this thing called Warp2. Have you guys heard about this?
OKKEN: No.
BADER: Nope.
KENNEDY: I hadn’t either. So, it says, ‘You can use this project called Warp2 to access Python 2 code from Python 3.’
OKKEN: Brilliant.
KENNEDY: Yeah. So, you’ve got a subset of your app that’s running in Python 2 that can stay in Python 2 and the modern part of your app can be upgraded to Python 3.
BADER: That’s really nice. That must be great if you have a lot of Legacy code and you don’t want to tackle everything at once, you can use this ‘divide and conquer’ strategy and fork out some work to Python 2 and ferry data back and forth. That’s really cool.
KENNEDY: It’s really interesting and I think it might be a solution for certain situations. At PyCascades, the keynote was given by Guido van Rossum, which is really great. It was awesome to have him there. And basically, the keynote subject was, “Python 3: A Retrospective. What Went Right, What Went Wrong.” One of the things that he talked about that he wished they would have done would have been enabled Python 2 and 3 code to execute in the same runtime somehow. So, this kind of makes that possible. And the way it works is it basically creates a Python 2 subprocess and the main Python 3 app runs. Then anything that needs to run in Python 2, runs in the subprocess and then they’re communicated with using Pickle. So, it kind of serializes the objects in a binary form, back and forth. Which is not totally amazing, but for people out there looking to migrate in new features in Python 3 or they need to keep some small section of their app in Python 2, check out Warp2. This is pretty interesting.
OKKEN: It’s just a very tiny example of it does show that you can create a Python 2 object that the Python 3 world can reference object methods and stuff. Interesting.
KENNEDY: It’s a really cool idea. I’d never heard of it and I think it could be.. We’ve got a couple of pillars making this Python migration even better. One of them is MyPy and PyAnnotate and all the stuff around there, which was also a huge subject at the conference. And then this Warp2 is just another tool to make this smoother.
OKKEN: Yeah, cool.
KENNEDY: So, you’re having a problem with your tests and they can’t see your code, Brian? Is that what’s up?
OKKEN: Well, I wanted to bring this up because I wrote that pytest book and probably the number one question I get from people is, ‘Okay, I love this stuff but my test code can’t see my code under test with pytest. It could with unittest and now I’m with pytest and I can’t see it.’ So, I wanted to highlight it here and talk a little bit. I probably should cover this on Test & Code also, so I’ll try to make this quick. The gist is that pytest – on purpose, this isn’t a bug – it doesn’t add the current directory to the PYTHONPATH. But Python does. When you’re running unittest, you run unittest with Python-m unittest. So, you’re getting the current directory added to your PYTHONPATH. As long as you can see your code under test from your PYTHONPATH, and let’s say you have all your test code in a test directory, you’ll be able to import stuff because your current directory is in the PYTHONPATH.
Now, pytest takes that away from you and how do you get back at it? Well, the real answer is you write a setup file and use pip install-e for your project, which makes it so that you can keep writing your code, but your test code can see it also. That is sometimes a hurdle people aren’t willing to do, so there’s two quick answers. That’s run pytest just like you would unittest, do it as Python-m pytest, and that adds your current directory.
KENNEDY: That’s interesting. So, you still run Python as the main thing but then you just tell it to run pytest, and it does the path alteration.
OKKEN: And if that is cringeworthy for you, there’s a little package that’s a plugin for pytest. It’s called pytest-PYTHONPATH that does it for you. So, it’s a very small plugin that modifies the search path to add your current directory. It also adds a couple extra hooks so you can include your test code and your code under test in way different directories. You can specify where that stuff is with that. So, I just wanted to highlight those here. If people are having trouble with that, go check that out.
KENNEDY: Yeah, those look really cool. Brian, are you using pytest?
OKKEN: (Laughs) Yeah, everyday.
KENNEDY: I mean Dan, are you using Pytest? (Laughs)
BADER: Yeah, I am using it.
KENNEDY: I’m looking at your picture, Brian, and talking to Dan. This is hard. (Laughs)
BADER: I am using it. I think it’s really great. Testing framework, test runner. Nose, I also like Nose. There’s a benefit to using what's built into the standard library as well, but usually for my projects, all of them are in pytest. I know it’s just so frustrating when you run into an issue like that and you just want to try out a new tool or you get started adding tests to your app in the first place and you run into a roadblock like that. Brian, what you just described, that could take someone almost a day to figure out, if they had to dig through the depths of the Internet and find that. Resources like your book and what you just said, that can be a real lifesaver if you’re just getting started with pytest, for sure.
OKKEN: Right, and if it’s the first roadblock you hit, a lot of people are going to go, ‘This just sucks. I hate pytest.’
KENNEDY: (Laughs) ‘Why is it hard? I’m out of here.’ Yeah, for sure.
Alright, last official thing, at least. I want to talk about Cement. But not, you know, like buildings, but the framework for building CLIs. It’s yet another CLI application framework for Python, which is pretty cool. Others are ArgParse and Click and these types of things. It tries to provide a full-featured platform, but also they just have a nice simple way to work on it. It has this idea of extensions and handlers, so you can build these plugins that you hook into your CLI applications, which is pretty cool. People can check it out. It even has things like built-on logging, caching for improved performance. Lots of cool stuff.
BADER: Yeah, wow. I’m looking at the examples right now. This seems really intense and really powerful. This is more like the Django framework off the Python CLI frameworks. (Laughs) It’s pretty in depth.
KENNEDY: Yeah, it did feel a lot like that. Just one more thing to put on people’s radar for building CLIs, if Wooey and Gooey weren’t enough. (Laughs)
OKKEN: Yeah, so I usually use Click so I’ll be interested to try this and see how it compares.
KENNEDY: Click’s got its own special way of working, doesn’t it?
OKKEN: Yeah.
BADER: What I like about this Cement thing is that it seems to have a really nicely designed object-oriented interface. It looks like it’s made a little bit more boilerplate to get set up but then it’s probably more maintainable in the long run if you can really factor things out nicely and split up your app.
KENNEDY: Right. I like the idea of these mixed in shims and handlers you can plugin and stuff. They’re probably pretty testable, too, if pytest can see them. (Laughs)
Alright, well, I think that’s it for our items. Dan, we already heard your news. Very big news with Real Python. Congratulations.
BADER: Thanks.
KENNEDY: Brian, how about you? Any personal news to share?
OKKEN: A couple of Test & Code interviews coming up that I’m coordinating. So, I’m excited to get those out.
KENNEDY: Awesome. What are the topics?
OKKEN: Actually, one of the topics is whether or not you should consider continuing education through a university versus learning online, and other things.
KENNEDY: Oh, very nice. Yeah, cool.
Well, I mostly want to talk about conferences today because I feel like conference season is either here or nearly upon us. Like I said, I was just at PyCascades and that conference was really fun. It was maybe 250 people, something like that. Really nice conference. A lot of luminaries there. I got to spend some time talking with them. The talks were really well done. I think they’re going to be online. I’m not sure if they are yet.
So, the next one they’re going to have in Seattle in about the same time next year, which is going to be cool. I think even after that it comes to Portland. Woo hoo!
OKKEN: Yay.
KENNEDY: We’re trying to plan some sort of outdoor adventure around it, like a skiing or a snowshoe adventure for after the conference. That will be fun. So, check that out next year. It’s in the past so you missed it this year, but you can probably see the videos online. It was really good.
I want to give a shout out to PyColombia, that’s coming February 9th, 10th and 11th in Medellin, Colombia. I’m not going to be able to make it but if you’re in South America, that would be awesome.
OKKEN: Before we move on, I just need to shout out to PyColombia that you guys need to send me a t-shirt because your logo is really cool.
KENNEDY: Yes, it’s definitely really cool.
PyCon Slovakia, March 9th to the 11th in Bratislava, I’m going to be speaking there. I’m doing a workshop and that’s going to be super fun.
And then there’s the big one, PyCon U.S. Cleveland, Ohio, May 10th. I don’t think they’re sold out yet but do not wait if you’re going to go to this. Right, guys?
OKKEN: Definitely. I missed out on one PyCon and I’m not going to do it again.
BADER: (Laughs) I already got my ticket.
KENNEDY: You’re both going to be there? Awesome.
And finally, this just in this morning. PyCaribbean, Santo Domingo, Dominican Republic. The 17th and 18th of February. So, a lot of cool stuff coming up in February and a little bit later as well.
Also, there’s a new Python podcast that gave a shout out to both you and me, Brian. Our various podcasts and the intersection here. It’s called Python Out Loud. That’s pythonoutloud.com. Check that out.
That’s about it for the news this week. A lot of good stuff going on. So, Dan, thank you for making our meeting a podcast episode.
BADER: Thanks for inviting me on the show. A nice surprise.
KENNEDY: Thanks for joining us. Brian, as always, thanks for sharing the news with everyone.
OKKEN: Thank you. Talk to you next week.
KENNEDY: Bye, everyone.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.