Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #63, recorded January 31st, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And as always, we’ve got a bunch of stuff lined up for you. Before we get to it let’s quickly say thank you to DigitalOcean for making this show possible. Thank you, DigitalOcean. If you want to check out what they’re offering, do.co/python. I’ll tell you more about them later.
Right now, I want to hear a little bit about what’s coming in Python, Brian.
OKKEN: We’ve already talked about data classes coming up in Python 3.7 already. I was curious about exactly what that means to how it will be to work with them and stuff. Anthony Shaw put together a tour of how they work and it’s a pretty quick read. It’s a pretty thorough understanding of it. It’s called, “A Brief Tour of Python 3.7 Data Classes” and there’s some exciting things. One of the things is, a lot of the default magic methods put in place like _init_ and _repr_ and _str_ (dunder stir) and _eq_ (dunder equal). The _eq_ (equal) one I think is really cool. It’s going to compare all the attributes in order. If all of the elements of your data class are equal to another object with the same elements, they will be equal. That’s not something that’s normal by default. So, that’s good.
KENNEDY: Yeah, actually that's really cool. There’s a couple things that are interesting to me. One is the default value stuff, the way you configure the fields, the fact that there’s type annotations coming. Are those required? It looks like they might be required, not just optional.
OKKEN: They are required. If you don’t know what a type will be, there’s still in the types an ‘any’ type that you can use.
KENNEDY: Yeah, so basically that’s like the void star. (Laughs) ‘I have no idea what this is. It’s just a thing.’
OKKEN: Yeah, this is Python, so a lot of times you want it to be generic. You don’t know what the type’s going to be.
KENNEDY: It’s pretty interesting. I do like these. The other thought I had about these, looking through this is, I wonder if this means the namedtuple is less cool these days.
OKKEN: What do you mean?
KENNEDY: Well, one of the things that I think is nice about the namedtuple is you can basically create a type and you say it has these fields. And then you have typed access to it in the editors. You hit dot and you get a drop down of all the available elements of that thing. You can make it read-only, which is potentially nice. It has a nice string representation, a nice hash and equals operator, all those types of things. Every one of those comes in data classes. And if you put a frozen on the data class attribute to say, ‘This is read-only,’ then it also implements the hashing and it has the immutability feature. Once it is created it looks like it is the equivalent of a namedtuple, but it’s richer in a sense that you can have default-generated values. It just seems a little richer than a namedtuple but its usage is pretty much the same.
OKKEN: I think in my case, I probably will use it or try to use it more to see how I like it. But right now, I use namedtuples quite a bit and they’re very terse. A couple lines of code and you’ve got a new type.
KENNEDY: Yeah, the one thing I do see here is with namedtuples, you can literally on one line have a type that it takes six arguments. Whereas this one, it’s certainly more verbose. Once it's defined, I feel like basically, the use case is this a super set of namedtuples, unless I’m missing something.
OKKEN: Definitely in the use case, a lot of places where namedtuples are being used, data classes will be used instead.
KENNEDY: It’d be interesting to see if there’s any different performance for data classes versus regular classes. I think you can say use slots. Is that possible? I think that might be a thing.
OKKEN: That I’m not sure.
KENNEDY: Anyway, if you can do that, that would have a really interesting impact as well because it would probably use less memory than namedtuples. At least my testing has shown that it does.
OKKEN: I'm sure there will be somebody that goes out and does performance analysis to give us that answer.
KENNEDY: Yeah. It’s a call to the audience, indeed. So, these are coming and that’s pretty neat.
I have another piece of news for you, related to this.
OKKEN: Okay.
KENNEDY: So, Python 3.7, development on it is sort of frozen in the sense that it’s now out for testing and for usage, but no new features are being added to it. So, it’s kind of frozen. And Python 3.8 development started yesterday.
OKKEN: Wow. I haven’t started testing with 3.7 yet, or doing any of that. Have you used it at all yet?
KENNEDY: No, I’ve thought about it, but I haven’t done it.
OKKEN: Yeah, it’s definitely something I want to get started on here pretty soon because I think it’s due to drop in June, or something like that.
KENNEDY: Yeah, it’s in a trial period to make sure the world doesn’t break when it gets released. (Laughs) Could you imagine the pressure? But yeah, it’s supposed to officially come out in June, but it got into its testing mode, which is pretty cool.
So, if I ask you what was the most popular database in terms of deployments, what database would you guess?
OKKEN: Well, I’ve fallen for this before. I’m going to answer Excel.
KENNEDY: Excel. You know, I don’t know. This one that I’m about to say, it was very likely to give even Excel a run for the money. So, everybody who has Python has SQLite, right? It’s baked in. There’s a whole bunch of things that are interesting about SQLite. It’s like an in-process database. If you wanted to do something relational with SQLAlchemy or something, but you just want to ship some little app. You don’t want to deal with a client server model, SQLite is so super nice for that, right, you just have a little data file. I think we maybe talked about this before on a couple shows back.
But one of the listeners sent in this thing, this series from Carnegie Mellon University called, “The Databaseology Lectures.” So, there’s a bunch of databases covered there and there are actually quite a few interesting ones. The idea is these are an hour, hour and a half long academic lectures by creators of various databases, about the internals of how they work. I think it’s more like a CS (Computer Science) sort of speaker series or actually a course, I’m not sure. But they got a bunch of luminary folks to come and speak about it. It’s pretty cool.
OKKEN: That sounds like an exciting date night.
KENNEDY: Oh yeah, my wife was pretty excited when I suggested that. (Laughs) No. So, there’s WiredTiger of the storage engine of MongoDB. They had that before it became part of Mongo.
The one that I wanted to call out is the one by Richard Hip, who is the creator of SQLite. It’s like this deep look inside the architecture, trade offs and design decisions of SQLite. So, if you’re interested in databases and you’re interested in how SQLite works, there’s a bunch of optimizations and trade offs you can make, like durability versus performance. There’s a deep dive into here, so I thought that was pretty cool to highlight.
OKKEN: I’ll definitely check that out. I also noticed that they’ve got even SAP and Oracle. That’s interesting.
KENNEDY: Yeah, something to do with Berkeley DB in there as well. Yeah, it’s quite cool. There’s so much I’m not sure I want to cover it, but if you want to look inside at how do the B trees mapped disk and how do they deal with power failure transactional durability and all that kind of stuff. You want to see a deep look inside of databases in general and SQLite in particular, check it out there. I guess one as a teaser, on interesting fact that came out of there is SQLIte is shipped as a single C file.
OKKEN: Yeah, that’s cool.
KENNEDY: I don’t know how many, like two million lines? Some insane number of lines.
OKKEN: They don’t develop it as a single.
KENNEDY: No, there’s some process, some mechanism that detangles all the clued statements and the various compiled orders and all of that stuff, and generates this one huge file with no dependencies. It’s pretty wild to think that such a program was created that way.
OKKEN: It’s interesting that it’s intentionally no dependencies.
KENNEDY: The whole thing is a little bit unusual, the way that the guy has created it and runs it. He was like, ‘Well, Open Source is good, but I just want to make it this thing that is in the world.’ So, he put it out there in common domain or what’s that called? Anyway, he just said, ‘It belongs to the world. I relinquish all ownership of this thing. It’s now public domain.’ So, it’s pretty interesting.
OKKEN: Yeah, it is. Do you know what else is interesting?
KENNEDY: Testing your code before you take down the system? Or charge a credit card and you didn’t want to?
OKKEN: (Laughs) Yeah. Did we get this from a listener?
KENNEDY: Yeah, this came from a listener. I can’t remember who; I’ll pull that up while you’re having a look.
OKKEN: Okay, well, this is a project called, “Dryable: A Useful Dry-Run Decorator for Python.” The idea is that there is sometimes you want to run your entire application but there’s pieces of it that you don’t want to run all the time. In their example, they’ve got you’re accessing an outside database with Requests or something like that. You turn that off during your dry-runs. I really like how generic this is. Basically, you put a decorator – it’s a Dryable decorator – you put on top of a function. And then when you set the Dryable state to true in your code, those functions just don’t do anything.
They also have the option of specifying a default return value, so if during your dry-runs, if the function that you’re turning off is suppose to return something, or else the rest of your code is just going to break, you can specify that there. For testing certain systems, I think this is an awesome idea. It’s pretty easy to start.
KENNEDY: It’s almost like if I wanted to set up the mocking story for my code by using decorators and I could run it just even outside of a test framework, what would that look like? It looks like this Dryable thing, right?
OKKEN: The intent, I think, is to be able to just leave this stuff in your code. So, it’s a very minimal impact. And then if you want, you can just leave it there. You can always be able to do dry-runs of something.
KENNEDY: Yeah, in your test codes you just say dryable.(dot) set true and it just goes into it. So, one of the things that I was wondering about when I saw this – I agree that it’s cool and I definitely like it – we have mocking and these other mechanisms for stubbing out stuff. Where do you see this fitting in versus not?
OKKEN: I agree, mocking and monkey patching is often used for testing stuff. For example, we were doing different GUI applications, we were showing the other day. If you wanted to attach a GUI to a database system, you could have a mocked up database set to let people play with user interface. That’s not really a testing thing, it’s you’re just using something with some data in the backend. Something like that.
KENNEDY: I see. Maybe if you’re trying to build out the UI and you don’t have the data yet, it would be really nice to just go, ‘And here’s some data to work with until we get there.’
OKKEN: Yeah, definitely.
KENNEDY: Yeah, okay. That’s pretty cool.
So, I told you about DigitalOcean at the top of the show and I’ll give you more details. They actually had some super exciting news, maybe a week, week and half ago. But I actually spent a bunch of time upgrading a bunch of servers, because DigitalOcean is awesome. The actually went and said, ‘You know what? All that money that you’re paying for the servers? We’re just going to double all the things. You have one gig of RAM and you’re paying us ten dollars a month? Alright, now you get two gigs of RAM.’ ‘You have one CPU and you’re paying us a certain amount. Now you get two CPUs. Or two to four.’ So, they basically – not everything, CPUs not quite as much but certainly disc size with SSDs, RAM extent, the CPUs – they’re doubling everything they offer. Now you can get a server with a gig of RAM and a CPU and 50 gigs of SSD for five dollars a month. How insane is that?
OKKEN: Wow.
KENNEDY: Yeah, exactly. (Laughs) It’s really cool, the new pricing they put out. Drop over to do/co.python and check that out, because if you thought it was good before the literally doubled most of the things for most of the tiers.
OKKEN: That’s great.
KENNEDY: Yeah, really nice. Now Python Bytes delivers itself just a tiny bit faster and has a few more gig of RAM to do it with.
OKKEN: Well, that’s good because our listeners are going up.
KENNEDY: Right, we’ve got to keep up with the demand. Thank you, everyone.
Speaking of demand, we got a lot of listener feedback for this show and I think that is really great. Please keep the recommendations coming on Twitter, email and so on.
Have you noticed I’ve been in this GUI kick lately, Brian? (Laughs)
OKKEN: We kind of knew this was going to happen. You claimed that there weren’t any good solutions, then people told us.
KENNEDY: Yeah, and I still mostly stand by that. But there are people doing really cool things and I just want to highlight them. So, a guy named Victor Domingos said, ‘Hey, look, I’m not really much of a programmer. I kind of engineer something.’ He was doing something else but he needed to do some program to build thing thing. But I disagree with that. I think he’s quite a programmer to build these things. He sent us three examples, some apps that he built in Python. Click those and pull them up, Brian. Can you see the pictures?
OKKEN: I’m trying to pull up one.
KENNEDY: Yeah, so it’s really nice. It’s all screenshots which, by the way, if you have a UI framework and you want people to admire your UI framework: Screenshots. Pictures please. Just describing how awesome it is in text doesn’t make it awesome.
But these look like rich, interesting applications. I definitely think what he’s doing here is quite neat, especially the first and the second on that we’ve linked. We’ve linked to three.
OKKEN: This is crazy. PT-Tracking, it’s got both the desktop application, which looks nice…
KENNEDY: And an iPhone version…
OKKEN: And an iPhone version.
KENNEDY: (Laughs) Yeah, it’s pretty interesting. Like I said, this guy built some really powerful stuff, right?
OKKEN: Yeah, it looks great.
KENNEDY: What’s even better is that it’s Open Source. It’s TKInter code. He’s like, ‘Look, you’re giving TKInter a bad rap. This could be more nice looking, if it’s built the right way. And by the way, here’s three Open Source apps I built that you can check out.’ With screenshots, by the way, which is very nice.
So I just want to highlight that and say thank you, Victor, for sending these in and share the links because they are pretty inspiring and they’re working examples.
OKKEN: I did not know you could make an iPhone app with TKInter.
KENNEDY: I still don’t even know how that works.
OKKEN: I don’t either. Maybe I’ll try this out.
KENNEDY: Maybe there’s some kind of PEP for it. Like PEP 7225, ‘Make Python Mobile Apps on iPhone.’ Is that what it is? What if there was a way that you can figure this out that we could settle this debate.’
OKKEN: There’s PEP Explorer and it is by Anthony, again, Anthony Shaw. We gave him credit on the first article that we talked about. But, “PEP Explorer - Explore Python Enhancement Proposals” with a web interface. It’s got a search function and you can look at all sorts of stuff. There’s even the status – I don’t quite get all the status ones – but there’s an April Fool’s status, which I didn’t know about.
KENNEDY: That’s pretty awesome.
OKKEN: In 2009, they pretended that BDFL was retiring.
KENNEDY: THey probably just scared people, actually. That’s really what happened. Not only do you find the PEPs that were accepted, but you can search and say, ‘Show me the ones that were either deferred or rejected.’ You probably will learn a lot of interesting stuff by seeing what is rejected and why.
OKKEN: Yeah, and then the ones that are still in draft form and everything. I’d already picked this and I was playing with it, because the data classes we talked about earlier, I cannot find on this cool, little tool here. I’m not sure what’s going on with the 3.7 stuff. Maybe 3.7 just isn’t in here yet.
KENNEDY: Yeah, maybe. This is a search engine sort of thing with data backed on GitHub. So, if anyone wants to say, ‘Oh, you’re missing this one.’ PR.
OKKEN: So, nice people fix it and do a PR. I’m just going to call them out on Python Bytes.
KENNEDY: (Laughs) This one doesn’t work because it’s not there. And I can’t do a PR because I’m recording a podcast. Yeah. Nice work, Anthony. Enough to get a double feature.
So, I want to round this out with just a little bit more UI stuff. If I’m going to show you all those pictures of cool apps that Victor built, the other thing I want to pair with that is a TKInter Tutorial that we got on Twitter as well, from @likegeeks. It’s basically, ‘Here’s how you go through TKInter and create your first GUI application.’ You don't really build anything too complicated or too advanced. It’s more like, ‘Let’s put some labels and buttons and combo boxes and progress bars and see what that looks like.’ It’s still a decent distance from what Victor had built. But if you are inspired by topic four, maybe topic six can help you take some steps in that direction.
OKKEN: Yeah, okay.
KENNEDY: It’s pretty comprehensive. It really covers most of the widgets and how to use them and stuff like that in Python. Pretty cool. This may be the final thing we say about it, or maybe my own news will cover one more GUI thing.
OKKEN: I think we’ll probably hear some more GUI things coming up in the future. I’m okay with that.
KENNEDY: I am, too. I think this is great and I think the other area that’s looking really strong the more that I talk to people about this is wxPython. What I didn’t realize is wxPython has a project called wxPython Phoenix, where is was reborn from the ashes of wxPython. There’s two versions of it. There’s a more modern version that I conflated with the older version.
OKKEN: Oh, okay. I didn’t know about that.
KENNEDY: Yeah, I didn’t either. But the thing I’ll tell you about in a second… How about you? Any personal news going on, anything cool?
OKKEN: Not right now.
KENNEDY: Nice. For me, this is the week of the recording. I’m recording six podcasts, Talk Python, Python Bytes, I was a guest on a podcast. Also, a webcast. I did an hour and a half webcast, where I rebuilt PyPI in MongoDB, which was really fun. (Laughs)
OKKEN: Wow.
KENNEDY: It was really cool. I even created this fake database with hundreds of thousands of records to make to make it act real. It took like 15 minutes to program to actually generate the database, but that’s okay. It was still good. That was fun; I’ll put a link in there.
This weekend some friends were over and they’re like, ‘Hey, I’m trying to build this little script and it’s almost working. Can you help me?’ And I’m like, ‘Oh, this is a cool little CLI. But you know what would be better if it was a GUI.’ (Laughs) He’s like, ‘I know but you can’t do that in Python, can you?’ And I’m like, ‘Yeah. Hold on. Let’s pip install Gooey.’ That thing we already talked about. That thing is slick, let me tell you. Basically, you create one of these argument parser things from Gooey and you say, ‘It takes these parameters.’ Then you say, ‘Get the parameters’ and that actually shows the UI with all the widgets filled out and the names and types. Like, ‘This one is a combo box. It has these three items.’ That’s your argument and then it becomes just a combo box. It really is just a few lines of code. It’s awesome.
OKKEN: We’ve been getting a lot of people that have been using Gooey show us their screenshots of something they made with it and that’s pretty awesome.
KENNEDY: I really think the bang for the buck is quite high on Gooey right now. And that’s wxPython, by the way.
Also, a quick announcement on the courses. I have a bunch of courses coming up and more of them are getting planned all the time. It’s really fun. But I just launched a business option, team purchase page. So, all the bundles and the courses and stuff on Talk Python Training now have a ‘Buy This For Your Team’ and if you pick however many people are on your team, it will automatically apply enterprise discounts and all that kind of stuff. So, if you want to go there and say, ‘Buy this for ten people,’ it’s all self-serve now.
OKKEN: Wow, that’s great.
KENNEDY: I’m trying to make it easy for more people to get that Python knowledge.
OKKEN: Neat.
KENNEDY: Alright, well, thanks, Brian, for finding all these things and sharing then with me.
OKKEN: Yeah, thank you.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.