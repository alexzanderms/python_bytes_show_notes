Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #64, recorded February 7th, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’re excited to be here with you today. We have a ton of good stuff we’ve uncovered to share. Very exciting. Before we get to that, I just want to say thank you to DigitalOcean. Check them out at do.co/Python. There’s some really awesome news from them and I’ll share that with you in a little bit.
But right now, I’m kind of in love with this project that you picked right now, Brian. Tell me about it.
OKKEN: Well, it's wxPython. We’ve heard of this before when we’ve been talking about GUI development and desktop development lately. The wxPython folks contacted us and said, ‘Hey, we are Python 3, version 4. Code name Phoenix is alive and usable.’
KENNEDY: That is really cool because wxPython, there had been a really old version. And I think we can see what Phoenix means in terms of a project, right? It’s reborn in this new Python 3 UI. Very exciting.
OKKEN: The underlying wx toolkit had also underwent a change and the wxWidgets project has been updated. And the wxPython, on top of all that, has been updated. It’s something that I’ve developed with years ago and discounted because it has an old look, but now it looks nice. People should check it out.
KENNEDY: That was one of my two major complaints – or maybe one of three – about the Python GUI stuff. Obviously, we’re still on this kick and I think it’s a good one actually. But the fact that a lot of these UI tool kits look like they’ve jumped in Marty McFly’s car and transported from the early ‘90s to your computer; they’ve got this old-fashioned look and it’s out of place. So, the wxPython stuff looks really modern and it looks like it belongs on a lot of the platforms, at least Mac, Windows and Linux that I’ve been playing with lately. I’m really happy to see this coming along.
The other one I would love, of course, that Visual Designer sort of tooling in there. But I’m happy this thing is coming along. It’s been re-released; that's awesome.
OKKEN: On their startup page, after you do all the downloads for it, there’s a five line application that you can use to try it out. That’s pretty slick and fast to get something up and running. I tried it out yesterday. It’s good.
KENNEDY: Very cool. So, I have a little question, a little tech interview-type question for you, Brian. Did you know that you can define a Python function and just put triple dots after it and kind of say, ‘Actually, I don’t want to define it’?
OKKEN: I did not know that.
KENNEDY: I did not know that either. However, part of my experience of going to PyCascades was to meet Lucas, who gave this amazing talk. He’s from Facebook and Instagram about how they’re doing gradual typing in Python and how they’re adding types to the millions of lines of code at Facebook slowly and this whole process they went through. It’s super interesting. I’m having him – already recorded but I’m going to have him in sort of real time the way people experience it – on Talk Python talking about it.
One of the projects that came out of there that I thought was really interesting is this thing called Typeshed. Have you heard of Typeshed?
OKKEN: I have, yeah.
KENNEDY: So, Typeshed is this place that contains external type annotations. Basically, these signatures for everything in the Python standard library. So, you go in there and you’ll find functions or classes with methods and whatnot. And you’ll see stuff like def visit (self, node: AST) this is from the AST module. So, it will tell you the type of thing that says -> Any: (arrow goes to any) for example and then just … (Dot, dot, dot) and that’s it. And this is a way in which you can define these external types and these .pyi stubs. So, it’s like a normal Python file that Python can interpret, except for all the methods that are empty. There are a couple of PEPs that talk about the annotations, ‘How is this working?’ And so on, then there are just annotations that people know. But ‘s is pretty interesting is that this is actually what mypy uses. This Git repository of what Python looks like in terms of types, this is what mypy uses. The static type checker as well, what PyCharm uses to get all of its magic. So, PyCharm is much better than many editors about going... Oh, you know if you call some method on this other thing and it returns this other type and you hit ‘got’ you can see all the autocomplete from it. Where did that come from? It came from Typeshed actually.
OKKEN: Okay.
KENNEDY: I don’t know, I thought this was pretty interesting. And the other thing that is really cool about this is it doesn't look like people are using it this way very much. I’m putting this out there as a call to everyone who cares about Python 3 who wants their library to be very rich with inside these various editors and type checkers, to take a moment and document packages signatures here. There’s a place to put third party packages like Request or Flask or you name it. If you run an Open Source project that has a package that people use, you can come over here and put yours in and then that will be picked up by all the other things. It’s pretty cool.
OKKEN: Okay, that’s interesting. I’m not sure how they avoid name collision on that.
KENNEDY: They basically have structure. There’s a third party folder and I think it’s just the next subfolder is the name of your package, which is unique on PyPI. So, it’s probably okay. I hadn’t heard of Typeshed. I knew that you could annotate your signatures and stuff, but I didn’t know that there’s this one place that’s kind of being used as common source, so that’s pretty cool.
OKKEN: Yeah, and I’m curious… These Python stub files, is that the only thing they’re used for, is type?
KENNEDY: I don’t know, I’ve never heard of them before but apparently…
OKKEN: Interesting.
KENNEDY: (Laughs) It’s this new signature. It remind me a little bit of what happened a few years ago with Typescript, where – I think it’s called DefinitelyTyped, I can’t remember – there’s now this massive git repository of all these external JavaScript libraries that want to interact with the typed version of JavaScript, so they all have basically, there’s this similar concept of just the signature descriptions without the implementation in this one giant git repository. So, this is kind of cool to see it happening in the Python space.
OKKEN: Yeah, definitely. One of the things that I want to do, I think that Ned Batchelder’s Coverage tool is super cool. The same caveats as normal is don’t be too enticed with trying to search for 100% code coverage in your tests, but it’s a useful tool on its own otherwise. But Coverage 4.5 just came out and he added just one new feature and this new feature is pretty darn cool. It’s the configuration plug-ins feature, which allows you – you kind of have to read it a bit and get your head around it – but the idea is, there’s a lot of people that have different configurations or different run configurations of their code. Some of the code is intentionally not supposed to run at certain times, so it throws off honoring different requests from people to put new features in. It has this configurator plug-in so that you can do your own pragmas ahead of time, a little bit of code before you run the rest of your code and you can comment out things.
An example, for instance, in the pytest book I had a application that used both TinyDB and MongoDB as two different options. So, I would want to run my tests on the whole thing using Tiny and then also the whole thing using Mongo. But I don’t want to… There’s some of the code that’s only for Tiny and some of the code that’s one for Mongo. It doesn’t make sense to run coverage on those parts in those configurations. So, that’d be a great use for that.
KENNEDY: Yeah, that’s really cool. Because it’s really easy to say, ‘We’re at 80% coverage, we’ve got to keep going. How do we get this higher, right?’ But there’s some stuff that should just kind of be left alone and this is the nice way to say, ‘Right now, you should not consider this bit of code’ because who know, maybe it’s some sort of utility script that you’re just throwing in and you don’t actually want it to be run as part of your package. Who knows? It’s pretty cool.
Yeah, so you know what else is pretty cool is the recent changes that the folks over at DigitalOcean made. They’ve always been the incredible, affordable hosting and basica virtual server space. They’ve made places like AWS react in extreme ways to try to keep up with them. So, that’s pretty cool, but they just recently, more or less, just doubled everything that you get for the price. So, for $5 you get server with a gig of RAM and 25 gigs of SSD. It’s pretty sweet. It even includes a terabyte of transfer, which by the way at AWS rates, that’s $93 of bandwidth. For $10, two gigs. If you pay $20, you get four gigs, 80 gigs of SSD, a couple CPUs. It’s just crazy some of the prices that they have now over here. So, if you’re looking to do some virtual server stuff, or things like that, definitely check them out at do.co/Python. They’ve got some really cool options now.
OKKEN: That’s great.
KENNEDY: Yeah, and thank you DigitalOcean for supporting the show. It helps us keep going.
So, we’ve already talked about, Brian, the fact that neither of us are really into gaming, right? I’ve been playing a little bit of Formula One, you know with the steering wheel thing. That’s kind of a fun simulation. Generally gaming, not so much for either of us.
But I have some gaming news that is pretty interesting. It doesn’t have to do with playing games, it has to do with the creation of games in three worlds. I’m sure that you know personally, but people may know that Python is actually used quite a bit to automate and manage and build the pipeline between all these different tools and all these different people at these massive game and movie companies, right?
OKKEN: Yeah, that’s pretty cool.
KENNEDY: Yeah, you’ve got to go from Maya to some other tool, all these hundreds of gigs of files and they need to be transformed and processed and what not. That’s a challenge, and a lot of people built custom versions of that.
So, the big news here is that Unreal, the Unreal Engine, is one of the most significant 3D game engines there is, they are now integrating Python deeply into its processing pipeline, not it execution necessarily. But its plan to integrate Python in the Unreal Engine for Data, basically, for this data pipeline.
OKKEN: That’s great.
KENNEDY: Yeah, it’s cool right. So, this is from Autodesk and they said, ‘Hey, we’re going to give you a glimpse of what we’re doing.’ So, maybe somebody’s built a model in 3D Max and it’s this super intense, ultra-fine quality, every to single thing is modeled. The example I have in the article we’re linking to is like, there’s a motorcycle and the tired on the motorcycle have those dots, like those sticky pieces of rubber that come out on new tires, where they come out of the mold and they’re still sticking out. So, they’re like, ‘We don’t need that in the game. This is going to kill the performance if we actually put every little bit of these knobby things and stuff into the model that ends up in the 3D in the Unreal Engine, right?’ So, they’re basically building this pipeline where you can say, ‘In Python, why don’t we just delete all the objects that are probably too small for people to notice anyway, and just do that automatically.’ Do you level a details model, you can merge objects together, you can create a bunch of different motorcycles by automatically taking the source one and replacing the material that is, say, the fenders and the gas can and stuff. To change it from, say, a light blue to a purple shiny motorcycle. So, all of this is automatic. So, once it’s automatic, you can change it at the beginning of the process and replicate this entire workflow, which is pretty cool. It’s awesome to see that Python is the choice for it.
OKKEN: Yeah, very cool.
KENNEDY: So, one more example of people using Python in ways that I had no idea existed.
OKKEN: Yeah, neat.
KENNEDY: (Laughs) Pretty cool.
OKKEN: Good job, Unreal.
KENNEDY: Yeah, good job, Unreal and Autodesk. They’re going to have a brand new version of Python to work with pretty soon, aren’t they?
OKKEN: I think we mentioned Python 3.7 last week, but the Python 3.70 Beta 1 is out and because it’s now Beta instead of Alpha, that means the feature set is frozen and we’re just tweaking it and making sure it’s all tight and tested. But Beta means that there are beta testers and I was just thinking that if it’s not people like you and me in our community that listen to this, who is it? So, I’m putting a call to action out there to go and pick a few of the features that are coming up and test things out. Make sure it works for you and report bugs otherwise.
KENNEDY: Yeah, and there’s definitely some cool features in there, like we talked about data classes last week, that being in there. But there’s actually a bunch of changes and it’s one of these things. Speak now or forever hold your peace. It’s going to come out in June so here’s your chance to test it.
OKKEN: I was going to take a look at the breakpoint feature and the data classes and maybe a couple of the others and give it a whirl.
KENNEDY: Nice. So, do you know if there is easy ways with things like tox and stuff, to go ahead and run your tests on Python 3.7?
OKKEN: Yeah, of course. Tox you can set up 3.7 as one of the Pythons to test everything. That’s one of the ways I’m going to test this. I’ve got to make sure there’s new versions of pytest as well and I want to make sure that all combinations of Python, all recent versions of Python and pytest, work with the demo code I have in my book and doing that manually is just too much work, so I’ll use tox for that.
KENNEDY: (Laughs) Yeah, that’s a complete nightmare. Tell people really quick, I know some people know about tox but not everyone. Tell people where does tox fit in, because I thought you were a pytest guy. What’s up with this testing with tox thing?
OKKEN: (Laughs) Well, tox is sort of like a top-level scripter thing, and I’m totally going to get it wrong, but the way I use it really, is to pick multiple configurations. You can have multiple combinations to different libraries together or configurations of your system and test them separately.
KENNEDY: Nice. So, you could say, ‘Test on PyPy and on CPython and multiple versions of either of those in a single test run,’ right? But the system will configure the interpreter or the runtime for that, right?
OKKEN: You can turn off or on all these features, by default it takes your say, a package that is a Python package and it runs its setup function to create an installable Python wheel, I think. And then it creates a virtual environment, installs your package and all of its dependencies and then runs the tests on it, and then reports on that. And then it does it again for however many different configurations you’ve got set up.
KENNEDY: So, for our final item, the one that I want to cover is similar. You were talking about a new release of Python coming out in Beta. I want to hit a whole bunch of things that were released that were pretty interesting on a couple levels.
So, first of all, I think some people use this web framework. It’s called Django. What do you think, Brian?
OKKEN: (Laughs) Yeah, quite a few.
KENNEDY: (Laughs) So, they just announced that they had a security release to fix some issues around authentication and basically, the log-in infrastructure in Django. So, if you’re using 2 or 1.11, you may want to check that out. So, there’s been like, ‘Here’s a testing thing.’ There’s been a regression. There was a problem, it was fixed, and now it’s unfixed. It’s fun when problems unfit themselves
OKKEN: So, the release is with the unfixed one?
KENNEDY: This puts the fix back.
OKKEN: Oh, okay.
KENNEDY: Two more around Python 3, One is Python 3.4, there’s a security release there. And one if Python 3.5; there’s also a security release there. So, respectively, the versions are 3.4.8 and 3.5.5. And there’s apparently some problem with this internal bit called libexpat. As far as I can tell it’s an XML parsing library and there’s some kind of issue with that. That sounds not good. People could send you bad XML and bad things happen. So, be aware and just to remind everyone, if anything like this happens in Python 2 shortly, there will be no fixes, you’re just going to have to live with it after it goes End Of Life. It’s good that they’re fixing these. I don’t know when 3.4 is going End Of Life; 3.3, I think, I now out.
Anyway, the final one – I said I have a lot of releases – is Channels. So, these are Django Channels. They’re pretty interesting in that they have an asynchronous way to write Django, websockets and these types of things. Actually, I had the guy behind this on Talk Python, I’ll like to the interview there. But this is sort of a complete rewrite. This is Channels 2.0; it’s a major rewrite. Most notably, Python 2.7, even Python 3.4 are no longer supported there. Fully Legacy Python is out, it’s 3.5 and above, that’s all it works on.
OKKEN: Okay.
KENNEDY: I suspect some of that might have to do with Django, too but it also being this async thing, maybe they used the async and await keywords and it doesn’t work in 3.4 or below. But yeah, it’s all pretty cool. A bunch of new releases so if you’re using these and want to check them out, then do.
That’s it for our news this week. Brian, what items do you have to share?
OKKEN: Well, I’ve got a couple exciting things. I had submitted five talks to PyCon and one of them was accepted.
KENNEDY: Congratulations, that’s awesome.
OKKEN: Yay. It’s a talk but I’m going to do it together with Paul Everett from the PyCharm team, so it will be PyCharm and pytest. And that will be fun.
KENNEDY: That’s going to be really fun.
OKKEN: The two of us are also going to do a webinar coming up on the 22nd of February, and similar topic but a little bit more advanced. So, we’re going to dive into how to productively and effectively use pytest in PyCharm.
KENNEDY: Oh, that is really cool. You know what I’m doing right now? I’m going to register. I’m excited. That will be really fun. And then all these, of course, get recorded afterwards. It’s typically and hour Q and A, lots of fun. But if you can’t make it live, you should still register because then you’ll get a notice that the recording is out. I suspect we’ll let people know when your recording is out. Like maybe this week I might let people know that my recording is out.
OKKEN: I registered for yours, and I didn’t watch it, but I got an email saying, ‘Hey, it’s up.’ I started watching it this morning.
KENNEDY: That’s cool. So, recently I did a webcast with a PyCharm guy as well, Paul was there as the MC of the whole experience. And what I did in mine was I said, ‘Let’s learn how to play in MongoDB from Python.’ So, let’s take PyPI and recreate the data access layer of what PyPI might look like in a document database using Mongo and Mongo Engine and stuff like that. It was lots of fun. You can go and check out that recording and we’ll link to it in the show notes. And I suspect around February 28th, you might have a similar one.
OKKEN: Just a small, toy project. Recreate PyPI.
KENNEDY: And I’m a little disappointed because I used Faker. We talked about Faker before, right? Where you can create fake data. The thing is glorious. It needs a few other features which I’m thinking of doing some PRs for to add them, but I created 100,000 fake PyPI packages and they have some kind of data. So, now what I’m working on is a system that will let me entirely download every piece of data from PyPI, the model and the database. So, for other projects I’ll have this corpus of all of PyPI.
OKKEN: Okay, so for the next few weeks if PyPI is slow, it’s your fault.
KENNEDY: Yeah, you can blame me. I’m sorry about that. (Laughs) Exactly. Or I go over my bandwidth limit or something like that.
OKKEN: It was really interesting so far, that I’ve gotten into it.
KENNEDY: Yeah, cool, thanks. Alright, well, that’s it for this week. Thank you everyone for listening. Brian, thank you for sharing this with us.
OKKEN: Alight, thank you. Talk to you next week.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.