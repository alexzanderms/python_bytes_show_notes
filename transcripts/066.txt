PYTHON BYTES TRANSCRIPT
Episode #66: Wait, NoSQL with ACID and Transactions?
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #66, recorded on February 22, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We have a ton of stuff as usual. We’ve scoured the web and I don’t know about you, Brian, but I had a really hard time actually picking the topics. Everyone I found was better than the last one.
OKKEN: It’s exciting to see a lot of content out there.
KENNEDY: For sure. I want to say real quick, thanks to Rollbar. Check out what they’re doing at pythonbytes.fm/Rollbar. Add error reporting and real time monitoring to your web apps and other things. We’ll talk more about them later.
Right now, let’s focus on modern Python a little bit.
OKKEN: There’s a lot of tutorials on how to do Object-Oriented Programming and also, Object-Oriented programming in Python. Real Python put out, “Object-Oriented Programming (OOP) in Python 3, which I think is a nice update, just making sure everybody currently understands how to do things, if you want to do classes and objects and inheritance. To be clear, all of Python is object-oriented. It’s just, everything's an object. I hope that’s true.
KENNEDY: That’s true, yeah. Even functions and numbers.
OKKEN: What this is meaning, if you’re going to define your on classes, how to go about doing that. This is a pretty nice tutorial. One of the reasons why I wanted to call it out, there’s a reason I’ll get to later, he kind of brushed by construction. If you came from C++, one of the things that C++ does is it calls your base class constructors automatically. I wanted to just call that out.
KENNEDY: Right, especially if they’re parameter-less, right? It will just happen straight in the stack, right? You don’t have to be explicit.
OKKEN: But in Python you do have to be explicit. If you override _init_, a base class will not get called unless you call it yourself. There’s been many incantations of it and I think the recommendation right now is to just call super()._init_ to call the base class constructor.
KENNEDY: Yeah, definitely. Very cool, worth checking out. It really digs into the object model and inheritance and all that kind of stuff. So, if that’s a little bit shaky to you, definitely check it out. It even has some exercises and examples in there, right?
OKKEN: Also, it’s not a bad thing to brush up on if you’re just about to go into an interview probably. It’s a nice article. I’ve been playing with attrs a lot, if I need objects, so make sure it’s a real easy thing to pick up, if you want to check that out as well.
KENNEDY: Yeah, that’s cool. Attrs is pretty sweet. Definitely a lot of really solid people make it a great recommendation, so it appears frequently at the end as the featured PyPI package on Talk Python, for example.
So, you want to stay on the GUI trip for awhile, or keep going? We really opened a bag, man. When I started that, it really kicked off a, ‘Oh, but Michael, did you hear about this? Did you hear about that?’ I’m happy I did and I love all the things people are sending us, learning about wxPython Phoenix. I only knew about the older version, which is really awesome. I learned about Gooey and Wooey, all these other interesting things.
So, I come to you, Brian, this week with yet another thing called ScriptedForms. Tell me, how’s your Markdown?
OKKEN: I love Markdown. I use it all the time.
KENNEDY: Markdown is not hard. It’s not bad, right? So, here is a project in Python that lets you basically sketch out a UI in Markdown. It becomes an interactive GUI, with input fields and everything.
OKKEN: Okay, neat. I’ve got to check that out.
KENNEDY: Yeah, so for example, if you want the title, like a big title at the top of your form or window, hash (space), type out the title. (Laughs) Isn’t that cool?
OKKEN: (Laughs) Yeah.
KENNEDY: So, you can do all sorts of interesting things in there. A lot of these aren't totally general purpose, but if you want a simple UI, check out this thing called ScriptedForms. Of course, we’re linking to it in there. You just basically sketch it out and it runs on Jupyter, but the way it gets packaged up, is you just see a desktop window pop up and then it’s interactive. It’s pretty cool. They’ve got some examples and all kinds of stuff. You can have sliders and live graphs. This looks particularly interesting to the data science folks who have that kind of display going on.
OKKEN: That’s cool.
KENNEDY: It’s cool, right? ScriptedForms, there’s yet one more way you can create niche Python GUI apps and bundle it up with something like pyinstaller.
OKKEN: I definitely want to try that.
KENNEDY: Yeah, I do as well.
Do you know that I’m a fan of MongoDB? (Laughs)
OKKEN: Yeah, you’re like the uber-fan.
KENNEDY: I am the uber-fan. I love it. I talk about it all the time, like for example, Python Bytes, the web app, is driven by MongoDB. But you are the one to bring the big new, not me, on MongoDB these days, right?
OKKEN: I guess so. I was surprised but I grabbed it. The news that came out on the 15th was that MongoDB will – it doesn’t do it right now – in the 4.0 release, it will do multi-document transactions and have ACID data guarantee, integrity guarantees.
KENNEDY: That’s kind of blowing my mind. One of the big things that Mongo has done is treat the document-level record as a thing, that way we can do sharding and auto-scale out and all kinds of stuff, and not worry about communicating across machines and clusters and all the other pitfalls you can run into by trying to do really complex transactions. So, you’re right, I didn’t see this coming either.
OKKEN: This is due out in the summer, so the 4.0 is supposed to do to transactions and the 4.2, which I’m not sure when that’s coming out, that will even deal with transactions across sharded deployments.
KENNEDY: Wow. That’s really cool. And it has snapshot isolation, even the sort of repeatable read-type stuff. Very cool. Yeah, they said sometime this summer, right?
OKKEN: The ability to do transactions and hopefully we’ll get things like rollback and things like that, these are a lot of the reasons why people don’t choose a document database. So, it changes the table of pros and cons.
KENNEDY: It definitely changes the trade-offs that you’re considering. I just find working with these document databases so much easier. The last time I ran a migration or worried about upgrading my database schema to match a new deployment was never. I literally have not had to run any update script for the last two years on training.talkpython.fm, on pythonbytes.fm, any of these things. They just adapt and it just makes living with it so much easier and I’m just really happy to see it get one more check in the comparison table, in that column.
OKKEN: Yeah, definitely.
KENNEDY: Very cool. So, if I did mess up my schema or something went wrong though, my web app would crash and that would be bad. Actually, working with Mongo Engine, you can basically take the site down because it will not read records if it thinks it’s inconsistent with them, so that’s a different type of problem. The same thing happens with SQLAlchemy. But if I did that, and I had Rollbar installed like I do, you’d know about it right away. I’d get notifications in Slack and email and pop ups and stuff, saying, ‘Hey, the site is down. Something has gone terribly wrong.’ Just the other day I was sitting around and I started getting all these notifications of something going wrong with the site. I’m like, ‘What is this?’ On pythonbytes.fm and talkpython.fm and what not, and I pull up Rollbar and it says, ‘Cannot find MongoDB server.’ How about that? And the reason is DigitalOcean, the host was actually patching the underlying Linux servers for the Spectre and Meltdown vulnerabilities, so they had to take the machines down. And they didn’t do it in a controlled way because they’re just like, ‘We’re telling you, at some time we’re taking the machines down. We’re going to fix this.’
So, even when it’s not your fault, you’ll know about it if you have this installed and you can at least switch up a dialogue or page saying, ‘Sites under super maintenance right now. Sorry.’
OKKEN: Cool.
KENNEDY: Yeah, so super easy to install it, not much work at all. Plugs into all the web frameworks. Check it out at pythonbytes.fm/Rollbar.
So, another kick that you’ve been on for awhile, Brian, is Python packaging.
OKKEN: Yes.
KENNEDY: We talked a lot about what the right structure of that is and all those various things. This week I want to feature this thing called, “Python Packaging Pitfalls.” It’s not super new, nut I thought it might be fun to cover anyway because we talked a lot about and we haven’t covered this. A couple of items, probably 10, 12 little things. ‘Don’t forget to do this, don’t forget to do that.’ If you’re doing packaging, you might forget to clean the built directory before you do it. Or you forget to specify package data or using package_data or fine-grain package data, all sorts of mistakes that are listed there. It’s really nice. The article says, ‘Why is this a problem? How do you fix it?’ Like Hard coding your packages in the setup.py versus discovering the packages with Python code in your setup.py.
OKKEN: Yeah, these are all great tips. I haven’t read this for awhile. I remember reading it a couple of years ago, to try to make sure that most of these look like they’re still valid.
KENNEDY: Yeah, I think so. One of them that might be a nice for you is your test the installed code. They test what’s actually in your working directory, rather than running the setup and testing the thing that actually was the result of that.
OKKEN: Is that one of the ‘things to avoid’?
KENNEDY: That’s one of the last things to say, ‘Be careful. Make sure you test the actual install result, not just your code on development.’
OKKEN: Yeah, it’s one of the reasons why I really like tox is because tox creates these clean environments. But yeah, you still have to be careful of that, even with tox. That’s why we talked about using a source directory.
KENNEDY: Absolutely. Awhile ago, I had a bunch of authors, including you, on Talk Python, about writing. And some people were asking, ‘How do you become a better writer?’ And you said, ‘By writing.’ (Laughs) Just get out and blog, write, do things like that. So, you came across something like that again this week, right?
OKKEN: Yeah, I came across an article called, “Blogging Principles” by Julia Evans, which I think is cool, she goes by @b0rk on Twitter. But I’m just going to read through her tips, then we can talk them.
“Be honest about what you know.”
“Try not to write anything too long.”
“Be positive.”
“Write for the past you.”
“Stick with your own experience.”
“It’s okay if not everyone likes it.”
A lot of these really hit home with me. One of the things – “try not to write anything too long” – I try to completely get my head around something and I don’t want to write about it until I completely understand it. And then sometimes I don’t have time to do that. And I think that’s too bad, and I love when people have just a couple screens full of information of just, ‘Hey, I learned this neat new thing. Here’s how to do it.’ And just go and teach it so other people can learn from you. It doesn't have to be huge, so it will be okay with short things.
KENNEDY: If you do short things frequently, that’s probably better than saving up that one long post that actually never gets written, right?
OKKEN: Yeah, also one of the things you can do is with metrics as well. If, instead of writing a long blog post that has five subtopics, write five different posts and then you can find out which piece is resonating more easily. Metrics will just point it out.
KENNEDY: Yeah, that’s a really good point.
OKKEN: The last point is “It’s okay if not everyone like it.” Her example actually is – I forget which article it was – one of her articles is more popular than others and she needs to remind herself to not try to keep up with that. It would be a mistake to try to hit that every time. It’s actually something that hits with me. I haven’t been blogging a lot lately, I do want to pick it up. It will help me to try to write shorter stuff. And also, I’ve got a few tutorials out there that are really popular and I don’t know how to beat that. So, don’t try. Just write little things. I learned a few new things during the webinar today. I learned some new things about PyCharm, and I could just write a short blog post about cool things I learned about PyCharm today. Why not?
KENNEDY: That’s awesome. Yeah, why not? And definitely, I feel like these little series ones are real nice. I’ve done several like, ‘I’m going to blog ten blog posts in this kind of theme,’ and those turn out to be really easy to write. But I also find that I periodically get distracted and life gets in the way and I don’t finish them. It’s like, ‘Here’s the top ten,’ and I have seven filled out. I think that’s a really great way to do it, but maybe actually write the ten then, ‘Hey, I’m doing a series on it.’ You know what I mean? Kind of do it in reverse a little bit, to bring it together, what you’ve done.
I think one of the takeaways I would add is, it is so hard to predict what is going to be popular and what is not going to be popular. You look at things and you think, ‘Oh, this is going to be so popular,’ and it gets a hundred views. You’re like, ‘I guess I’ll throw this out. Why not? I’ve got a half hour. It’s kind of on my mind.’ And maybe it won’t matter, like it’s thousands or hundreds of thousands of views, and you’re like, ‘Why is that?’ Just put stuff out there and it will happen.
OKKEN: I think the, “Write for the past you,” I’ve fallen in this trap of trying to write for experts and try to impress the people that no more than I do, that’s a bad place to try to be. And trying to write for absolute beginners, but I haven’t been an absolute beginner for a long time so, I don’t really know how to do that. So, I think writing for me, if I would have read this article a month ago it would have saved me time. So, just write it.
KENNEDY: Yeah, absolutely. Pretty cool.
So, we spoke about Pipenv a while ago, but I want to bring up something that I don’t know why I found this, I just randomly ran across it. I was looking at Pipenv again for something. Pipenv is a way to package up virtual environment, tendencies, requirements.txt, pip, activating the virtual environments. All that kind of stuff into one workflow. Kenneth Reitz is behind this in a significant way. But I somehow was looking across it and I saw that it’s on GitHub.com/PyPA (the Python Packaging Authority)/Pipenv. Hm, interesting. And then I scrolled down and it says, “Pipenv, officially recommended Python packaging tool from Python.org. Free as in freedom.” Did you know this is the official way? Pip and requirements.txt is officially out.
OKKEN: No.
KENNEDY: I didn’t either, that was my reaction. ‘Wait, what?’ I know that there’s Pipfile and Pipfile.lock and that kind of stuff. But it seems to me, at reading this at least, that because this comes from PyPA, that Pipenv is the way we should be doing things. I don’t know about you but I need to study this and kind of get in touch with it because I feel a little bit lost when I use Pipenv, and I’m really confident with pip and requirements.txt and all the stuff I do there.
OKKEN: I guess I’m comfortable with pip and setup files, so I’ll have to read up on this, too. Do you know if you can just get away with doing this and then pushing a package up to PyPI?
KENNEDY: I don’t know but one of the things you can do is you can tell it to generate a requirements.txt from its behaviors and its lock files and stuff. Let me give you the quick workflow. If you go there, there’s a docs.pipenv.org, which you can go to and it has a nice little screen cache from Kenneth Reitz. It’s like four minutes. It says, ‘Let me show you this new tool. I’ve been working on it with a bunch of people and it seems really nice. Here’s how it goes.’ So, you just go into a directory. No virtual environment, nothing set up, and you say, ‘Pipenv install a thing.’ And if it’s never run, it will create right there Pipfile and Pipfile.lock. And it will, somewhere in its temp working area, create a virtual environment and install it into that. If you type, ‘Pipenv install another thing,’ it will put it into that same environment because now it’s tied to the Pipfile and you automatically add the requirement to your Pipfile and to Pip lock. And the Pipfile is like requirements.txt. The Pipfile.lock is like that plus the dependencies, so it’s like pip freeze everything, not just what you pip installed.
It’s pretty cool, then you can Pipenv shell to kick it off, or there’s a command for finding the virtual environment and you can source activate it, just traditionally.
OKKEN: Okay. Actually, the video is the reason why I gave it a shot. Just reading about it confused me even though I read it like seven times. But then you watch him use it in this little, couple minute video and it’s like, ‘Oh, okay. That’s easy.’
KENNEDY: Yes, exactly. And other thing I like about it is, it says, ‘Windows is a first class citizens in our world.”
OKKEN: Wow, that’s rare.
KENNEDY: It is, it’s really nice. I have a Windows 10 setup, but I typically work on my Mac. But I know many people in the world use Windows, especially in large enterprise environments, and having Windows be a first class citizen in the Python space, is good for everyone.
OKKEN: Yes. This is neat.
KENNEDY: Really the news for me is, it’s a review of Pipenv but the fact that it’s the officially recommended way over the traditional ways we’ve been doing it means I need to pay more attention.
Very cool. So, this is our set of items for the week. You just did a webcast, right? Which you will probably have live certainly by the time this goes out.
OKKEN: Well, it was already live. It was live this morning.
KENNEDY: Well, I mean the recording will be out and available. (Laughs)
OKKEN: It will be out, yeah. That was with JetBrains PyCharm team and that was super fun. We had a good time, we talked about using pytest within PyCharm and it just scratched the surface. There’s a lot more to cover, but it was fun.
KENNEDY: Awesome. We’ll definitely link to the video next time, I’m sure, because we’ll know where it is. Also, I have a few quick follow-up items. One is the Pandas, the whole Pandas project, super important in data science. I got a message saying, ‘Hey. We’re having this really interesting idea of Pandas documentation sprint. These are throughout the world and - it doesn’t say how many locations, quick counting, let’s say 15 locations throughout the world – slightly biased towards Europe, but everywhere but apparently Australia or Antarctica. There’s these physical locations like San Diego, Seattle and so on, where people are getting together to do sprints on documentation for Pandas. That happens on March 10th, 2018. So, a couple weeks.
OKKEN: Yeah, it has a countdown, all the way down to the seconds.
KENNEDY: Yeah, down to the seconds. ‘We start now.’ I think this is a cool idea. If you’ve never contributed to Open Source and you want to get that check mark on your resume, and you want that on a major project, here’s a really cool way to become a contributor to Pandas without deeply understanding it or having majorly adding a feature. And also, you can hang out with people who are experts in Pandas, and those are probably good connections to make. So, check that out at Python-sprints.github.io/pandas. That should be fun.
OKKEN: Yeah and every Open Source project will love you if you write documentation for it.
KENNEDY: Yes, absolutely. Okay, so really great. And then, the other item I wanted to follow up with is we talked about the workflow in Unreal. And now someone followed up with it saying, ‘That’s really great. Do you know you can now embed Python in the Unreal Engine 4?’
OKKEN: Wow.
KENNEDY: There’s a project called Unreal Engine Python and it let’s you just embed there. So, it’s like a plugin for embedding the entire Python VM (Virtual Machine), 3 or 2, in there and then you can basically add scripting into your game and let people write Python and control your 3D environment. Pretty cool. A quick follow-up from when we talked about that before.
Thank you for being here. It was great to chat with you and I loved your picks this week.
OKKEN: Thank you. You, too.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit python bytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.