PYTHON BYTES TRANSCRIPT
Episode #67: Result of Moving Python to GitHub
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #67, recorded February 28th, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We have a ton of great stuff for you as always. It’s getting harder and harder to narrow it down to just keep this bite-sized stuff because there’s so much amazing stuff out there. Isn’t there, Brian?
OKKEN: Yeah, there is. And we’ve got a lot this week.
KENNEDY: Oh yeah, for sure. So, before we get onto those, I just want to say thanks to DigitalOcean. They’re our sponsor for this week. That’s why our code runs, so when you download the audio or you go visit the website, you’re running a little slice of that ocean. Check them out at do.co/Python.
Now, Brian, I would have a better performing site and be able to run on a much smaller server if I literally had just files. No logic, no database queries, no database server, just files, right?
OKKEN: Yeah. And you can host it cheaper sometimes, too, for static sites.
KENNEDY: Yeah, absolutely. So, the first item is something on Pelican, which is one of the more popular static site generators, right?
OKKEN: Right. So, somebody on Twitter actually said – I forget who it was – but they said, ‘Hey, I’m going to build a new blog. What are the Python options now?’ And a few people came back with different static site generators. One of the people, I just found this out today, is a guy named Peter and he’s a professor at Portland Community College and had a whole blog series on how to build a blog with Pelican and host it as a GitHub page. You don’t even have to pay for your hosting.
KENNEDY: Like pages.github.io, something like that?
OKKEN: Yeah.
KENNEDY: Yeah, nice.
OKKEN: And the focus of his site is pythonforundergradengineers.com (Python for Undergrad Engineers) but cool focus. He’s not assuming much of anything ahead of time so, he even walks through installing Python and making sure people are using it appropriately and saving their work. So, even though it’s a seven part series, if you know what you’re doing you could probably go through that pretty fast. I thought it was a nice tutorial on how to get a blog up.
KENNEDY: Yeah, that’s really cool. And I love the fact that he takes it all the way to deployment. Because it’s one thing to show you, ‘Well, here, now you’ve got a bunch of static files, good luck with that.’ (Laughs) Getting it online is a nice, final step for his article there.
OKKEN: One of the other places I know that uses Pelican is Full Stack Python, Matt Makai’s site.
KENNEDY: Yeah, and he’s doing amazing stuff. His site is so super fast. He thinks a whole lot about that stuff; that’s really cool. There’s actually a number of options around this kind of stuff but Pelican seems to have a lot of mindshare in the Python space, for sure. Cool.
So, how would you like to get notified in a whole bunch of different ways if something went wrong with your static site, Brian?
OKKEN: I would.
KENNEDY: You know, you could use a service like Rollbar or something, but I’m thinking more like, ‘Hey, we’ve process your order. Now it’s put onto a ship, it’s headed your way.’ Or, ‘The build server has built some version of your app and the build is ready for deployment.’ Or those kinds of notifications, right? And there’s just this explosion of places where you might want to notify people of these things and they all have their own API. If you’re lucky, there’s a pip install thing and you can at least use that. But sometimes there’s not even that, there’s just an API you’ve got to sign up for. So, I’m thinking things like Slack, email, Gmail, Telegram, Gitter, you name it, there’s a whole bunch of different places where you might want to push notification something like this happened. And these grow everyday.
So, there’s this thing called Notifiers. What Notifiers does is, it’s like this abstraction API front end for all these different other APIs. So, you can work with the Notifier API and say, ‘I want to notify the things.’ And you can register a Slack provider, register a Gitter provider, Telegram provider, Gmail provider and just check those off, and then use the same API against all of them.
OKKEN: That’s actually really cool.
KENNEDY: Yeah, it’s really cool.
OKKEN: I can imagine, individual, like a selection on your site for users. So, if some people would rather get a Slack notification, and some people would rather get a text message and some people want Slack or something.
KENNEDY: Yeah, so you could list off all the providers that you support and check them off, but your code doesn’t really change, it just feeds that on through this Notifiers thing. So, you could send a text message because they have integration with Twilio, and then Twilio would let that push on through and so on. There’s a bunch of stuff. There’s things that I don’t even know what they are, like ‘push bulletin.’ I have no idea what that is, but it’s probably cool. (Laughs) It’s cool that I don’t have to learn its API to integrate. Somebody comes and says, ‘Hey, Michael. Your site’s cool but could you add push bulletin integration?’ ‘Yeah, sure. Here’s a checkbox.’
OKKEN: That’s actually awesome. I’m going to play with some of that.
KENNEDY: Yeah, I don’t really have a great reason to notify people, but I thought it was cool. One final thought on Notifiers was, we’ve talked for quite some time – we talk less about it these days, I think – but we’ve talked about how one of the points of resistance to moving to Python 3 was, ‘Well, there’s this one or two libraries I really need and it’s only Python 2 and I can’t leave it behind.’ We’re now in a world where unless you move to Python 3, these things are inaccessible to you. One of them is Notifiers, which is Python 3 only. Pretty cool.
OKKEN: Yeah, it’s becoming more and more actually.
KENNEDY: It’s sort of reversing what used to be friction and resistance, which is now pushing people. The gravity is increasing now obviously, which is great. It’s been a long time since I’ve used a Makefile and I think it was in C++ when I last really cared about it.
OKKEN: Yeah, actually, I haven’t really thought about Makefiles too much, but I got notified today about it by kidpixo (@kidpixo) and he’s contributed to us before. He notified me today that the combination of information from my book on pytest and also a blogpost by Krzysztof (Zuraw) is about using Makefiles in Python projects and now all of his testing is driven through Makefiles as well, Makefiles through pytest. It’s actually kind of a neat idea. This article talks about starting up in a new workgroup and being surprised by Makefiles in Python projects.
KENNEDY: Because there’s not that much compiling, right?
OKKEN: Yeah, and it’s not for compiling. There’s a lot of extra little utility work that people do, and Makefiles are an easy way to keep them all in one place. Some of the examples are cleaning out all your .pyc files or, if you normally create packages you’ll have egg directories lying around and clean those out. Running your linter or running your tests. And you could have multiple targets to start types of testing if you wanted to. Start your smoke test, or start your full test or something, even up to deploying your code up to a server possible.
KENNEDY: And definitely a nice article. So, it’s cool to bundle all of these actions. The more you can automate and just bundle up and take that knowledge of managing and working with your project and make it one CLI command or maybe even something less than that, something even automatic, say a git trigger or something like that. It’s all good, right?
OKKEN: The article also assumes that you’ve not really worked with Makefiles before. It tells you some of the gotchas. One of the ones that gets me all the time is you really do want tabs, not spaces when you’re working with Makefiles, and that’s the opposite of how I use Python, so I have to watch out for it.
KENNEDY: Yeah, definitely the opposite. Interesting.
Okay, so, speaking of things that are good, DigitalOcean, they’re pretty good. They are hosting our code and our apps here. I just want to repeat something that I talked about last time, which is that they’ve basically doubled all of the things for the same price, which is a really big deal. They’ve been super competitive and really good compared to the other hosting places, small and large. You go up there, 30 seconds you are able from the time you decide to click the button until your servers up and running, you can log in. And that’s all great, but they basically said everything that you’re going to pay for for five bucks, we’re going to double that. Double the RAM. Pay twenty bucks and we’ll double the RAM and the CPU. There’s all sorts of high computational stuff they’ve added so, it’s really a great place and it’s gotten a lot better recently with this big upgrade or price deduction and availability.
So, of you’re thinking about checking them out, go up there at do.co/Python. Help support the show. And also, if you are already a customer, consider upgrading your servers and stuff you have because you’re still paying the ten dollar price for half the things. If you’re willing to take it down and upgrade it, you’ll get something better for very little work. So, check them out. Definitely good stuff. Thanks to DigitalOcean for supporting the show.
We talked a while ago about Python, CPython in particular, moving to GitHub, right?
OKKEN: Yes.
KENNEDY: I can’t remember exactly when that was but it was in 2016, so it must
have been one of our early episodes. Can you remember when?
OKKEN: I could look it up but I don’t remember.
KENNEDY: What I wanted to feature next was there’s this, and I don’t remember if it was actually just on Reddit, or if it’s actually… It’s just on Reddit, it’s literally a picture on Reddit. But the conversation is interesting and the picture is interesting. The title is, “The Result of Moving Python to GitHub.” So, they put this graph up there, which the graph is not super well-labeled, so it’s kind of hard to tell. But it looks like there’s a lot more activity since Python moved to GitHub from Mercurial. They do call out a couple of numbers saying, ‘Quick couple of numbers including PRs from 2017 compared to 2016. The number of commits increased by 190%.’
OKKEN: Wow.
KENNEDY: That’s a big deal, right? ‘Inserted lines of code have increased by 140%. The number of unique contributors’ – and this is probably the biggest thing right here and I think this is the biggest reason to go to GitHub – ‘The number of unique contributors has increased by thirteen times.’
OKKEN: That’s wonderful.
KENNEDY: Isn’t that crazy?
OKKEN: Yeah. The new Python releases that come out are like, there’s way more stuff in them then there used to be.
KENNEDY: Yeah, that’s for sure. This is really cool. And finally, not just new or unique contributors, but we now have more returning contributors.There are nine times as many returning contributors as previously. So, people tried to it and they liked it. So, that was cool. I guess that’s really the news, right. You can see the picture but the picture is not that valuable as those numbers are, and the conversation under it is more of a conversation of, ‘What is the value of statistics?’ That’s an interesting conversation to have on the Internet around graphs. But one comment was, somebody said, ‘I would have liked them to move to GitLab instead, but this is still good news.’ What do you think? Do you think we’d have thirteen times the number of contributors if it was on GitLab?
OKKEN: I don’t think so on GitLab, although I use both GitHub and GitLab and they’re both great products. But GitHub is definitely more of a social place to have more contributors.
KENNEDY: I tend to agree. I think GitLab is great. I think, also, places like Bitbucket are great, but they just don’t have that social momentum. It’s like, ‘Well, I could have posted the question on Stack Overflow, but there’s another forum that some developers go to, so I’m going to put it over there.’ It’s like, well, you can but it’s probably not going to have the same reach and effect, right?
So, I think it’s really great and really, thanks to Brett Cannon who spearheaded this, one of the core developers who got Python over there in the first place.
OKKEN: Yeah, it’s pretty cool.
KENNEDY: Yeah, definitely. So, as developers, it’s easy for us to have kind of a bad self image. We look around and go, ‘Oh, all these pole are so smart. I’m not very good, I’m stuck.’ I think two days ago I was more frustrated than I have been in probably months. I’m trying to get something to work, it’s really frustrating. So, you’ve for an article kind of around this, right?
OKKEN: Actually, somebody posted an article called, “Self-Deprecation Needs to Stop.” This was Maurice Heyward. It was inspired by some tweets by Stephanie Hurlbert and the comments. Apparently, is started with, she was trying to get more women to blog about what they’re doing and their technology stuff, and she would retweet the blog posts. And many of the ones that she was told about were comments like, ‘Well, this project isn’t that good, but here it is anyway.’ And I guess I’m paying attention to this to because there’s a fine line between being honest about what your skill level is and how you help, and also trying not to be arrogant and act like an expert when you’re not. But if you spent some time working on something and learning it, there are people out there that know less than you. I like this article because people need to be clearer about understanding that they have learned a lot and they can contribute. This also resonated with me because as a parent, I really try to stop my kids from self-deprecation speech and not say things like, ‘Well, I’m dumb.’ Or, ‘This was dumb.’ Because it can give you a negative self-image and that’s bad. And we do see it a lot in the tech field, I think partly because we like to solve problems and we’re always looking at people that know the answer to our problems who clearly know more than us because they’ve already figured it out. So, this is good.
KENNEDY: Yeah, it’s definitely good. No matter how experienced you are, you can find something that will frustrate you and make you feel stupid in tech and programming, I’m sure of it.
OKKEN: This was repeated in the article but it was from Stephanie. He has really three points, which I numbered them ‘one, three, four’ which is interesting, I’ll have to fix that.
But, first off, stop saying words like, ‘My project is not good.’ ‘It’s just a thing I wrote.’ ‘It’s just by a newbie.’ Or, ‘It’s silly, it’s not useful.’ Just share it and let others be the judge.
The second point is, when you think about the value you bring and let everybody know what that is, it is advertising for yourself and your public image also might reflect on a job interview sometime so don’t be too hard on yourself.
And also, be proud of the things that you’ve done. It’s completely okay to say, ‘Man, I did this thing and it’s really cool. Here it is.’
KENNEDY: I think that’s great advice. People should definitely put what they do out there and just let people know what they’re up to. Nice.
Alright, so we wouldn’t be Python Bytes if we didn’t somehow feature our friend Anthony Shaw’s work, would we?
OKKEN: (Laughs) Yeah.
KENNEDY: (Laughs) It seems like he’s so prolific and doing such cool stuff. The last item I want to cover is called, ‘Five Speed Improvements to Python 3.7.”
OKKEN: Oh, this is nice.
KENNEDY: Yeah, so Anthony’s digging deep into Python 3.7 for a project he’s working on and I’m sure he’ll talk about that later. But he’s been trying to explore this through blogging and so on. And this is a really nice article for a couple of reasons. One, it’s nice to call out the things that are going to be faster in June, that’s great, when Python 3.7 comes out. It’s also cool because you see him doing a lot of internal introspection and looking into Python, like with the disassembler and the Opcodes and seeing how different methods actually turn into operations and CPython interpreter, which is really cool.
So, let’s talk about the five thing. So, one is, ‘Calling methods will be faster, kinda maybe, sometimes, in Python 3.7.’
OKKEN: Okay.
KENNEDY: So the reason is the two new Opcodes that are being added and under certain circumstances these can either remove the slowness of methods – functions tied to classes – or generally other ones. I think if you have a bound method with no arguments, it’s going to be faster than it was before. So, he has some numbers. I don’t remember exactly what the numbers on this one were.
Str.find () is faster for some characters by a lot. Some of the time you’re working with standard ASCII characters and everything is fine on str.find but for some reason they way Unicode is laid out, there’s certain types of characters that can make it up to 25 times closer to call str.find based on the input. That’s crazy, right?
OKKEN: Yeah.
KENNEDY: So, they said these are still slower than standard characters in Python 3.7 but now they’re only three times as slow not 25 times as slow so that’s still a really good speed up, right? Close to 8X. That’s good.
Let’s see, really quickly os.fwalk, which creates a tree directory structure-type thing, you can point it at a folder and it will create a sub-tree of files and folders, it’s now twice as fast. Regular expressions are faster, but only in a weird way, like they were changed in Python 3.6. I don’t actually know why they were changed but that slowed them down, so now this fix puts them almost back to as fast as they were in 3.5. So, take that for what it is.
And finally, regular expressions that are case-insensitive are now 20 times faster. That’s really good. So, basically the internal implementation, it used to call lower on every character, which I guess, was slow. So, now it can just work on them in a different way. It's great.
OKKEN: How did I not know about fwalk before? That looks neat.
KENNEDY: It does look neat, right? I’ve traditionally used Recursion and stuff like that to deal with this, but yeah. I think you need it.
OKKEN: I’ll have to check that out.
KENNEDY: It returns like a tuple with four items with like the directory, the sub-directories, the files, things like that. It’s pretty cool.
OKKEN: I haven’t read the article. Is there a benchmark of the little application that runs in Python 3.6 versus 3.7?
KENNEDY: That is a good question. I did not see that. It may be in there. He was just quoting the numbers of his testing, but I don’t know if he actually had a demo up. He may have and I just didn’t catch it.
Alright Brian, that’s it for our news this week. But you’ve got some follow-up stuff. First of all, we talked about your pytest/PyCharm Webinar and that was in the past at this point, but the recording just came out, didn't it?
OKKEN: It did just come out and so, I went back and this last week I listened to it. There’s a couple things that I noticed, especially with respect to this, ‘Don’t be hard on yourself,’ self-deprecating speech. Because my memory of it, I felt really embarrassed of the times where I didn’t know the answer because people are asking in real time and I don’t want to go and look it up or something.
KENNEDY: You’re on the spot, hundreds of people are there and it’s being recorded.
OKKEN: Yeah. And then I listened back to it, it’s really not that bad. There are some pauses that I have there, which are fine, but I think I’m going to try to be easier on myself because it would be a useful thing to watch if people aren’t familiar with pytest or using it in PyCharm. But the other thing was also just, it’s on my ‘To Do’ list to come up with better ways, or someway, to say, ‘You know what? I don’t know the answer to that right off the bat. I’ll get back to you.’ Or maybe that’s it. (Laughs)
KENNEDY: Yeah. ‘I don't know the answer.’ The last one I did people asked me about Solr (Pronounced SOLAR), which is a full text search type of thing I’ve learned since then. (Laughs) ‘How does this work with Solr?’ ‘I have no idea what you’re talking about. I’m sorry.’ (Laughs)
OKKEN: Yeah, it’s okay. We don’t have to be experts on everything. The other thing I wanted to bring up is, I don’t think it deserved an entire story but the PyPA has put up a post that says they’d like help from package maintainers to test out the new PyPI because they’ve gotten funding to do some fixes and they want to see how they work.
KENNEDY: Oh, that’s really cool.
OKKEN: A couple cool things about it, I think people should go help them out; the link that I put up is apparently broken but I’ll fix it by the time this goes out. If you’re asking people for help in beta testing something, this format that they put up is a really nice format to use. ‘These are the kind of things that we’d like you to try out, some of the work flows, and let us know, and how to let us know.’ It’s a good template.
KENNEDY: ‘Here’s ten things we’d love for you to test. Here’s how you check on security. Here’s how we have live chat hours if you find something you want to talk to us about.’ That’s great.
Alright, well, I don’t really have too much news. I’ve been working on a whole bunch of projects but nothing to announce at this point so I just have to keep those under wraps for a little while.
Alright, Brian. Thanks for finding all these things. Like I said, every week these are just so much fun to explore, so I appreciate you being here.
OKKEN: I appreciate it also. Thanks.
KENNEDY: Thanks and bye, everyone.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.