PYTHON BYTES TRANSCRIPT
Episode #68: Python Notebooks Galore!
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. It’s episode #68, record February 28,
2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And we have yet another bundle of amazing stuff to share with you. I’m super excited about the ones I’ve got. How about you Brian?
OKKEN: I’m really excited. I had to kick some out because there’s too many things to cover.
KENNEDY: I think I changed my list four times this week because I’m like, ‘Oh, this is a great list. Oh, no, this one’s more important. This one's even better.’ It’s awesome.
Before we get it, I just want to say thanks to DigitalOcean for sponsoring this episode. Check them out at do.co/Python. Right now, I want to hear about PyPI. There’s something wrong with it? What’s up here?
OKKEN: (Laughs) So, I’ve had this on the list for a long time, a project called “dumb-pypi.” It’s not really that dumb, though. So, you can have your own repository. There’s a bunch of different ways you can set up your own server so that you can serve your own packages. Like, if you’ve got a team or you’ve got proprietary code that you don’t want to share with other on normal PyPI, you can have your own. But, you have to have a server running. And a lot of the generation of the server code is tied to it, so there’s a Flask version and there’s various versions. This one is just a flat file creator, so this package, dumb-pypi, will take a directory full of wheels or zipped packages and create a directory that you can just stick on any server and have it be served up for an index. It doesn’t do any caching, it doesn’t go through to PyPI and grab things that it’s missing, so you have to manually do that yourself. But if we combine this with what we learned in Episode #24, that you can just do pip download easily and download your own files somewhere. This combined, I’m using this at work now to create a really simple PyPI server behind our firewall; I don’t have to give it permission to talk to the outside world, it’s just a bunch of files.
KENNEDY: It’s actually really cool. So, you could even put it up on Amazon S3 or somewhere like that, right?
OKKEN: Right, and actually there is an example… I think that is the example on the website. The package website, GitHub site, does have an S3 example and it’s super fast and slick. And it doesn’t do anything like updates or anything, you have to rebuild everything yourself, but you can set up a cron job or something to do some of this.
KENNEDY: Exactly. Just do it at night when nobody is around.
OKKEN: (Laughs) Yeah.
KENNEDY: Just update it daily. How often do these packages change, right?
OKKEN: But for instance, I’ve for all of our test code that we’re creating virtual environments and then pulling in test packages and different packages. That stuff, I don’t want to update it all the time. I want it to grab certain versions that I know are there, so something like this is perfect.
KENNEDY: It looks really cool. I think it needs a better name than dumb-pypi.
OKKEN: (Laughs) Yeah, it does.
KENNEDY: ‘Clever but doesn’t do anything PyPI,’ how about that? (Laughs)
OKKEN: ‘No server server.’
KENNEDY: ‘Server-less PyPI.’ How about this? C’mon.
Awesome, okay. So, the next thing I want to talk about is something ‘for humans’ and if I said it was ‘for humans,’ who would that mean?
OKKEN: Kenneth?
KENNEDY: That’s right, Kenneth Reitz. So, he’s got all of his ‘things for humans.’ He’s got “Maya:Datetimes for Humans.” “Records: SQL for Humans.” Obviously, Requests. So, he’s out with a new ‘human’ thing, and this time for web-scraping. So, he created this thing called, “Requests-HTML: HTML PArsing for Humans.” When I looked at this I thought, ‘Oh, is this maybe a replacement for Beautiful Soup?’ Or something like that, some kind of extension to Requests. But in fact, it actually depends upon Beautiful Soup. It’s a library that puts a different API on top of combining Requests plus Beautiful Soup, plus something called PyQuery, which lets you run jQuery-style CSS-selectors. It does a bunch of cool stuff. Some of the notable features are it has full JavaScript support, which I’m taking to mean that it will parse and execute the JavaScript necessary. So, if I hit an angularJS page, instead of just seeing curly brackets everywhere, there’s data that would have gone in there, which is a big deal with web scraping. If you just use straight-up Requests plus Beautiful Soup, you just get the markup where those bits would execute when it does, right?
OKKEN: Yeah.
KENNEDY: The CSS-selectors, XPath Selectors, Mocked user-agents – so it pretends to be real browsers so people don’t know that you’re trying to scrape their sites, it’s kind of interesting – it used connection pooling and cookie persistence. So, you can login and go do a bunch of stuff at a site and you can do it without reconnecting all the time. So, that’s pretty cool.
OKKEN: Yeah. It keeps a session open. That’s what people often did anyway is Requests plus Beautiful Soup and tying it in with one API is great. Actually, I like the idea anyway of somebody saying, ‘Hey, these tools are great but I wish the API was different.’ So, just write another package that uses others and write a better API then.
KENNEDY: Yeah, it’s a little like Flask, what Flask did, but for Requests and parsing.
OKKEN: Kenneth has a good eye for APIs.
KENNEDY: That’s for sure. People definitely seem to love his APIs.
So, I’ll leave you with the final tagline from their website.
“The Requests experience you know and love, with magical parsing abilities.”
OKKEN: (Laughs) That’s nice.
KENNEDY: (Laughs) Yeah, not bad, right?
Cool. So, what’s up with this phoney number thing? Is that some prank calls to make? (Laughs)
OKKEN: This was awesome. So, Twilio does their Twilio blog, where people can write for them. I think we’ve talked about it before. They do a pretty cool program where they give you an editor even, to help you out with it. But this article is basically a Twilio project. This is a phone number proxy. The idea is, you imagine situation like, for instance, you’ve got a meet-up or some temporary event and you want people to be able to text you because you’re not going to be around your computer all the time. You want people to be able to text and you want to text back, but you don’t want to give out your phone number. Well, this project gives you a little proxy so that you can set it up with Flask and set up a server with Twilio and give out a temporary phone number and have it be attached to your phone. And I’m going to definitely have to try this out because it looks fun.
KENNEDY: Yeah, that looks really cool. I think that program they have is awesome. One of the challenges of getting started blogging is nobody knows about you. You put all this effort into writing this thing and you put it out there and ten friends who are willing to follow your tech stuff off of Facebook glanced at it, right? (Laughs) So, here’s a way to appear on a major, major blog and highlight what you’re doing and maybe jumpstart your other tech stuff, like you could link back to your blog or something like this.
OKKEN: Having somebody work with you to polish it up a little bit is a good idea. Often when you tap your friends for that sort of help they’ll just tell you, ‘Oh, it looks great. Put it up.’
KENNEDY: Yeah, very cool.
OKKEN: But this project is pretty neat. It does encourage you to do some of the paid part of Twilio. I think for something like this, it’s a good idea.
KENNEDY: Yeah, very nice. Good article.
OKKEN: Before we get to the next, let me just tell you about DigitalOcean. They’re doing some really amazing stuff. The thing I like to highlight, they just upgraded all of their things and left the price the same. By upgraded I mean doubled all of the stuff, at least. For example, you can go to DigitalOcean and get a Linux server with all variety of Linux machines, Linux distributions, with four gigs of RAM, two CPUs, eight gigs of SSD, for $20 a month. That’s insane. That is a crazy thing. That used to cost $40 and they just said, ‘Nope, that’s now twenty bucks.’ It comes with four terabytes of free traffic. If I were to transfer that over S3, which is nine cents a gigabyte, just that bandwidth would be $368 at S3. That’s including your $20 server. So, really awesome stuff. Check them out over at do.co/Python. Check out what they’re doing, help support the show. Everybody’s getting good stuff. Thanks, DigitalOcean for that.
Alright, I kind of want to go on a Jupyter-like notebook rant for awhile, Brian. The news around this stuff is just coming in fast and furious. There are so many things going on with notebooks right now. This is a world I don’t really live in. I’m much more, ‘Create a Python project and have like ten related files’ or run stuff on the command line or my editor and not put it in these cells because that’s just not my world. But I see how powerful it is for people who are exploring data and being more iterative with their code. In the last couple weeks, they’ve got a lot more options.
OKKEN: They’ve been in the news a lot right now.
KENNEDY: I’ll start with one for this one, then we’ll do another one in the final segment. For this one, I want to talk about something that’s brand new called, “Datalore.” Have you heard of Datalore?
OKKEN: I have not.
KENNEDY: You’ve heard of PyCharm, right? So, this is like PyCharm in a notebook, online, hosted. It’s from the JetBrains guys. It’s in the Cloud, you just go sign up. It has this intelligent editor just like IntelliJ plus PyCharm has, with the cool autocomplete and intelli-sense. It comes pre-installed with a bunch of stuff that you need, like Matplotlib and so on. It has collaboration, so you can login and – kind of like Google Docs style – work on it together. I don’t know how real-time it is. Do you actually see every character going in or do you have to refresh it? Does is automatically refresh? I’m not entirely sure of the level of collaboration but there’s some ‘real-time multiple people working on the same notebook’-type of collaboration; I have to check that out. It has integrated version control. Say you’re a student or engineer, but you’re not like ‘git-push on the command line’-type of competent, right? You go there and just say, ‘Create me a save point’ and it basically just saves it and tags it so you can get it back. Things like that. Pretty cool.
OKKEN: That’s great. The JetBrains, like the diff URL for version control is really great, so building that in here is cool.
KENNEDY: Yeah. They’ve got some really cool stuff. Finally, this might be pretty big for some folks, depending on what you’re doing. They have incremental calculations. So, if you’re doing machine learning and training and all sorts of analysis, there’s a bunch of cells that work together to generate that data. They actually have figured out how to track the dependencies between where that data comes from. You have to rerun the entire thing if you’re changing the model. It only reruns that parts that depend upon something you’ve changed.
OKKEN: Oh, that's awesome.
KENNEDY: It’s pretty cool, right? So, if your computation takes two minutes, but this little part’s really quick because it uses mostly finished data, that’s a really big deal, I think.
Anyway, Datalore, it seems like it’s in beta. I don’t know what it costs, if there’s a free thing or whatever, but it’s a Jupyter notebook-like hosted service from JetBrains, which I thought was pretty cool and worth talking about.
OKKEN: Yeah, neat.
KENNEDY: Nice. I have no idea how to get started on this next one.
OKKEN: (Laughs)
KENNEDY: I’m just going to say the name. Bellybutton.
OKKEN: Bellybutton, yes. For personal lint.
KENNEDY: (Laughs) What’s up with this?
OKKEN: Yeah, I think it’s a play on words around linters and where lint usually shows up. We have things like pylint and flake8 and pycodestyle, which used to be called PEP8, that I use all the time and love. But there’s times where you have extra requirements for your own team or your own project and it’d be cool to have something like pylint, but just with your own rules in it and that’s where Bellybutton comes in. It’s a way to create rules around for static analysis or style. One of the examples I thought was great, let’s say you’ve got a library with some functions that your team uses but you decided some of them are dumb and deprecate them, or maybe there’s a better way to do things. You can add some of these rules to Bellybutton to say, ‘Hey, this code here. You need to change it this way.’ And actually give exact examples of how somebody should change it and I think that’s a really cool idea. I wanted to bring that up.
KENNEDY: Yeah, awesome. Bellybutton. It sounds really cool. These linters are really great and I typically think of them in the context of continuous integration and team-wide things. But that’s a cool way to make your own overrides and whatnot.
OKKEN: Yeah, and anytime where you’ve got coding style within your team, if you can automate and take the person out of it and take that out of your code reviews, it helps with team dynamics to just have the computer say, ‘Hey, change this code’ instead of having your co-workers keep telling you to change your code.
KENNEDY: Yeah, that’s a really interesting dynamic, isn’t it? People are willing to take petty, nitpicky criticism from robots and automated systems way more than from your manager or whoever.
OKKEN: Yeah. And, ‘We’ve already had the discussion about what our style is. This is what it is. I don’t want to keep opening up the discussion, so just do it.’ (Laughs) Manager speak.
KENNEDY: That’s right, cool.
Alright, are you ready for notebooks galore, part 2?
OKKEN: Oh, more notebook news. Yay.
KENNEDY: Yes. So, our friend of the show, Daniel Schwartzstein, posted something on Reddit. Some news that has to do with free hosted notebooks in Azure. This would be pretty much a direct competitor to Datalore, right? So, they are now supporting Python 3.6 Jupyter notebooks in Azure and there’s a nice conversation over on Reddit about that. You go over and read more about it and so on. Basically, if you just drop in on notebooks.azure.com, then off you go. You can work with it right there. That’s like straight up Jupyter notebooks, I believe. That’s pretty cool, right? Free, in the Cloud, powered by Jupyter. I’m telling you, this is a space that is so blowing up right now.
OKKEN: Yeah, we better pay attention to it more if people are fighting over it.
KENNEDY: Exactly, there’s big companies fighting over it. Speaking of big companies who want to fight over it, have you heard of Collaboratory?
OKKEN: No. Great word, though.
KENNEDY: It is. So, this comes from the research group at Google, colab.research.google.com. This has been around for a little while and people have been kind of dissing on it a little bit because it’s been just Python 2. However, it is now Python supporting, not legacy Python but modern Python. So, that’s really cool. And since the time that I took this note to talk to you about it today, they now have also launched GPU support.
OKKEN: Wow.
KENNEDY: You could do your notebook and say, ‘I want to do some machine learning. Oh, yeah, run this tensorflow, this training process on a GPU.’ And you can basically hit command shift P to make it run on a GPU. How insane is that?
OKKEN: That’s cool.
KENNEDY: So, that was pretty cool. Are you ready for some more notebook news?
OKKEN: Yes.
KENNEDY: JupyterLab is ready for users, it’s now open.
OKKEN: What is JupyterLab?
KENNEDY: So, Jupyter is something based on Jupyter notebooks. But it’s more than just… We’re going to have to put this with a ‘grain of salt.’ Probably, everyone out there knew better than I do, but it’s like a hosted Jupyter notebooks, which is really cool. But it also enables you to use text editors, terminals, datafile viewers and all sorts of other stuff that’s not just in the notebook. So, you could SSH in, do stuff behind the scenes, or something to this effect. They’ve got some cool pictures. It’s almost like this crazy IDE. You’ve got your files on the left and then on the right you might have a map, a couple of JSON files and a CSV in like an Excel thing, all in the same window.
OKKEN: Oh, okay. Well, that’s neat.
KENNEDY: ANd you can build extensions and plugins, so that CSV thing is probably a JupyterLab extension. Yet another really cool thing going on there.
I guess the final tip maybe from the very first one from this segment. Daniel said, ‘One thing that can happen is login to the Azure notebook, so of their dependencies are a little bit old, like Pandas or Matplotlib or something like that.’ He shows you how to import pip and then execute pip inside your notebook, to force it to upgrade the dependencies in your project.
OKKEN: Oh, okay. We’re going to put this snippet in our notes.
KENNEDY: Yeah, the snippet is in there but you can basically, it shows you how to, from code, run pip to upgrade stuff. Which I think is interesting and useful especially outside of just notebooks. But it happens to be, if you don’t get a remote into the servers, you still want to upgrade stuff. That will be helpful.
OKKEN: Yeah, nice. Cool.
KENNEDY: Alright, that’s a lot of notebook news. Probably more next week.
OKKEN: Probably.
KENNEDY: (Laughs) It’s really cool though to see so much innovation and creativity around this stuff. It’s kind of a ‘paradox of choice’ problem going on. If I wanted to get started on one, what the heck would I do? But there’s a bunch of good options here.
OKKEN: Definitely.
KENNEDY: Awesome. You got anything extra you want to let everyone know about this week?
OKKEN: Just that maybe I should spend more time paying attention to Jupyter, but other than that, no.
KENNEDY: (Laughs) Yeah, Jupyter’s pretty cool. JupyterLab is exciting. Collaboratory is exciting. Notebooks on Azure is exciting. Datalore is exciting. Yeah, I’ll have to pay more attention as well.
OKKEN: Do you have any news?
KENNEDY: No news. Well, when this episode goes out, there’s a very good chance that I’ll be at PyCon Slovakia. And if I am and you hear this, feel free to come say ‘hi’. That’d be cool. I think that’s the right timing. I’m pretty sure; I’m trying to line it up that way.
Well, thanks for getting all this stuff together, Brian. It’s great stuff.
OKKEN: Yeah, thank you.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On. Behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.