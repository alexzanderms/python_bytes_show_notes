Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #70, recorded March 15th, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: Brian, how are you doing?
OKKEN: I’m doing great. It’s good to talk to you again.
KENNEDY: Yeah, you as well. Super excited to talk about some of these things that you’ve got here. Before we do though, let’s say a real quick thanks to DigitalOcean. They’re sponsoring this episode, like they do many of the episodes. So, check them out at do.co/Python.
You know, I’m a big fan of CookieCutter. I’ve done a couple of things with it.
OKKEN: Yeah, actually I’m warming up to it and I use it for quite a bit now.
KENNEDY: You found an interesting online CookieCutter thing. What is this?
OKKEN: It’s from Konstantin Pavlosky (@apavlovsky_pro), that’s a cool name. An online  CookieCutter Generator. So, CookieCutter is a command line thing. You give it a link to, usually, a GitHub CookieCutter but you can have them be local also. It starts asking you questions about what you want to fill in the project then it starts like a Python project for you. You can probably describe it better. It’s more of a templating thing you can do anything with.
KENNEDY: It’s pretty interesting. The way CookieCutter works is it’s a CLI thing. You run it and it will ask you questions like, ‘What’s your email address?’ ‘What’s your full name?’ ‘What do you want to call the project?’ ‘Do you want to use Jinja2 or Chameleon templates?’ Et cetera, et cetera. This is like that but it’s like a website with a we form that asks the question that way, right?
OKKEN: Right. He doesn’t have everything up but he’s got quite a few up now that are some of the common templates, like pypackage, pypackage-minimal, Flask, Bottle and quite a few others. And instead of doing it on a command line, you select it and it shows you basically, all the questions that you’re going to get asked and you can just fill it in and it generates a zip file for you and you can download it.
KENNEDY: Basically, if you don’t have CookieCutter installed, you can still execute the CookieCutter template by going to this site.
OKKEN: Yeah.
KENNEDY: Nice.
OKKEN: If you just kind of want to see all the questions before you get going, gather those up first. I thought it was neat and he’s a pretty cool guy on Twitter, so if you have a favorite CookieCutter that you’d like to have him put up there, if you contacted him he’s probably put it up there.
KENNEDY: Yeah, for sure. Very cool. Check out the online CookieCutter Generator. I like it.
So, did we go on a rant about GUIs for awhile?
OKKEN: (Laughs) For a bit, yeah.
KENNEDY: I’m not exactly going to talk about another GUI platform that takes restructured texts and turns into a UI, nothing like that. But there is a really cool project that integrates with standard Python logging. Python logging works in a certain way where you’ve got the time and the module and the category, then the level trace, or info or error message. Things like that. SO, someone built a really cool UI that will let you, in real time, watch and accumulate the logs into a rich application, just by starting it up and running it.
OKKEN: This is actually really cool. Plus, you can filter your different levels and filter them out.
KENNEDY:: Exactly, so imagine if you want to tail your log, right? ‘I’m going to tail it, see if it’s coming through.’ It’s just ripping by you. ‘Oh my God, there’s all this stuff with the error and I want to search…’ It’s getting hard to correlate, so what you do it you install into your app a socket handler as one of the trace sources. And then it just listens to that, you do p-source. So, you install a socket handler thing and then you run this app and boom, it starts capturing the logs in real time as if you’re tailing them, but with a UI that you can filter and sort and interact with.
OKKEN: Yeah, and change the color on them and stuff.
KENNEDY: It’s got a dark mode, you know, it’s for developers. (Laughs)
Quick shout out to the framework, though. It is based on PyQT5 and it’s all one source so you can go check it out and see how they built it. It’s a pretty decent looking app.
OKKEN: Yeah. And actually, I haven’t been putting a lot of levels of logging in some of the work apps that I do, but I might with having this logger like that.
KENNEDY: It’s pretty cool. It allows any number of simultaneous connections, so different people can watch it. You can change the look of the field, you can filter like you said, you can search. You can view exceptions and tracebacks and stuff on seperate Windows, so you can pop out the traceback and look at the details. It’s pretty cool.
OKKEN: Neat.
KENNEDY: Yeah, very nice. So, there’s a really cool CMS (content management system) for Python called Wagtail, right?
OKKEN: Yeah, and I’m actually surprised we haven’t talked about it yet. I know that when I think of a CMS I’m usually thinking like for a lot of stuff, maybe WordPress or what’s that other popular one?
KENNEDY: Squarespace, something like that. Drupal.
OKKEN: Drupal, that’s it. There are several for Python but Wagtail is one of the more popular ones and it’s got a really nice look. 2.0 just came out and they’re pretty excited about it. We did cover Django 2.0 changes recently and Wagtail 2 does support Django 2 and there’s apparently a better, newer text editor that they’re excited about. And some fixes in scheduling your published content.
KENNEDY: It’s awesome that it’s based on Django 2 and of course that means goodbye Legacy Python as well, right?
OKKEN: Yeah. But one of the the things that I wanted to highlight as well while we’re talking about Wagtail is, if I’m thinking about a different framework often I want to know really what it’s going to be like. And that’s really hard to tell without just starting it, but they do have a couple things to help. There’s a – we’re going to link to both of these – one of them is a gallery of sites made with Wagtail. It isn’t really, ‘How to do this’ but ‘These are things that are possible with this framework.’ Some of them are professional and they look really nice.
KENNEDY: Yeah, they do look really nice. The Royal College of Art in London’s entire site is driven by Wagtail.
OKKEN: Wow, that’s nice. And then there’s a couple e-commerce sites that are in there, too, so you can set up e-commerce as well.
And then the other thing is they have a “The Zen of Wagtail” page that talks about their design philosophy of how they set up their code.
KENNEDY: I like that they have that philosophical guidance to help you. It’s cool. I would definitely consider Wagtail if I was building a site and other people had to add stuff to it who were not developers and you wanted it to be CMS-like. It’s very cool.
OKKEN: Yeah, actually I think I’m going to set up something for work using Wagtail just to try it out.
KENNEDY: Yeah, super nice.
So, speaking of setting up stuff, let me tell you about DigitalOcean. With DigitalOcean, you go and create a new server and you get a Linux machine of some variety that you pick. You SSH in then you begin your process of building your infrastructure. Do you want WordPress? You can set that up. Do you want Django? You’ve got to make sure Python is installed, all the things are all set up and whatnot. That doesn’t even mention the database, right? One of the cool things that they have that I want to highlight is they have the ability to create what they call, “One-Click Apps” and those are actually entire virtual machines that are preconfigured to run the thing that you want. So, you want a ghost for a static blog service? You just go to the One-Click Apps and say, ‘I want a ghost server’ and boom, it’s up and running. You want a MySQL server, click that, you’ve got it. MongoDB configured so it’s all safe on the network, click that. Super cool. They have Discourse, they have WordPress, they have a machine learning and AI prebuilt thing. So, you want to click that and then just log in and start doing your TensorFlow and things like that. It’s just ready to roll.
OKKEN: Yeah, one of the things I like, they have a GitLab one so you can set up your own team GitHub-like thing.
KENNEDY: Yeah, it’s super cool and you don’t need to know that much about it, right? All the stuff is set up and running, you just have to be able to keep it running more or less.
So, check them out at do.co/Python. They’re big supporters of the show so, check out their stuff and tell them thanks.
I’m a big fan of databases. We talked about MySQL and MongoDB there. What’s the most popular way of accessing databases, do you think? What would you use?
OKKEN: Raw SQL statements.
KENNEDY: I’m sure that’s the most popular. But outside of that I’m thinking Django RM, SQLAlchemy. These are the major tools, right?
OKKEN: Yeah, the ORMs.
KENNEDY: Yeah, the ORMs. So, there’s another one that’s really cool and really small and lightweight called Peewee. You would never know by the name. (Laughs)
OKKEN: (Laughs) It’s a good name, actually.
KENNEDY: It is a good name. So, it’s a simple and small ORM. It has a few but very expressive concepts to make it easier to learn, intuitive to use and so on. That’s what they say about it. It’s been around for awhile, but the news is they did a complete rewrite of it and released Peewee 3.0.
OKKEN: Nice.
KENNEDY: So, it’s pretty cool. It’s developed with Python 3.6 so it embraces all those features. It has built-in support for SQLite, MySQL and Postgresql. Those are all nice. And it has extensions for things like full-text-search, migrations and whatnot. That doesn’t sound so peewee, actually; that’s a lot of features. So, a lot of cool stuff. One of the reasons it's really interesting to me because there’s a separate project called peewee-async.
One of the challenges you have doing any async stuff is everything that is blocking or slow has to be async, or there’s kind of no point to getting started. If I’m going to call a web service, I have to use the AIO-HTTP client, or it just doesn’t make sense, right? It’s just blocking and there’s no async behaviors. And you run into that problem often with accessing databases like SQLAlchemy and stuff.
So, this thing, peewee-async will let you add async ability to your queries. It’s super cool. So, if you want to insert something, you would just say await objects.create and you pass off the object that you’re going to insert into the database.You want to do a query, you just say all_objects = await. Objects.execute your model.select in the syntax. So, it basically allows you to plugin this async and await to very minimal effort to make your code much more scalable.
OKKEN: That’s pretty cool.
KENNEDY: Yeah, I’m pretty excited to see them doing this. This is really cool. Not a whole lot more. I think this is a really cool thing that’s out there and I wanted to shine a little bit of light on it, because I think Django and SQLAlchemy get most of the sunshine.
So, I told you at DigitalOcean you can go push that button and create a machine learning thing. But what if you don’t know about machine learning?
OKKEN: Which I’m kind of in that camp. I know most of the buzzwords but I haven’t really done much work in it. So, I was excited to see that there was somebody that put up a GitHub repo called, “Machine Learning Basics.” The idea behind this is it’s a repository describing and showing a lot of the machine learning algorithms, but not necessarily how you would do it in production. Because in production, you’ve got all these fancy server tools that you can use to make things really fast. But if you’re just trying to understand the concepts, I want to see the code, so what they’ve set up is a bunch of Jupyter Notebooks to go through and describe how you would do it in raw Python. What does it mean to do linear regression? Or logistic regression? Or k-Means clustering or k-nearest-neighbor. There’s a bunch of different algorithms there. If you’re just learning what these are, being able to look right at the code and being able to play with it, that might help before you jump into using some of these extra
tools.
KENNEDY: I think this is really cool and it’s super simple. The pictures and graphics are really clear. The notebooks are just a couple of pages. And yeah, it’s just pure Python. It’s not like, ‘Oh, you called this thing a TensorFlow then magic things happen.’ It really shows you the steps, so quite nice.
OKKEN: Right, when I’m just learning stuff and I don’t need it to be fast and I don’t need to hook up to TensorFlow right away, I just want to know more about this stuff. This is a great thing.
KENNEDY: Definitely cool. Well done and if you’re getting started in that, definitely check that link out.
So, final thing I want to talk about is Cerberus.
OKKEN: Very cool name for a project.
KENNEDY: It is a cool. It’s got this Greek name. It’s named for the watchdog of Hades whose duty was to guard the entrance. So, the idea is that this is a validation framework created by Nicola Iarocci. What you do it, you can give it a schema. The schema is a dictionary. It has the names of the fields and you can do type validation, min/max validation, all sorts of different things that you can plug in there. So, you create this dictionary that says, ‘These are the fields I want to validate and here’s their types and restrictions’ and whatnot. If you receive any form of document, it could be from a rest post, it could be something you read or write to a database, any kind of dictionary. You can just say, ‘Validate this,’ and it will go through and validate. Make sure that the name is a string, or if you say the age is 5 but in your schema you said it’s an integer and the minimum is 10, you’ll get an error back. ‘Sorry, there’s a problem or set of problems. One of them is the age and the min value is 10 but you gave 5.’
OKKEN: Okay. What do you pass it, is it JSON?
KENNEDY: No, it’s just a dictionary. It looks very JSON-y. You just give it any dictionary and any time that you’re reading data that comes in a dictionary form and you want to validate it, this is a really rich and extensible way to do that. Quite cool.
OKKEN: That’s a great way to write your API level, to make sure that bad data doesn’t go down to the rest. Then you can simplify your code in the rest of your project because you can assume that data is going to be in right forms.
KENNEDY: Absolutely. ‘These fields required. It has to be this format.’ You don’t have to go, ‘Okay, well, I know it comes in a string. Can I convert it to an integer? No, that’s an exception. Okay, so then I’m going to capture that error and say hit back.’ There’s just so many if-statements and closets testing. You can define these schemas in one place, call validate when you get the data and off you go. It’s really nice.
OKKEN: It’s really cool that he put that as a separate project so that other projects can use it.
KENNEDY: Exactly. So, this is used in the e-framework, which is a RESTful framework based on Flask and Mongo. Instead of baking that into the framework, he’s like, ‘I want to create this validation thing which is totally separate.’ It makes sense to be used wherever, but it also happens to be the validation layer in the REST framework. Quite cool.
OKKEN: Neat.
KENNEDY: Thanks for all the cool things you found.
OKKEN: Thank you.
KENNEDY: Bye.
Hey, everyone. Just a quick bit of news before we get out of here. When Brian and I recorded, I didn’t have anything to share so we didn’t talk about it. Since then, I’ve just launched a new course over at Talk Python Training. It’s called, “100 Days of Code with Python.” So, if you’re thinking about doing 100 days of code or you want this big challenge where you write a little bit of code each day, check out the course at talkpython.fm/100days.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.