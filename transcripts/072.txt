PYTHON BYTES TRANSCRIPT
EPISODE #72: New Versioning: Episode 0.0.7.2 (with 72 Releases)
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #72, recorded April 4th, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve got some awesome stuff for you. Before we get to it, Brian, I want to say thank you to Datadog. Check out what they’re offering over at pythonbytes.fm/datadog.They’ve got a bunch of cool stuff, including a cute little doggy t-shirt.
OKKEN: I still need to get one of those.
KENNEDY: I know, I don’t have a shirt either. I really need to do that.
Alright, I guess the first thing we should talk about is versioning. When I normally look at commercial software, they have numbers in the front, like version 6, or 12, or version 3 of this software. It’s pretty rare to have 3.anything in Open Source, isn’t it?
OKKEN: I don’t know if it’s rare, but there sure is a lot of stuff that’s… We think of stuff that starts with a zero as still being in beta. For instance, with semantic versioning. Once it’s at 1.0, the interface is pretty solid and you can depend on it. But there was a website put up this month called ZeroVer, to talk about 0-based versioning and it’s sort of “tongue-in-cheek.” It’s from one of our friends, Mahmoud Hashemi and some other that started it. They kinda wanted to call out a bunch of Python projects and other projects that are perpetually starting with zero by putting up this mock website saying, ‘You don’t need to do anything other than 0-based versioning.’
KENNEDY: It really helps you. I starts out with a down-to-earth demo that’s pretty awesome. It has some versions and says, ‘Yes, these are good. 0.0.1, 0.1.0, 0.4.0.’ ‘No, 1.0. 1.0.0. 18.0. 2018.04. None of these are okay.’
OKKEN: Right. If you haven’t figured it out, it is a joke. For instance, I guess I hadn’t realized this. Flask in one of the ones that was called out. It’s currently 0.12.2. C’mon, it’s been 8 years. I think that maybe you can go to 1.0.
KENNEDY: I have a new solution here. A new way to solve this problem. Whenever you print or look at their version number, just strip off all the left zeros and dots. (Laughs) So, 12.2 is basically what Flask is.
OKKEN: You know, there’s some pretty big ones that are very dependent on by a bunch of people. If they completely change the interface, the API, that would be bad. They’re clearly at the point where they could bump to a 1.0.
KENNEDY: Yeah, I think eight years absolutely is a time frame where you can say, ‘You know, we’re pretty stable.’ Also, Pandas’ in here with 0.23 and 7.1 years. And also they count their releases. There’s 21 releases of Flask, 75 releases of Pandas and it's still on a zero. The one thing I would like to point out is if you go and look at a lot of the manager folks at more commercial-oriented enterprise software groups, people who use .net or another non-Open Source development ecosystems, when they see things like 0.1, they’re like, ‘Oh this thing is not ready for us to use. We can’t us this at our company.’ And I think it actually sends a bit of a message that this thing’s not quite ready. Obviously, looking at this list it doesn’t mean that but a significant number of people interpret it that way. I think it’s worth considering saying, ‘We’re actually at a version where we’re going to call it 1.0.’ Flask is probably fully ready for 1.0.
OKKEN: Anything that starts with just the dots and it’s not date-based, people kind of assume it's semantic versioning, so I think semantic versioning is the way to go. It’s not an easy thing though. That’s part of the reason they’re being a little gentle with it. Check out the about page, it talks about what you should do about it. When you’re actually running a project, it’s hard to decide what’s something that’s big enough to flip to major digits.
KENNEDY: Django’s doing that well, I think. They have this 1.0, that was stable for a long time. They said, ‘We’re going to make a major break in change so we’re flipping to 2.0 for Python 2 support’ and all that kind of stuff. Django is one that’s not following Mahmoud’s recommendation.
OKKEN: (Laughs) Recommendation, yeah.
KENNEDY: I love it how he branded that, him and all the folks involved. It’s pretty cool.
So, when we build these projects in Python and any Open Source system really, you basically layer on a whole bunch of external dependencies and packages and stuff. How do you know when something’s gone terribly wrong? Suppose you depend on vicsig in Flask and there’s some huge security vulnerability in that dependency. Do you get notified? How do you know?
OKKEN: I don’t know.
KENNEDY: You don’t know. So, this is actually a really big problem. It’s like when you think about problems or security issues with your application, it’s not just what you have, it’s the stuff you’re built upon. The whole Equifax thing was a vulnerability in some foundational library in Java and they just didn’t patch it in time. So, getting notified of these things is really important. And so much of our code lived on GitHub so GitHub decided they were going to take some responsibility for this and try to help people. So, there’s a nice article that says, “GitHub Security Alerts Detected Over Four Million Vulnerabilities” last year, I think it was in a year. Actually, it’s not even a year, it’s since November of last year or something. So, that’s pretty insane. They launched this thing called GitHub Security Alerts. Initially, it’s only for Ruby and JavaScript, which is lame, but they have Python support coming, which is why I’m talking about this. What it does is, it looks at your GitHub repo and it says, ‘Are you using certain dependency? Does that dependency of a known security vulnerability?’ If it does, then right at the top of your repo you get a great scary warning that says, ‘You application is insecure because it depends on this thing that is insecure.’
OKKEN: Actually, that’s a great idea.
KENNEDY: I don’t know if you get an email notice but certainly your repo looks scary when that’s the case. This happened to one of my courses and it just came back again because one of my courses, the PyCharm course, demonstrates editing in an Electron JS app and Electron JS had some security vulnerability. It’s not actually used, but whatever. Is still says, ‘Your app depends upon Electron JS and its got this issue.’ So, it’s pretty cool. There’s some good numbers and whatnot here. It says, “Nearly half of all the displayed alerts were responded to within a week and 30% were fixed within the first seven days.”
OKKEN: That’s great. That’s a good thing that they’re adding that. So, you said it’s coming for Python and I see that it’s planned for this year, 2018, so that’s good.
KENNEDY: Yeah. There’s not a whole lot of details about exactly when it's coming, but that will be great. They said, “If you look at repositories that had a contribution in the last 90 days to things that are active, 98%of such repositories were patched within fewer than seven days.” That’s insane; that’s a really big deal.
They said they found over half a million repositories that had some kind of security vulnerability that were pretty much fixed up. So, anyway, that’s all really good.
I just want to give a shout out to pyup.io as well. I use that for my stuff and it basically does the same thing and more for Python already. So, your GitHub repo, it will look at your requirements.txt. If there’s a new version, it will send you a PR to upgrade your dependencies and if there’s a security alert, it will tell you.
OKKEN: I don’t really want to get on this tangent too far, but I started using pyup.io for the Cards project I started recently. Since I started doing this project – I don’t know who I read it from – the packages that are intended to be used by other applications probably shouldn't have their versions pegged. So, if I unpegged all my versions in a package then pyup.io kinda complains about that.
KENNEDY: Yeah, it does require you, more or less, to pin your versions. You can do expressions, like, ‘I want it to be this version or higher,’ and I think maybe it will upgrade it. I don’t know. There’s a little flexibility. It’s not perfect. But for fixed apps, my web apps all have the stuff pinned and it just automatically updates. Because nothing depends upon it, it’s fine. Yeah, pretty nice.
OKKEN: And it’s free for Open Source.
KENNEDY: Yeah, it’s pretty nice.
OKKEN: Great.
KENNEDY: Speaking of Open Source, PyPI is the place where it lives. Now you can describe it better, right?
OKKEN: Yes, I’m very excited about this because the Cards project I was working on, I was sort of bummed that I had to put the README in restructuredtext. And now you don’t anymore. README.md and a couple other variants of that extension are now supported on PyPI.org. We’re linking to a couple of articles, one of them is basically describing all the steps you have to do. There’s a little bit of changes you have to do to your setup.py file and a couple of other things. And update all your tools. But for the most part, it just works and that’s awesome. Also, just recently, GitHub-Flavored Markdown has been added.
KENNEDY: That’s nice. GitHub-Flavored Markdown has a little bit more, I think, from the stuff that I’ve played with.
OKKEN: Like Tables and Markthrough.
KENNEDY: Yes, Tables.
OKKEN: So, that’s nice. I’m looking forward to changing a couple projects to utilize that. And now, the old Legacy PyPI, I think maybe they’ve taken from your Legacy
Python…
KENNEDY: I love it.
OKKEN: It still renders the descriptions as plain text, but they comment, ‘Don’t worry, it’s going away real soon.’
KENNEDY: I was just talking to Ernest who is doing some of the work there and they’re really close to just saying, PyPI.org is where you go and doing a redirect. He was saying, that little scary bar across the top, you can now dismiss that. I want it to just go away automatically. When did this happen? So, it’s really PyPI.org that’s really close to being the thing, so maybe this will just hasten the move away from Legacy PyPI with the descriptions looking funky.
OKKEN: Yeah, hopefully.
KENNEDY: Awesome. I’m really excited to see PyPI making some progress. It felt kind of stale for a little while and it seems like it’s really been rocking the last nine months.
OKKEN: To be fair, even if your Markdown gets displayed as plain text on Legacy PyPI, that’s the point of Markdown. It’s still readable, so that’s okay.
KENNEDY: (Laughs) Exactly. If it were HTML with lots of styles, it would have been different.
Alright, before we get to the next one, let me tell you about Datadog. It’s a monitoring solution providing deep visibility and tracking into your distributed apps. So, your application, your data layer, your servers, your services, everything. So, within minutes you’ll be able to investigate bottlenecks and actually see where they are throughout your entire distributed app, which is pretty cool to put it together. If you want to visualize your Python performicity, get started with a free trial and also get that cool Datadog t-shirt at pythonbytes.fm/Datadog.
Speaking of web apps and distributed things and whatnot, I think there’s a really interesting new web server that people should start paying attention to in the Python space. So, you probably heard of NGINX, right, Brian? I know you don’t do a ton of web stuff…
OKKEN: Yeah, definitely.
KENNEDY: NGINX is kind of like the static front end server and load balancer thing for many web apps. On my sites I have NGINX, it takes all the requests, does the SSL stuff, any static resources, CSS, JavaScript, just get sent straight back and only the data-driven stuff makes its way back to the Python web server, which is uWSGI and uWSGI is really nice. But the NGINX folks have come up with this thing called NGINX-unit. The thing I want to link to is this performance comparison between NGINX-unit and uWSGI. So, uWSGI is written in C++. It’s one of the best high performance things that will run and farm out your Python application, Pyramid, Flask, whatever. It works really well, but NGINX-unit is a little more flexible. For example, you can configure it over a RESTful API, instead of just config files. It will run multiple languages and versions at the same time, improve TLS support, HTTP/2, which is cool. It will run Python, multiple version. It will run Go, Ruby, JavaScript, whatever. It will run all these things in this one server. It’s not just, ‘I run one flavor of Python.’ It’s pretty cool.
The thing I wanted to look at was this comparison. There’s this group that put together a performance analysis and said, ‘We’re going to slowly add more and more concurrent traffic to both of these things running, more or less, a “Hello World” Flask app.’ So, pull up the pictures. There’s a little link and this really tells it all.
OKKEN: Okay.
KENNEDY: You’ve got the pictures, Brian?
OKKEN: Yeah.
KENNEDY: So, if you look at that, there’s a line that’s pretty much flat across, that’s NGINX-unit as you go from zero to 500 concurrent users doing 10,000 requests per second. It’s just kind of like, ‘Got it, no problem.’ UWSGI, with or without threads, is sort of a linear, slope=1, downward trend of performance as you added more and more traffic. As soon as you get to a couple hundred users, it goes from handling 75 requests to handling 50 per second. It really falls over. So, I thought it was pretty interesting this whole NGINX-unit thing. I think it might be a powerful and new way to run some nice backend stuff.
OKKEN: Okay, so the high numbers are better?
KENNEDY: Yeah, those are requests per second, basically. Once you do 100,000 requests it goes to zero on uWSGI, where it’s basically flat on NGINX-unit. So, really cool. I think that’s quite promising in terms of making Python faster and scale better, which is super important because people move to other languages or whatever and it’s like, ‘We need this concurrency.’ Or you could just run something that runs it better.
OKKEN: They have a little note that says it’s still in beta, not for production.
KENNEDY: Yeah, it’s pretty new. Not quite ready. My message, my takeaway is, I’m going to start paying attention to this thing, maybe switch to it at some point but don’t switch to it yet.
OKKEN: I wonder what version number it is. (Laughs)
KENNEDY: It’s got to be zero-something, right? (Laughs) I don’t know but that’s a good question. Cool. Very funny.
Alright, awesome. You’ve got something on looping, right?
OKKEN: Trey Hunner, who was on the show last week. Didn’t he do last week?
KENNEDY: He was your stand-in last week.
OKKEN: Well, he’s got an article which is a really good read and I’m gonna not do it justice but it’s called, “Loop Better: A Deeper Look at Iteration in Python.” I’m glancing through this and I’m thinking, ‘I already know how to loop.’ But he shows a few gotcha examples of generators used in loops. For instance, even list comprehension is a generator. You can’t loop twice and if you use containment check, like, ‘Is 9 in my generator?’ It will work once, then it won’t work the next time.
KENNEDY: Well, it’s not there anymore and your collection is half the size. (Laughs)
OKKEN: And it’s a little strange and it just behaves weird. I don’t know if I’ve ever run into these but it hurt my head at first, trying to figure out. I didn’t know why these weren’t working. The article goes on to describe in detail the iterator protocol and what iterables, sequences, generators and all that good stuff is, and then go back and look at those gotchas again and explain with that information why they behave as they do. I think this is just a well-written article that will make you a smarter Python programmer to read it.
KENNEDY: Yeah, it's cool. It definitely covers a lot. Well done, Trey. I think this is one of those concepts where if you come from a language that doesn’t have generators, this concept of generators or if you’ve never really used them, the stuff that comes out of these generators, it looks like you just treat it like a normal collection. But you’re right, they definitely don’t behave like normal collections in a lot of ways. You can find these subtle bugs, so it’s nice to have them all covered like that.
OKKEN: Yeah. And one of the things that generators… It’s this iterator protocol and you keep it internally in a loop and Python will call it the next operator and then eventually it gets to the end, there’s not a way to reset them.
KENNEDY: Yeah, they’re done.
OKKEN: They’re done. But however you generate them, you can generate another one.
KENNEDY: Yeah, pretty cool.
So, the final thing that I want to cover is a little bit like the first one. It’s a bit of a warning but this is not an automated system like GitHub saying, ‘Hey, there’s all these repos. We’re going to tell you there’s a problem.’ It’s just something people should be aware of.
So, in Django, there’s these configuration files and there’s a part where you can set debug ‘true or false.’ There's a little comment by it that says, “Do not set this to be true in production.’ However, do you think everyone goes in with the big long config file and fixes that before they push it out?
OKKEN: No.
KENNEDY: No, they don’t. So, the articles is called, “Misconfigured Django Apps Are Exposing Secret API Keys, Database Passwords.”
OKKEN: Oh, no.
KENNEDY: It says, ‘Researchers have begun stumbling upon misconfigured Django apps that are exposing information like these API keys.’ It could be a stripe key or whatever. In just a week, they discovered 28,000 Django apps where the admin left the debug mode enabled. And then you see, it will be like screenshots of pulling up random apps on the Internet. ‘Here’s AWS secret key.’ ‘Here’s the password.’ Et cetera, et cetera, just listed in the debug tools. That sounds bad, right?
OKKEN: Yeah, especially because you probably leave that on while you’re developing it so that you can look at all that stuff.
KENNEDY: Yeah, it sounds really bad. It pretty much is. ‘Just skimming through a few servers, researchers found debug mode were exposing extremely sensitive information that would allow a malicious actor full access to the app owner’s data.’ I like that they were really clear to emphasize that this is not a failure on the Django side, but in fact, you’re just not suppose to do this in production. Somebody on Twitter was like, ‘It would be so awesome if there was a comment or a little note in Django that said, Don’t put this in production.’ And of course, there’s a screenshot of, ‘Never run this in production in debug mode.’
OKKEN: It’s supposedly not Django’s fault, however, there maybe needs to be more than just on or off. Maybe there needs to be a, ‘Debugging my app but I don’t want to expose all the API keys’ mode, or something.
KENNEDY: Yeah, for sure. Or maybe just the debug stuff is off by default and you have to turn it on. And by the act of turning it on, you have to go to a section and read that. But you might never go and read that part of the config file, so you just don’t know. Django’s famous for getting stuff up really easy, you don’t have to be a super developer. So, maybe you just don’t know, right?
What sort of made things worse, security researcher Victor Gevers said, ‘Some of these apps running on Django have already been compromised.’ He found one server running the Weevely web shell. That’s bad. They were somehow able to entirely take over the computer and SSH into it. So, he said, ‘I’ve been notifying server owners about their leaky Django apps. At the moment, we’ve reported 1,822 servers. Well, 143, were fixed.’ (Laughs) Not so many, right?
OKKEN: Or taken offline, which the ‘taken offline’ tells me that there’s some people out there that just don’t know how to do that yet, so they don’t take it down.
KENNEDY: Yeah, they’re like, ‘My little toy site is not working. TIme to take it off.’
So, the takeaway, if you’re running a Django site, make sure it’s not in debug mode or you could be a statistic. Don’t be a statistic.
OKKEN: Yes, don’t be a statistic.
KENNEDY: Alright, that’s it for our official six items. Brian, you got anything else?
OKKEN: Yeah, I got pinged today that in Episode #70, we covered Wagtail, which is a CMS written in Python. The Wagtail team is trying to get some new features out and they’re running a Kickstarter campaign to try to fund that. I think it’s a good thing. They’re not looking for that much money, so if everybody pitches in a little bit, it will be good.
KENNEDY: Yeah, they’re pretty close to their goal. They’ve got ten days left and they’re about halfway there.
OKKEN: They should get there.
KENNEDY: Yeah, Wagtail is one of the really nice CMSs that’s based on Django, hopefully its debug mode equals false. Pretty nice stuff. So, if you care about Wagtail or the CMSs, go in there and help them out a bit.
OKKEN: I want to mention I’ve had a lot of great feedback on Test and Code. I’ve been doing kind of a series about getting an Open Source project out and all of the testing requirements around it and talking about some of the common test design patterns. That’s been going well. Actually, I’ve been learning a lot about running in Open Source. Lately, I’ve been using GitHub just for revision control, but actually running an Open Source project, even if it just has a couple contributors, you learn a lot. So, hopefully I’ll get some of those learnings written sometime soon.
KENNEDY: You definitely should. That’s a really cool project, so keep it up.
OKKEN: You got any news?
KENNEDY: No news right now. Nothing to report but I’m always working on new projects. I will let you know soon.
OKKEN: Alright, well thanks a lot for today.
KENNEDY: Yeah, you bet.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.