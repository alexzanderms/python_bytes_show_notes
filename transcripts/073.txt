00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 73, recorded April 4th, 2018. I'm Michael Kennedy.
 
00:00:10 OKKEN: I'm Brian Okken.
 
00:00:11 KENNEDY: This episode is brought to you by Datadog. Check them out at pythonbytes.fm/datadog. We'll tell you more about them later. Right now, I want to relive my math education, Brian, and my set theory, and all these sorts of fun number theory things.
 
00:00:27 OKKEN: Right, so there's an article called, I think I truncated it, Set Theory and Python Tips and Tricks. Actually, that's one of the classes I loved. I loved the discrete math class I had in college that was early in my computer science days to talk and learn about set theory. And then, you use it a lot. It's a useful tool. But, there's a lot of people that come to Python that haven't taken that, or are really not sure what set theory is. And it's really not that complicated. And this is a good introduction article on really, what set theory is, or some of the set theory concepts, and then, how to do that in Python, including things like checking to see if something is in a set, and unions, and intersections, and differences and things. It's just a lot of fun.
 
00:01:14 KENNEDY: This is awesome, and this is one of those things where the right data structure can just make all the difference in terms of performance and simple code, right? If you tried to model this with lists, which you totally could do, then you're writing, basically implementing, "Is this set contained within that set? What is the intersection?" The actual performance of checking if something's in there, making sure you don't get duplicates, all that stuff, it just falls apart. But if you use sets, well, then it flies, right? And any time you need something distinct, right? I want a distinct number of IDs, or usernames, or emails, or whatever where there might be duplication. Set, it's all about the set.
 
00:01:52 OKKEN: Right, and that's the thing to take away from. If you're not familiar with sets, sets are a thing, they're a container that don't have any, that only have unique elements in it. If you add, if you're adding words, you're going through an article, and you add words to a set, if the word "the" is already in there, it's only going to be added once.
 
00:02:12 KENNEDY: Right. If you had a list that contained every word, in order, of a play or something, and you threw it into a set, that would just give you all the words used distinctly.
 
00:02:21 OKKEN: It's simple data structure built in to Python and it's a good thing to know how to use.
 
00:02:26 KENNEDY: Yeah, I love it, and it's super, super fast for containment, a little bit like dictionaries in that sense. Nice one, I'm glad you found them.
 
00:02:32 OKKEN: The syntax for how to do math, set theory math is is not obvious. It's not complicated, but it's something that's good to review so that you know what those are.
 
00:02:43 KENNEDY: Yeah, very, very nice. The next thing that I want to talk about, in fact, you're going to notice a little bit of a trend this week, Brian. I'm on some kind of rant on async programming this week. All three of my items have to do with async programming in one way or another, generally, each one of them, in improving what already exists.
 
00:03:03 OKKEN: Oh, great.
 
00:03:04 KENNEDY: The first one is called Trio, T-R-I-O, and it says "async Programming for Humans and Snake People" It's interesting, right? In Python 3 and 3.4, we got asyncio(asyncio). In 3.5, we got async and await, the keywords that built upon the asynciofoundation, which is really co-routines and functions, and stuff like that. This guy who created this is like, "The thing already exists, but the API for it, it's really crummy." You'll hear this, it's like a theme over and over, with slightly different takes. But, so like, "Why does this exist?" It says basically, "The Trio project's goal is to produce production-quality async and await native I/O libraries for Python." Like all the other stuff, it allows you to do sort of I/O block stuff in parallel, in really nice ways. The API on how you do that, is quite a bit nicer, and it supports advanced concepts like canceling a task that's started while you're still waiting for it. Right, things like that. If you're doing a web service call in a database transaction, and the database fails, you want to roll back or cancel the web call, or vice versa, something like that. It really tries to distinguish itself by being really focused on this usability thing, and it's built entirely from the ground up. What's really interesting is they have this "These are our sources for inspiration", and link, like a GitHub issue. Maybe it's in the wiki. I can't remember. But, a big long part where they talk about all the places. There's a lot of Erlang. There's CSharp. There's Go that makes a big appearance there. But, in particular, it's based on David Beazley's Curio, which is kind of a similar project, as well. Interesting, right?
 
00:04:46 OKKEN: Yeah, and I like the, the API is actually pretty nice, things like "start_soon."
 
00:04:52 KENNEDY: Yeah, exactly, I love the things you can do. So, the asynciostuff is really fairly complicated. It's like three or four lines of code. You always have to do just a transition from synchronous mode into the asynchronous world. You've always got to create this async loop and then begin running an async method to do it. But here, you just say "trio dot run" and you give it a function. Boom, done. If you want to pause, but not block the rest of the program, you can, instead of saying "time dot sleep", which will totally block that thread, you can say "trio dot sleep" and that will basically release the main thread to go do more work as if you are doing I/O.
 
00:05:28 OKKEN: Nice.
 
00:05:29 KENNEDY: That's nice. But like you said, the main part is, you can say "create an async with block" which already is mind-bending, and create this thing called a nursery. And then, you go to the nursery and say, "Start this task soon. Start that task soon." And then, the 'with' block will wait and block at the very end until all of the things you started within it are done.
 
00:05:48 OKKEN: Yeah, and the nursery thing confused me at first until I remembered that we are doing child tasks. You get your children from a nursery, nice.
 
00:05:59 KENNEDY: That's right, you put them in the nursery, they can grow up. When they're done, then you're out of there. But this adaptation of the 'async with block' is really, really interesting, which I believe, requires Python 3.6. They have a bunch of tools for inspecting and debugging your programs and the async flow, how the server's working, which is a really nice addition. One of the problems that you run into with this is, if you've got say, a async postgres data access layer, it's probably built on async I/O, not on Trio. Wven though they are effectively the same, they're not compatible, right? There's this other project called trio-asyncio that puts a layer, a compatibility layer, so anything that supports asyncio can run on trio.
 
00:06:42 OKKEN: Oh, cool.
 
00:06:43 KENNEDY: Yeah, so this is a really cool project. I'm super impressed with this.
 
00:06:46 OKKEN: I'll have to check that out, too. But just a slight correction: it says, "3.5 and above, and also PyPy."
 
00:06:53 KENNEDY: Yes, that's true, but I think the 'async with block', I'm not sure that structure itself is supported in Python 3.5; I don't think so. I know more things became async in 3.6, like async generator expressions and list comprehensions came in 3.6. There's like, it might be a slightly different context there.
 
00:07:14 OKKEN: And whatever, f-strings came in 3.6, so nothing exists, to me, before 3.6.
 
00:07:19 KENNEDY: 3.5, you're dead to me! I've been hearing a lot on the social medias about this thing called Black.
 
00:07:27 OKKEN: Yeah, so I thought we'd better cover it, even though it's been around for a little while, not a long time. But it is, you're right, it has had a lot of social media attention. Black is the uncompromising Python code formatter. I just thought it as sort of an amusing take on something like... So we have linters and everything, but they just tell you what is wrong, or what doesn't comply with Pep 8 standards, or other standards. And, this one just go and changes your code for you and doesn't tell you anything. Well, I'm not sure if it tells you or not.
 
00:08:01 KENNEDY: Is it like a black box?
 
00:08:02 OKKEN: I'm not sure why the name Black, but it is amusing that you can also, now that, after you've read it on your code, your code is "blackened" code, which actually makes me just hungry, because I really like blackened salmon.
 
00:08:15 KENNEDY: Yeah, get a little sauce on it..
 
00:08:17 OKKEN: It is an interesting take to say, if you're going to say our code needs to follow certain standards, if this one works for ya, just put that in your tool chain and it'll just automatically format everything, and you don't need to argue about it anymore.
 
00:08:30 KENNEDY: Make it part of a GitHub a git check-in hook, or part of your automated build that just formats it and checks it back in.
 
00:08:38 OKKEN: The GitHub repo has some amusing stuff in it also, so poke around in there, because, for instance, in the tests, there's a comments file, and it has examples of comments that should be removed, and, it's sort of funny stuff, like some comment about why this function doesn't work and it's still in production anyway, things like that that should just be removed. It's funny. It's a good read.
 
00:09:02 KENNEDY: Yeah, I think this is pretty interesting. I haven't done anything with it, but it's definitely worth checking out. Especially if you have a team of people, and you want to try to make it continuously format stuff the same, right?
 
00:09:11 OKKEN: I don't really have an opinion on it, other than it's interesting.
 
00:09:15 KENNEDY: Sounds pretty good. All right, before we get to the next one, let me tell you about Datadog. If you run any sort of distributed app, understanding how a request flows from one part through the whole thing, what the performance of those are, what the bottlenecks around those are, can be really tricky. You can plug in Datadog, and in just a few minutes, you'll be able to investigate those bottlenecks and explore dashboards that show you where you're spending your time in the app. You get to visualize your Python performance, super easy and nice, get a free trial, and a free Datadog t-shirt with a cute little dog on it. Just check them out at pythonbytes.fm/datadog. We got to get our shirts, right, Brian?
 
00:09:54 OKKEN: Yeah, definitely.
 
00:09:56 KENNEDY: Definitely. I'm looking at PyCon. I'm going to get a shirt from them at PyCon.
 
00:10:00 OKKEN: I'm going to try to get one before that.
 
00:10:01 KENNEDY: Nice. Back on to my rant on async stuff. Tthere's this thing called gain, and the point of gain is, you can give it a base URL, a set of regular expression of types of links in there to traverse and follow, and then just tell it to go, and it will basically spider an entire site. Think Google web spider, but yours. Yeah, and it's all based on the asyncio, uvloop and aiohttp, which is pretty cool. All you got to do is, you need to find a class that has the CSS selectors and what you want to do, like save the data to a file or database or whatever, how many concurrent connections you want it to go spider on, whether it's async aspect, where to start, the URL things to match, like anything on the page or anything that's under the catalog section or whatever, and you just say, "Go." And then you wait a little bit, and all sorts of stuff has been downloaded, processed, and saved.
 
00:11:01 OKKEN: Right, and it is very terse. You don't really have to put that much code in place to get this done.
 
00:11:06 KENNEDY: No, it's like 10, 15 lines of code, and you've completely analyzed somebody's entire website structure. Pretty cool, because it's based on asyncioand aiohttp, it should totally fly.
 
00:11:18 OKKEN: Neat.
 
00:11:18 KENNEDY: Yeah, very neat. Not a whole lot to do on that one, but if you're doing screen scraping, web analysis of more than just one page, this is pretty cool, because you can, sort of, just set up patterns and say, "Go forth and do that."
 
00:11:31 OKKEN: I was just thinking that it'd be fun to do something like that, to hook up with, with a website you're running, to just even attach it to a post project of checking to make sure the link, using request or something to grab.
 
00:11:43 KENNEDY: Yeah, that's a good point. Like link validation, to make sure every link on the page works correctly, things like that, right?
 
00:11:49 OKKEN: Yeah. And set up a notifier, or something like that, to let you know if something's broken.
 
00:11:53 KENNEDY: All right, so what is this next one you got, with these decorators, single-dispatch?
 
00:11:57 OKKEN: Yeah, actually, so this an article called Generic Functions in Python with Single-Dispatch, and I, I didn't know that this was a thing. Apparently, in Python 3.4 it was added, this decorator, a single-dispatch decorator. We'll talk about it and read it, but you kind of need to see the code. You can decorate a function with single-dispatch, and that makes that function the default function. Then, you can use a decorator to register other functions to be the non-default.
 
00:12:31 KENNEDY: Oh, this is interesting.
 
00:12:32 OKKEN: Yeah, so that you can have one function name that does calls. Different functions based on the type of the first element in the parameter list.
 
00:12:41 KENNEDY: It's basically like declarative function overloading polymorphism, based on the type, which we don't have in Python.
 
00:12:50 OKKEN: Right, which apparently we do have in Python, I just didn't know about it.
 
00:12:54 KENNEDY: It just requires decorators. But it's built-in. Built-in decorators. This is wild. You've got one function, and you say it's single dispatch, and then you have other functions that just have doc strings, but you would basically wrap them with, "This one takes a list set or two, we'll call this version. If it takes a dictionary, call this other version." Yeah, this is interesting. It's a little non-obvious, but it's interesting.
 
00:13:15 OKKEN: I took the example out of the article and trimmed it down, so those doc strings are just to make our code example in our notes small. But, yeah, it has an example of building your own f printf function that can print differently. The default is just to print the string representation, but, for instance, lists and sets and dictionaries can be printed differently, and having elements on each line. I'm sure there's other reasons. But, I know I've run across times where I wished Python had function overloading, and it doesn't.
 
00:13:50 KENNEDY: I've implemented function overloading with "if is instance of this type, else if instance of this type." Which is not really great, but it's what you got, right? But apparently, you've got this as well, which is pretty awesome. All right, you ready for another rant? Another thing on async? Final one.
 
00:14:08 OKKEN: We haven't talked about async for a while.
 
00:14:09 KENNEDY: Nah, let's talk about that. There's this thing by a guy named Alex Sherman, and he wrote a library called 'unsync'. Async, unsync, called "Unsynchronizing async, and Await in Python 3.6" He says, "I'm a big fan of async and await." But there's two major problems with this. First of all, it's difficult to do fire-and-forget async stuff, right? You can't just go to an async function and call it and let it run. You have to do this weird sort of series of creating the async loop, blocking on the async loop. You create a loop, and you ensure the future by giving it a function and a loop function to call. It's really not obvious to just run a basic asynchronous thing from a sychronous task, okay? If you look at the article, right at the top, it links, sort of, that code there. But you also can't block, you can't say, "Well, I've gotten this thing back from the async thing. I just want to stop here and just wait until it's answered." Comes back, it'll throw an exception, right? This is all kind of weird. This guy that says "Hey, well what can we do about this?" He kind of solves it, in a sense. Says, "You know, C Sharp had this idea of async and await, and these tasks that run almost identical to what Python has. The way they fixed it was by creating "this ambient thread pool that will capture it and run." Basically, the asyncioloop is like this thing behind the scenes you never see, and internally, Python or C Sharp would find it, just put it in the default one. And they said, "Python didn't take this approach," and his hunch is the maintainers didn't want to add an ambient thread pool to their language, which makes sense. He says, "I, however am not a Python maintainer, and I did add an ambient thread to mine, and here's how it works." You just take any async function, and put an '@unsync' decorator. We also have a big decorator theme going on here. Put an @unsync decorator on it, and then you just call it. It sounds real simple, so, what it does, is it will basically wrap it up and do all that asyncio initialization stuff for you, and then you can wait on the result, or not wait on the result, however you like. That alone is pretty cool, but then if you put that on a regular function, not an async one, it'll cause it to run on a thread pool thread, on thread pool executor. If you flip a bit and say, "@unsync your decorator", but it's CPU-bound, it'll actually run it on the process pool executor in a separate process. You can get around the GIL.
 
00:16:35 OKKEN: Oh, interesting.
 
00:16:36 KENNEDY: And it's all just one decorator. And it'll traverse, it'll sort of manage those dependencies, "Is it async? How does it run? Where's the...?" It's really pretty slick on how it detects the different ways in which asynchrony can be manifest in Python.
 
00:16:50 OKKEN: To be fair, my first thought is, that this might be, if I'm writing an asynchronous library, that synchronizing my asynchronous library, for instance, might be helpful during just a functional test, for example.
 
00:17:06 KENNEDY: Yeah, you want to wait for it just to go, yeah. Definitely. There's a lot of interesting use cases for this. It definitely provides a lot of flexibility. It's not, it doesn't have a huge number of GitHub stars. I think it's pretty new, but people can think about it, and maybe there's even some tie-ins. Maybe somehow, Trio and its trio-asyncio, could plug together with this. I don't know, but, lot of interesting news around the asynciospace, or async-await space.
 
00:17:33 OKKEN: Very amusing code example of things like return "I hate event loops," and naming his event loop "Annoying Event Loop."
 
00:17:43 KENNEDY: Yeah, he's got some great naming, and then his async function that he calls by putting the unsync decorator on it. Its return value is, "I like decorators." Yeah. It's pretty light-hearted, it's nice. But, it's a cool project. People can check it out and see if it works for them.
 
00:17:57 OKKEN: All right, well, thanks.
 
00:17:58 KENNEDY: Yeah, you got anything else to share with us, Brian? I'm out of news for the, the week.
 
00:18:01 OKKEN: No, I'm out as well.
 
00:18:03 KENNEDY: All right, how about that? Well, thanks for finding all these things, and sharing them, and thanks, everyone, for listening. Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's Python Bytes, as in B-Y-T-E-S. And, get the full show notes at pythonbytes.fm If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
