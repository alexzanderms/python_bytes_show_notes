00:00:00 KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 76, recorded May 3, 2018. I am Michael Kennedy.
 
00:00:10 OKKEN: I'm Brian Okken.
 
00:00:11 KENNEDY: This episode is brought to you by Datadog, check them out at pythonbytes.fm/datadog. They're doing awesome stuff, tell you more about that later. Brian, I think we're on the eve of PyCon. We're literally, in terms of podcast releasing, podcast episodes, this is PyCon eve. PyCon is a place where people seem to really care more than most developer communities about sort of welcoming newcomers. You've got something that kind of ties into that angle as well, right?
 
00:00:37 OKKEN: I ran across this article and it looks like, it's called Unlearning Toxic Behaviors in a Code Review Culture. Apparently, this came from a talk at AlterConf and then turned into this. So, the slides are available but there's an article with all of the information. And this is something that, trying to have good manners and be a good human while also helping each other out in code reviews, is, sort of, a interesting balancing act, because you've got to actually teach people and if you need to teach and everything. Anyway, I'm going to jump into some of the ideas around this and it's an interesting idea to go off. It's a discussion of some of the unhelpful behaviors that people have seen and then some of the helpful things that you can do. I'm not going to list all of them but there's a few of them that jumped out at me. Like passing off opinion as fact was the first one. And you know, people saying oh this should be implemented this way. But there isn't really a should often with software. Those are opinions and so just make sure you state it like that. One of these things, next up is overwhelming with an avalanche of comments. So for example, if somebody made the same mistake a whole bunch of times, like, I don't know, there's spaces in the wrong place or some formatting issue or, not using underscores and doing camelCase instead. Commenting every place, I mean one comment is sufficient. Don't put like, yeah you did it here, too, yeah, you did it here, too, yeah you did it here, too, all over the code review. Actually, just reading through all of these, they're good reminders of how to be helpful instead of being hurtful during a code review. And then popped out some of the helpful things that, one of the things that popped out at me is collaborate and don't backseat drive. This is one, actually, that I need to work on, because it's hard. When I see some code that I think should be another way, I don't really just want to just tell everybody, tell somebody what's all wrong with it. My instinct is to just do it the right way and show them, say, it should've been done like this. But that's not the right way to go. But anyway, you have any comments on some of this?
 
00:02:56 KENNEDY: One of the things that people need to be really careful about is when, in some of these code reviews, especially for junior developers, this can be a really sort of sensitive time emotionally. You put together some work and it's one thing to criticize the code but at the same time it can come across as feeling like criticizing that person or their skillset. When you're a junior developer you're feeling is like, maybe you don't feel like you can keep up with your team because they've been doing it for 10 years and you've been doing it for two and you just feel a little bit like you're always trying to catch up. If somebody comes in and just matter-of-factly says, we're going to throw a bunch of comments on this stuff, you should do it the way I've been doing it for 10 years, et cetera, et cetera, it can be perceived as a personal attack or attack on your credibility in your newfound career. I just think being real, real sensitive to that, especially for junior developers. I'm sure people who've been doing it for a long time feel that way as well, but the longer you do it the thicker your skin gets and you're just like, the more you're kind of used to having these sort of debates and differences of opinion. But yeah, I would sort of second this and say be cautious of the junior developers and make it more about learning and bringing them along instead of like, "Hey, I'm going to show you how to do this cause you did it wrong."
 
00:04:13 OKKEN: Also depends a lot on personality, because when I was a junior developer, I actually was more open for people saying, wow this sucks, you should do it this way. Now that I think of myself as an experienced developer, there's still a lot of stuff that I'm learning in new parts and I sometimes will take a comment of, oh you should do it this way, as like, what are you talking about, I'm a Senior Developer. But I got to check the ego a little bit. And one of the things that helped my team a lot, it shows up on this list, too, is to automate what you can. For instance, we use, I mean whatever your standard is just define that and codify it with pycodestyle or Flake8 or something. Our team uses Flake8, Flake8 defaults, it was helpful for us to increase the line length and a couple other things that we turned off, but agree on that and just automate that. Sometimes something will come through a code review and just a simple comment of, "Hey, can you run this through Flake8 first before we start the review, it's easier."
 
00:05:20 KENNEDY: I totally agree with that because people, you don't feel personally criticized by a computer. It's just like the algorithm, it formats it this way and it checks that the line length is this, and the format is that, and if it's wrong then you fix it. But it's not like, it has an opinion about that, not really, right. Maybe someday computers will have opinions like that but they don't right now. And another thing, sort of adding on what you're saying is with Black, I believe, remember Black the formatter that comes in any color you want as long as it's black? That one, I believe will modify the code, not just suggest fixes. You can say Black, reformat this the way we like it and just do that.
 
00:06:01 OKKEN: I still haven't tried to hook that up as a commit hook, or something like that.
 
00:06:05 KENNEDY: Exactly, be nice. I think it's pretty cool, definitely worth thinking about these issues. Brian, do you remember a few episodes ago that project, that new versioning project that Mahmoud Hashemi and a few of his friends put together about zero-version, was it ZeroVer, what was it called?
 
00:06:23 OKKEN: I think it was ZeroVer.
 
00:06:24 KENNEDY: I think it was ZeroVer. So it was like sort of celebrating in a sarcastic, poking fun at, maybe you should not be zero-version. The 0. whatever version of things like Flask, Pandas, et cetera, right? Things that have been around for eight years and are super stable and are still, like, 0.1 for their version. Well, either that article or this episode, or that episode covering it, somehow, may have had some kind of effect because Flask had been on 0. something small for eight years and now Flask 1.0 is released. How about that?
 
00:07:01 OKKEN: I think it's a great thing, it was interesting that there were some people that actually commented of, why bother if it's already stable? I think it's a good thing.
 
00:07:09 KENNEDY: I think it absolutely makes sense. I mean, I know there are people out there in the world who see it's been around for a long time, it's had many releases, does that mean stable? If it's not stable you put the little beta, little b on the end of the version or something like that. But there's a large portion of the development world that comes to Python from outside of the core ecosystem of Python and sees 0.1 and goes can't use it, not ready, what is this, right? So, I think it really makes a lot of sense, just changing the version because they got some pressure. There's actually a lot of stuff here, I'm going to try to go through this quickly 'cause there's actually a lot of stuff here. The CLI is more flexible for and actually, you can do things like say, it's in development mode or production mode, and that can replace Flask debug settings in the environment, stuff like that.
 
00:07:57 OKKEN: That's great.
 
00:07:57 KENNEDY: You can get the environment variables from a .flask env file, so instead of having to export them in your shell when you launch the shell, like .zshrc or .bashrc, things like that, you can have it just in these files and it'll actually load them as if they're from the environment, that's cool. Development server is multi-threaded, so now you can more properly test concurrent requests during development, which is what you would experience if you would release it to a proper threaded server like micro WSGI, flask.ext, which which was deprecated, has been removed, some stuff around forms is pretty nice better error handling, more finer grain stuff there, more logging. Something for you, the test client gained a JSON argument for posting JSON and the response test object, get JSON for decoding JSON. So, you could test your JSON methods better. A test CLI runner for testing your apps command line options. Pretty cool right?
 
00:08:54 OKKEN: Yeah, very cool.
 
00:08:56 KENNEDY: All of this stuff is in Flask 1.0.
 
00:08:58 OKKEN: Actually, that very much deserves a bump in the version.
 
00:09:01 KENNEDY: Right, and it's time, it's definitely time. We're all going to... Flask's team.
 
00:09:06 OKKEN: Yeah, I'm just getting into some more Flask stuff too so that's good.
 
00:09:09 KENNEDY: Yeah, it's pretty fun. So, have we have we gotten used to pipenv? Like, I'm not used to it, I, literally yesterday, typed pip... and saw our requirements.txt a lot because I was rebuilding some servers. How 'about you?
 
00:09:21 OKKEN: I understood it, I think it's really cool but I had trouble really cracking what problem it was solving that I didn't have yet. I ran across an article that it's called, Pipenv, a Guide to the New Python Packaging Tool. Since everybody's like, actually not everybody, but it is being more recommended now to use pipenv for where appropriate. So this article actually presented it in a way that I think made me understand it a lot more. For instance, using pipenv it's like using pip in virtual environments, but it does a lot of the stuff for you. There is some workflow differences, that I'm not going to cover here, but the video, there's a video up on the site that, I think, the pipenv readme, or the documents.
 
00:10:15 KENNEDY: At the Github page, yeah.
 
00:10:16 OKKEN: It has this little video which is great, it shows you the workflow. But, what problems does is solve? The requirements.txt has an issue, and this article talks about the current, without pipenv what the problems are. So, requirements.txt you can set it up as these are just the required packages that my application uses, but it doesn't really have versions, you can put versions in there, but your mileage may vary. Now, if your dependencies have dependencies themselves, then those versions, how do you keep track of those? One of the ways people have one that is used pip freeze which does both your dependencies and all of the sub-dependencies, and freezes all of those. You can use that as your requirements file. But then you've got to keep track of it. So, every time one of the sub-dependencies updates, you've got to make sure it works, and that's just a pain.
 
00:11:08 KENNEDY: Yah, I mean, the requirements is supposed to show you what you depend upon, not the transitive closure of what you depend upon really.
 
00:11:15 OKKEN: Oh, math words.
 
00:11:17 KENNEDY: Not your dependencies dependencies, not the dependencies of your dependencies, how's that?
 
00:11:23 OKKEN: Okay, the gist of it is in file-wise the PIP, there's two files that get generated, the Pipfile and Pipfile.lock. The Pipfile is the, these are my requirements, kind of, but it also does more than that. And then, Pipfile.lock is like all of the pinned requirements with all the versions and it also includes hashes of the download so that you don't have to worry about corrupted installs or anything like that. It does so much more than that, but this discussion really helped me understand why this is useful, especially the sub-dependency thing is something nobody wants to deal with that themselves so let pipenv deal with it for you.
 
00:12:01 KENNEDY: Oh, pretty cool. I got to study, I got to get my a workflow zen around this new way. So you basically, if you're going to start a new project you can run that Cookiecutter to generate it with the proper structure using Pipfile and Pipfile.lock.
 
00:12:49 OKKEN: It's kind of a fun way to just get your hands, like, okay, how's this all supposed to work. Even if you don't use this for project to pull down pipenv in a project and play with it and say, oh yeah this makes sense.
 
00:13:02 KENNEDY: I think that's really cool way, kind of gives you the essence of what you need for the structure which is always something that's fun to debate, and we have a few times. So before we get to our next item, which is probably going to surprise people little bit, if they haven't heard of it. I want to tell you about Datadog. Datadog is a monitoring solution that provides deep visibility and tracks issues that you might be running into with distributed applications. So, if I have app that has maybe some services, like micro services and it calls into the database and other things, and it's slow, that can be really hard to figure out where. But with Datadog you can just investigate the bottlenecks in your code, explore with graphs and dashboards and really figure out where your app is spending its time across processes, right, so not just profiling one thing. So visualize your Python performance today, get started the free trial Datadog, and you'll get a cool shirt, a tee shirt with the Datadog dog, mascot is the right word I'm looking for. Datadog mascot is on there, so check it out for yourself at pythonbytes.fm./datadog. So, if you're going to think of a company, Brian, that was going to create one virtual machine, one run time in Python speak equivalent of interpreter to rule them all, how about Oracle?
 
00:14:20 OKKEN: No, I wouldn't have thought Oracle.
 
00:14:22 KENNEDY: No, I probably wouldn't either. There's this thing called GraalVM, G-R-A-A-L-V-M. And it says this is built to run Python code and other code that depends on virtual machines and run it faster. They said look, we see this problem, current production virtual machines and throw CPython in there with that. Provide high-performance of only this execution, only of certain languages or a small set of languages. They all repeat a bunch of stuff, they all do compilation and memory management, tooling, et cetera, so it kind of violates the don't repeat yourself, the DRY principle. They're heavy weight things, usually, that take a lot of memory, so they're often difficult to embed, especially like JVM, stuff like that. Over at Oracle Labs, they started a new project a while ago to create a single VM that would provide high performance execution for all of the languages. Benefit being, if I have, say, some sort of multilingual environment, like maybe we do Java and Python or something like that. If you could put that within the same process and have them directly communicate they would go dramatically faster than say over JSON-based microservice, like, if it was literally in memory. That's kind of the idea, right. So, it's the goals are basically to create this high performance, single VM, that can interoperate with zero overhead across these different languages and platforms. So you can run all the JVM based languages, Java, Kotlin and so on. JavaScript including nodejs, anything that you can do LLVM against, so C++ or Rust and Python. Imagine you're doing some sort of interop type of thing and you want to write some of your code in Rust and some of it in Python, and you want to try to get the best performance out of it, maybe putting it together in this thing would be pretty cool. So, it does, I don't know how much of a help for Python in its current form, but maybe they'll get something really special. For some of the jet compiled languages it will ahead of time compile them to machine instructions and then run them. Things like startup time and initial execution is super fast and predictable. It'll be cool if they could do you like PyPy precompiled or something like that.
 
00:16:39 OKKEN: Just to make sure I get my terminology straight, the GraalVM, the VM is virtual machine. I'm used to virtual machines being like an entire desktop on the server or something, is that what this is?
 
00:16:52 KENNEDY: No, often VM's are like, the Java VM or the .Net CLR or things that are sort of, managed memory, process.
 
00:17:04 OKKEN: Okay, it's the thing between my code and my computer.
 
00:17:07 KENNEDY: Yeah, and it is most commonly used around things that jet compile, Java, JavaScript, .Net, things like that.
 
00:17:16 OKKEN: Okay, so two completely different things both called virtual machines, okay got it.
 
00:17:21 KENNEDY: Right now, the Python support is experimental. But they're working on one of their main next steps is to make the support for Python better. So, if this sounds interesting to people, I think, it's early days, it's pretty interesting and check it out.
 
00:17:35 OKKEN: Actually, I'm super excited about it because the combination of Python with C++ and Rust and R and other things, and Kotlin, I think this is an exciting thing.
 
00:17:47 KENNEDY: I think it is too and there's, if you can do that with no interop within the same process, without translating between the layers and some kind of CFFI layer type of thing, I think that would be really cool.
 
00:17:58 OKKEN: Yeah, okay.
 
00:17:58 KENNEDY: We'll see. It's early days, but it could be a pretty neat step in adding one more way to execute Python code. What's your next one for us?
 
00:18:09 OKKEN: I am like totally in getting ready for PyCon mode, and didn't have time to do a testing code episode last week or this week, so this is a shameless time I'm going to take my last slot to do some testing related topics. But, one of em's Flask, so we covered Flask already.
 
00:18:31 KENNEDY: Yes, a brand new version, you can test it.
 
00:18:32 OKKEN: Yeah, there's an article that came out this week called Testing a Flask Application Using PyTest. And those are two of my favorite things, Flask and PyTest. One of the third favorite thing is my own book and the book that I wrote was part of the inspiration for this article, so shameless plug. But, it's a really nicely written article. Basically, if you're writing, if you're working with Flask and you want to try to work with PyTest also, I mean, I've had questions about this but I didn't feel qualified to answer yet, now I am, because of this article. But there's, talks about both unit testing and functional testing through the test client that Flask provides, but the unit tests don't have to be, you can access things directly. The article goes through both a couple examples, a unit test and then a functional test. For instance, checking, making sure, that the new user works at a unit test level and how to hook that up with them with PyTest and Flask and everything. It's actually really nicely done. After you read the article, don't stop there, go out and look at the project that he's got on, I can't remember if it's on Github or GitLab, but it's an open source project that you can take a look and it's got other, more testing examples on. It's really well done that and so good job, I like it.
 
00:19:54 KENNEDY: Yeah, that's really, really cool. I see the project structure, there again, like here's how you set it up to do testing, so that's very nice. It's cool your book was inspiration for it as well.
 
00:20:04 OKKEN: Another thing while we're on the testing topic I wanted to bring up a new PyTest plugin that just actually kind of blew me away. This is a brilliant idea so, and I also learned of the word stochastic. I think I knew it at one point, but stochastic kind of means random and stuff. But it it comes up because it's in the read me for this project, called pytest-caprng, C-A-P-R-N-G. Here's the idea is if you've used random, the random module, or the numpy.random is being used in your in your code or in your test, running a test, that if you run a test and it fails and you try to rerun it and it passes it might pass because the data's different. This new plugin, what it does is, before you run each test it captures the state of the random modules so that the seeds are the same next time you run it if you rerun the failure, you'll get the same data again so you'll see the failure again. It's just kind of a small little plugin that is an awesome idea, so I wanted to highlight it, it's cool.
 
00:21:12 KENNEDY: Yeah, it's cool, I mean, coverage might change, based on the value, success or failure might change, based on the value, so being able to lock it down, make it predictable. But still have it start from something random, that's pretty cool, I like it. All right, I did say we were on the eve of PyCon, on PyCon eve, right, so, the next time we release an episode, it's going to be at, at least, it will have been recorded at PyCon, we'll see what happens there. Anyway, there's a really nice article by Trey Hunter, he was a guest co-host a while ago, on how to have a great first PyCon. PyCon is maybe the, the U.S. one, I think, is the biggest Python conference there is. It's certainly quite large. And there's there's a lot of options, it's little bit of a paradox of choice there, right. I mean, did you have that experience when you were there, Brian?
 
00:22:01 OKKEN: Yeah definitely, and I really haven't had time, that experience, again, looking at the schedule, I don't know what to go to.
 
00:22:06 KENNEDY: I know, I'm going to solve that by not going to anything. Which is part of this this conversation too. He has a really nice, thoughtful, writeup about, sort of getting the most out of PyCon the first time or if maybe if you've gone a few times you can till read this and get something out of it. First of all, he mentions that the talks are typically recorded, available on YouTube within 24 hours, something like that, really surprisingly quickly. You don't feel like you have to attend every talk. If there's something more interesting going on don't feel like you're missing out, you can just watch it later. I think one of my number one recommendations, which he touches on, is Open Spaces.
 
00:22:48 OKKEN: Yeah, that's actually something I didn't know about last year that I missed out on so that's a good thing to. What are Open Spaces?
 
00:22:55 KENNEDY: There's a big board and there's a bunch of rooms, and the rooms old like 20 to 50 people and there's probably 5 to 10 of them, I'm not sure exactly how many are available, and there's parts of the conference where you can, just anybody who wants to have a group conversation about something, they fill out a little three by five inch little note card and stick it up on the the board and claim an hour in a room. Then people just go attend it, like they would any other talk but it's much more high participation, because there's not a proper speaker you just have to basically kick off the conversation and then it's just like a group conversation.
 
00:23:34 OKKEN: That's awesome because that's kind of what you go to PyCon for anyway is to meet with people that have similar interests. Not just Python as a whole, but specifically, what specific parts of Python are that you're interested in.
 
00:23:48 KENNEDY: Right, you might have like an IoT Open Space for people working with MicroPython or something. Who knows, right, that would be easily something you could put together. The other thing is, all the talks are recorded, almost none of the Open Spaces are recorded, so you can't make those up, so that's one thing I really like to do. Trey goes on a little bit, he says they're often more niched and maybe something you really like, you're really focused on. It's all about interaction and discussion. They're not recorded, so he pretty much has the same thoughts I do. He has some tips for like conversation around breakfast, lunch, dinner, talks about the hallway track. I'm a big fan of the hallway track, partly because the sessions are recorded and partly, the reason I go there, is to meet people and to make connections and have these interactions that I don't have outside of that space, right. So, I find, almost always, I'm having a great conversation with somebody and then like, oh the sessions starting. You know what, forget the session, I'll watch it on YouTube, let's keep going on whatever it is we're doing, because this is awesome, right. I find like I spend the whole conference that way.
 
00:24:49 OKKEN: Yeah, it would be lame if nobody went to the set talks though.
 
00:24:51 KENNEDY: No, I know. I'm going to go to your talk by the way. I guess, I think, I guess more what I'm saying, you're right, not everybody should just skip them all the time, because then what would it be, it wouldn't really be the same. You find yourself in a really interesting situation that you're enjoying just because it's time to go to the talks, doesn't mean you have to go to the talks, right. The other thing that I thought was interesting about this, was this conversation, this concept of a Pac-Man opening in a group.
 
00:25:24 OKKEN: Yeah, I love that.
 
00:25:25 KENNEDY: Yeah, so idea is, like, think of Pac-Man it's got the little open spot. If you're in a group standing around, don't just like create a closed circle because nobody can join or anything. Always leave a little gap and says look for people or look for groups that have Pac-Man openings and make sure that your group always has a Pac-Man opening, so that that's pretty cool. Some advice for interacting online during PyCon, how to make the most out of networking and it's not really a bad thing. Things like that. And also volunteering, there's Lightening Talks. Have you given a Lighting Talk Brian?
 
00:25:54 OKKEN: Not at PyCon.
 
00:25:54 KENNEDY: Yeah, neither have I. Yeah, just some general, nice things. Then finally, one I thought was interesting, there was a person who commented on the post, saying if you're on Windows it's helpful to install a virtual machine image of Linux, like the current Ubuntu on your laptop because you might run into a situation, a talk or a training where something they're talking about doesn't work on Windows, and you might miss out. That's both the an opportunity for us to make the Windows experience better but also, may be good advice for the first person, you know coming with your Surface tablet, you might want to come prepared, I guess, or install Anaconda, something like that.
 
00:26:31 OKKEN: Yeah, so one of the things I wanted to bring up that I didn't know about ahead of time is there's certain sections of the day that is recommended that there aren't any talks scheduled, but what is the other floor called, the place where we're at, the conference hall or?
 
00:26:46 KENNEDY: The expo hall.
 
00:26:46 OKKEN: The expo hall. But the expo hall is pretty much open all the time. During a talk, if there's somebody that you wanted to meet up meet, to or a company wanted to talk to or something that you can't get to them because there's so many people during the normal expo times, skipping one of the talks and going during a talk time, there's way less people in the expo hall and you might be able to catch up with somebody a lot easier.
 
00:27:10 KENNEDY: That's great advice, yeah definitely. I think that leads us really well into our own news, what do ya think Brian?
 
00:27:17 OKKEN: Yeah, so you brought up my talk, I do have a talk Friday and I actually forgot the time, it's at five something.
 
00:27:23 KENNEDY: It's to do with testing and you're co-presenting with Paul Everett, right?
 
00:27:28 OKKEN: Yeah, Paul Everett and I are going to. I love PyTest, of course, but I also have, in this last year, fallen in love with PyCharm, so we're going to do them together. We're going to show you how to be efficient and effective and speed up your test and development time with my PyCharm and PyTest.
 
00:27:47 KENNEDY: Your chocolate's in my peanut butter. That's awesome. We have a booth, you and I, and a few others, have a booth, I forgot the number, but you'll find us, it's pretty easy, right, and we have stickers.
 
00:28:01 OKKEN: Yeah, I just got my stickers this morning, so yeah, I'll be ready.
 
00:28:05 KENNEDY: Yeah, it's going to be a lot of fun. I'm really looking forward to meeting people, so I hope everyone comes and says hello. That should be awesome. And then, another thing, we talked about the Open Session, are we planing on doing a live Python Bytes recording?
 
00:28:16 OKKEN: Why not try it? Let's do it.
 
00:28:18 KENNEDY: Let's give it a try. We're going to do an open session, live, the next by Python Bytes is coming to you live from PyCon. It probably won't be streamed live, maybe we'll stream it live, I don't know if we can get the audio to work for that, but we'll do what we can to do a live Python Bytes and then make that the show for next week. If people want to get notified, they want to make sure they don't miss a time, because it's an Open Session, we can't pre-schedule it. We have to go find a slot on that that on a wall there. People just go to pythonbytes.fm and at the top menu bar click Friends of the Show and sign up there, then I'll send out an email like, once we have that time figured out that day. I'm thinking Saturday would probably be best. Yeah, I think so. Yeah okay, so sometime on Saturday if we can pull that off. That would be awesome, hopefully as many people can that come to that, that'd be fun. See how the sausage is made. Also, I'm just in a couple days leaving for Seattle, I'm going to be at Microsoft Build.
 
00:29:15 OKKEN: Oh neat.
 
00:29:17 KENNEDY: Yeah, that'll be really interesting. Hang out with some of the the Python folks there. If you're at Microsoft Build and you want to come say hi, just shoot me a message on Twitter or something and if we're there together that'd be great. PyGotham, the New York City PyCon, effectively, has just opened their call for proposals. And PyCon DE, which is held in Karlsruhe, Germany, which is a wonderful part of Germany, very beautiful, is also just opening their call for proposals as well. That's running and 24th through 26th in October in Germany. So, lot of conference stuff, it's like conference time. We have Google I/O, we have Microsoft Build, and we have PyCon all next week. It's like they're fighting for attention. Awesome, alright, well anything else Brian? Have we covered it all?
 
00:30:06 OKKEN: Yeah, I think we did.
 
00:30:07 KENNEDY: Alright, wonderful. I'm looking for to seeing you at PyCon, that'll be fun.
 
00:30:11 OKKEN: Yeah, that'll definitely be fun, thanks.
 
00:30:12 KENNEDY: I'll see ya up there, talk to you later. Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's PythonBytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way, we're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
