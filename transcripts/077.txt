00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds, this is episode 77, recorded May 12th, 2018, I'm Michael Kennedy.
 
00:00:10 OKKEN: I'm Brian Okken.
 
00:00:11 KENNEDY: And we have a very special episode, and a live audience. That's right, we're recording live from PyCon, thank you everyone for being here, and everyone who couldn't make it, you missed a great party. This episode's brought to you by Datadog, they actually, I think they have, do they have a booth out there? Yeah, I think they have a booth out there, I've been stuck at my booth the whole time, which is wonderful, but I don't know what's out there. So that's amazing, we'll tell you more about them later, right now Brian, what do you got for us?
 
00:00:37 OKKEN: I have a fun article that actually comes from the Java world, but it's, "Why senior devs write dumb code." And it starts out with a quote from Kent Beck, which I love, is "Any fool can write code that a computer can understand, good programmers write code that humans can understand." Just some tips to make sure that you try to keep clean, straightforward, obvious code, and follow principles like YAGNI, Single Responsibility, DRY, et cetera. I think this is important in the Python world because there are some cool language features that we have that are fun to play with. I definitely want people to go ahead and try all the cool new language features, but make sure that your code still is readable, even by people that aren't as Pythonic savvy as you are.
 
00:01:35 KENNEDY: Are you telling me that like, the shortest code is not the most readable, always?
 
00:01:39 OKKEN: Yes. That's hard for me to do also, because I really like one liners that pack in like, a whole bunch of stuff.
 
00:01:47 KENNEDY: Yeah, I do too, so does that cover the SOLID principles, like Single Responsibility, Open/Closed principle, or is it just more general, like write good code?
 
00:01:56 OKKEN: Well, write readable code.
 
00:01:59 KENNEDY: Readable code, right on.
 
00:02:00 OKKEN: I don't necessarily adhere to SOLID being readable.
 
00:02:04 KENNEDY: You know, that's a really good point, so like SOLID principles, I don't know if you all know, it's Single Responsibility principle, Open/Closed principle, Liskov substitution principle, et cetera, and a lot of times, that is like super design pattern heavy, and you're like, there's so much abstraction here, I know this looks like it came out of a textbook, but it's bad, right? Yeah, yeah, so actually maybe, maybe not so much?
 
00:02:25 OKKEN: Well, and I've seen it in code reviews too, we've had people do maybe a C-ism, in Python, and sometimes that's bad, but also, sometimes if it's a little bit of code, and you can look at it, it's obvious what it's doing, maybe it doesn't need to change to be more Pythonic. It's probably fine.
 
00:02:44 KENNEDY: Yeah, that's true. Brian, have you been having a hard time finding your way around here? Do you get lost? You guys having a bit of a hard time, I feel like I've taken a walk where it's like, okay, we've gone like a quarter mile, and there was a door to that place on the other side of the exhibit hall, why didn't I go that way, right? Well, the next thing, if they had used it, I'm sure they haven't, if they'd used it, there's this thing called GeoAlchemy 2. You've heard of SQLAlchemy right? Tthere's this thing you can layer upon SQLAlchemy called GeoAlchemy 2, and what it does, is it provides geospatial queries and operations on top of, say Postgres. Right, so you can ask it questions like, "How far is it from here to there?" Like, am I within this room, like, you could easily define all these as polygons, insert them as SQLAlchemy objects, and ask questions like, "Who is in such and such room?" If we all had, say RFID.
 
00:03:41 OKKEN: And that would be easier to navigate PyCon?
 
00:03:43 KENNEDY: If we could throw some A-star algorithms, to like, say, find the shortest path through all the open doors and stuff, yeah, it'd be easier. Anyone out there do any geospatial queries, things like that? Yeah?
 
00:03:57 OKKEN: Yeah, not queries so much, but we do some geospatial work, and so sometimes, we do that, you know, given an object, find it in yard.
 
00:04:05 KENNEDY: Nice, have you tried GeoAlchemy?
 
00:04:07 OKKEN: No, I haven't, actually I wanted to ask, is that from the same people who brang SQLAlchemy?
 
00:04:11 KENNEDY: I think it's a different group, there's was a thing called GeoAlchemy, and then you could use that, and this is like a re-imagining of the API, so it's like a second edition. So the way it works is, basically, just like SQLAlchemy, you connect to your database, you declare mapping, you declare like the classes, just derived from like, SQLAlchemy base, has a name, an ID, but it can also have columns, like a geometry which is a polygon, and then about that, you can ask questions, like you can go to a, just say, session.query.filter, where this thing contains this point. Or where the area is greater than or less than such and such. And just all sorts of interesting questions. So if you like SQLAlchemy, and you want to ask questions about physical stuff, boom, GeoAlchemy 2.
 
00:04:58 OKKEN: Nice. Well, since we didn't share each other, we have no cool segway between everything.
 
00:05:07 KENNEDY: Not too much, but I got some, I could see what you got here for this one. So we've been on a rant haven't we? A UI rant?
 
00:05:15 OKKEN: Yes, a little bit of UI in the podcast. But one of the things that has come to our attention is Qt is not staying still. What I'm talking about here is, there's another Pyside 2, which is going to be called like,
 
00:05:37 KENNEDY: Qt for Python?
 
00:05:37 OKKEN: Qt for Python. but it's not quite ready yet, but there's actually a lot of Python bindings, that I know of, there's Pyside 2, there PyQt5, there's PyQt4, there's the original Pyside, and there's a couple, and then there's Qt dot Py.
 
00:05:54 KENNEDY: And this is just for Qt, not wxPython, not all the other stuff, right?
 
00:05:58 OKKEN: Yeah, just for Qt. So, two projects, QtPyConvert is a project that converts these interface bindings to an intermediate, which is a shim layer, which is Qt dot Py, which is a minimal, like, build as a minimal Python two and three shim around all of the Qt bindings. And just sort of fun to be able to use one, whatever you've got now, and convert it back and forth.
 
00:06:32 KENNEDY: I think it's a great idea. It's going to be awesome that there are new, better ways to write Python UIs, but there's all this other code that people have written, PyQt4, for example, and this thing will let you sort of, run a converter across it, to adapt from all these different older versions, to like, the new hotness, so it should make it work really well.
 
00:06:52 OKKEN: Yeah, and one of the neat things about this, is it uses a conversion that leaves all your comments in place. It rewrites Python code, but it leaves a bunch of your stuff there.
 
00:07:04 KENNEDY: That's pretty advanced. Yeah, so maybe, but do like a branch or something, before you do that.
 
00:07:08 OKKEN: Yeah, probably.
 
00:07:12 KENNEDY: Alright, anybody got a comment on Python UIs? Alright cool. So I'm really excited for that, I'm excited for Python for Qt, coming, I think that's going to be good, there's a bunch of other stuff, I think, there needs to be more worked on there, as I've said. Alright, so, let me tell all the listeners, and you guys, of our sponsors, so Datadog, who are big supporters of the Python space, they're here at the conference, obviously they've been supporting the show for a long time, so check out Datadog, they're like a monitoring solution, mostly for your distributed applications, so if you got like, microservices, and containers, and all that, you can trace your request from one part to the next to the next, and figure where things are slow, where you're running into errors, all sorts of stuff like that. So get a cool Datadog t-shirt, go to PythonBytes.fm/Datadog, do the tutorial, get a cute dog shirt, it's awesome. Alright, so, Brian we live in a pretty laid back city. Portland, it's pretty chill right?
 
00:08:08 OKKEN: Love it.
 
00:08:09 KENNEDY: Yeah, I love it too man. But even in Portland there is a bit of a sense that people are like, working really hard, and it's almost like a badge of honor, like, aw man, how are you doing, I'm so busy, you wouldn't believe how busy I am, I know you're busy, but I'm like, way more busy. I've got all these projects, and I've got this stuff going on, and that, and there's this great article written that is a reminder that you don't have to be a workaholic to get ahead in tech. So the article is called "You don't have to be a workaholic to win: 13 alternative ways to stand out" And I really really like this, because I feel like there's two things going on that I don't like, one is what I kind of opened with, people like, busy brag, like it's cool to them to be super busy. And so they just tell you how busy they are, and you know, you just one up each other.
 
00:08:52 OKKEN: Yeah, I ran into this guy that says like, yeah I've got two podcasts, I wrote a book.
 
00:09:00 KENNEDY: That's not cool man, that's not cool. And the other one is, like actual tech companies, or other companies that are like, you know what, we're going to put just a fake deadline here, six weeks out and make everybody work overtime, so we can hit it, and they're just like, well what happens if we don't hit it? Well then, my manager will be upset. Like that is not a real deadline, right? Those are not actual deadlines. And so there's just a bunch of great ideas in here. So let me run them by you, see what you think. Oh, by the way, yeah, let me just run through the tips. Hold on. This thing like popped up Anthony. Alright, so here's the tips. The first one is, like, you can be a workaholic, or you can be creative. And if you really try to think differently about solutions, if you're the person that says, yeah we could work all night and we could build this thing this way, or did you know you can pip install a thing? That did this, right, if you just like, think outside of the box, and try to solve a solution, like creativity could be more valued than working hard, yeah? Stubbornness. Stubbornness is not generally considered a good thing, but in programming, like I've had lots of people go, Michael you're so good with computers, you're such a good programmer, how'd you learn this? I tried this, it was hard, it didn't work, I'm just like, well I tried it for three hours, and then it did work, right? Like I tried everything I could think of until it worked, and then just, I wasn't going to quit, and like, that's one of the things you're talking about. You have that experience?
 
00:10:21 OKKEN: So that's a way to work less?
 
00:10:24 KENNEDY: No, that's not a way to work less. But what they're saying is, if you're the person that like, can actually solve the problem, '=because you don't give up on it, rather than just like, ah, we can't do this thing, we got to do something else. That kind of thing, they're all like, pretty interesting little takes. Curiosity. Right, like I'm willing to like, be the person that learns kubernetes, and actually, now we can all go home, cause their deployments don't break, and I don't even have a pager, it's amazing, right, that's cool. Kindness. I really like the kindness one, like if everyone is a jerk, and you're the person that's nice and helps everyone, right, like all of a sudden you become the person in the office or the company, and they're like yeah, go talk to Jeff, man, he'll help you, and he won't insult you at the same time. Planning, planning is good. Improvisation, like sort of the opposite of planning, like, well, things aren't going according to plan, let's fix it, enthusiasm, kind of like kindness. Communication, that's good. Presence, I really like that one.
 
00:11:18 OKKEN: Yes.
 
00:11:19 KENNEDY: Right, like, so many people are like, yeah that's a great idea, mm hmm, yeah I'm going to go work my thing, right, but just like, take the time to be in the moment.
 
00:11:26 OKKEN: That's actually hard.
 
00:11:28 KENNEDY: It's hard, I'm making fun of it but it's hard.
 
00:11:31 OKKEN: Especially in a work environment, you're like, in the middle of something, somebody comes over, if you're going to be interrupted anyway, then really be interrupted and pay attention.
 
00:11:39 KENNEDY: Yeah exactly. Yeah yeah, for sure. I'll keep going, a little bit more collaboration, right, open source, like we're all kind of in that space anyway. Willingness. Honestly I forget what that is about, but I remember it was really good. Patience, also, and then finally, institutional knowledge.
 
00:11:57 OKKEN: Where to lock people up?
 
00:11:58 KENNEDY: Yeah, where the bodies are buried. No, like, "Why do we have that old server there? And can anybody work with it?" Yeah actually, I know where the source code is, and I could fix that for you, right? I don't want to, it's PHP, but I could fix it if I had to. Right, anyway, so do these resonate with you guys? Yeah? Makes me think of, Brian, you had Stephanie, I'm forgetting her last name?
 
00:12:20 OKKEN: Herbert. Yeah, she talked about, your conversation with her was about mentoring, and she talked about her work approach, and how she only works like four hours a day, she does her own data compression, and consultancy, but this also makes me think of a post I've seen from somebody who works with Starbucks' web applications, where they talk about how they pretty much almost burned out the tech industry and then they just had AI institute some of these principles, just made things, actually probably not only more productive at work, just more sustainable for you while working on a personal basis.
 
00:12:58 KENNEDY: Yeah, that's great.
 
00:13:00 OKKEN: Yeah, absolutely.
 
00:13:04 KENNEDY: So, are we going back to World War I?
 
00:13:06 OKKEN: No, we're actually going back to Qt.
 
00:13:08 KENNEDY: Okay. So, pretty much the trenches?
 
00:13:12 OKKEN: Yeah, actually. We just related to that, when I was researching for the QtPyConvert, I was curious as to how they did the conversion while leaving the code comments in place, so I followed the rabbit hole, and there's a project called Red Baron, which I hadn't heard of before, but it calls itself a FST, which is a Full Syntax Tree, so it's a lossless abstract syntax tree thing which you can do queries and modifications, and I think they've got a few uses that they list of possibly renaming a variable in a source file, and making sure that it doesn't clash with anything that's not a variable, like not clashing with things in strings, and other bits. A few handful, like splitting up files, I think this is sort of maybe a tool to build other tools with. I personally wouldn't try to like, write a script of doing this, but if I built it into an ID or something like that.
 
00:14:22 KENNEDY: Yeah, this sounds like this is the foundation of a refactoring tool.
 
00:14:25 OKKEN: Yeah, pretty much, it's awesome.
 
00:14:28 KENNEDY: Loads of tests, but there's no off the shelf thing that's going to do that, but maybe something like this.
 
00:14:34 OKKEN: Yeah, that's really really awesome.
 
00:14:36 KENNEDY: But it's a fun project.
 
00:14:38 OKKEN: Michael, you joke about like, the conversion of two to three, but that's exactly what two to three, the tool, does.
 
00:14:45 KENNEDY: Yeah no, yeah.
 
00:14:46 AUDIENCE: So like, everyone here knows the AST module I hope, it's really cool, and then I guess they call it a full syntax tree, but it's often more broadly referred to as a CST or Concrete Syntax Tree.
 
00:14:56 KENNEDY: Okay, nice.
 
00:14:57 AUDIENCE: And so that's what two to three is based on, it's also what the new Black code formatting tool is based on, right, brcause it has to maintain comments and all these things that otherwise go away with the AST.
 
00:15:10 KENNEDY: Right, that's awesome, yeah, thanks for that. Yeah, Black is awesome we covered it before. You got to like the color. Alright, so I want to close out the official items with something pretty cool here, so our booth is right next to the BeeWare guys, and the BeeWare guys are trying to fill another major hole that I see in the Python space, which is really around packaging, and especially mobile, right? Like, they're trying to build native apps in Python, and I've been a little bit of a, I've criticized them a little bit previously, saying, you guys, there's not really many demos, and not a lot of screenshots, you got to like, show me where this stuff is if you expect people to use it, right? Well, so one of the announcements this week is that project BeeWare just launched an app in the Apple app store. I guess straight up approved by Apple, install it on your phone and it does stuff. It's not super advanced, it's basically like, gives you currency conversions, and tip calculations, like how much do I need to tip in like, RMB, you know. It's things like that, but, it's really cool that there's an example of a BeeWare app in the app store.
 
00:16:17 OKKEN: Is it up on Git source?
 
00:16:19 KENNEDY: I'm sure that it is, I haven't looked at the source code, but yeah, I'm sure that they've got it up there. The link I have, I think either goes to an article, or straight to the app store, and it's pretty cool, so it uses Briefcase and Toga, and Briefcase is a tool for converting a Python project into a standalone native app on Mac, Windows, Linux, iPad, iPhone, Android, Apple TV, and TVOS. Actually, you know what, are those different? Anyway, yeah, Apple TV and TVOS, awesome. So it's pretty cool. It's like a first step, I was talking to Keith Russell Magee about it, and he's pretty excited, but it's just the first step. But if you guys are looking to contribute to open source, they're really really big at accepting new folks. A really great project for that.
 
00:17:06 OKKEN: And you get a token.
 
00:17:07 KENNEDY: And you get a cool token, like a token to say I contributed to the BeeWare project.
 
00:17:13 OKKEN: Yeah, I was actually talking with-
 
00:17:16 KENNEDY: Russell.
 
00:17:18 OKKEN: And one of the parts of their system is Cricket, which is a testing GUI. And it doesn't handle Pytest, but that's one of the things they'd like to have somebody work on, is to try to convert. Oh are you going to add Pytest to Cricket? I'll look into it. I'm bringing this up now to recruit anybody else that wants to help out with that, because I would definitely try it out more if it already had a Pytest link. Yeah that's awesome, yeah, you gave your talk on visual testing with PyCharm, which is awesome, and it's going to be on WhatsApp that I will mention in a second, but that's sort of another analogous thing right, like a GUI for running your tests and your projects.
 
00:18:03 KENNEDY: Yeah, so we use PyCharm for the test runner part, but this would be just a standalone test runner without an IDE.
 
00:18:10 OKKEN: Yeah, exactly, no editing just the running. It's easier to fix a test if you don't have to edit.
 
00:18:16 KENNEDY: Alright, well I think that's it for all of our items that we have for you guys this week, I have a few extra things I want to throw out, actually this one more to the listeners, so first of all, all the videos, except for things like this, are recorded and put online, so already the videos from PyCon 2018 are live and people can check them out, right?
 
00:18:36 OKKEN: There's some.
 
00:18:37 KENNEDY: Yeah, not all of them, but they're coming in, they're a day or two latency there, that's pretty good though for video. So just go to YouTube.com/PyCon2018. The other one is not so good. Apparently there was some package that caused some trouble, like previously, remember we talked about there being bad packages getting into the App Store- not app store, the pip, PyPI. So there's some Reddit post that says, "Hey guys, you should be a little bit careful with SSH-decorator package." And it says, "Don't install it or use it from pip, it has a backdoor to steal all your SSH credentials." And if that's true, you should not have this running anymore, and you should uninstall it. I don't know, but the people say the compromised package has been taken down, they reached out to the developers, and initially there was no response, but apparently it's gone now, so, you can't update it. But if you already have it you should not have it anymore. So just like, a sort of PSA, public service announcement, Don't use that. Yeah? Anything else you want to add Brian?
 
00:19:44 OKKEN: No, I'm just having a great time at PyCon.
 
00:19:46 KENNEDY: Yeah, PyCon is awesome, I call this my geek holiday. I try to refrain telling my wife that, because she's like, you just got back from geek holiday, and I'm like no I'm really actually tired, I need to rest, no you need to take the kids and do this and do that, and it's alright, but I really love coming here, and like I really look forward to meeting everybody, and having these experiences.
 
00:20:06 OKKEN: It's exhausting.
 
00:20:07 KENNEDY: It's exhausting in an amazing way.
 
00:20:08 OKKEN: Talk with nerd stuff all day long, and then go out and have dinner and drinks with nerds.
 
00:20:13 KENNEDY: I know, I had to have cocktails yesterday, it was really hard. Alright, so how about everyone in the audience, you guys want to just close it out, say "Goodbye from PyCon"?
 
00:20:26 AUDIENCE: Goodbye from PyCon!
 
00:20:28 KENNEDY: Woohoo, Thank you everyone for listening, thank you for being here for this live recording.
 
00:20:39 OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.fm. If you have a news item you want featured, just visit PythonBytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
