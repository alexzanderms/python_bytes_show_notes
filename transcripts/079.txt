00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 79, recorded May 23, 2018. I'm Michael Kennedy.
 
00:00:08 OKKEN: I'm Brian Okken.
 
00:00:10 KENNEDY: Hey Brian, how you doing?
 
00:00:10 OKKEN: I'm doing great.
 
00:00:11 KENNEDY: Nice, I think, as always, we've got a bunch of fun stuff to talk about and we wouldn't be doing it without DigitalOcean. A couple reasons, but DigitalOcean is sponsoring this episode and a bunch of the upcoming ones, so thank you to DigitalOcean. Get $100 off, or $100 credit at PythonBytes.fm/DigitalOcean for new customers, tell you more about that later. I would be totally surprised, Brian, if you wanted to cover something about, say, testing or pytest.
 
00:00:38 OKKEN: Yeah, so pytest 3.6.0 just got announced. 3.6.0 for pytest, and this is, this is like a inside baseball kind of release, because there's not a lot that, if, I think 80% of the people using pytest won't see a difference. But however, this was a big deal for the team. Essentially, it's a revamp of the implementation of the marker system and the data type that was used to hold the markers. There was a couple other things, but that's the big thing that's going on in the 3.6.0 release, is reworking of the markers, and there's a list on their release notes of all the different defects that they've fixed with this. The takeaway for a lot of people is, if you are using, if you're writing a plugin or something, or using the plugin features, and using Get Marker to find out which markers are applied to a particular function, the Get Marker is deprecated. There's a new API, there's iter markers and get closest marker, and yeah, we'll have a link in the show notes to read more on that, so most of it is a plugin writers change, API change, but it's exciting and I'm excited for the team to get that out because, kind of like the Django 2 release, it's about maintenance and going forward, and so that's great. There was one more feature that we, from a couple other things, a breakpoint, pytest is supporting the breakpoint functionality in 3.7 and that is brought to you by our friend, Anthony Shaw. So he put that in.
 
00:02:12 KENNEDY: Oh, nice! Yeah, he's doing a lot of work on Python 3.7 because rumor is, he may be doing a course on Python 3.7, so, awesome, he was able to bring it over here.
 
00:02:22 OKKEN: A couple of other smaller things, like, apparently, I had never run into this, but if you have an assertion failure on equality and the only thing different is white space, it's kind of hard to tell, so they now escape, do escape characters too, so you can see what the white space difference is a little bit better, which is kind of cool. I've never run into that, but.
 
00:02:43 KENNEDY: Yeah, that is a little hard. You print it and out and you're like, they're the same! Oh no, that's two spaces, not one, right there.
 
00:02:49 OKKEN: Yeah, so, for the main part, I wanted to get this out to as many people as possible so if you are depending on reading markers in your internal code, pay attention to this. That's it.
 
00:03:01 KENNEDY: Yeah, that sounds like a nice cleanup of the internal APIs for extension writers and that's always good, because that probably means more extensions. Extensions are more likely to be built.
 
00:03:09 OKKEN: Yep.
 
00:03:09 KENNEDY: Sounds good. So, have we talked about GUIs, Python GUIs, on this podcast enough?
 
00:03:14 OKKEN: I'm not sure if we have. We probably should.
 
00:03:16 KENNEDY: We probably should, yeah, let's do that. There's a lot of stuff going on. A part of the reason I went on that rant is because stuff needs to be happening there but also because some things are happening like we have the wxPython Phoenix release which is kind of a rebirth of wxPython which is really great. Well, we also have the same thing going on for Qt, so, for a while, there was just sort of a split. There was PyQT, there was PySide, there was PySide 2, there were all these ways. They depended on different versions of QT and it was kind of just generally a mess. So, the Qt company is now officially making something called Qt for Python, which as far as I can tell is more or less a rebirth of PySide 2, for what that's worth. So it's really nice that the company that makes Qt, the cross-platform GUI framework is really dedicating itself to Python. One of the things that I think is cool about the Qt space is they have the Qt designer and I think that's really nice and important for having a visual way to design the UI. I know you can write code and say the position is 20, 20 and it stretches this wide, but like, that is not the same as draggy droppy, press the button. You know what I mean? So I got a lot of, I'm pretty excited about this, let's say, so that's really cool that basically we're keeping it super similar to the Qt C++ API, where that makes sense, so if you read documentation about C++, which is the native language for Qt, if you replace the pointer de-reference so the arrow, the dash-arrow, you can just replace that with a dot, that may well be the Python API.
 
00:04:59 OKKEN: Hm, okay.
 
00:05:00 KENNEDY: Which is good, but some of the problem, some of the drawbacks, let's say, of that, are it doesn't necessarily leverage the Pythonic features, so maybe you call a function to do a thing rather than put a decorator onto something else. Things like that. One thing that is nice is, a lot of these UI frameworks are super painful to install, right? You go to install them on the system and then they don't work so well. Maybe there's some big long compilation stuff, like, wxPython takes forever to pip install it onto Ubuntu, the last time I tried doing that, so they're planning on shipping a wheels version of Qt which before, you had to get some separate installer or something, so, that will be pretty sweet, that you'll just be able to pip install your thing and it will come with the foundational stuff you need.
 
00:05:44 OKKEN: That's exciting.
 
00:05:45 KENNEDY: Yeah, that is pretty cool, right? I really hope that the company behind QT putting a big effort into this is going to mean finally a polished version, so, we'll see. The licensing might still be GPL and LGPL, so, as a combination, take your pick. I'm not sure what the variations are exactly there, but, I don't know, I like to see something more permissive, but, who knows? Still, still nice to see some progress here.
 
00:06:13 OKKEN: So do you know, I was trying to find it, do you know the projected release date for the official Qt for Python? Or is that...
 
00:06:21 KENNEDY: They're talking about, so, the article I'm linking to, it's a blog post calling Hello Qt For Python, and they say they're working on a technology preview, so, that's all I've seen, but they don't seem to have any further information that I easily found, maybe somewhere else. Yeah, so it'll be, it does say it'll be available under GPL, LGPL, and commercial licenses. It talks about when development started and stuff like that, but it doesn't seem to have a release date, so, there it is.
 
00:06:51 OKKEN: All right, cool.
 
00:06:51 KENNEDY: Nice.
 
00:06:53 OKKEN: Well, speaking of sneak peeks on things, we've got, we've talked about MongoDB, the 4.0 release that's coming. We've talked about that before, but now you can play with it, so, the 4.0, the 4.0.0, RC 0 is now available.
 
00:07:11 KENNEDY: It's the very 0th version of the RC.
 
00:07:13 OKKEN: Yes, there's a lot of zeroes there. Yeah, so that is out and ready for testing so people can actually get their hands on it and try working the, again the big news for this, there's a lot of new features, but the big news is ACID transactions, and multi document.
 
00:07:29 KENNEDY: Multi-document ACID transactions, yes. That's a pretty big deal.
 
00:07:33 OKKEN: I actually don't know if this is a big deal. There's a lot of things here, but non blocking secondary reads, I don't even know if I know what that means.
 
00:07:41 KENNEDY: The idea with the non blocking secondary reads is one of the ways you can set up MongoDB is in what's called a replica set, so there's a primary thing that you read and write to, and then there are other ones which are constantly just staying in sync with that server. There's a couple of benefits to that, like, you could put them into, say, different data centers. The primary thing is if for some reason, the main server, the primary server, fails, it'll automatically switch to one of the secondary ones, so it's kind of like a failover redundancy sort of thing, as well. But you can configure it in a way that you can say, I would like to read from the non-primary database as a way of adding read scalability, so if I have five servers in a cluster, if I don't do anything, I can only talk to the primary one, as a single server, and I get no boost of concurrency, let's say, but if you say, I want to read from the others, well then, all of a sudden, there's like, you sort of farm it out across six different servers, primary plus the other five or whatever. Right, that used to block for consistency reasons, and now apparently they found a different way to ensure consistency, maybe because of the transactions. Anyway, that's a long, long explanation for what I think that means.
 
00:09:02 OKKEN: That does make sense, and that's cool. At least I know that there are a lot of people that choose a SQL database over a document database mostly because of the lack of transactions and so that's one of the reasons why I brought this up, because I'm excited about transactions.
 
00:09:17 KENNEDY: Yeah, I think that's super exciting as well, for the reason you just said. What I do think is interesting is, as people get to more serious applications, they get to a place where often, they give up transactions anyway for sort of concurrency, right, like, you know, if I go to Amazon, and I go to order something, it's not going to lock all of Amazon while I interact with my order. What it's going to do is like, say we'll place the order and if it happens to be that actually, the thing you ordered sort of sold out just at the moment that you pressed it, you'll get a message or something, right? Like, hey, sorry, we couldn't fulfill it or whatever, here's your refund. So there's a lot of these sort of compensation things that get put into high scalability stuff. I just grabbed Amazon as an example. I don't really know how they work, but, you know, there's a lot of these large sites that sort of don't use full-on transactions in the same sense that other ones do, so it's pretty interesting. It's interesting in that I don't really think transactions are something I'm going to be using in any of my sites. They just don't really seem to be necessary, with a few possible exceptions, so I'll get to what those might be in a little bit, but, yeah, it's, I think you're right that people, when people feel they need it, or there are a few situations where you really do need it, this is super interesting. One other thing that's kind of cool that's not a 4.0 thing, but is in a 3.6, which is the one right before this, as far as I know, is actually the streaming API. If I've got, say, WebSockets or something that I want notification of push of change to the database, you could run a query and say, I want to stream new results that hit this query and then as stuff is inserted to the database that matches, it'll get pushed out to you instead of re-pulling the database. So suppose I connect to a chat server and I set up WebSockets, you could literally subscribe to these change streams on the conversation record and you would just get them pushed back down instantly, without any polling intent. That's pretty cool. It's kind of like RethinkDB's feature, primary feature was.
 
00:11:24 OKKEN: I guess where I would probably use transactions a lot, and it's not really transactions, but because of transactions, you can do this, is, I believe, 4.0 also includes rollback checkpoints. For instance, you can grab a replica of a big data database or something, and for instance, for during testing, you can have a starting point, do a whole bunch of transactions on it, query it, and then roll back to a previous state.
 
00:11:54 KENNEDY: Yeah, that is pretty cool, and I think maybe that secondary non blocking read stuff has to do with that as well. You sort of begin a transaction, you start reading.
 
00:12:01 OKKEN: Yeah, anyway.
 
00:12:01 KENNEDY: Yeah, yeah, very cool. So I'm glad to see that that's coming along. I feel like the NoSQL document database world and the relational world are kind of merging, like they're getting closer to each other in a lot of ways. We have Postgres getting JSON stuff. We get MongoDB getting transactions, and they're all kind of sort of growing, and intersecting in interesting ways. Speaking of interesting, Digital Ocean's pretty interesting. They're doing a lot of good stuff for us, so, like, the files that you're getting when you download the podcast, the website, all that stuff is running on Digital Ocean's servers and I'm a super, super happy customer of theirs, and they're sponsoring the show as well, so one of the things that's cool, maybe I mentioned this a while ago, Brian, is their sort of one click app server configuration, so if I want to create, say, a server with MongoDB, I'll configure it. I can go there, say create me a droplet with this version of Mongo, or, with this other web framework setup, and it will automatically create all of the server configuration and have everything set up and ready to go within like 60 seconds, so, really really nice, and, probably the biggest thing, if you are not using Digital Ocean, you can get a hundred dollar credit by going to pythonbytes.fm/digitalocean, so that's a pretty good deal.
 
00:13:17 OKKEN: Yeah, that's great.
 
00:13:19 KENNEDY: Yeah, awesome. So if you're looking for a nice, affordable, fair, and very fast server hosting, check them out, pythonbytes.fm/digitalocean.
 
00:13:28 OKKEN: So, Michael, have we talked about Pipenv in the show before?
 
00:13:32 KENNEDY: If I recall correctly, I think we were confused about Pipenv. I was confused about Pipenv. Basically, you know, I, or surprised, maybe, is the right word, that Pipenv became sort of the official, officially recommended way of the packaging authority in Python, to manage packages. I'm like, oh, when did that happen? That was pretty interesting. There's been a lot of debate, and you said there was kind of a coarse Reddit thread, like imagine, Reddit was unkind to people. Could you imagine?
 
00:14:00 OKKEN: Right, yeah.
 
00:14:04 KENNEDY: That's unfortunate, but I think it's too bad that that kind of stuff happens and maybe we should all just speak up, like, hey, like, that comment is out of bounds, right? Anyway, I'm not going to link to it, I don't want to encourage it, but I do want to link to this thing called Pipenv Review after using it in production. So there's this team that used Pipenv in production since November 2017, so what is that? A little over half a year, maybe almost exactly half a year. And this sort of comes, they talk about, this is what worked for us, this is what wasn't working so well for us, and in the end, they're like, at no point did anyone in the team ever mention getting rid of Pipenv, which actually is a pretty strong statement, apparently, so, if nobody said, no, we've got to get rid of this, it's just like, ah, it's not quite working in some way, so here, I'll give you the rundown. The article starts off pretty accurately. It says, the current state of Python's packaging is awful. I don't think anyone would disagree with that. The problem is recognized and there are many attempts trying to solve the mess, and Pipenv was the first and it did get a lot of traction, but not everyone loved it, and he said, one of the areas where Pipenv can be a challenge is for libraries. So Pipenv is around, is more built for managing the dependency of an application, but if you're a library author, that, it doesn't necessarily make a lot of sense.
 
00:15:24 OKKEN: Yeah, I'm on the fence on that.
 
00:15:25 KENNEDY: Sure, sorry, I forgot the guy's name. The reason that he said this was basically, supporting multiple environments goes against Pipenv's philosophy. All right, so, they want a deterministic, reproducible application environment, but, you know, if you're going to do that for, say, PyPI and Python 2.7, and Python 3.6 or whatever, well, then, it doesn't really work, potentially, right, because it's, you know, wants exact hashes of the exact libraries and if those don't match, then, you're out of luck, right? So that's a challenge. I think that's the primary challenge.
 
00:16:04 OKKEN: I agree with that. It was just, partly I think it's a miscommunication. Pipenv was never intended to work for every library sort of use, because libraries, by definition, they don't have their dependencies pinned. It's at the application level where you pin your dependencies.
 
00:16:23 KENNEDY: You say that there's this miscommunication, and I definitely think you're right because when I looked at Pipenv on GitHub, I really saw that as the statement, Pipenv is the officially recommended tool for managing application dependencies from PyPA, as Pipenv is the officially recommended tool for managing Python dependencies, where really, the application should have been bolded, underlined and all caps. Something to that effect, right?
 
00:16:52 OKKEN: Right.
 
00:16:52 KENNEDY: So, pretty interesting. But, yeah, I think, generally their review of it was good, so I'll try to give you the quick rundown here. Pipfile and Pipfile.lock really are superior to requirements.txt by a ton, and the guy said, hey, I first disliked having Flake8 and a security checking tool all built into one thing, but I think it's actually great. Installing from private repositories, it works really well. Creating a new pip file is easy. No problems introducing Pipenv to new users or installing from a mixture of indexes and Git repos, so that was all really good. Virtual env is much easier to get into and understand now. Let's see, dependencies can be easily installed into a system like Docker, and finally, like I said, no one proposed getting rid of it. There were just a few edge cases, mostly around the library side of things, so, yeah, pretty good, but if you're thinking about using Pipenv in production, check this article out. It's got some good discussion and a lot of followup as well.
 
00:17:59 OKKEN: I want to add that I was, for library development, I am going to start, I haven't been using it, but I'm going to start using it, not from the standpoint of handling all of the dependencies for the library dependencies, but more, because the setup.py does that. But the transitive dependencies and also mostly the developer dependencies, so Pipenv has a developer feature where you can either create the environment for running or create the environment for development and those can be different, and traditionally, we've had our requirements underscore dev or something like that, but it's just, you kind of have to know it's there. For that reason, I'm going to try Pipenv. The other reason is the dash dash run flag, to be able to run in the environment without activating the environment, is going to be useful for things like Jenkins runs and things like that. I'm going to give it a shot. I don't have a report yet, but I'm going to start using this as well.
 
00:18:57 KENNEDY: Yeah, sounds good. You're going to have to give us a report after a while, though.
 
00:19:00 OKKEN: Yeah, definitely.
 
00:19:02 KENNEDY: Nice. All right, so you've got some stuff for GitHub flow, the whole sort of working in GitHub PR, submitting issues, open source goodness, yeah?
 
00:19:11 OKKEN: I've had a development team that's migrating to both, a lot of changes in our development workflow, but one of the things is using Git more and we're using GitLab at work, but this is, so a lot of these, some of these, I didn't use GitHub before open source projects, of course, but here's an article called "15 Tips To Enhance Your GitHub Workflow," or GitHub Flow, and they, a lot of these apply to both GitHub and GitLab. Some of them are GitHub only, but there's some things that you just sort of need to know about the culture around Git and GitHub and GitLab and everything, that you don't actually, it isn't obvious from the start, so I like having an article that calls out a lot of these things, like, one of, it talks about, I'm not using projects yet, but I'd like to try to use projects to prioritize issues and maybe track progress and plan for what's going in which broad release and stuff, maybe, if that's built in, may as well try it. I'm using tags on issues. I've started using that. I know we have tags on a lot of open source projects like, what is it, Help Wanted, and things like that. There's some standard ones. Getting to know those are good. Templates are something that really, I, so a lot of the stuff isn't stuff I know about yet. It's stuff I wanted to start using. Templates are something like, if somebody does a pull request against your project, having some predefined stuff filled in for them to know what to fill in, and the default template is sometimes kind of lame for certain projects, like, I've got a library that the default one asks for an operating system. Well, I don't really care. It's not going to affect the library I'm using. If the issue is really hard to reproduce, I'll ask somebody and say hey, this is, I'm trying to reproduce it here and I can't reproduce it. Anyway, there's a whole bunch of great things, like squash down. One of the things I didn't know about at first was squashing pull requests, and squashing commits. That's something that is totally foreign to other, if you're coming to Git from other revision control systems, so there's just a good list of a whole bunch of goodies.
 
00:21:20 KENNEDY: Yeah, that's really cool, and I like the automated tests and checks on pull requests, like that's really nice. Like, if I do a PR to someone else's repo and my PR automatically gets tested like Flake8ed or whatever they're wanting to have checked, right, that can tell me right away before they get back to me, oh, there's a step I missed. Let me fix that, and then, you know, resubmit the PR or just update the PR, and then have it rerun and go, okay, now everything's good, and I'm sure that on the other side of things, if someone is running a project and it's already passing all that before they even get to it, they can take it more seriously.
 
00:21:57 OKKEN: Yeah, and that helps you with even, you know, you're splitting up branches and so you're going to have tests running on multiple branches, which is nice to, if you have a long running development feature, and then one of the things I want to play with here is, there's a discussion in some, about pre-commit hooks and hooking things like Black up to your pre-commit hook to make sure the styling is correct.
 
00:22:19 KENNEDY: Oh, nice, yeah, instead of asking, just change it. Your styling is wrong, you need to break that line. Fine, we did that for you. That's pretty cool. All right, so the last one I got, Brian, is just a feel good story, Python versus legacy Python, that type of thing. Pandas goes Python-only, no more legacy Python for pandas.
 
00:22:39 OKKEN: Wow, that's cool.
 
00:22:39 KENNEDY: That's a pretty big deal. Like, pandas in the data science base is one of the true foundational items. Maybe it's more popular than any of the others. I feel like people almost always start with pandas and then once they get their data processed, they like, move to another library, so, pandas going Python 3 only is really awesome. I got this off of Twitter from Randy Olson, thank you for that, and basically, they're following NumPy's lead. Remember NumPy's going Python 3 only, so officially, starting January 1st, 2019, which is not that far away, seven months-ish, six months, pandas will drop support for legacy Python and this includes no back ports of security or bug fixes. The final release will be the day before, and that one's going to support Python 2 and we're just going to leave it there, apparently.
 
00:23:27 OKKEN: Hm, yeah.
 
00:23:28 KENNEDY: I feel like data science has got a little bit of an edge on the Python 3 story for everyone and partly because they've come into the ecosystem as a large group more recently than, say, the web developers or the automator folks who have been around for a long time. The data science stuff has really exploded 2012 and onward, so, it was a slightly easier choice.
 
00:23:53 OKKEN: Yeah, I think so.
 
00:23:53 KENNEDY: Yeah, pretty cool. All right, well, that's it for our news. Anything personal you want to share?
 
00:23:58 OKKEN: No, I'm just excited to get back to podcasting and stuff. It's been good.
 
00:24:02 KENNEDY: I know. It was a lot of fun to do the live one, though, at PyCon, right, like, nobody cheered for us today. Not that we've heard anyway, right? It was so fun to just be in the, and get the...
 
00:24:12 OKKEN: Yeah, and nobody laughed at my jokes, yeah.
 
00:24:14 KENNEDY: Maybe they did, we'll just never know.
 
00:24:17 OKKEN: Maybe we need a sound.
 
00:24:18 KENNEDY: Yeah, like one of those fake audience tracks. No, that'll take away from the real ones. We'll do some more live ones. We're talking about it, right?
 
00:24:24 OKKEN: Yeah, definitely, that would be, it was so fun, we want to do more.
 
00:24:27 KENNEDY: Yeah, maybe we can do some more. We'll figure that out. Are you excited? It's GDPR eve.
 
00:24:32 OKKEN: Yeah, the only, well, yeah. GD, I don't know how that really affects me, but I'm telling people that's why I forget their names so quickly, is because I'm complying with GDPR.
 
00:24:42 KENNEDY: Oh, man. I have very mixed feelings about GDPR. Like, I am a fan of privacy and respecting data stuff. I'm not a fan of some of the ways in which they're going about it, I mean, like, it's a tech requirement written by non-technical people, for starters.
 
00:25:00 OKKEN: Do you have to change, like, for instance, the courses site, of yours, or?
 
00:25:04 KENNEDY: We have to, I've been doing nothing but 10 hours a day of GDPR programming all week.
 
00:25:10 OKKEN: Oh, jeez.
 
00:25:10 KENNEDY: Yeah, and I'm not done. I've got one or two more days, and what drives me crazy about this is, I'm an American company, 100% in America, and like that Europe has these rules that apply to us, which, it's not about Europe or America, like, what if India decides later that they have other rules that are inconsistent with what I've done for GDPR, and then, Brazil has other rules? I just think it's kind of crazy to say, like, lawmakers in one country can impose their will on all of the world through these laws. It's kind of funky, but, I'm going to do it because I pretty much have to, so if you, basically, the reason I'm throwing this out there is if you run a site where you've got, like, say, a mailing list or people buy stuff or you collect user data, just be sure to be really careful and look into this. And also, we talked about environments and we talked about Pipenv, and various other bits of packaging, so I just wanted to give a quick shout out to the XKCD Python Environment cartoon which came out a few weeks ago. That would be XKCD.com/1987. It was just about the sort of madness, so, my Python environment has become so degraded that my laptop has been declared a Superfund site. It's got Homebrew for Python. It's got the OS Python Anaconda. It's got pip, another pip, easyinstall.
 
00:26:34 OKKEN: Okay, that's funny.
 
00:26:34 KENNEDY: It's pretty good, right?
 
00:26:36 OKKEN: Yeah, I think I, we'll probably try to, I'm going to link to the, Kenneth Reitz's, Reitz's, Reitz? I should just stop trying to pronounce names. His PyCon talk, because there was a lot of stuff in there about like the history of packaging that I didn't know about, so, it's a good listen.
 
00:26:54 KENNEDY: Yeah, you should definitely link to that, that's awesome. All right, well, thank you, Kenneth, for working on Pipenv, and thank you Brian for sharing everything with all of our listeners.
 
00:27:04 OKKEN: Thank you.
 
00:27:06 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's Python Bytes as in B Y T E S, and get the full show notes at PythonBytes.fm. If you have a news item you want featured, just visit PythonBytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
