00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode 80 recorded May 25, 2018. I am Michael Kennedy.
 
00:00:11 OKKEN: I'm Brian Okken.
 
00:00:12 KENNEDY: Brian, we have a special guest, don't we?
 
00:00:13 OKKEN: Yes.
 
00:00:14 KENNEDY: Hey, hello Dan Bader.
 
00:00:16 BADER: Hey guys, it's me Dan. Good to be back on the show and it's always so nice to hear you do this intro live, Mike. It's, uh.
 
00:00:24 KENNEDY: Thank you.
 
00:00:25 OKKEN: It's unreal it's like and you sound so smooth. I love it.
 
00:00:28 KENNEDY: I guess I've done it 80 times now. Maybe 82 or 83 from the few times I screwed up with the wrong date. Well thank you and it's great to have you. For those of you who don't know Dan, Dan's well known from Real Python and dbader.org and a bunch of Python goodness. Before we get to this show, I want to say thank you to DigitalOcean. They're sponsoring this episode and a number of them coming up as well as the actual infrastructure delivering all of this technology to you. So pythonbytes.fm slash DigitalOcean get a $100 credit for new users, pretty awesome. Brian, I feel like there's a few themes that we touch on frequently in this podcast.
 
00:01:07 OKKEN: Yeah, I guess we do then. One of them is packaging. So we've talked about packaging a few times and the Python Packaging Authority has their tutorial on how to package Python packages. And it used to be out of date, but now they've recently revamped it and rewritten it and it's very user friendly now. It's a short little walkthrough of how to set up a package and push it to the both the test server and then to the full Python package index, PyPI. Yeah, I got that out. One of the thing's that's kind of fun to note is, that I noted is the read me example is in markdown and that's cool.
 
00:01:49 KENNEDY: And that's a new feature, right? That's one of the things of them switching to Warehouse and the big release of the new pypi.org. I think I remember the old examples for setup.py, they were either like too small, they didn't like include everything they needed or they were too big and kind of scary, and now this is a medium size example setup.py that is actually pretty nice. I read through it and it looked like the same tool set that I use to push up, so I think it's pretty accurate now. So that's nice.
 
00:02:18 OKKEN: Nice, so you didn't feel like you were super out of date you're like, why am I not using this or using that?
 
00:02:22 KENNEDY: Yeah, because when I learned how to do it the first time, I think I read both the old tutorial and then like four or five or six different blog articles on how to do it now and how to do it now because it changed. But now this is all up to date, so it's good.
 
00:02:36 OKKEN: Very nice. Dan, do you do much packaging?
 
00:02:38 BADER: Yes, I run a couple of open source projects and I always felt like exactly like what you were just saying, Brian, where I have to combine a couple of tutorials just to get it to work and it never really felt all that straightforward and so I think this is pretty nice and pretty minimal, right? I like that and I'm surprised that the recommendation now seems to be to use markdown based read me files. Like, I really like markdown. I really warmed up to restructured text so much and it's definitely cool that they're supporting that now. That's awesome.
 
00:03:07 KENNEDY: I think restructured text maybe predated markdown and it was the thing when the original PyPI was created and then just like that thing was calcified and they're like, let's not touch this. Let's just not mess with this. Let's just keep it running, right? It was really good to see that getting a fresh update. Also Brian, you talk about Twine in here. What's the story with Twine?
 
00:03:29 OKKEN: I don't know if there's a story with it. That's just the tool you use to push things up to PyPI.
 
00:03:36 KENNEDY: Oh nice. I probably used it and didn't realize it or forgot that I used it.
 
00:03:39 OKKEN: Maybe there's another way, but that's what I've always used.
 
00:03:42 KENNEDY: Yeah, cool.
 
00:03:42 BADER: Actually, there's a cool project to throw in the mix here. It's called Flit, F-L-I-T and it's, well what's good way to describe it? It's a minimal, simple way to put Python packages on PyPI, so they kind of completely done away with the setup.py. Instead, you write an __init__ file where you just put in your author name and your homepage or whatever and it generates all of that other stuff. And it might not be really necessary anymore now if you have like a release or short and sweet tutorial like the one that we were just talking about, but it is super super beginner friendly, this Flit thing.
 
00:04:19 OKKEN: Oh that's cool.
 
00:04:20 KENNEDY: Nice, that's F-L-I-T?
 
00:04:21 BADER: It's F-L-I-T, yeah.
 
00:04:22 KENNEDY: Awesome. Alright, and so that's probably on GitHub, isn't it Dan?
 
00:04:25 BADER: Yes it is. Nice transition.
 
00:04:28 KENNEDY: So the next thing you have for us is an async library for calling GitHub's API.
 
00:04:32 BADER: Yeah, yeah. I was going to talk about this thing called Gigithub, which is yeah, a Python wrapper around the GitHub API. Basically it allows you to talk to GitHub and you can interact with all the different content types that GitHub provides or exposes, so you can add and modify issues, you can create pull requests, you can add comments to pull requests, you can download all the comments to pull requests and all that stuff. The other thing it does, it allows you to parse GitHub's web hooks so you can configure GitHub so that every time a new pull request or something like that is created, it sends, essentially calls an API callback on the web, like on some URL that you give it. And so what you can use Gigithub for is a really nice and clean way to write GitHub bots with Python essentially. It's just a really cool library and I think its API is super well designed, so we were recently using it on a workshop that we did in Vancouver, or like Marietta, who is a CPython core developer who did it and I sort of TAed and was running around helping her and so she wrote a really cool tutorial about how to use Gigithub. It's just a really nice example from modern Python web API library.
 
00:05:48 KENNEDY: It looks really great. And so you just go over here and you say like, I'd like to open a PR. So you get some PR data, then you say await GitHub dot post and all your methods are async. Yeah, definitely nice and scalable. It looks like it's based on aiohttp, which is a really nice client side, async enabled rest library.
 
00:06:12 BADER: What's really really cool about this Gigithub thing is that it's actually abstracting away from the actual backend I want to say. What the actual library you use to talk to or to handle those web requests whether incoming or outbound, so I just learned that this is referred to as a sans-I/O library. So basically it's just a protocol implementation that doesn't really specify how the I/O is preformed. So it allows you to plug in different backends, different concrete implementations that make this thing super reusable because well, if there's a new async library you know, that flavor of the day kind of thing in a couple of months, then well, you can probably just plug that in and work with that, so it's kind of nice. It's really well designed.
 
00:06:56 KENNEDY: Yeah, so you can use aiohttp, you can use Tornado. Yeah I was, and recently we covered it on the show this thing called unsync instead of async, U-N sync, and it's a different implementation with a different thing, a different event loop thing. Maybe you can use that here as well. That's pretty awesome. I like it, nice pick.
 
00:07:18 BADER: Nice, yeah. It's nice to use, super friendly.
 
00:07:20 KENNEDY: Yeah, Brian do you guys do any Github automation? You just started with Git at your organization, right?
 
00:07:25 OKKEN: We're doing a, we've got a private server, so we don't go through GitHub for work stuff, but I use GitHub all the time.
 
00:07:32 KENNEDY: Yeah, of course.
 
00:07:32 OKKEN: Locally, so.
 
00:07:33 KENNEDY: Yeah, nice. Yeah, I feel like this kind of automation is more relevant and useful when either you're building an app or you have like a big organization and you want to automate your company's interaction with GitHub, right? Me as an individual, I just don't really see a massive use of this for me because I just don't do that much different other than what I personally do with GitHub, but I think it looks pretty cool and I love the way it works.
 
00:07:59 OKKEN: Some uses where you would often use like Travis or something like that, like if you were watching different, if your project depended on a bunch of dependencies and you wanted to when if they changed, pull them in and run your build, repackage everything and run some tests against it, you could do that locally with something like this.
 
00:08:16 KENNEDY: Yeah, that's pretty cool. Or you have that one person on your team that often breaks the build, so you run extra tests when you see them do a check in.
 
00:08:24 OKKEN: Harassment bots that just goes in and. Be careful.
 
00:08:30 KENNEDY: Yeah, I think they use it on CPython. They moved all the source for that to GitHub and I think now they run a couple of bots that, I think one of the things they do is so when you contribute to CPython, they need you to sign an agreement that you're giving up the rights. Essentially free contributions, and so they, I think Marietta actually runs that bot. I might be mistaken here, but it's a bot that checks if that committer or that contributor already has given their permission, and if they didn't yet then it's just going to ask them to do it and it sets a flag on the PR. So it's super cool that way when you can sort of code up a work flow like that that you never have to worry about again in your life because it's 100% automated. So I think it's great for that sort of use case.
 
00:09:11 OKKEN: That is a great use case. Yeah, that's really really awesome. Okay, so the next one that I wanted to talk about actually was recommended to me, recommended to me and Brian because of some stuff I've recently been doing. I think, we were all at PyCon. I think maybe we were all the same meeting or get together and I just decided like that's it. I'm writing a Python systemd daemon that will synchronize all of my course data geo, basically across the various servers and the different locations. There's like eight or nine places in the world that serve up course content based on where you are, and so I wrote a service in python that is a systemd service that will basically keep all of those places in sync. Nothing too impressive, but it's kind of cool that you can do that in python. So we got pointed at this thing called pysystemd, and this was actually presented at PyCon 2018, so there's a whole talk. You can go learn about what is systemd, why you care about it, how is it used? But the short version is this pysystemd is an API into the systemd whole API part of Linux. So you can create things that are daemons. You can say like, I would like to have my Python web app start and I want it to start in this way, but I want it to not start before my MongoDB server starts. I don't want MongoDB to start in that way. You can configure these things to all just happen on boot or on demand, things like that. So I think this is really pretty awesome. If anyone's doing any sort of automation with systemd and they are using python, here's a really great way to just import this library and just ask hey, let's load up this unit, which is like one of these services, and ask is it running, let's start it, let's create a new one, all sorts of stuff. Really really nice.
 
00:10:59 KENNEDY: That's cool.
 
00:11:01 OKKEN: Yeah, also kind of cool how this was built. So this is like based on Cython, so it's a wrapper around the C library that actually talks to systemd, right?
 
00:11:09 KENNEDY: Yeah, I think so and actually I'm going to cover in the next episode this article on using Cyton as a way for, a simple way to wrap C APIs.
 
00:11:21 OKKEN: That's what surprised me, yeah.
 
00:11:23 KENNEDY: Yeah, I think that's why because it doesn't seem like a performance thing, right? I think it's like let's use Cyton to get a really simple API into the C layer as well as build the innervation back into Python. So pretty cool.
 
00:11:34 OKKEN: Yeah nice, I'd love to see that because I'm surprised they're using Cyton for that and not just ctypes or CFFI or something like that, but I'm sure there's a reason for that.
 
00:11:43 KENNEDY: The other thing I wanted to point out about this is this was created and presented by Alvaro Leiva. Sorry if I'm mispronounce your last name there, but he's a production engineer at Instagram and at Facebook, and so they have a few servers to manage. This is probably pretty polished and comes from a pretty well-informed space if it's being used there, right? Pretty sweet. Alright so before we get to the next one, let me tell you guys about DigitalOcean. So DigitalOcean is definitely one of the best hosting frameworks places out there. You can go create a server super easy, you can create a load balancer, you can create floating APIs that allow you to switch between various machines with perceived zero down time. All sorts of stuff. All of our code and our sites and our delivery, all that stuff is running on top of it and it has been for a long time and it's been working great. So like I said, if you're thinking about running servers and you want to do it affordably, high performance with lots of control, then go to pythonbytes.fm slash DigitalOcean. If you're a new user, you'll get $100 credit and check out what they have. Takes about 60 seconds to set up a new server and you be SSHed in and doing all sorts of good stuff. Maybe you could even use pysystemd to like automate some cool stuff on it afterwards. So check them out. It helps support the show and it's definitely a good product worth checking out. Speaking of products, Brian, you were excited about one. That one update one, right?
 
00:13:14 OKKEN: Yeah, I am. I usually, for a while I was running the latest or the last 2017 release of PyCharm, but I don't know how recent this was, but not too long ago, we had the early access program build one of 2018.2 is out for PyCharm and the really exciting bit, and we got notified by this from the Bruno Oliveira, who goes by Nicodemus on Twitter, but it supports a whole bunch of new pytest features and I'm kind of a pytest kind of nut, so the things that I'm really excited about.
 
00:13:55 KENNEDY: You could say you wrote the book on it.
 
00:13:57 OKKEN: Yeah. Well you could brcause I did. A couple of the features that I was really waiting for is PyCharm's really, being an IDE, it has a lot of like, what do you call that, IntelliSense or something?
 
00:14:10 KENNEDY: Yeah, auto complete IntelliSense, yeah.
 
00:14:12 OKKEN: Autocomplete. That didn't work for fixtures to a test. So if you had, if your test was using fixtures and it was returning an object or a function or something and you were trying to call that, you didn't have all of those full auto complete features. Those are now in for fixtures of tests and that's really cool. But the thing that I'm really excited about is parametrization now works seamlessly within PyCharm, so if you've got a test that is parametrized so that you've got several, or in my case sometimes dozens of different parameter sets that are run through the same test, you could always run that through, run all those parameters in PyCharm and that was wonderful. If you wanted to rerun one or rerun the failing ones, it would just rerun all of them.
 
00:15:01 KENNEDY: I see, it treated it like a whole method in the decorative bit that had here's all the variations. That was just like a thing that it would just rerun, right?
 
00:15:08 OKKEN: Yeah, so now you can run a test and then in the left side bar you can right click on one of them and rerun just one of the parametrizations or you can like for instance if only two or three or some of them failed, when you rerun failures, it only runs the parametrizations that failed and this is a huge time saver for me so I'm really excited abut it.
 
00:15:31 KENNEDY: Yeah, that's nice. I use that feature a lot where I just say rerun the failed tests.
 
00:15:34 OKKEN: For people that are really, and it may not be too much of an issue for people that are running really quick tests, but a lot of my tests talk to hardware so they're not really that fast. So this will save me like an hour a day I'm sure.
 
00:15:47 KENNEDY: That's awesome. Yeah, very very cool. Dan, do you use pytest?
 
00:15:51 BADER: Yeah, I do, yeah. Actually, I just used it and rewrote the backend for realpython.com. We've got pytest powered test integration tests for that and yeah, it's just been a joy to use, especially the parametrizations stuff. It's just so nice when you can reuse a lot of test code and you don't have to copy paste it around so much.
 
00:16:08 KENNEDY: Dan, one thing I was going to cover but you put it in here before I could get to it, so you're faster, is basically why is installing Python 3.6 so hard and so sort of confusing, right? You talked about this workshop that you recently did and I feel this out this out on Twitter and people will sometimes tell me oh, it's not hard, it's super easy, you do this. But then if you actually go teach a workshop to beginners, you're like why are those four people over there not ready yet? Like it's been ten minutes. What could they have possibly been doing? And it's because like there's all these edge cases, right?
 
00:16:41 BADER: It's one of these things where in theory, it's easy and it's not a problem that you run into when you've had a little bit more experience under your belt, but for people getting into Python, it is definitely a barrier. And we were teaching this workshop, so Marietta was teaching it and I was just running around kind of supporting people and for some people, we would spend almost like two hours to get them to a working Python 3.6 install. And you know, there were some really. Like, you hit all of these interesting but obviously kind of frustrating edge cases like some people were running a Windows host and then they were also running the Linux subsystem for Windows, so now you can essentially boot up a VM that is integrated into Windows and it boots Ubuntu or Debian or some other Linux distribution, I think. I think it defaults to Ubuntu. I'm not sure.
 
00:17:29 KENNEDY: It's Ubuntu as well, yeah, that's nice.
 
00:17:30 OKKEN: Basically you have this like really tightly integrated Linux environment that we can just work from your Windows host environment. The problem is that people maybe accidentally installed Python in the Linux environment and they'd try to access it from the Windows environment because it's a little bit unclear if you're a beginner like what actually the difference is between these two different terminal windows.
 
00:17:53 KENNEDY: Right, and you might open PowerShell, which is like a third still.
 
00:17:55 BADER: Exactly, you know things like that and then you have your paths set in different ways and other issues where that so the previous longterm release of Ubuntu, I think it was 16.04, so it doesn't ship with Python 3.6. And so for this tutorial, we specially needed 3.6 and so people starting googling and just copying a bunch of stuff from Stack Overflow to install Python 3.6 on Ubuntu. Well, it turns out there's two different PPAs, so like third party packages that you can install this from, and one of them is broken, or was broken during that time. People would have Python 3 but it had broken SSL and no pip. It was essentially useless for the purposes of this tutorial and it's kind of crazy just into, all of the edge cases you can encounter with this and I think it's really something we need to keep in mind when we're teaching beginners or we're kind of telling people how awesome Python is. It can be a pretty jarring experience if you try to set it up and it's just sitting there.
 
00:18:53 OKKEN: Well okay, I just wanted to try this, it doesn't work.
 
00:18:55 KENNEDY: For sure. Well, so you guys are writing this up at realpython.com slash installing dash Python as sort of an ongoing guide, right?
 
00:19:01 BADER: Yeah, so we decided to do something about it, So shout out to John Stuart and Jim Anderson. And we got together and put together this sort of the ultimate Python 3 install guide and we're going to keep it maintained and it tells you how to install Python in very specific steps in all kinds of different configurations, so Linux, Mac OS, different Linux distributions, how to compile it from source, and we're just going to add to it and improve it based on feedback and hopefully that's something we can just use in Linux workshop and then tell people what to do.
 
00:19:33 KENNEDY: I hope that when you refer to Python 2 in there, just say oh, don't do Python 2, do Python 3, that you call it legacy Python. So just throw that in there. Everyone's still trying to make that a thing.
 
00:19:43 BADER: I don't think we even mention it in that particular piece. This is Python 3 only, yeah.
 
00:19:47 KENNEDY: And then my Mac is about ready for a format because you know, it's time. It's been like, it's been bad. Anyway, it's about time for a format. What would you, like after going through this whole experience, we could do homebrew, you could do Anaconda, you could do download the pkd file from python.org et cetera, et cetera. What would you do if you were setting up a new computer?
 
00:20:08 BADER: Like on Mac?
 
00:20:09 KENNEDY: Yeah, on Mac.
 
00:20:10 BADER: Yeah. I'm a big homebrew fan because it makes upgrading very easy and it's just something that I personally use for other purposes as well. One of the things I usually do when I set up a new Mac OS development environment, I upgrade bash. So I use bash as my preferred shell and Mac OS ships with a super old version of bash and with homebrew, it's super easy just to get the latest version of bash and then a bunch of other command line tools that I use and so I just use that to install Python as well. So I kind of like that, I mean, Python Org version, it works as well, but if you're going to use homebrew anyway, which I think you want to use if you're on a Mac, then I would just keep everything in homebrew.
 
00:20:54 KENNEDY: Yeah, that's what I'm thinking as well. It makes a lot of sense. Awesome.
 
00:20:58 OKKEN: Both on Mac and on Windows I just always just use the python.org installer.
 
00:21:02 KENNEDY: Yeah, that's what I've been doing as well, but with homebrew, you just type upgrade, you know? And you can have different versions and stuff. I don't know. I'm thinking of playing with homebrew next time, but anyway, very cool.
 
00:21:12 BADER: Yeah, there's also pyenv. So that's sort of the other, if you're going to go with homebrew, you could just go brew install Python 3 and you get sort of one, the latest version of Python 3, or you could install something called pyenv first and then that's sort of another layer of extraction on top that allows you to switch between different versions of Python, including different versions of Python 3. So you can just go, you know, I want Python 3.5 for testing and I'm going to all of my latest stuff on
 
00:21:41 OKKEN: the Python 3.7 beta version or something like that. That's super nice. It's maybe a little bit more advanced. I feel like you're probably there, Mike, but for a complete beginner, I'm not sure if I'd recommend it.
 
00:21:50 KENNEDY: Yeah yeah yeah, sure, of course.
 
00:21:51 OKKEN: I don't think I'm there. I've tried it several times and it hasn't worked for me, so.
 
00:21:55 KENNEDY: I don't want to go too much longer on this, but what I've started doing on my servers is when I SSH in, part of my shell profile automatically configures the main virtual environment for whatever that purpose of that server is. When I SSH in, I'm actually running just a virtual environments just by default and I was considering doing even that for my Mac and just changing the shell back so it doesn't do something weird. I don't know. I may get myself into trouble with that, but it's been working so far. Alright, so I want to round this out with just a short little list of 30 amazing Python projects from 2018. So there's this thing called Mybridge and Mybridge is a little bit like a Readability or a little bit like a Flipboard where they keep track of different articles, but it's more technology focused than just a Flipboard or Zite, those type of things. And the article starts with, the Mybridge AI evaluates the quality by considering popularity, engagement, recency and so on, so apparently they have this AI which is kind of cool, that goes through and looks at human interaction with all these articles, these tech articles in the Python space and then says, here's the articles that our community interacted with that they really liked or packages actually in this case. So let me just give you a quick rundown on these just to kind of give you all some exposure and like oh hey, I hadn't heard of that package. That's pretty cool. And then you guys can jump in and give me some thoughts. So I'll go from the least popular to the most popular, so number 30 is PDFTabExtract, which is a set of tools for getting tables out of pdf documents, which is pretty cool and data mining on scanned documents, pretty sweet. There's, number 28 is Surprise, which is a scikit learn extension for building and analyzing, or building a recommender system. So you can say, you might also like this, which is kind of cool. Number 27, we won't do all of them. I'm skipping number 29. Number 27 is Eel, which is basically a simple equivalent of the Python's version of an Electron JS system. What do you guys think of that?
 
00:24:04 OKKEN: How have we not covered that already?
 
00:24:06 KENNEDY: I think we might have mentioned it because we have been on a, I think we've covered it but there's two variations and the sort of story that seems to go along with this is it's a simple library. It's not really like fully. There's my understanding that you can build simple apps, but not like full on massive apps, but if you could build full on massive apps, I'd be all over this, that's awesome. Number 25, Clairvoyant. A Python program that identifies and monitors historical cues for short term stock movement and stuff. I don't do really any stock trading, I mean, I put money in mutual fund, so I don't really care that much about it, but the reason I bring this up is Python actually is pretty involved in the whole stock trading automation and real time stuff. There's actually a really good documentary called the Wall Street Code that goes into all these programmers that are building like AIs and stuff in Python and it's pretty cool. So it's free on YouTube.
 
00:25:00 BADER: Nice.
 
00:25:00 KENNEDY: Yeah. Brian, are you a fan of Mr. Robot? Or Dan, any of you guys?
 
00:25:04 BADER: Yeah, I was just going to say.
 
00:25:05 OKKEN: No?
 
00:25:05 KENNEDY: Aw man, Dan?
 
00:25:08 OKKEN: I like it, yeah. It's a good show.
 
00:25:09 KENNEDY: I think it went a little weird in episode two, oh I'm sorry, season two, but like the first year, I was just like blown away. So there's this thing called Fsociety, which is a hacking tools pack for penetration testing in Python, which of course, Python is very big in the cyber security space. You might, if you want to like check your own stuff, run some of these tools against your things before someone else does, We talked about Kenneth Reitz last time and number 18 was Maya, datetime for humans. Better exceptions, I think we covered that as well. 16, Apistar, a really cool, expressive Python 3.5 based API from Tom Christie, the same guy that does Django Rest Framework, but this is like the re-envisioned Python 3 version, which is cool. MicroPython, very awesome for little projects. spaCy, industrial strength natural language processor is number six. Number two is pytorch for machine learning. That seems to be sort of becoming one of the main machine learning libraries, and number one, home-assistant for open source home automation, very cool. I keep dreaming of like creation some IOT thing with like MicroPython and then plugging it into home-assistant, but I just have to figure out what that thing is going to be instead of this. It's a solution looking for a problem, right? Right, it's a good solution, I think.
 
00:26:26 OKKEN: Yeah yeah. I think so. It's a good solution if I can just find a problem to like apply it to. Those that I read off there, are those surprising? Any of those super interesting to you guys?
 
00:26:35 BADER: I've just been trying with MicroPython, so I just learned a little bit more about it and so it is basically like this super small and lean re-implementation of Python 3 I guess that runs on these like super low power, low computational power micro controllers and it's, I mean, it's just so cool to be running Python on tiny, tiny machines that have very little RAM and you know, we're talking kilobytes and stuff and it's just insane,
 
00:27:00 KENNEDY: Like a five dollar chip. That we can program this in Python. Yeah, and you got one of those little bag, in your goodie bag at PyCon, right?
 
00:27:08 BADER: I did like a video review of that on YouTube and I was just you know, all giddy about it just playing with this thing. It just plugs into your USB and you can start running Python on this thing.
 
00:27:18 KENNEDY: That's a really good implementation they did. Brian, how about you?
 
00:27:21 OKKEN: Yeah, I guess I'd have to second that. MicroPython is awesome and a bunch of the Adafruit products run, are able to run it and yeah. It's all fun. Apistar is something I've been meaning to try still. I haven't done any projects with it, but it looks fun.
 
00:27:39 KENNEDY: Yeah, it definitely looks fun. Quite cool, alright, there's one final thing I want to cover. We had the GDPR stuff come out basically come into effect at the end of last week, so just a quick point to an article from our friend Chris Medina at tryexceptpass.org slash article slash GDPR. Sort of a take for developers and if you haven't got your stuff all in line yet, please consider doing so for your own good. Pythonbytes.fm is all up and ready. So, yeah Dan, you probably had to do the same for Real Python, right?
 
00:28:11 BADER: Yeah, some sleepless nights because it's, well, everything's up for interpretation, right? So it's kind of hard to yeah, just to put it into concrete terms, but I mean it's just been nuts now that the deadline for that law to go into effect is passed, like we've seen some services shut down. I think like Instapaper is service that I really, I've been using it for a long time and it just shut down in Europe. They say it's temporary, but who knows?
 
00:28:36 KENNEDY: Yeah, we'll see. It's temporary until it's not, but yeah, hopefully they get that figured out, but yeah I saw that. That was quite the discussion on Hacker News. The other thing I wanted to bring up, which I don't know, this is pretty cool to me. I deal with an insane amount of large files and I use Dropbox mostly for that. Like to give you a sense, I have the terabyte plan and it's like sometimes gets too full and I have to clean up my Dropbox storage. But my hard drive doesn't really want to sync that much stuff. Did you guys know that Dropbox released this thing called smart sync?
 
00:29:06 BADER: Yes, and I've been wanting to use it, but it installs a kernel module and so I was like aaah.
 
00:29:14 KENNEDY: Right, because it's got to get into the file driver. Yeah, so people have this problem, they have, Dropbox came out with this thing called smart sync that will basically give you and your explorer and your open dialogues on Windows or Mac a view which pretends as if the files are there and as soon as you try to interact with them even from like the command line, they will automatically download if they're not which is basically let's you sync nothing but what you interact with, which is really amazing.
 
00:29:41 BADER: It sounds super cool like, I have a lot of trust in it and the Dropbox engineering team and if it works that smoothly, I think it's an amazing feature. I've sort of been hesitant about enabling it.
 
00:29:52 KENNEDY: Alright, when you enable it, you tell us how it goes. I'll probably try it out. I'll give you guys a report eventually. Alright, well I think that's it unless Brian or Dan, do you have extra stuff to share with everyone?
 
00:30:03 BADER: No.
 
00:30:03 KENNEDY: Right on, well.
 
00:30:04 OKKEN: I think I'm all good. Yeah, no. It was great to be back.
 
00:30:08 KENNEDY: Yeah, definitely. Brian, thank you so much and Dan thanks for dropping in and adding some spice to the mix for our whole podcast here.
 
00:30:16 BADER: Awesome, thanks guys.
 
00:30:17 KENNEDY: Yeah, bye everyone.
 
00:30:18 OKKEN: Bye.
 
00:30:18 KENNEDY: Bye. Thank you for listening to Python Bytes. Follow the show on twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and sent it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
