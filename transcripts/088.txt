00:00:00 KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 88, recorded July 26, 2018. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:11 KENNEDY: Brian, how you doing?
 
00:00:12 OKKEN: I'm doing great.
 
00:00:13 KENNEDY: Yeah, it's a ton of good stuff that I think you found this week, and I'm looking forward to share what I got as well, it's never a boring week in the Python world, is it?
 
00:00:20 OKKEN: No, it isn't.
 
00:00:21 KENNEDY: No, well it's definitely not boring if your app has problems, you need to track them down. So if you're in that space, you might want to check out Datadog over at pythonbytes.fm/datadog. I'll tell you more about them later, right now I want to know about documenting code.
 
00:00:38 OKKEN: We do hear a lot about, I think we hear a lot about making sure that your code.documentation is good, there's the read the docs and make the docs effort, or I guess it's write the docs. And there's quite a bit of that, and I think a lot of that is focused on the end user/user documentation, and that's definitely important. But there was an article on Real Python called Documenting Python Code: A Complete Guide. It's an article that describes really why you should comment and document your code. Talks about the differences between comments and docstrings and different separate documentation. But one of the things that I want to zoom in on is the code comments, and I don't think very many people get really how if they think about their comments that they put in their code, how effective they can be. So I want to kind of zoom in on some of the things that they cover in this article on code comments. So code comments are those things that start with a pound sign or hash and they're not really part of your runtime, you can't get a hold of them at run time, they're intended for you and other maintainers and other developers of the code. And some of the things that I've used them for, but I never really saw anybody point out before is before you even start your code, you can use comments to plan what you're going to write, and you can also, once you've written your code, review to make sure the code really matches what you planned to do, and then sometimes those kind of comments are best to be, if your code is clear enough, go ahead and delete those when you're done.
 
00:02:11 KENNEDY: I like that. I end up doing that a lot myself. I'm like, "OK, I'm not entirely sure how to do this, so I'll sketch this out in comments, like, Here's the five steps I think I got to do." and then I'll just take 'em one at a time, but I always delete those comments, almost always.
 
00:02:23 OKKEN: Yeah, the deleting part is important because if you don't do that the common pitfall of code comment that says, "Retrieve web page." and then the very next line is one line of code that's a request or something, and it's obvious, so if it's not obvious, using those to explain intent, don't explain really how it's done, but explain why you're doing it, and then sometimes you'll have a complicated math algorithm or something that's fairly terse if you need to explain that better, but we're trying to get as few comments as possible, minimizing those because you want to make your code pretty clear to begin with, but one of the other things that I think I've just started using quite a bit is the TODO feature, so using code comments to, the article mentions TODO bug and fix me type sections. Hopefully, you're not putting too many bugs and fix mes in your code, but TODOs are, I think those are great for, because when we're in the middle of coding, it's often easy to get caught up in, "Well, I could make it more powerful if I added these other features." Just go ahead and write that as a comment, you don't really need to fall into the trap of making your code do to much at once. And then the article also has other tips on best practices for how to format your code comments and stuff. Of course, it goes on and talks about doc strings and how to utilize those, also using type hints for commenting and documentation, and then goes on to do like the larger, it talks about the larger types of project documentation, and like using Sphinx and MakeDocs and stuff.
 
00:03:55 KENNEDY: Yeah, that's a really great article, and it was really in depth. I always learn something from the Real Python article. It's cool. You know, one thing about the TODO stuff that I use a lot and I really like is the editor integration, so I can't speak to the other ones I don't really know how exactly they handle but in PyCharm, if you have # TODO: something, there's a special pane where you can say, "Show me all the to dos in this project." and even when you try to commit, like you know, I want to commit this stuff to GitHub, it'll say, "Warning, there's 3 TODOs in here. Are you sure you want to commit to GitHub with these 3 TODOs." I think it actually even remembers those 3, but if you add another one, it'll say, "Oh, there's a new to do you haven't approved to commit." things like that, so it's pretty sweet.
 
00:04:39 OKKEN: Yeah, actually I stumbled across that feature without knowing it was there, and I'm like, "Oh, man, this is great!" so I like it.
 
00:04:46 KENNEDY: Yeah, and it's cool, even colors the comment different if it's a TODO comment. So people should definitely do that. So we talked awhile ago about security vulnerabilities and other types of alerts, and we even covered how GitHub has this dependency thing, where you can see the dependencies, but it didn't cover Python, which was unfortunate, right?
 
00:05:07 OKKEN: Right.
 
00:05:08 KENNEDY: Well, big news. It now supports Python.
 
00:05:10 OKKEN: That was pretty fast!
 
00:05:11 KENNEDY: It was.
 
00:05:11 OKKEN: To get it on there pretty quick.
 
00:05:13 KENNEDY: They do, so it's pretty sweet! If you go to any GitHub repository, and you go to Insights, and then there's a bunch of options on the left, and you pick dependency graph, it'll actually show you all of the files it's either found in a pipfile.lock or in requirements.txt, anywhere in the project.
 
00:05:32 OKKEN: Yeah, that's good!
 
00:05:33 KENNEDY: And it'll list them out, and it'll say, "It's pinned to this version, but warning, this version actually has a security vulnerability, and it's fixed by this other release of it." so if I'm using, say, Pyramid, and there happened to have been a security vulnerability in that, it would let me know, and it would actually highlight that, and give me an alert.
 
00:05:50 OKKEN: OK, neat!
 
00:05:51 KENNEDY: Yeah, it's really cool, so it had previously only worked with Ruby and Java Script, but now they just announced it. They said for the Ruby and Java Script people, they've identified millions of vulnerabilities and prompted many patches, which is pretty cool.
 
00:06:03 OKKEN: OK, I'm just checking my cards project to make sure it's clean, looks like it's good.
 
00:06:08 KENNEDY: Yeah, and it's interesting, you can actually, it's like a tree structure that you get, too, so you can go there, and it'll say, suppose you're using requests, for example, right? Then there's a little chevron expando thing by requests, and it'll open up and say, Well, this depends on six and whatever it depends upon, I can't remember the exact dependency of request, but you can actually expand it out and see the transitive closure or like what your dependency's dependency's dependency's depend upon. Like if there's a vulnerability deep, deep down that you didn't directly install, but effectively you installed, so it's really nice.
 
00:06:41 OKKEN: The dependency graph is cool, it even has a, it'll even follow a requirements_dev.
 
00:06:48 KENNEDY: Yeah, it'll get all of them, yeah.
 
00:06:49 OKKEN: And then you can also look at dependents. So people depending on your project, interesting.
 
00:06:54 KENNEDY: Right, right, right, so if you've got a public package, you can see what depends upon it. I wonder if you go to requests if that breaks the UI.
 
00:07:05 OKKEN: Yeah, I'll have to leave that exercise to the reader, cause I don't want my web browser to fail.
 
00:07:10 KENNEDY: Yeah, exactly, exactly. Anyway, so we've seen other services like pyup.io, which I use and still recommend, but this is a nice way to just walk up to a public GitHub repository and say, "Well, what are its dependencies? Is it up to date?" things like that without actually using it or registering it at school.
 
00:07:28 OKKEN: Right, so pyup you would have to have it be on your own, and you could do that, but this allows you to look at that for any project on GitHub.
 
00:07:36 KENNEDY: Right, exactly, does maybe this project have a security vulnerability in its dependency or not? If it doesn't, then I'm going to use it, if it does, maybe I'll wait or do a PR or something. Nice.
 
00:07:47 OKKEN: Well, speaking of dependencies, I depend on pip a lot and virtual environments.
 
00:07:52 KENNEDY: Yes, all the time! I've tried to super optimize what I do in the command line around pip in virtual environments, so much so that I have a single alias that will create a virtual environment, make sure pip and setuptools up to date, and then activate it all in a couple characters. I love it!
 
00:08:08 OKKEN: Yeah, nice! So wait, the virtual environments are so useful, I was happy to see this article pop up. It's called How Virtual Environment Libraries Work in Python, and I'm just going to quote it. It says, "Have you ever wondered what happens when you activate a virtual environment and how it works internally?" There's a quick overview of the internals behind popular virtual environments, for example, VirtualEnv, Wrapper, Conda and PipEnv, and yeah, it's a really fairly quick look at how there's really not much, I didn't know this. So one of the things it points out is all these sort of work on a little bit of a hack, and these hacks are based on the fact that when the Python interpreter starts, when interpreter starts, it searches, it's trying to find the site specific directory to find all the modules it can import and all the packages, and so the search starts with a parent directory of the Python executable location and then continues backtracking up the path into parent directories until it reaches all the way to the root, but it's also looking for a lib directory with os.py in it, apparently it's looking for that magic dir module, and then, if it finds that, that's the local site packages directory, so the hack is to let it copy the executable somewhere, and then create a directory with that symbolically linked, and then you can have other stuff symbolically linked inside, too. In earlier versions it wouldn't symbolically link everything in the site packages if you had everything, or a whole bunch of stuff, at least, I'm not sure if it's everything. In Python 3.3, it came up with a couple tricks with a pyvenv.config file that allows you to not have to copy the executable completely, you can copy, you can have a symbolic link to the executable, and all of this is how the sausage is made, but I found it fairly interesting to figure out how all these virtual environment things work.
 
00:10:06 KENNEDY: Yeah, I think this is really helpful, because certainly being effective with Python is being effective managing your dependencies and stuff, and the way you do that is virtual environments, so this is a really good look at how that works.
 
00:10:19 OKKEN: Yeah, to me it did seem like after about 3.3 that things sort of went faster, and now it makes sense that it's faster, because they're not copying the executable into a new location, so it's a clean look, and I'm with you. I tried a whole bunch of off the shelf helper things, and it's just my own handful of commands that I've come up with that I've just stuck 'em in actually in my Bash config file as little functions, cause they don't do much. I just needed to create a virtual environment and then activate it, and then, like you said, update pip, and what else do you update?
 
00:10:55 KENNEDY: Setuptools.
 
00:10:56 OKKEN: OK.
 
00:10:56 KENNEDY: Yeah, it's interesting. There's a lot of things that try to help and manage this stuff, and they're all pretty good, but in reality, like you said, I just want to run these three commands and just get rolling and just keep it simple, and I could just create that as an alias and like a Bash RC or ZSH RC and separate the three commands with a double ampersand and then, boom, it's one command, you're good.
 
00:11:17 OKKEN: And for people like us that are doing a lot of trying out a lot of new things, I create a lot of virtual environments. I do agree with Kenneth Reeds and the others that are promoting PipEnv that for because of all of the hashes and security reasons, for full application development, I think using PipEnv is the right thing and keeps everybody using the project on the same page, but there's plenty of other uses of virtual environment that OrV and V that I use.
 
00:11:47 KENNEDY: Yeah, pretty interesting. One final little tidbit of news that I don't think justifies its own place, but Pip, not too long ago went from version nine to version 10, right?
 
00:11:57 OKKEN: Yeah, yeah, I'm glad you brought that up!
 
00:11:59 KENNEDY: That's big, so now in the last week or two, I haven't really been paying attention, but it went from 10 to 18.
 
00:12:05 OKKEN: Yeah, it like completely skipped.
 
00:12:08 KENNEDY: A lot of features.
 
00:12:10 OKKEN: But it switched from whatever that normal version
 
00:12:13 KENNEDY: Semantic versioning?
 
00:12:13 OKKEN: semantic versioning to date based versioning.
 
00:12:16 KENNEDY: Yes, so I don't understand how the date works, maybe it's the year, but surely there's more than one release in a year, who knows? Anyway, it's pretty cool, maybe it is 2018, but yeah, so there's a brand new version of Pip and new versioning scheme there.
 
00:12:28 OKKEN: Yeah, cool!
 
00:12:28 KENNEDY: Nice, all right, before we get to the next one, let me tell you about Datadog, our sponsor. So if you have infrastructure and you want to monitor it, you want to trace a request, say, across your web tier to some microservice series of services down at the database, and put the logs all together that Datadog provides end to end visibility for the health and performance of your Python app core metrics, distributor request traces and logs, all that in one place. They even have a 14 day free trial, and if you check them out at pythonbytes.fm/datadog, set up a trial, you get a sweet, cute Datadog T-shirt, so that makes it worth it right there. So, anyway, check them out, it really helps support the show. Right, have we talked about GUIs?
 
00:13:11 OKKEN: Yes, I think so, maybe.
 
00:13:14 KENNEDY: Maybe, so one of the really nice things about having Tkinter built in to Python is it's really easy, it just comes along, so you don't have to do stuff. Previously, to use something like Qt or I think the same may be true for wxPython, but for Qt, it was a serious pain to get that installed so that you could use it. It's like, well, you run this funky package on Ubuntu, you download this installer for Mac, and then all of a sudden, you're like, here's my simple Python file that's going to be your app becomes like this weird extra dependency installing problem, right? So the Qt company, the people that make Qt the framework and then they've taken over PySide2, the wrapper, and they've rebranded it for Qt for Python, well, they've made that much, much easier. So now, if I have an application, and it has a requirements file or a pipfile.lock or whatever pip file that says I depend upon PySide2, which is the working package name for Qt for Python right now. If you depend upon that, all you have to do is pip requirements and you have it cause it ships as a wheel right off Python. If you want to use Qt instead of having really painful dependencies that people have to set up and a little step, "Do you want to run our app? Well, click here to go to this page to set up QT." now you just pip install your requirements, but when you have Qt, it's nice.
 
00:14:41 OKKEN: That is nice, that's a huge thing, actually.
 
00:14:44 KENNEDY: Basically, I'm not using Qt if what is required is this separate, go find and install Qt so you can run my app. Like that means there's no way that that's reasonable for distributing that to people, but if all you got to do is package the dependencies, then presumably you could package it up with PyInstaller, at this point, maybe, so really nice.
 
00:15:05 OKKEN: Yeah, and I want to shout out to all of the people that every time we cover this contact me and tell me that I'm mispronouncing Cute as Qt, that this time it was Michael that pronounced it Qt instead of Cute, so...
 
00:15:20 KENNEDY: I think I had it right before, didn't I? Oh, well. Maybe you've infected me, no, it's Cute for Python, yeah, it's cool.
 
00:15:26 OKKEN: Yeah, I don't know, I think that's official!
 
00:15:28 KENNEDY: Yeah, yeah, I think so, too. And also, for all the people that have said, "Yes, you've covered 17 GUI frameworks, but have you heard of these other 2?" So we're definitely learning a lot about the different frameworks out there, so this is one more advance there.
 
00:15:44 OKKEN: I don't think people should stop because I think this is great, but I don't think it's completely solved, so people, keep trying to solve it with new libraries, go for it.
 
00:15:53 KENNEDY: Absolutely, absolutely! All right, what's this next one you've got about exceptions here, right?
 
00:15:56 OKKEN: OK, well, so exceptions, I think, and I misspelled it, but exceptions are part of Python, and even if they're kind of, I think they're handled sort of later when you're learning how to program in Python, you sort of deal with telling people how to use exceptions later, but you're going to have to deal with them because whether or not you write your own exceptions or utilize raise and try except yourself, other libraries that you are utilizing are using it! So if you don't want your program to crash, you got to figure out how to do all this, so this is, not only is it a tutorial on how to use exceptions, it's learning how to not handle exceptions because sometimes the right thing to do is not to catch an exception. The right thing to do is to pass it, either ignore it completely because it'll pass up to a higher level, and that's part of one of the things that's in this article called Learning Not to Handle Exceptions, talks about not only how to use them, but how to not use them correctly. So first it does tell you how to use them correctly, like the try and except and raise, so try and except are obvious, so you try a bit of code and then you can use an except clause to catch something. Right off the bat they tell you, which is, I think, correct is usually you don't want to except everything, you want to except a specific exception that you know how to deal with, and then everything that you don't know how to deal with, just let it pass you up the stack, but sometimes, even if you catch it, you want to keep raising it, so you can, it does talk about reraising an exception with just raise without any key words out or any exception after it will just raise the current exception.
 
00:17:39 KENNEDY: Yeah, I really like that is like you have a try, do your thing, except, and then maybe you want to do some kind of compensating action, like roll back a transaction or delete a temporary file, but then you don't really want to handle it. You just needed to say, "If there's a problem, I got to fix this." and then let somebody else actually handle it, so then you just say "raise," or you could even use the raise one exception from another exception and chain them. It's real nice.
 
00:18:03 OKKEN: Yeah, and then there's other things like finally and else, so finally can allow you to run some code, whether or not an exception runs and then else lets you run some code only if there are no exceptions, and you can use both of them at the same time. With the same exception, those can be utilized. The article goes on and covers dealing with tracebacks, custom exceptions and then some best practices and then making your exceptions more readable by adding arguments and printing things out basically and stuff, so those are good.
 
00:18:35 KENNEDY: Yeah, it's really nice, great little article. Definitely a nice find there. So I thought I put here at the end of our episode today something that takes a step back and looks at the overall community, the ecosystem and a bit of an interesting, I don't know, high level view of Python. So, last week we did our whole special episode on Guido von Rossum stepping down, right? With Brent Cannon, Carol Willing and sort of cover that whole news, but another interesting thing that happened around that is, you know, sort of speaks to Python's popularity is you know the magazine The Economist?
 
00:19:15 OKKEN: Yeah, definitely!
 
00:19:18 KENNEDY: He did a feature in The Economist on Python and Guido von Rossum.
 
00:19:21 OKKEN: That's pretty, pretty mainstream and huge!
 
00:19:24 KENNEDY: That's pretty interesting, right? So there's an article in The Economist called Python Has Brought Computer Programming to a Vast New Audience, which is pretty awesome, and it covers the meteoric growth of Python, how it's becoming so much more popular than many things, how, why and where people are learning Python, so I thought that was all quite interesting, and then interspersed in there is sort of the history of Python with quotes from Guido himself, so it's pretty cool!
 
00:19:50 OKKEN: Yeah, this is a nice publicity here.
 
00:19:53 KENNEDY: Yeah, not too shabby. And it's not a super long read, but it's a pretty nice treatment. It talks about some interesting things like some really powerful things that people are doing with Python, some interesting ways that people are learning it, but it also says, "There are some dangers to Python growing so fast. It's a lot of people coming in to the industry, learning just enough, grabbing something like TensorFlow, you know, some AI framework, and sort of understanding it, and then drawing conclusions from what the machine learning algorithms they sort of understand tell them, you know, and run off with half baked ideas." I thought that was an interesting comment.
 
00:20:29 OKKEN: Yeah, well, I mean, yeah, that is an interesting comment, but half understanding what you're talking about and drawing conclusions, we see that every day with, like, statistics in newspapers and stuff, also.
 
00:20:41 KENNEDY: Yeah, absolutely, I mean, even in medicine and medical research that stuff is rampant, but it's lack of understanding of statistics is a problem across the board.
 
00:20:50 OKKEN: I haven't read the article yet, I'm excited to read it, but the interesting thing is, people learning to code isn't necessarily because you're going to end up being a professional programmer. It's often one of the things that helps it grow is a lot of people using it as part of their other job, like a biologist or somebody else that is just using it to help out with some section of their job or kids, you know, tinkerers, just trying to play with Raspberry Pi or something, so...
 
00:21:20 KENNEDY: Yeah, that's actually a really good point. They actually touch on that a little bit in the article. They say, "For professionals that have long relied upon trawling through spreadsheets, Python is especially valuable." and they point out that Citigroup, the American bank, has even put together a crash course for Python for its analysts, and the eFinancialCareers, like a website for financial jobs found that there's a 4 time increase in the request for Python skills in the last three years among financial analysts, not programmers.
 
00:21:52 OKKEN: Oh, nice!
 
00:21:53 KENNEDY: Yeah, so there's a lot of interesting little tidbits of stuff coming out in this article.
 
00:21:56 OKKEN: Yeah, cool!
 
00:21:57 KENNEDY: Yeah, definitely worth checking out. All right, well, I think that's it. That's our 6 items for the week. Brian, you got anything else you want to share with everyone while you're here?
 
00:22:04 OKKEN: No, I've been having my head in antiques, so if anybody's a listener in the Portland area, hit me up and I'll tell you where I'm going to be selling some antiques this Sunday, so completely non-Python job.
 
00:22:17 KENNEDY: It's kind of nice every now and then to just take a step away, put the keyboard down, and do something really different, so you can come back more refreshed, right?
 
00:22:25 OKKEN: Yeah, you got any news?
 
00:22:26 KENNEDY: No, not this week, although I'm working on something big that I will announce next week, so I'm close to having news, but I'm not quite there yet.
 
00:22:33 OKKEN: All right, nice!
 
00:22:34 KENNEDY: I'll bring you a little extra news next week. All right, well, Brian, thanks for doing this and sharing with everyone, and thank everyone for listening!
 
00:22:40 OKKEN: Thanks, bye!
 
00:22:41 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes, that's Python Bytes as in b-y-t-e-s and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
