00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 94, recorded September 5th, 2018. I'm Michael Kennedy.
 
00:00:09 OKKEN: And I'm Brian Okken.
 
00:00:10 KENNEDY: Hey Brian, how you doing?
 
00:00:11 OKKEN: I'm doing really good. Yeah, you?
 
00:00:13 KENNEDY: Excellent, doing very well. The sun is shining, summer has not left us yet. It's not that great for productivity, but it's definitely good for keeping the spirits up. You know what else is keeping my spirits up? My DigitalOcean servers. They're the ones running this site and many others. Been working perfectly. They've been going really, really strong, and we'll tell you more about them later. In the meantime, if you want to check them out, pythonbytes.fm/digitalocean. You'll get $100 credit for new users. Brian, when I was in the C++ world, the C# world, design patterns were like this massive thing and you had to know all the design patterns and there was dependency injection and IOC containers and all this stuff, and I feel like Python doesn't have as much rigor around it, because you don't have to jump through so many hoops to make certain things happen, I guess. What do you think?
 
00:01:03 OKKEN: Yeah, I think so, and it's actually something that's interesting. I came from the C++ world. Patterns were a thing in C# also.
 
00:01:10 KENNEDY: Oh, yeah.
 
00:01:11 OKKEN: I don't even know who the Gang of Four are, but there were four others who wrote the Design Patterns book. Let's see, Erich Gamma, Richard Helm, Ralph Johnson, and I'm not going to try to pronounce that last one. John something. Anyway, in the '90s, if you were in C++ or C#, apparently you read this book or others around design patterns, and then when I got into Python, I was a little curious whether that was a thing in Python or not. I haven't really heard much. I haven't really needed it. A lot of the stuff isn't really needed.
 
00:01:49 KENNEDY: What I think is interesting is there's those patterns that you see from the Gang of Four and the sort of derivative ones, derivative books, and thinking, and a lot of it, like you say, is not needed, but there are other patterns that are really useful. For example, meta classes, or decorators. There's other stuff, generator methods, all sorts of stuff that is in here that don't appear in the Gang of Four because C++ or Smalltalk just didn't do that. They were highly based on Smalltalk actually, their patterns.
 
00:02:19 OKKEN: Right. One of the things that got my attention today was a tweet by, gosh, who's this guy?
 
00:02:25 KENNEDY: Brandon Rhodes.
 
00:02:28 OKKEN: Brandon Rhodes, yep, and he's got a site called PythonPatterns.guide, and he's sort of going through a lot of different, I think he's going through the Gang of Four book, but he might also be pulling together other design pattern things. Yeah, he's pulling together information from talks and writing and I think he's creating more information too. Trying to apply some of these patterns to Python, there are sometimes different ways to do it. You can do things in different ways. So far, he's got abstract factory pattern, the builder pattern, factory method, composite, decorator. Yeah, we definitely have decorators. And then things like monkey patches and iterators. How that applies, I'm glad that somebody that knows what they're talking about has tried to figure out, how does this all apply in Python? I haven't really dug too much into this, I just think it's a neat resource to try to read about some of these.
 
00:03:35 KENNEDY: Yeah, I definitely think it's a really neat resource, and Brandon has some interesting thinking on design patterns and architectures. He gave a super not counter intuitive talk called Clean Architecture, I think it was at PyOhio a couple years ago, and when I first started watching it, I was like, I just disagree with everything you're saying. This just seems so wrong. Then after 10 minutes, I'm like, but wait a minute, I think it's right! I think I've been thinking about this all wrong. It really caught my attention because I didn't agree with it so much but then I'm like, wow, this is really compelling what you're telling me, so maybe I need to rethink. Whenever I have that feeling, I'm like, whoa, I need to pay attention, because I might learn something really good here.
 
00:04:19 OKKEN: That's a good point, and I'm not necessarily saying, since I haven't really dug through this too much, I mean, I respect Brandon as a smart guy. I expect that there's some really great stuff in here, but you may not agree with all of it. We'll try to dig up a link to Clean Architecture too, 'cause that sounds interesting.
 
00:04:38 KENNEDY: It's super interesting, yeah. It's definitely a good one. Cool, well, thanks for bringing this up. I love these Python patterns and I love, you know, how would these traditional, more formalized patterns actually look in our language? There's a lot of interesting examples there.
 
00:04:53 OKKEN: Yeah, what've we got next?
 
00:04:55 KENNEDY: We got this thing called Arctic, and Arctic is an API framework over top of MongoDB and Pandas. The idea is, this is a thing that has been around since around 2012, and its sole purpose is analyzing time series data super fast. Their headline is basically, Arctic, millions of rows per second of time data in Python. That is really quite impressive. I can tell you, a lot of the ODMs and ORMs and stuff, they don't do millions of records per second. The idea is that it basically bakes in Pandas and NumPys and all those kinds of things, it has an underlying data store that's backed by MongoDB, and it actually uses the binary, low-level communication. Instead of trying to store all the data and then bringing it back and de-serializing each row, I think what it does is it actually just stores the binary data of Pandas and it'll pickle NumPy arrays and stuff like that and just exchanges the memory structure, just pulls it straight back and go, "Yep, here it is, let's look at it." It's pretty cool.
 
00:06:07 OKKEN: Yeah, definitely. There's a lot of applications that use huge amounts of time series data.
 
00:06:14 KENNEDY: They say the two big areas they think it's useful is IoT, little tiny IoT devices that maybe Python is running on, and financial analysis. It's sort of been extracted out of the work at this financial company called Man AHL. I've never heard of them, but I think they're mostly an Asian company, but also in US, around investment and so on. They've been working on this, and they actually have some numbers on how this thing performs relative to other types of projects that they pursued or other things that were available. They talk about the different kinds of data that they store and analyze for stock trading and analysis. They say, look, we have this data that's for one day, a whole bunch of it, maybe 10,000 rows, and they can work with those 10,000 rows in four milliseconds. They say, compare that to what we were getting out of SQL Server, which was 2.2 seconds, 500 times slower, which is pretty incredible. And they have this other tick data, you know, like the stock ticker type of data. They say in one second they can process 3.5 megs worth of that data in Python or 15 megs in Java, and there's some other projects they're trying to improve which took, like, 40 seconds versus one. Really, really interesting high performance database-backed time series.
 
00:07:40 OKKEN: Neat.
 
00:07:40 KENNEDY: Yeah. If you're into Pandas and NumPy, and you got to store and query a bunch of time series, whatever the reason, this is probably worth checking out, and it's also tested with pytest, which is pretty cool, right?
 
00:07:52 OKKEN: Of course. Any real project is tested with pytest.
 
00:07:55 KENNEDY: That's right. Of course. One of the things I really like about the Python community is the fact that there's so much sharing of information out of conferences and meetups and things like that. We have another that you've found here for PyCon, right?
 
00:08:13 OKKEN: Yeah, I don't remember when it was, but PyCon Australia, it wasn't too long ago, and they've already got all the videos up. We'll have a link to the PyCon Australia videos. I've got quite a few of them queued up that I'd like to listen to. I'm kind of bad about videos, actually. I often just listen to them and go back and look at the slide parts of information I wanted to capture, but I like listening to talks as well. There's one from Mark Smith. He always amuses me, because his Twitter handle is judy2k, and he won't tell me why. His talk is how to How To Publish A Package On PyPI and that's the one I've watched so far. There's a lot of great talks there, but I think this one's a great one. The end punch line is, "Use cookiecutter." but he blasts through not using cookiecutter, all the stuff you have to do to get it up, and every little piece makes sense, it's not difficult, but there are a lot of different little pieces. But he goes through this entire thing in less than half an hour, so that's pretty impressive to watch and talk about all the different pieces and why they're there and what they're used for. That's a good one to sort of understand what's going on in the packaging world in a very short amount of time.
 
00:09:31 KENNEDY: Oh, that's really cool. There's a bunch of cool ones here. A couple on MicroPython, actually. One on writing fast and efficient MicroPython code, and the other is AsyncIO in MicroPython. Both of those are pretty cool and kind of tie in to what we were just talking about previously.
 
00:09:46 OKKEN: Yeah, and then there's solid APIs. It looks like a lot of good stuff. I know that Australia, since it's a big travel burden to other places, to other PyCons, you'll see some speakers there that you're not going to see at other places, so that's cool.
 
00:10:03 KENNEDY: Yeah, absolutely. And they have 88 videos, so that's pretty solid. Quite cool, that's a good one. Before we move on, I'll tell you about another cool thing. DigitalOcean, a big fan. One of the things that they've released, and we talked about this a couple of times, not very much, is this idea of projects. When you go into your, name your cloud provider, you might have a bunch of servers, a bunch of storage type things, virtual storage blocks, load balancers, all sorts of stuff, and it's really hard to know what goes with what. Do you have a staging environment, a production environment? All that kind of stuff. How do you organize that? DigitalOcean has come up with a feature called projects that lets you group things like your droplets, that's virtual machines, and floating IPs and back storage-like spaces into these different use cases. So, yeah, actually, we're done with this project so we can turn that server off and destroy it and not, like, the fear of, I don't think we're using this one, but I'm not going to destroy it, I'm not going to delete it, 'cause what if I'm wrong? So, very cool feature you can take advantage of for all of their stuff. Check them out at pythonbites.fm/digitalocean and they'll give you $100 credit for new users.
 
00:11:18 OKKEN: That's awesome.
 
00:11:19 KENNEDY: Let's talk about another cloud provider. Right on the back of that. One of the ways that you can run your code on the internet is like I just described with DigitalOcean, like I do for our stuff, is to create some virtual machines and various other pieces and use it as so-called infrastructure as a service, right? But you might also use platform as a service. Like, here's my code, run it. Google App Engine, Heroku, those types of things. Google App Engine has a pretty interesting announcement, and it's interesting for both it's good now and, like, oh my gosh, I can't believe it was like that. The announcement is that Google App Engine has released their second generation runtimes, which, the Python one is now based on Python 3.7. It's pretty awesome, right?
 
00:12:04 OKKEN: It is.
 
00:12:05 KENNEDY: You want to run some code, boom, here's my Python 3.7. That's really good. You might think, oh, Michael, what was the previous one, 3.6, 3.5? No, I believe the previous one was 2.7.
 
00:12:15 OKKEN: Oh, no.
 
00:12:16 KENNEDY: Until now, like, if you were using Google App Engine, I believe you had to use a CPython period. That was mid 2018 that I just said that. That wasn't a statement around 2012 or something. That was just now. We'll let bygones be bygones, and now it's Python 3.7, which is pretty awesome. Apparently it's pretty big upgrade. You get a bunch of new things like, for example, it's based on their new sandbox container docker-like things and it removes a bunch of restrictions like, in addition to only running on the old Python, a CPython, you could only use a white labeled set of packages. Now, in the new Google App Engine, you can use arbitrary packages, just put them in a requirements file.
 
00:13:01 OKKEN: Oh, wow.
 
00:13:01 KENNEDY: Which is pretty sweet.
 
00:13:03 OKKEN: That's a big change.
 
00:13:04 KENNEDY: It is a pretty big change. A lot of cool things like auto-scaling and things that are a little bit easier as well. Anyway, if you're interested in Google App Engines platform as a service for Python, it just got many times better.
 
00:13:16 OKKEN: Yeah, neat.
 
00:13:17 KENNEDY: Brian, I typically write my code in Python files, not really in notebooks per se, how about you?
 
00:13:25 OKKEN: Yeah, mostly in files, but I'm trying to learn Jupyter Notebooks some and utilize them. They're kind of fun, especially in data science-y realms or for looking at plotting data, notebooks are fun. There was a person named Joel Grus that says he does not like notebooks.
 
00:13:47 KENNEDY: And Joel is notable 'cause he's not a random dude on the internet. Joel Grus has written a book called Data Science from Scratch. He's done a lot of work in data science. I've even had him on Talk Python many moons ago.
 
00:13:59 OKKEN: Yeah, and this wasn't just a one-off comment. He gave this talk at JupyterCon, and that's kind of hilarious. The video for that is not available. I couldn't find it. It was just recently or still going on, I'm not sure. But the slides are up, he put the slides up, and for one, he puts me to shame. This presentation has got so many animations and pictures and stuff, and I haven't even gotten through it yet. It's 100 pages long or more. It's really good but it's a serious discussion about some of the issues with the problems with notebooks that people new to notebooks don't quite get, and people old to notebooks sort of know it and don't really think about it anymore. One of the big ones is that there's hidden state. Essentially, we think of files, like you said, we normally work in files so they get run from top to bottom except for functions, they get interpreted as functions, and then when they are run, they're run top to bottom essentially, and notebooks are not like that. You can jump around and execute different bits of code in different orders if you feel like it. That stateness can lead to weird, confusing things. It's just a gotcha to know about, and then he goes on to talk about some of the issues where if you start learning how to code with notebooks, you may end up developing some bad habits like importing notebooks instead of trying to just, you know, that's a thing you can apparently do. You can define some functions in a notebook and then import them into another notebook. I mean, wouldn't it be better to just put them in a different library, in a package?
 
00:15:48 KENNEDY: Just use the package, use the library, exactly.
 
00:15:51 OKKEN: Yeah, so some of those. I'm highlighting this not because I think notebooks are evil but because I think it's important to listen to people, you know, listen to voice that says they aren't a silver bullet, they have their issues also, and we just need to be careful and make sure you don't fall into those traps.
 
00:16:12 KENNEDY: Yeah, these are really interesting, and these are certainly issues to look out for. While this is a funny presentation, I cannot wait to watch the video. Joel, fill us in, please let us know when it's out, or if someone else sees it come out, shoot us a note on either email or Twitter, 'cause this is fantastic.
 
00:16:27 OKKEN: Plus, also, I can't even imagine how long it took to put together this presentation, because there's a lot of animations in there. It's quite a riot.
 
00:16:36 KENNEDY: It is quite a riot.
 
00:16:37 OKKEN: Yeah, anyway, there's that. The other side of, notebooks aren't awesome.
 
00:16:42 KENNEDY: Yeah, it's pretty interesting. We've had a couple of conversations around the various PEPs that have been maybe causing some kerfuffle in the community. Obviously, the biggest one was PEP 572 about the in-place assignments, and that was the thing with all the stress around it that Guido said, "Hey, after this, this is my last one. I've given my all, I'm out of here. You guys, it's up to you." We actually had Brett Cannon and Carol Willing on Episode 87 to talk all about that. One of the things we talked about was, what comes next? It's not down to Guido to make the final decisions which is how it has worked, how will the Python community decide what it's up to? Barry Warsaw has published five PEPs at least around this. I don't think this is a decision. It's sort of a structure to further the conversation and make a decision. He published not too long ago PEP 8000, which is Python Language Governance Proposal Overview. I don't know if this is common in PEPs, I haven't seen it that much, but it's a gathering of other PEPs that are specific details. So, there's PEP 8001, 8002, 810 and 811. The first two are about voting, and the ways in which this government might work. Then, the higher ones, the 810s are actual proposed models. And there's a third one, 812, that I forgot to put in the notes. For the government styles that we have, the BDFL governance model is one of the proposed options which is to elect a new person who is the final decider. Basically, Guido stepped down, who is going to take that place to now participate in that way? We also have the council governance model. We talked about interesting things, like, should there be an even or odd number of people on the council? Then, the last one, I think, let me pull that up. I think it is the community governance model, and that one's a little more freeform. These are all different ways of possibly arranging and solving that problem. There's a lot of examples, like, let's see how Rust did it. Let's see how OpenStack manages their organization. There's a lot of concrete stuff there. Anyway, that's pretty cool.
 
00:19:11 OKKEN: Yeah, that's interesting.
 
00:19:14 KENNEDY: If you have a strong thought on this and you want to participate, get in there, make comments, and let people know what you're thinking, because it's still open. It's not anything decided, it's still up in the air, so if you want to have a say, now is the time to make statements.
 
00:19:29 OKKEN: Wow, it's like government working in our own community.
 
00:19:35 KENNEDY: Incredible. So, it's pretty cool. I don't know where it's going to go, but I like that it's all laid out like this. My guess is that it's going to go down the council model, maybe with, I don't know, I think it's going to go down the council model, but we'll see.
 
00:19:51 OKKEN: Yeah, I think that whatever they do, if there's a council, they should have to meet together to make decisions and pass around a talking stick or something.
 
00:20:04 KENNEDY: Yes. I love it.
 
00:20:09 OKKEN: We could come up with something weird they have to follow.
 
00:20:12 KENNEDY: How about the Python staff of power that you were carrying around?
 
00:20:15 OKKEN: Yeah, but then, should it be the blue and yellow one or should it be the green and yellow one?
 
00:20:21 KENNEDY: That is a big question. Yeah, I don't know.
 
00:20:26 OKKEN: Sorry, green and gold. People in Australia say it's gold, not yellow, but it looks yellow to me.
 
00:20:32 KENNEDY: Yeah, I thought that stick was a big hit. If people don't know what you're talking about, what should they Google to find the stick?
 
00:20:37 OKKEN: I think it's Pythonic Staff of Enlightenment? I don't know, is that...
 
00:20:41 KENNEDY: That's got to do it. How many hits on Google can there be for that?
 
00:20:45 OKKEN: I don't know.
 
00:20:46 KENNEDY: Awesome, they should have to pass that thing around. That's it for our items this week. You got anything extra you want to share with folks?
 
00:20:53 OKKEN: I don't actually, just trudging along. We've got a couple more testing codes out.
 
00:20:58 KENNEDY: Very nice.
 
00:20:58 OKKEN: How about you?
 
00:21:00 KENNEDY: I've got some Talk Python stuff queued up to be released shortly. I have been recording some courses which are going to be awesome and I'm very excited about them. Doing a bunch of stuff in parallel, so I'll let you know when that's further along. I do have two things I want to talk about this week really quickly. One is, we got a message on Twitter. I don't have the name of who sent us. This was John, actually, thanks John. He sent us a heads up that Brian Granger, one of the guys behind IPython and Jupyter and all that stuff from the very early days, he's giving a free webcast, and it's an ACM sponsored thing. It's Project Jupyter from computational notebooks to large scale data science with sensitive data. So, if that sounds interesting to you, I've put the link in there. It's this Friday. This episode probably will come out on Thursday, so you've got to take action right away if you're listening. There's probably a recording or something afterwards. You can check that out. The other thing is, we talk sometimes about the popularity of Python. Yeah. I don't want to beat this one to death too much. It's not really worth its own item, but Python continues to climb yet another ranking. The TIOBE index is one of the more well-respected, more long-running ways of ranking programming languages, and I think when we started this podcast, Python was either fifth or sixth. I think it was sixth on this list. It is now third.
 
00:22:22 OKKEN: Probably because of the podcast.
 
00:22:24 KENNEDY: Certainly partly because of it. That may be a very small part, or maybe it's meaningful, but what's really interesting is it's now above C++, C#, JavaScript. It's way above JavaScript, and JavaScript is going down. It's above Ruby, it's above many, many things. What it's not above is Java or C. Not only is it not above them but it's, like, half. It's 7.6% to C's 15.4%. It's going to be a long time, if ever, until it gets to a two or a one, but it's definitely doing quite well.
 
00:23:02 OKKEN: Yeah, what is the TIOBE index? I'll have to look into that.
 
00:23:07 KENNEDY: Yeah, if you look into it, they talk about their philosophy and where they measure stuff from. It's been a long time since I read it so I don't remember the details, but they do lay out where the ranking comes from.
 
00:23:17 OKKEN: OK.
 
00:23:17 KENNEDY: Cool, yeah. Well, that's it for this week. Thanks for chatting with me, Brian.
 
00:23:21 OKKEN: Thank you, bye.
 
00:23:21 KENNEDY: Bye. Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
