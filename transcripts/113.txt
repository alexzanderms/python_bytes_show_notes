00:00:00 KENNEDY: Hello, and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 113 recorded January 16th 2019. I'm Michael Kennedy.
 
00:00:10 OKKEN: And I'm Brian Okken.
 
00:00:11 KENNEDY: And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean and get $100 free credit for new users. Brian how you been?
 
00:00:19 OKKEN: I am great.
 
00:00:21 KENNEDY: Nice, Me too.
 
00:00:21 OKKEN: Cold though.
 
00:00:22 KENNEDY: Yeah, it's ... I don't know what happened, It's like winter mid January, I guess it's suppose to be cold, but yeah, it's cold.
 
00:00:28 OKKEN: Maybe, my daughter said this morning, "Like, when are we going to get snow?" and I said, "Well I hope never because I don't have snow tires yet, so."
 
00:00:35 KENNEDY: I just brought snow tires for my car so I can drive up to the mountains and go skiing real easy. So I'm ready, it can snow whenever, but yeah, if it's not going to snow let it be a little warm. So speaking of wintery type things, Advent calendars, those are a type of things that folks use a lot in December right?
 
00:00:51 OKKEN: Yeah, and actually this last December I totally meant to do the Advent of Code thing, but I didn't, and also one of the things I'm doing this upcoming year is I'm trying to ... I read a great article about practicing programming. I want to try to do, incorporate more practice outside of just doing my own work at work, but practicing extra things and there's challenges and code things and little snippets and everything, but sometimes I just want to like ... 20 minutes of reading something and this is great. So I ran across this, it's from Micheal Fogleman, it's an Advent of Code 2018 solutions, and it's pretty much he just talks through all the different... He went through all the Advent of Code for 2018 and then he solved them in Python. A lot of people have posted their solutions on GitHub. This is a nice write up that he has to describe how he solved them and there's some nice code comments, it's really put together well.
 
00:01:48 KENNEDY: Yeah, I like it, he just sort of cruise through and see the problem, see the solutions, see what you think. I find looking at other peoples solutions of fairly simple programs, especially compared to your own, it's a pretty interesting experience. Like, oh yeah I totally solved this, and then you look like, oh wait, they did that in two lines and mine took 10 or why did they do it that way versus this, it's pretty cool.
 
00:02:10 OKKEN: Yeah, looking over it, reading code is one of the ways to get better, so this is a good way to practice is reading other peoples code.
 
00:02:16 KENNEDY: Yeah, it's not like read the Django source code or read the requests source code and it's like a huge undertaking, right? These are 10, 20, 25 lines of code.
 
00:02:25 OKKEN: Yeah, yeah definitely. So I dropped this in because I think I'm going to start trying to incorporate, the sprinkle in some reading, reading of these in with my daily practice.
 
00:02:35 KENNEDY: Yeah, I think that's a good idea. Do you know what the most popular platform that Python runs on is, Brian?
 
00:02:40 OKKEN: Probably Macs, Mac laptops.
 
00:02:42 KENNEDY: A lot of Mac, a lot of Mac laptops, a lot of stickers on em, that's what you'd believe if you were at a conference like PyCon or something. Everyone is running around with their Apple logos glowing or sadly no longer glowing on the new Macs, but nonetheless it feels like when you're in those environments it's mostly Mac and some Linux and obviously server-side Linux, but really a lot of the surveys say most of the users, you know, buy a pretty wide margin are actually on Windows. So we're talking students, we're talking corporate environments, a lot of folks who don't show up necessarily carrying those around at conferences, but that's where it is, right. So the big news is that the PSF broadly, and specifically Steve Dower, once of the Core Devs, who works at Microsoft has released Python 3.7 as an official app on the Windows 10 store.
 
00:03:35 OKKEN: Nice.
 
00:03:37 KENNEDY: So there's all sorts of stuff that is really awesome from that, so that means you can just go to your Windows store and search for Python and say, "Yeah, I want that." You can actually already do that for like Ubuntu subsystems and stuff, like you can do that for Linux distributions surprisingly and Linux subsystems in Windows, but not Python and some of the stuff that's really cool is it automatically takes care of a couple of problems that were incompatibilities between Windows and the other operating systems. So for example, python3 is a command in the Windows 10 app store version, but not the one you actually install separately. So now if you see instructions like type python3, this, that, like that now works on Windows also.
 
00:04:20 OKKEN: That's nice.
 
00:04:20 KENNEDY: Yeah, so it's a little more similar. It automatically puts that stuff in the path. I believe the place where you pip install stuff no longer requires admin access to do it, because it's under you're user profile as part of the store stuff, so a whole bunch of good things.
 
00:04:35 OKKEN: Have you talked to anybody to find out when we're going to get to the point where the default Python is going to be Python 3 anyway?
 
00:04:42 KENNEDY: That would be sweet, wouldn't it? You know, all the stuff I've seen about it is like it would be great, but it would also cause a lot of problems.
 
00:04:48 OKKEN: Yeah, okay.
 
00:04:49 KENNEDY: We saw that Red Hat Enterprise Linux is actually moving away from having a Python command at all, so now it's either Python 3 or Python 2 and you have to be super explicit everywhere. So I would love to see that, but I don't see... On my systems python means python3, because I've changed the path around so that it works that way, but... Not everywhere, you know.
 
00:05:10 OKKEN: Yeah, you recently talked about this and a lot of other things on Talk Python, right?
 
00:05:15 KENNEDY: Yeah, I had Steve Dower, come over on to Talk Python and talk about his retrospective of Pythons journey at Microsoft, which is actually really interesting, it sort of matches the open source journey from, you know, a very closed source company to way more open source and there's a lot of cool stuff going on there. They have a ton of core developers working at Microsoft, actually, it's pretty neat.
 
00:05:37 OKKEN: Yeah, that was a really interesting conversation really.
 
00:05:39 KENNEDY: Yeah, thanks. So there is one limitation on the Windows store version of Python that maybe it's worth throwing out there while we're talking about it is they don't have full write access to shared locations, like for example the registry or c:\Program Files or stuff like that. Right, so it's kind of a only has access to your user profile stuff, you know, whatever you can do without raising your permissions, that UAC stuff. So that's a limitation that you may run into, because the Windows store apps are more locked down than regular apps, but still I think this is super cool. You can go and just say, "Hey, you don't need to be an admin you just go to your Windows store and you click this little button." and you'll also have python3 as a command, it's quite nice.
 
00:06:19 OKKEN: Can you write stuff that's outside of your little environment, not write stuff, but read it?
 
00:06:23 KENNEDY: Yeah, I'm pretty sure you can, like you could read the registry, I would think, things like that. Whatever you would be able to do without that little this program would like to use admin rights yes, no dialog popup, I suspect you'd be able to do, yeah.
 
00:06:35 OKKEN: I think that's a good idea, anyway so it's going to be a in the store.
 
00:06:39 KENNEDY: Yeah exactly, so. You know, I would love to see that on Mac OS, right? If Python 3 was an option on Mac OS, because the auto updating feature is pretty cool. Like you just wake up one day and boom you have the next version of Python. Of course that could cause it's own problems, but it wouldn't be bad.
 
00:06:54 OKKEN: Python 5, what's that?
 
00:06:56 KENNEDY: Oh, my goodness, it's amazing and nothing works anymore, what happened? Nah, that's pretty cool though, I'm happy to see it getting some serious attention over there. Definitely. All right, what ones next?
 
00:07:06 OKKEN: There's a project so new that it like came in in November this last year. It's a project called Bocadillo.
 
00:07:13 KENNEDY: Yeah that's how I would say it as well, yeah Bocadillo. Yeah, I think so.
 
00:07:16 OKKEN: The tagline is "A modern Python web framework filled with asynchronous salsa." I'm not really going to talk about that, I'm going to talk about a article that the the maintainer it's Florimond Manca, wrote an article called How I Built A Python Web Framework and Became an Open Source Maintainer. It's this really fascinating article talking about pretty much what he went through. He knew that there were a lot of other web frameworks already, but he built this to try to learn the internals of how to build a web framework and then just did it in the open, but there's some really great advice. One of the things he credits from somebody else called Funky Bob is, "Reinventing the wheel is an awesome way to learn, and sometimes what you learn is just how much are your existing frameworks are doing for you." I thought that was cool.
 
00:08:01 KENNEDY: That is very cool.
 
00:08:03 OKKEN: This thing went from like just inception to building it to putting up docs and getting extra maintainers in like the course of a month in November and now it's still going, but there's... Like one of the discussions in the article is talking about how he tried to put as much in the read me as possible right off the bat, like a change log and contributing guidelines and how to work it and everything, but the read me got huge so he... that migrated to a GitHub pages static site generator doc site, and then also one of the things is he had all of his to-do items of what he wanted to work on next in a Trello doc in Trello, but nobody else can see that. So he moved Trello issues to GitHub issues, and this process of trying to do a new project in a way that is open and encouraging other people to help out. Then at the end of the article it goes through... I'm not going to go through all of these, but there is a whole bunch of tips on what to do the project to make it encourage other people to get involved and this is like a gold mine of information for people wanting to start an open source project.
 
00:09:13 KENNEDY: Yeah, if you're thinking about an open source project or how to make it grow there's, you're right there is an incredible amount of tips. I mean I've read it, there's probably 45. The specific things like this helps, this helps, this helps, right, so that's really awesome.
 
00:09:27 OKKEN: Yeah, if all this information at the bottom he could have written a book on this, and maybe he will.
 
00:09:33 KENNEDY: Yeah, maybe he will.
 
00:09:34 OKKEN: But thanks, Florimond, for putting this together.
 
00:09:37 KENNEDY: Yeah, it looks great, and the framework looks pretty nice as well, I like it. I feel like a lot of these web frameworks are like slight derivatives of the Flask API. They seem to all be centering around Flask for some reason, but, you know, Flask is pretty good, so that's cool. Speaking of cool I heard Kubernetes is cool, Kelsey Hightower told us it was. He definitely showed us a cool demo at PyCon.
 
00:09:59 OKKEN: Yeah, I believe anything, Kelsey, says so.
 
00:10:01 KENNEDY: Yeah for sure. So Kubernetes is a way to basically orchestrate containers. Right, often you don't want to just run one container, you want to run multiple ones, one with a database, a couple web front-ends, things like that and it's a really nice way to like do zero downtime deployment on top of that and so on. So DigitalOcean, who's sponsoring the show of course, has just officially publicly released no longer preview status their DigitalOcean Kubernetes service. So it's like a manage service and you can basically sign up for it and configure a Kubernetes cluster in a couple of seconds and provision it and login within, you know, a couple minutes, so it's super easy to scale. You take inbound traffic and just access your data over block storage, pass it through your load balancers, it's all great. So they also say they saw 2.4 times, not percent, times better price to performance compared to other providers. So I can definitely believe that DigitalOcean's awesome. So anyway if you're thinking about this check them out at pythonbytes.fm/digitalocean, get $100 free credit for new users and try your hand at some Kubernetes clusters.
 
00:11:13 OKKEN: Nice.
 
00:11:13 KENNEDY: Yeah, indeed. You could even probably, you know, serve up Bocadillo on Kubernetes, that'd be fun. Well one thing that we talked about recently and so this is a little bit of a follow up is the maintainability score. Do you remember what we were talking about with the maintainability score? It was like a sub-idea of something that we were covering recently.
 
00:11:34 OKKEN: I totally remember, but I don't remember the main topic.
 
00:11:37 KENNEDY: I don't it's always so many things we cover every week. But yeah, it's one of the projects and it was like, "Hey this has a maintainability score of A, and we're like wait, Where did you get that score?" So in front of the show, Anthony Shaw, sent over... You know, he's done this project called Wily. Did you guys talk about it on your show?
 
00:11:52 OKKEN: We talked about it briefly, yeah.
 
00:11:54 KENNEDY: Yeah, so Wily is a Python app for tracking and reporting on timing and complexity and tests and things like that. So what you can do is you can point this at your project and tell it to analyze it and then generate a bunch of reports and it has two types of reports that are relevant to this maintainability index. It has just a number, like a percentage and I think higher is better there. It also has a rank from like A to F, like a grade score on it. So you can run this against your code and ask it, and then you could even graph that kind of stuff over time. So it's getting... On the reports it'll say oh it's lost some maintainability or it's gained some maintainability, which I thought was pretty cool.
 
00:12:36 OKKEN: Yeah, that is cool.
 
00:12:37 KENNEDY: Yeah, so check out Anthony's project. I'll link to it, of course in the show notes. You can see how well or not well Wily thinks your app is doing. It even has a GitHub pre-commit hook as all the cool things do these days.
 
00:12:51 OKKEN: Yeah, that's a fairly new project too. Wily's only been around for a couple, two/three months or something, so.
 
00:12:57 KENNEDY: Yeah absolutely, it's pretty new. Would you say it's awesome?
 
00:13:00 OKKEN: I would say it's awesome, I think so, yeah.
 
00:13:02 KENNEDY: What else is awesome?
 
00:13:03 OKKEN: I kind of like the awesome lists. So the awesome lists, if you're not familiar with them are, they're usually on GitHub, but they're basically the read me is filled with links to a whole bunch of other other projects of a particular type. There's two awesome lists that I came across recently. One of them is Awesome Python Security Resources and the other one is Awesome flake8 Extensions. So as far as security resources it covers tools and education resources and then a couple companies also.
 
00:13:34 KENNEDY: The very first one that it has listed here is secure.py, which we talked about just I think last week or just recently.
 
00:13:39 OKKEN: Yeah, and I think we've talked about Bandit also for static analysis. Some of these we've talked about and then I also, I really liked that it also included some education resources if you want to learn more about security.
 
00:13:51 KENNEDY: For sure.
 
00:13:52 OKKEN: For your software, so this is a nice place to go for security stuff. Then I like flake8 anyway just as a tool by itself for static code analysis, but I like that it has a plugin system with it so there's lots of different extensions to flake8.
 
00:14:09 KENNEDY: So, Brian, for the couple of folks out there who don't know what flake8 is, flake8 is, give em a quick, the elevator pitch.
 
00:14:15 OKKEN: I don't know the elevator pitch. It's not pep8 anymore, it's like pycodestyle or something like that.
 
00:14:20 KENNEDY: Yeah. Basically the formatting conventions of the language right?
 
00:14:26 OKKEN: Yeah, flake8 itself runs the... checks for those, but it... and I think the eight is because it checks a whole bunch of other things what it does cyclical, some complexity algorithm. Gosh, you're putting me on the spot here man.
 
00:14:40 KENNEDY: Yeah, I know, that's close enough though. So basically it analyzes the quality of your code right? But it only does so much.
 
00:14:46 OKKEN: It's defiantly a static analysis. It's just looking at it just without running it.
 
00:14:51 KENNEDY: So you found a couple of plugins for it?
 
00:14:53 OKKEN: Yeah, the extensions, there's a whole bunch of em. There's like some security ones that actually overlap. The other, the security resources in the previous list you can run them from flake8. So like the static analysis that's available for like Bandit, I think there's a flake8 Bandit. There's also a couple of my favorites are... This is interesting, there's a flake8 pytest extension that, I want to try this, it doesn't actually run your pytest. What it does is it checks to make sure that you've got pytest style assertions, so...
 
00:15:26 KENNEDY: That's cool.
 
00:15:26 OKKEN: One of the benefits of pytest is just regular assertions and not like the unit test stuff. If you've converted from unit test to pytest you might still have some of those other assertions laying around and this one will try to get rid of those.
 
00:15:39 KENNEDY: Yeah, one that pops out to me is like flake8-docstrings, which actually checks the docstring code for you, which is pretty awesome. It validates a restructured text of your documentation, that's...
 
00:15:54 OKKEN: Oh that's nice, yeah.
 
00:15:56 KENNEDY: Yeah, and so there's just so many in here.
 
00:15:58 OKKEN: Yeah, there was... I didn't write this one down, there was one that like checks it checks to make sure that you're not mocking things that didn't exist, so. The point of mock is to fake out existing functionality so that you do something different. One of the things that you can muck up with is you can be mocking the wrong function name and I'll work just fine in your tests, but your code won't run. This plugin will check to make sure that you're mocking real existing methods and not made up methods.
 
00:16:28 KENNEDY: Yeah, cool, well these are great. These are awesome finds, Brian. Another thing that's awesome is logging. So remember a couple weeks ago we talked about a loguru? Loguru, a loguru. We'll just trying all the variations til one of em hits I'm guessing and of course...
 
00:16:45 OKKEN: I think it rhymes with kangaroo.
 
00:16:47 KENNEDY: It does, and so just like when we talked about GUI frameworks we were like, "Oh here's like a couple of em'" and then just people were like, "Oh and did you know, did you know?" So here's another really cool logging framework that Robert Young sent over to use to say, "Oh you talked about a loguru, you should definitely check this out." So this is called fastlogging. So fastlogging is a replacement for the standard logging module and it's mostly compatible, which is pretty cool, but would you guess from the name that it's faster?
 
00:17:15 OKKEN: I should hope so.
 
00:17:16 KENNEDY: So basically the point is logging can be kind of slow it turns out in the standard logging module, but this one is faster, and not just like 20% faster, it's like five times faster for a regular file and if you're doing rotating log files It's actually about 13 times faster. So if you're doing a lot of logging that is turning... basically the logging is slowing down your app think about fastlogging.
 
00:17:38 OKKEN: Yeah, nice.
 
00:17:39 KENNEDY: Yeah and it has a bunch of cool features. So like if you install Colorama, which is a great color way to do output on a log consol it'll actually do colored logging when it's logging to print, you know, to standard out. You can set the maximum file size and rotating a lot of options on the rotating stuff. It'll also let loguru compress the older file, older log files, which can be 10x or more savings, like those log files compress really, really well. You can do like, only log every so often based on domains, different files, like all sorts of stuff, you get callbacks. One thing that's kind of cool is I'll do a logging on background threads per file.
 
00:18:20 OKKEN: Nice.
 
00:18:21 KENNEDY: Which is pretty cool if you configure it, so if you're like, all right I want to log this stuff, but I know that might slow down my app and I don't want any slow down. So this will basically push it off to a background thread which it'll eventually pick it up and it'll write it. So it keeps that flowing right along maybe in a web request or something like that. It's pretty cool.
 
00:18:38 OKKEN: Yeah, yeah, very nice.
 
00:18:40 KENNEDY: So thanks, Robert, for sending that in, that's a good one. Brian, that's it for our official items. You got anything else?
 
00:18:46 OKKEN: I actually don't, not right now.
 
00:18:47 KENNEDY: Nope, all right right on.
 
00:18:47 OKKEN: How about you?
 
00:18:49 KENNEDY: Well I have two things that I'd like to just throw out there really quick. First of all I'm doing a live webcast, but it'll also be recorded, over on January 24th at 11 a.m. Pacific time. Basically working and showing async and await in Python and building a little app that uses that, so.
 
00:19:08 OKKEN: Nice.
 
00:19:08 KENNEDY: If you've got a free hour and you want drop it, check that out, I'll put the links in the show notes there. We already talked about, Anthony Shaw, and his Wily but he also sent over a heads up, which I also got from GitHub to watch your YAML. YAML apparently had some pretty decent security vulnerability. Like I don't know how many people know, but you can actually just straight up execute arbitrary Python code in a YAML file. That's bad right? So hey upload your configuration file and we'll just run it for you and like the configuration file is like your username is this, password is that, database format is this, bang Python format the system or do other bad things. Like it was really crazy that the YAML format just let's you embed code into what is otherwise supposed to be a static file. All right, so the warning is that you're supposed to use, what's it called safe_load instead of load, but they've fixed some stuff to make that, basically make that more obvious and with a new version of PyYAML. So if you're using PyYAML GitHub will give you a warning about this. Anyway it seems like it could actually have a lot of consequences if you don't update that, so check that out.
 
00:20:19 OKKEN: Yeah, but also if you're using PyYAML updating to the newest version should fix that right?
 
00:20:24 KENNEDY: Yes, you should, but what's weird is... We talked about ZeroVer. The way you fix the PyYAML problem is you take a an official like... like 1.3 release, and you upgrade it to a beta release, so it's like... So you have to install the beta version to not have the security problem, which I don't know, take that for what it is.
 
00:20:44 OKKEN: Yeah, okay, come on PyYAML people.
 
00:20:47 KENNEDY: That's right. All right, do you have a joke for us this week?
 
00:20:50 OKKEN: I don't.
 
00:20:51 KENNEDY: I have a joke. This is an oldie, but a goodie. It's about Python, which is pretty sweet. So if you're out there and you type Python on your terminal command prompt and then you just import antigravity, like the command, right, import antigravity. It turns out... Have you done this, Brian, before?
 
00:21:09 OKKEN: Yeah. It's good to bring it up, because some people don't know about it.
 
00:21:11 KENNEDY: Yeah, exactly this is one of the better things built into the Python REPL honestly. So what it does is it actually opens up an xkcd comic, which is a great joke about Python's packages and libraries. So there's this picture, there's a stick figure flying up in the air and the stick figure on the ground with obviously amazement on his blank face, stick face, says, "How are you flying?" "Python! "I just learned it last night, everything is so simple. "Hello world is just print hello world." The guy on the ground says, "I don't know, "dynamic typing, whitespace?" The guy in the air says, "Come on, join us. "Programming is fun again, it's a whole new world up here." "But how are you flying?" "I just typed import antigravity." "That's it?" "I also sampled everything in the medicine cabinet for comparison, but I think it's the Python." It's an oldie, but a goodie, right?
 
00:22:02 OKKEN: Yeah, yeah, and while you're playing on the command line it's not a joke, but import this it's another hidden Easter egg, not very hidden, but it'll show you The Zen of Python.
 
00:22:13 KENNEDY: Yep, that's awesome. I'm going to save another import joke that you can do on the terminal or in the REPL for next time or a time after. But yeah, I really love it that these kind of jokes and humors things are built in there it's not like Python has been sterilized of all humanity.
 
00:22:29 OKKEN: Yeah, antigravity connects Python with an xkcd, which is kind of neat and one of the things I like... I can't remember where to get these, but one of the things I like about xkcd is they often talk about things that you might not know about. There's another place that I can't remember where it discusses like why it's funny so that you can read about things you don't know about.
 
00:22:50 KENNEDY: Yeah, absolutely, absolutely.
 
00:22:51 OKKEN: Well thanks for recording this week.
 
00:22:53 KENNEDY: You bet, it's always fun and I always learn something. So thanks a bunch.
 
00:22:56 OKKEN: Bye.
 
00:22:57 KENNEDY: Thank you for listening to Python Bytes. Follow the show on twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S, and get the full show notes at pythonbytes.fm. If you have a news item you want featured just visit pythonbytes.fm and send it our way, we're always on the look out for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
