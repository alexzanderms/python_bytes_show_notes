00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 115, recorded January 29, 2019. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:13 KENNEDY: And Brian, we got a special guest, don't we? Nina Zakharenko. Say hello, Nina, how you doing?
 
00:00:18 ZAKHARENKO: Hey everyone, I'm very proud of you for pronouncing my last name correctly.
 
00:00:20 KENNEDY: Thank you. Brian and I, we specialize in mangling people's last names on this show, but we try.
 
00:00:29 ZAKHARENKO: This time, you nailed it.
 
00:00:29 OKKEN: Thank you.
 
00:00:31 ZAKHARENKO: For those who don't know me, I'm a Senior Cloud Developer Advocate at Microsoft and my focus is on Python. You can find me on Twitter @NNJA, that's like ninja, but without the I.
 
00:00:42 KENNEDY: Yeah, that's a pretty cool Twitter handle. Awesome, and also, this episode is brought to you by Data Dog, check them out at pythonbytes.fm/datadog, tell you more about that. You know, Brian, I expect quite a bit of stuff out of Data Dog, I would say I have great expectations when I go use their stuff, what do you think? How about you?
 
00:00:58 OKKEN: Yeah, yeah, I do too, yes. For our first item, we have great expectations. It is a package that was shared by a listener and I don't know the listener 'cause they shared it with you, Michael, and you didn't tell me who it was.
 
00:01:12 KENNEDY: I just sent you over the link and I forgot, but thank you for sending it in. Next time we'll do a better job.
 
00:01:17 OKKEN: We're just also trying to make it so that sharing information with everybody else is not an ego boosting exercise, because we won't remember your name.
 
00:01:26 KENNEDY: Or we'll mispronounce it.
 
00:01:26 OKKEN: Unless it's important to you then let us know, yeah. No, Great Expectations, it's kind of cool. It's this idea that we have a lot of tools out, for instance, pytest, to test your code, but there's in a lot of stuff, the data that you're running your code through, like in data science or a lot of data pipelines, the data is important, too, and being able to check to make sure your data fits what you expect it to fit, what look like is important, so these are some really cool expect calls. They're a bunch of functions that start with expect. They aren't assertions, so they aren't going to throw an exception, but what happens is, you maybe on some of them, you pass them a DataFrame, like I'll just give one as an example. You expect a column to exist, so you give it a DataFrame and you give it a specific column, and you want that column to actually be there, and if it's not, you get actually, regardless of whether the answer, it comes back in the form of a JSON object and it has like a valid, and you can say whether or not it, you know, if it failed or passed the test. It also shows you the parts where it didn't, so this is, there's a little video actually, demo video that they have, where you can see it in action using a Jupyter Notebook, and it's kind of cool. It shows you exactly where it's failing, so I imagine doing this interactively to look at your data would be helpful, but also you could probably put this in place in some data cleaning steps to make sure things are around, like making sure there aren't any nulls in a column. There's a whole bunch of different things you can assert on, or expect on your data, this is pretty fun.
 
00:03:06 KENNEDY: Yeah, it's pretty cool, some of them are totally straightforward, like, expect these values to be in the set. Others, little more data science and mathematical focused, like expect the chi squared test P value to be greater than such and such, right? I honestly haven't done a lot of chi squared lately, but I don't do that much data science, on the web. It's more we use addition and stuff like that.
 
00:03:31 OKKEN: Yeah, but some of the fun things, like it was in the video example, expected some data to be in, or data from a column to be in a particular set, and it was either male or female. First off, like, how binary of this, but anyway, the males, a lot of them came back with spaces in them, so doing some of this exploratory thing might tell you where you need to add some cleaning steps or dealing with nulls or things like that. The followup, I'd like to hear how people might be able to use this, how it's used exploratory-wise, but how, I'd like to see somebody using it in their pipeline stages and how that works, whether you, I guess I imagine if you had it in production, you'd have some code that would, if it failed an expectation, you'd write a log entry or something, or, I dunno what you'd do.
 
00:04:21 KENNEDY: Yeah, or maybe return, if you were accepting data over a web method, right, somebody's doing ETL and they're like, here, we're submitting this new set of data. You could return like 400 bad request to indicate, no no, something's wrong with the data you sent me, things like that, possible. Nina, what do you think about this?
 
00:04:38 ZAKHARENKO: I think it's very cool, and it's probably going to be pretty helpful.
 
00:04:42 KENNEDY: I like it as well. What I like about it is it lets you take what would be a little algorithm you'd have to write to say, go through and test all of, say, the chi square values and then compare them and then assert on that, now you just do one line and it does it on the whole data set, the whole DataFrame. That's pretty sweet.
 
00:04:56 ZAKHARENKO: Yeah, I'm going to be watching the video demo after the show.
 
00:04:57 KENNEDY: Yeah, right on. So the thing that you are going to cover next, the timing is incredible, Nina. I literally got a notification that I had ordered one of these and it shipped today and it's on its way to my house, so I'm very excited. Tell people what is on its way.
 
00:05:15 ZAKHARENKO: Would that be the circuit playground express?
 
00:05:18 KENNEDY: It would be, yeah.
 
00:05:18 ZAKHARENKO: Awesome! Yeah, so I wanted to chat a little bit about using CircuitPython and MicroPython to write Python for wearable electronics and embedded platforms. I've been playing with electronic projects as a hobby for probably about the past two years now, and the past few months, I've been focusing my attention on Python for microcontrollers.
 
00:05:39 KENNEDY: Right on, and what kind of little things are you making with your projects?
 
00:05:41 ZAKHARENKO: My last one was, Python-powered LED earrings, and I dropped a link to the repo for the code, as well as a photo, so you can see that.
 
00:05:49 KENNEDY: Awesome. So what I know I've heard of MicroPython and I think I've heard of CircuitPython. Are they the same, are they different? Tell everyone about it.
 
00:05:56 ZAKHARENKO: Yeah, there's definitely a little bit of confusion about that, so MicroPython is the original. It's a lean and efficient implementation of Python 3 that can run on these tiny little microcontrollers, and all it needs is 256 kilobytes of code space and 16 kilobytes of RAM, it's incredible.
 
00:06:16 KENNEDY: It's truly awesome. Yeah, it's so super low level, too, yeah?
 
00:06:19 ZAKHARENKO: Mm-hm, and CircuitPython is a port of MicroPython, and it's optimized for Adafruit devices.
 
00:06:26 KENNEDY: Cool, so I guess that's the one I'm going to be learning about, yeah.
 
00:06:30 ZAKHARENKO: Yeah, and some of these, the devices that Adafruit sells, they're as small as a quarter, that would be the Trinket, but of course my favorite Python hardware platform for beginners is that Adafruit circuit playground express. It has everything you need to get started with programming hardware without even needing to learn how to solder. All you need is some alligator clips for the conductive pads and the board has a ring of neo pixel LEDs. It has buttons, switches, temperature sensors, motion detectors, sound sensors, a tiny little speaker, and a lot more stuff, like you can even use it to control servos, for those tiny little motor arms.
 
00:07:09 KENNEDY: Wow, that's really awesome.
 
00:07:11 ZAKHARENKO: Yeah, it's a tiny little thing.
 
00:07:13 KENNEDY: Yeah, what I really like about this, and the reason that I ordered it was, I can go to Adafruit and look around and I'm just like, this is too low-level for me. I don't really know what I need, and I don't even know if I have a power supply, if I get this little chip or that, like how to put together. I'm like, okay, give me, like, one thing that has all the stuff to do little projects like you're describing and I think it's awesome, and doing it in Python is super cool.
 
00:07:35 ZAKHARENKO: It only costs $25.
 
00:07:37 KENNEDY: Yeah, it's not too expensive.
 
00:07:38 ZAKHARENKO: No, and then, if you don't want to use Python to program this, there's a tool that you can use called Microsoft Make Code and it lets you program these little devices with a drag and drop style, kind of Scratch-like interface, so that's perfect for kids, and you'll find a lot of examples on their site.
 
00:07:55 KENNEDY: Oh, that's awesome that you point that out, because I might get my daughter to do some kind of little game, you know, like a Simon Says or something with the LEDs, who knows? It'll be fun.
 
00:08:05 OKKEN: The Mu editor has some tutorials on using these as well.
 
00:08:09 ZAKHARENKO: That's awesome.
 
00:08:09 KENNEDY: Super cool. All right, and I like you threw in a link, yeah, to your code, so people can, and to the earrings as well.
 
00:08:16 ZAKHARENKO: Yeah, and like you said earlier, there are tons of guides for Python projects on the Adafruit website, stuff from making your own synthesizers to jewelry to silly little robots, so definitely make sure to check that out.
 
00:08:28 KENNEDY: Cool, yeah, well, I can almost recommend it. It looks really, really good, and when I get it, I'm going to play with it and let everyone know what I think, but yeah, it seems like a great little package that you can get, and $25, you know, it's like, as software developers, you can just try it, right? It's not a big old risk, it's not like you're getting a new MacBook or something.
 
00:08:45 ZAKHARENKO: Mm-hm, and Adafruit has a Python for microcontrollers mailing list, and they always drop kind of hot news and interesting new things, so, there's a link to sign up for that in the show notes.
 
00:08:57 KENNEDY: Awesome, that's a great one. So this next one, I think, is a really interesting use of Python 3.7, so, like, you think of the main features of Python 3.7, certainly data classes has to be one of them. Have either of you found any use for data classes yet?
 
00:09:13 OKKEN: Yeah, I just love them. I use them like name tuples.
 
00:09:16 ZAKHARENKO: Yeah, they're awesome. Trey Hunter has a great talk on data classes.
 
00:09:20 KENNEDY: Definitely, so this is a library that's derived from data classes and it's a CSV file reader. Now, Python comes with pretty good support for CSV readers, you import CSV and then you create a DictReader based on a file stream, and it'll, like, read the header and figure out the columns, and then it gives you little dictionaries based on the column names, and that's pretty sweet, but what you get back is a whole bunch of strings corresponding to those values, right? And with this, what you can do is, you can actually define a data class that maps the schema of your CSV file, right, so I can define a data class that maybe has an ID and a name and a value, or price, or maybe it's like products, so, like, the ID could be an integer, defined in the data class, the name could be a string, and the value, the price could be say a float, and it'll actually do all those conversions for you and give you meaningful errors if, like, it's a non-parsable float, or something like that. Isn't that nice?
 
00:10:15 ZAKHARENKO: That's incredible. Working with CSV is the bane of my existence.
 
00:10:19 KENNEDY: Yeah, so you can just define these things. You get autocomplete in, you know, PyCharm or Visual Studio Code for your types, for your rows, because they come back as these data classes, and, you get validation, and on top of that, you can actually do cool stuff, like you can say, with data classes, you can specify either just the type or the type and a value, and that value becomes the default value, so if like only sometimes the price is there, you can put zero or minus one, and it'll just go through and substitute that value, so a lot of cool little nice touches here.
 
00:10:50 OKKEN: Nice.
 
00:10:50 KENNEDY: Yeah, I'm definitely going to check this out the next time that I have to do some sort of CSV parsing, because it's way better to let this thing do the validation and the type conversion and all that and just not worry.
 
00:11:01 ZAKHARENKO: I don't think I've been this excited about CSV files in a long time.
 
00:11:02 KENNEDY: I know! They are pretty amazing. No, this really makes working with them nice, and I'm excited, too. All right, speaking of excited, I do want to tell you about Data Dog, they're helping make this show possible, so before we get to our next item, let me tell you about them. This show is brought to you by Data Dog. They're a cloud scale monitoring platform that brings metrics and logs and distributed traces all together. You can do auto instrumenting of frameworks like Django and Flask and Postgres SQL which means you can track requests across service boundaries, across machines, things like that which is awesome. It makes it real easy to troubleshoot your slow Python apps and figure out overall where the time is being spent. So you can get started for free at pythonbytes.fm/datadog and they'll also give you a cool T-shirt with a Data Dog character on it which is nice and cute. So check them out, it helps keep the show going. Now, Brian, I want to come to a topic that we haven't really covered very much on the show that maybe, I think a while ago we did talk about packaging once, right? You want to catch us up on it?
 
00:12:08 OKKEN: I think it's only second to GUIs so far. There's a fun article called How to Rock Python Packaging With Poetry and Briefcase. Plus it has like, the phrase how to rock something and I'm a sucker for that. It's actually kind of a nice tutorial on packaging so for those of you that just joined us and haven't learned all of our discussions on packaging, this is a nice introduction to packaging and how it fits in Python and also kind of how the changing of things, the changing of packaging like where Flit, Pipenv and Poetry sort of fit in with all of this. It's kind of a nice run-through of that. Poetry is one of those things for packaging and it uses the pyproject.toml file and of course we talked about Poetry in Episode 100 and the details, nitty gritty details of pyproject.toml was in Testing Code 52 with Bret Cannon. But the neat thing, one of the neat things when I picked this is it also talks about Briefcase and we haven't talked about Briefcase yet. And Briefcase is one of those tools from the BeeWare project and is something that you can, it packages your Python application as a stand-alone, native application for lots of stuff. It claims Mac, Windows, Linux, even iOS and Android which is interesting, haven't tried any of this. The tutorial talks about desktop distribution of code through Briefcase and it's kind of cool. And how to get that done with Poetry.
 
00:13:42 KENNEDY: I think Poetry is definitely nice. It's, you know, sort of an alternate philosophy to Pipenv which is, we talked about that as well. And Briefcase is part of that whole set of small, independent tools from BeeWare which also is pretty cool and it's nice to see them working together. Also we got CookieCutter doing some magic in here as well.
 
00:14:02 OKKEN: Definitely, and then one of the things that I like at the end of this, there's several tutorials on publishing. I, like how to push your new package to PyPI but this one I really like because instead of telling you exactly how to push it to PyPI, it tells ya how to push it to the test server and I think that's an important step for people to do. Before you subject the world to your code, try it out at the test server first. So, it's nice.
 
00:14:29 ZAKHARENKO: Of course.
 
00:14:30 KENNEDY: Yeah, of course, why don't more of them do that?
 
00:14:34 OKKEN: I don't know. But please, everybody, like save the world and push it here first.
 
00:14:39 KENNEDY: Yeah, the packages on PyPI cannot be changed after uploaded, you can only add newer ones so. Although, you got to admire the rate at which you'll increase your version of your package if you screw it up a few times trying to publish it.
 
00:14:55 ZAKHARENKO: That's productivity, right?
 
00:14:57 KENNEDY: That's right. So, Nina, this next one that you found for us is one of these awesome lists. And I think these awesome lists are coming along really faster and faster these days, right? We've got Awesome Python, Awesome Python Applications, what's the next one that's in that category?
 
00:15:14 ZAKHARENKO: This is a new one I came across called Awesome Python Security. It's a collection of tools, techniques and resources to make your Python more secure.
 
00:15:22 KENNEDY: Ah, that's cool, yeah. And it's got a lot of stuff for web apps like the secure.py which is awesome, we've covered that, and the Flask, Flask-Talisman, Django, Sessions, all kinds of stuff, right? But not just the web, there's a whole bunch of other ones.
 
00:15:35 ZAKHARENKO: I think and hopefully all of you agree, that all of your production and client-facing code should be written with security in mind. And this list features a few resources that I'd come across before like Anthony Shaw's excellent Ten Common Security Glitches article and that highlights problems like input injection and depending on assert statements in production. And I also came across a few that were new to me, so the OWASP Python resources. OWASP stands for Open Web Applications Security Project and there's tons of OWASP resources out there, I didn't know that there's a Python-specific one. You can find that one at pythonsecurity.org. I came across Bandit which is a tool to find common security issues in Python. Now Bandit has a lot of really useful plugins that test for some issues like hard coded password strings in production, leaving Flask debug on in production, using exec in your code and a lot more. I linked to the full list in the show notes. And then a few other cool ones like detect-secrets which is a tool to detect secrets that were accidentally left in your Python code base.
 
00:16:41 OKKEN: That's cool.
 
00:16:43 KENNEDY: Let's open source that. Oh wait, was our full access AWS or Azure key in there, whoopsie.
 
00:16:50 ZAKHARENKO: Oops, oopsie doops.
 
00:16:52 KENNEDY: We'll just check it in again without that in there, I'm sure it'll be fine. There's no history.
 
00:16:56 ZAKHARENKO: And something I really like about this list in particular is it also includes resources for learning about security concepts like cryptography.
 
00:17:02 KENNEDY: Yeah. You know, out of that cryptography section, they listed one of my all-time favorite packages which is passlib. So if you're going to store user secrets and you want to hash them like passwords are probably the most common but there could be other things as well that you don't want to store directly but you want to accept from user and see if you have it, alright, like you can hash it and that's a good idea but what you really should do is like, take that result, add some salt, then hash it again. Take that, do it again maybe a hundred thousand times. Alright, passlib, that's like a one function, like dot encrypt rounds equal 150,000, 2000,000, whatever, it's really nice.
 
00:17:40 ZAKHARENKO: That's awesome. To make sure your password doesn't end up on Have I Been Pwned.
 
00:17:44 KENNEDY: Exactly, exactly. So basically you can say I wanted to take, you know, point two seconds to determine, to brute force or to check each version of the password, and automatically because of that, will slow down, dictionary tax against your site. 'Cause you can only do 'em, point, you know, only five per second, right? So, and then there's another one called Let's Be Bad Guys, that's interesting. So yeah, a lot of cool stuff here.
 
00:18:07 ZAKHARENKO: That's a great project name.
 
00:18:08 KENNEDY: I know, it's like a hacker playground.
 
00:18:10 ZAKHARENKO: Yeah, so check out the full list on GitHub and then, if there's something missing that you think should be there, maybe open a poll request.
 
00:18:17 KENNEDY: Yeah, absolutely. That's a cool one, I'm glad you found it. Alright, the last official item I want to cover is pydbg which is the implementation of a Rust macro called dbg, so, just put the Py on the front. Now I haven't done that much Rust, I've actually been wanting to learn Rust. It looks pretty interesting to me but the basic idea of this dbg macro is instead of just printing out, like, I'm here, I'm here, the value is, you know printing x as the value, they'll actually give you higher level statement without doing more work. So if you're trying to debug something through print statements and that kind of thing, this makes it a lot easier. So you can go and say like I have a = 2, b = 3, if I could say dbg(a + b), the output is the file, the line, a + b = 5, things like that. Really, really nice, it sort of shows you in your message where you are in the file, what thing as you're actually printing without having to, like, come up with elaborate print statement, so pretty cool.
 
00:19:19 OKKEN: Oh man, I'm going to use this like every day.
 
00:19:23 ZAKHARENKO: Do you still use print statements to debug, Brian?
 
00:19:24 OKKEN: Yes, I do. I love print statements.
 
00:19:29 KENNEDY: I used the debugger a lot but every now and then I'm just like, you know, I just want to print this out and just see what is happening. Like, I don't primarily use print statements for debugging but sometimes I do when I'm kind of exploring and I want it to run but I kind of want to see what's happening. I'm like oh, what am I getting back from that API, what is this value, things like that.
 
00:19:49 ZAKHARENKO: Have either of you used watch statements? No, tell us about it. You can just set up a variable or an expression to watch and you know, every time you hit a break point you're like oh, I see what's in there, I don't have to type it again.
 
00:20:01 KENNEDY: With VS Code or PyCharm?
 
00:20:02 ZAKHARENKO: I believe you can set up watches with pdb too but I don't know, I usually do those in a graphical debugger.
 
00:20:08 KENNEDY: Yeah, yeah, me too.
 
00:20:09 OKKEN: Yeah, I definitely have used those. I was thinking something different but so where I'm going to use this dbg, pydbg thing is a lot of times I've got, we've got test code that generates huge amounts of data, like trace data. These are stored and the test runs are really long and throwing a couple of these extra ones for intermediate values so that failing tests, or failing test runs we can take a look at those post-mortem. Things like that just save, it's an elegant way to have that be done.
 
00:20:45 KENNEDY: It's pretty cool. What I like about it is it's like so simple, right? Like, you place the word print with dbg and you've kind of got something going on here. I also kind of like that it's more explicit. You're like this is not really supposed to be a print statement, this is just here till I figure out what's going on and then we're going to stop this. But cool, people can check it out. Thanks for our listener sending it in. All right, so I guess that's it for all of our main topics but looking at our show notes here Brian, we all like kind of had a second round in the extras so maybe we'll do like a lightning round one more time, what do you got for us?
 
00:21:14 OKKEN: This is just a quickie that Pytest has temporary directories and temperature factory fixtures for dealing with temporary files but they've added, as of Pytest 3.9, there's path versions that return pathlib path objects and those are just quite fun and I'll drop a link in the show notes.
 
00:21:37 KENNEDY: Okay, that's great. So I want to bring your attention to something, let's say non-standard in terms of conference presentations. So this is something that PyCon US so in May, Cleveland, 2019, there's a project called The Art of Python, which is a miniature arts festival focusing on narrative performance in visual art around programming and Python and basically showcase novel art that helps us share our emotionally charged programming experiences, particularly to do with Python. So it's like 5 to 20 minute presentations in a separate little track and the call for papers are open, so if you've always been a theater fan and you program, here you go.
 
00:22:18 OKKEN: Oh, this looks very cool.
 
00:22:19 KENNEDY: Yeah, it's pretty interesting. So people can check that out if that connects with them. The other one is one of my favorite surveys and sort of put your finger on the pulse of the community items is the Stack Overflow Survey. Well the 2019 one is open so everyone should go out there and represent for Python and fill out the 2019 Stack Overflow Survey. So, that's good. And then finally, this gets a little bit back to your pick, Nina. NumPy is awaiting a fix for a critical, remote, remote code execution bug. That's bad. That doesn't sound super good. So yeah, I don't know if it has been entirely fixed yet, I don't, you know this is a couple of days ago, it was not. So the idea is basically there's a problem with the pickle module, have you ever, could you imagine there'd be a problem with accepting user input straight in pickle form? I can't imagine. So the idea is there's some part of NumPy that you can load pickled data and, for those of you who don't know, part of the pickle statement is here's some Python code as a module and here's arbitrary code to run as part of deserializing that. So good luck.
 
00:23:30 ZAKHARENKO: Oh boy.
 
00:23:31 KENNEDY: Yeah, yeah, that's not so good. So this goes up to at least version 1.10 through 1.16 which at least of January 14th this hadn't been fixed, so. Hopefully it's been fixed but more importantly, if you're using NumPy and you're accepting user input through the load function, you want to upgrade and you want to be a little careful around that. All right and then, last one I just want to throw out there really quick. I ran across this and I've known about it for a long time but it turns out to be more useful than I thought. So I use Google Docs a lot. And I have like sheets in there and I've got Word, like documents and stuff, but the problem is if you use like Google Drive, what ends up on your hard drive is like a hyperlink back to the actual sheet, right? So how do you back that stuff up? It turns out if you go to takeout.google.com/setting/takeout, that's a lot of repetition, anyway, you go there, you can say give me all my document format, all my documents, and it'll give them to you in Microsoft Office format. Like, it'll convert the sheets to Excel, it'll convert the docs to Word docs, and then let you download them so you have a sort of permanent version. Anyway, I thought that was cool and people might find that useful too.
 
00:24:36 OKKEN: Cool.
 
00:24:37 ZAKHARENKO: Nice.
 
00:24:37 KENNEDY: All right, Nina. You got something as well, you're teaching a class that looks really interesting.
 
00:24:40 ZAKHARENKO: That's right, yeah. I'm teaching a two day introduction to an intermediate Python course on March 19th and 20th and that class is going to livestream for free at Frontend Masters on each day. And all the course materials, I'm going to release for free as well.
 
00:24:55 KENNEDY: That's really excellent. And it has a in-person component if you happen to be, where is it, in Minneapolis?
 
00:25:00 ZAKHARENKO: In Minneapolis, that's right. You can come to the class.
 
00:25:02 KENNEDY: Will Minneapolis be thawed out by then?
 
00:25:04 ZAKHARENKO: The class size is about 20 people. That, I cannot promise. Hopefully in March it's a little warmer.
 
00:25:10 KENNEDY: Hope so but yeah, so up to 20 people can drop in in person, that'd be really cool.
 
00:25:13 ZAKHARENKO: The next thing, I recently recorded a series of videos with Carlton Gibson. He's a Django maintainer, maintains a lot of other projects on developing Django web apps with VS code, deploying them to Azure with just a few clicks, setting up continuous integration and continuous delivery as well as creating server-less applications. You can watch that video series at aka.ms/python-videos.
 
00:25:35 KENNEDY: Yeah, that sounds cool, I definitely want to check that out too.
 
00:25:40 ZAKHARENKO: Yeah, it's great. We got to film in the Microsoft Channel 9 studio and it's a very well-done series.
 
00:25:47 KENNEDY: All the bright lights and everything, huh? Not just screencast, that's cool.
 
00:25:51 ZAKHARENKO: Yeah, we feel like newscasters. I'm also, I'm planning on being a mentor at a brand new hatchery event at Pycon US 2019 and that's going to be mentored sprints for diverse beginners organized by Tanya Allred. The goal is to help underrepresented folks at PyCon contribute to Opensource in a supportive environment. The details aren't out yet but I dropped a link to where they'll be when they're finalized.
 
00:26:15 KENNEDY: Oh, that's super cool. And there's also things like scholarships or something like that to help folks get actually physically to the event if they need some help as well, right? They can apply for that at the PyCon site?
 
00:26:27 ZAKHARENKO: Yeah, PyCon US offers a lot of financial aid. Lastly, if you're interested in Python for hardware, like we talked about earlier, you can catch my talk about electronics, projects in Python with LEDs at PyCascades in Seattle on February 24th. Currently tickets for that are still on sale.
 
00:26:44 KENNEDY: Excellent, yeah, and Brian and I are definitely going to be there. We're all going to PyCascades.
 
00:26:47 ZAKHARENKO: Oh.
 
00:26:48 KENNEDY: So we're going to catch it. Hopefully everyone else does as well.
 
00:26:51 ZAKHARENKO: Great, I'm excited to see you there. And I do have one last thing to sneak in and that is, if you haven't tried the Python extension for VS code yet, now is a really good time. The December release included some really killer features like remote Jupyter support and exporting Python files as Jupyter Notebooks and if you're interested in keeping up with features releases, I dropped you a link to the Python and Microsoft blog.
 
00:27:16 KENNEDY: Nice, and didn't you also, you as a group, speaking to you as a Microsoft, as VS Code, didn't you guys just release like an AI-powered auto-complete backend for Python as well?
 
00:27:28 ZAKHARENKO: That's been around for a few months. I believe it's still in preview mode but it works really well. The dataset was trained on a bunch of Opensource projects.
 
00:27:37 KENNEDY: Yeah, it looks super cool. So I definitely want to check that out. I think I installed it just the other day so, should be fun.
 
00:27:43 ZAKHARENKO: Yeah, try it, let me know what you think.
 
00:27:45 KENNEDY: Absolutely. Brian, we've come to our joke section, right?
 
00:27:47 OKKEN: Yeah.
 
00:27:49 KENNEDY: Nina, you want to kick us off?
 
00:27:50 ZAKHARENKO: Yeah. I found a bunch of really cheesy snake jokes so here they go. What do you call a snake that only eats dessert?
 
00:27:58 KENNEDY: I don't know.
 
00:27:59 ZAKHARENKO: It's a PY-thon.
 
00:28:02 KENNEDY: Nice. I'll do the next one. How do you measure a python? In inches, they don't have any feet. Brian, what's the last one?
 
00:28:10 OKKEN: What is a python's favorite subject?
 
00:28:13 KENNEDY: I don't know, what is it?
 
00:28:14 OKKEN: Hisstory, that's bad. These are all bad.
 
00:28:20 ZAKHARENKO: And I will not apologize.
 
00:28:21 KENNEDY: No, those were great. Thank you for finding those, Nina, or coming up with them, either way, they're great. All right folks, well thank you for listening and Nina and Brian, thank you for being here today of course.
 
00:28:30 OKKEN: Thank you.
 
00:28:31 ZAKHARENKO: Thanks for having me.
 
00:28:32 KENNEDY: You bet. Bye.
 
00:28:32 ZAKHARENKO: Bye.
 
00:28:33 OKKEN: Bye.
 
00:28:34 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via at PythonBytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit PythonBytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
