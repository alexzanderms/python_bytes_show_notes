00:00:00 KENNEDY: Hello, and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 119, recorded live from PyCascades in Seattle. All right, it's great to be here, and this episode is brought to you by Datadog, tell you more about them later. Right now I have a bunch of special guests, none of whom are Brian Okken. More about that in a second, but we have Trey Hunner,
 
00:00:23 GUESTS: Hello.
 
00:00:25 KENNEDY: Dan Bader.
 
00:00:25 GUESTS: Hey, how's it going?
 
00:00:27 KENNEDY: Eric Chou.
 
00:00:27 GUESTS: Yo.
 
00:00:27 KENNEDY: All right, and all of us are here at the conference, and we thought, why not put something live together for you? Now, Brian Okken decided to punish his teeth by having a painful root canal, and couldn't join us in some sort of last minute emergency, and that's really unfortunate, 'cause he was looking forward to be here. So everybody, Brian we miss you.
 
00:00:44 GUESTS: We miss you, Brian!
 
00:00:46 KENNEDY: Right on, well, let's go ahead and kick it off. I'm going to do the first thing here, and, have you guys heard of this thing called Dropbox?
 
00:00:53 GUESTS: Yeah, a little bit. They have something to do with Python.
 
00:00:55 KENNEDY: Anyway, obviously, Guido works at Dropbox, it's a huge Python center of the universe there. And what's really interesting is, they're finally migrating to Python 3, and using some of the tools that Guido has personally worked on, with mypy and static typing, and all of that. So that's our first item, and if you had to guess how many lines of code is the Dropbox code that you're working with, you know that little box in your menu bar, your task bar, that's also client-side Python, which is interesting already. But it's over a million lines of code. So they started way back in 2015, a little hack week side project to prove whether or not maybe they could do it. It turned out, it's going to be hard, is what basically they said, and officially it started the first half of 2017, and the real thing that helped them do this, which I think is interesting, is mypy. Have you guys heard of mypy?
 
00:01:51 GUESTS: Yup. Oh yeah.
 
00:01:52 KENNEDY: So mypy is, it takes the type annotations or type hints and verifies that this function says it takes one of these and you're giving it one of the same things, that sort of thing.
 
00:02:02 GUESTS: Did Guido actually, I don't think he started mypy.
 
00:02:05 KENNEDY: I don't think he started it, but he definitely works on it.
 
00:02:07 GUESTS: One of the original contributors, I think. Did he start it, was it started for Dropbox specifically? Or for the Dropbox codebase? Just curious.
 
00:02:15 KENNEDY: Yeah, I don't know either, but I know that it was an important thing he's working on.
 
00:02:18 GUESTS: I'm not sure, but I just want to, it seems like Dropbox has been migrating away from the public clouds for a while, and that they've been focusing on just getting things right. So this is probably one of those things where they think for the long term growth it's going to be better than relying on somebody else's infrastructure.
 
00:02:34 KENNEDY: Right, absolutely, it's very interesting they're stepping away from some of the cloud hosting that everyone else is running to the cloud, they're like, ah, well, we can make cloud. That's pretty interesting. So, let me throw this out for you all co-guests and audience members and listeners. One of the very first things they say in this article is, well, once we were armed with mypy, the first few steps we took was to port our custom fork of Python to 3.5.
 
00:02:58 GUESTS: What? That's big.
 
00:03:02 KENNEDY: Like, wait what? There's a, they don't run normal Python? What kind, they drop Python? What do they call it? It's pretty cool.
 
00:03:09 GUESTS: It's pretty cool, it cross-compiles to Perl, and then, it doesn't. Everyone does it.
 
00:03:14 KENNEDY: Yeah, so I'll just kind of wrap this up here, but basically, this article that we're covering goes through all the steps of Dropbox moving over. And I feel like, if people are going to take the Python 3 as modern Python, and other Python as legacy Python as a legitimate thing, the guy who created Python had better work at a place that uses Python 3, not Python 2.
 
00:03:34 GUESTS: For sure.
 
00:03:35 KENNEDY: So I'm super happy to see that's moving along. And also that Guido was a pretty big part of it. All right, so let's see what's up next here. Eric?
 
00:03:42 GUESTS: Basically, I want to talk about what I feel was underserved community in Python. I come from a network engineering background and been focusing on network automation, using Python and I think we've gotten to a point where we're big enough to be noticeable, like it's actually material for the amount of community. I mean, we have new terms, such as net dev ops, or NRE, not to be subtle differences from the site reliable engineering followed by, network reliable engineering. We have some some popular libraries from Netmiko, NAPALM, who's been on your show before, and I can't even pronounced that new library Nornir, I think? N-O-R-N-I-R, we'll have the link in the show notes. Yeah, there's a lot of free resources out there for people to practice on, for either a network engineer who wants to learn more about Python, or developers who want to learn more about network engineering. I think coming of age, I mean, hopefully one day we're going to have a subculture of Python, just like the data analysis community, for network engineers. So, that's, I want to bring to everybody's attention you could do it for fun, do it for profit, and, you know, it's a welcoming community.
 
00:04:49 KENNEDY: Yeah, and you linked to a bunch of resources in the show notes that people who are in to that can check out, and, yeah, Python's a mosaic and there's so many people doing different things and here's just another part of it, right?
 
00:04:58 GUESTS: Yeah absolutely, I mean I'm super excited about this 'cause I think, as you mentioned multiple times on your show, it's like, you get started early, or started easily but you don't hit that ceiling. I mean, I've been doing this for five years and I haven't found that ceiling yet it's adapted to me, so, Is that a sign of growth, that the Python community has seen? Where now, it makes sense to have an itch for network automation specifically? I think people are still trying to figure out, how this thing's going to go, which is with lots of changes presents more opportunities for people, and Python kind of just emerged in this de-facto and speaks to the versatility and the power of the language. I think we're in that phase, we're trying to figure it out, and we just kind have this trending versus, nobody has the right answer but, that means at the same time, that's where the opportunity lies. You know, you could figure it out, you could drive that direction, and I think the developer actually has a huge advantage that everything is virtualized, everything is abstracted away from the physical so, that's my thought at the moment, you can see I'm not very clear either.
 
00:05:59 KENNEDY: I think it's super interesting you pointed out how everything is abstracted, and sort of cloud programmable, it means like, Python has a better chance in a network space if it's not all hardware and boxes and stuff, right?
 
00:06:08 GUESTS: Yeah for sure, I think one of the challenges for network engineers such as myself going in to the cloud, is the fact that there's no longer broadcast domain, you know, your NIC is actually physically attached to you, so, things I would have took for granted that were fixed, is no longer true, so you get to have a network NAT gateway, that's just arbitrarily attached to your virtual subnet. Which, you used to, I think if you work in the traditional enterprise, the first thing you do when you get the new team is like, you subnet it out, you give it the IP address, you subnet, but, those are all virtualized nowadays, so, you still need to understand the basics, but that basic used to take years to master, now it's just a matter of reading a doc. So, yeah, hopefully, you guys come say hi if you see me at AnsibleFest, at Cisco DevNet Create, at some of the Juniper events, come say hi, let's talk, and, I think we could potentially make a great community out of it.
 
00:07:03 KENNEDY: Yeah, put Python on the wire?
 
00:07:05 GUESTS: Yeah, for sure! Buy you a Python beer! But it's funny, Python really is a mosaic. I didn't understand, well, I understood a lot of the terms you were using, but what they actually mean, I don't know. Because I don't need to know what they mean, in the space of Python that I am part of. This next thing I've got is kind of related to the fact that Python's a mosaic, it's part of the web side of the mosaic of Python, which gets, maybe more, reputation than it deserves in the sense that, there's a lot of folks using Python for the web, but it's not all you can use Python for, at all. I mean, data science is huge. But, if you have to process data, and it's not in a database, and you are someone who's familiar with Django, there's a thing called Alkali, that Kurt made, I can't remember Kurt's last name, Kurt's like, Kurt's in the room, and we actually, its, Kurt Neufeld! So it's funny being at conferences, you sometimes just meet the people who end up making the things that you're using. Alkali, I'm not using but it looks kind of fun, because I'm familiar with the Django ORM, and Alkali is meant to take structured data, maybe an RSS feed, maybe a CSV file, maybe JSON data, maybe some random homegrown thing that you've got, on your team or in your company, and allow you to use a Django ORM-like syntax to query it, and also to save it, maybe in some other format, even. So, it's as if you're working with a database, but you don't actually have a database behind the scenes, you've got some structured file. So it's, kind of does that all in memory, which is fun.
 
00:08:31 KENNEDY: Right, so maybe you're working with XML, and you don't want to learn XPath, or you don't want to write regular expressions against CSV files,
 
00:08:38 GUESTS: Who wants to learn XPath, man?
 
00:08:40 KENNEDY: Nobody!
 
00:08:41 GUESTS: Rhetorical question.
 
00:08:42 KENNEDY: Hey man, the '90s are calling, they want their API back!
 
00:08:46 GUESTS: Here's my style sheet, says nobody ever.
 
00:08:48 KENNEDY: Yes exactly, so, I think this is a cool project Kurt, I definitely like that you can point it at, even like, something like an input on an HTTP service, and turn that into effectively a Django database. And I've heard that there's a branch working on indexes, which will sort of complete the performance side of things.
 
00:09:06 GUESTS: Ooh, that would be really fun. Well there's pressure now. Yeah, no pressure, no pressure. It's going to be released tomorrow, I heard? I'm just kidding, it's not going to be released tomorrow. It's a long night for Eric. He's shaking his head. Long flight home, I don't know where from.
 
00:09:18 KENNEDY: Right, before we moved on to our next one, let me just tell you about our sponsor, which makes all of this happen, so. This episode is brought to you by Datadog, and, Datadog, they're really awesome. They let you track, the performance, and errors and requests not just within your Python app, but across all of your infrastructure, so if you're doing a Kubernetes thing, and you've got a Flask app and it's talking to Nginx, and it's talking to PostgreSQL, you can tie all the performance of that entire system together, not just profiling your Python code, which is pretty awesome. So, check them out at pythonbytes.fm/datadog, get a cool free t-shirt, you get to try it out, it's awesome. Okay so, the next item, that's Dan.
 
00:09:57 GUESTS: Oh, sweet, yeah, so, quick update here, the CMU, Carnegie Mellon University, launched an undergrad degree in artificial intelligence. And apparently that is the first AI degree offered by a US university, and when Mike told me about it, I was really surprised because I thought, well, you know, AI is kind of been a big buzzword for a while now, and why didn't anybody else come up with a degree before that? But I guess it always takes a little while to do that, and, I don't really know what goes in to that degree, or, how the curriculum really differs from, let's say like your average computer science degree, or a data science curriculum, but I just felt it was an interesting development.
 
00:10:38 KENNEDY: Yeah I mean,
 
00:10:38 GUESTS: I'm sure they've used a lot of Python,
 
00:10:38 KENNEDY: We've had computer science forever, well, first it was like Electrical Engineering but I'd work on computers on the software side, eventually I got a real degree like Computer Science, and then we had like Software Engineering, but now, I think this is a big landmark, like the first artificial intelligence, like a Bachelor of Artificial Intelligence, think of that, that's crazy! And one of the things the Dean said is you know, of course we'll do CS stuff, but we're also going to focus on things like computer vision, language processing, huge databases and how to help humans make better decisions, automatically, it's pretty cool.
 
00:11:10 GUESTS: So, I'm waiting for the day where, we have an AI, get a Bachelor's degree in AI. Just so we can call it a day, and we're done. Or an AI teaching the Bachelor's degree in AI? Yeah, even better, that would be so sweet.
 
00:11:24 KENNEDY: My professor is a jerk! It's written in Fortran.
 
00:11:29 GUESTS: Yeah, so, do they use Python at all? I'm guessing you're learning Python, it's got to, it must be, right?
 
00:11:34 KENNEDY: It's all Java, no, I don't know, it's got to be Python, right? Alright, so you all might know that maybe I've been on a rant about async and await, and asynchronous programming lately, and the next one, have you also heard that I've talked about GUIs? I've mentioned this twice, I think, that Python should have better GUIs? Well this next one is kind of like, these things come together, which is awesome. So, Florian sent this over to me and it's PySide2, and Qt for Python, the Qt framework, that has an event loop, you know, a button gets clicked or a timer runs, or something like that. Well somebody built some layer that you can plug that in to async and await. So you can have async def button_click_handler(), that integrates with your other async operations happening on your GUI there, it's pretty awesome. There's some examples on how you do it, it's super simple, I linked to one about, downloading some stuff and whatnot, so. If you're doing anything with Qt, and you do anything with async, then check this out, that's really a nice one.
 
00:12:33 GUESTS: So that one, usually I know, I haven't done Qt in a while but GTK uses kind of an object-oriented, event loop there, right? Where it's classes, so it's taking a class based syntax, and allowing you to use the new asyncio syntax right?
 
00:12:45 KENNEDY: I think it's mixing the GUI event loop, and the asyncio event loop, together. Because otherwise I think they would run independently. I think you basically can't have those run on the same thread, or something to that effect, right? The async event loop would block the GUI loop or something to that effect.
 
00:13:01 GUESTS: Cool, alright, so the next item we've got on the list here. Yeah guys, we're at Python 3.7 now, 3.8 is coming out pretty soon, so we're kind of running out of minor number space, guess we can always create more, but whatever, it's a good intro. People have started thinking about what's going to happen with Python 4.0? Like, what would be some cool features that we would really want to see? And so, our good buddy Anthony Shaw wrote, a really interesting blog post about four things he wants to see in Python 4.0. And, it's a pretty short read, but there's some interesting ideas in here so we're just going to go over those points here. Number one is he would love to see just-in-time compilation as a first class feature. Right now, you've got some alternative Python interpreters, like the Piston project, or PyPI, I guess is the most well known. That actually feature just-in-time compilation and it could bring a huge speed-up compared to the plain, bytecode interpreter setup that CPython uses. So I guess the idea would be, is there some way to bring this into core Python? And apparently there is, and we already have this in some way, or at least we have the infrastructure to be able to plug in something like that. That one would be really big, because I know there are some companies that, the reason they're able to use Python for what they do, is PyPI. The fact that it really speeds up with that just-in-time compilation. Yeah, I think it's a big one, right? Like, performance, I think the more people use Python, the more relevant the whole performance story becomes for people, because then it's like, it has a huge impact if you have a small improvement.
 
00:14:30 KENNEDY: Yeah absolutely, and there's tons of attempts to solve this problem, there's Rust Python, and there's Grumpy, and there's, all these different attempts on solving it, and PyPI, like Trey said, is really awesome, but it has this limitation where, when it, kind of, when it gets to the C interop stuff, it can slow down, or it doesn't necessarily work with all of them so it, kind of falls back, then. With Pyjion and the work that Brett Cannon and those guys did, it's really awesome because that's a plug-in to the normal CPython, so it wouldn't be like an alternative thing. So yeah, I would love to see this as well. It'd be great.
 
00:15:00 GUESTS: Yeah, great idea. Alright, item number two is, on the wishlist is a stable .0, like a stable 4.0 release. Is that a lot to ask? I don't know, man, you tell me! I feel like this one, this is because of 3.0 history, right? There were lots of breaking changes, the initial was, kind of a rewrite of the language from my understanding, although, I'm not a core developer, I don't know. The central point of that, in the blog post here is that, well, you only have one chance to make a first impression really, and so, maybe Python 3, kind of bumbled its way into life, or whatever, I think now we're super happy that we have it, but, I don't actually really remember about the .0 release or the .1 release. I don't know if anyone does. Yeah, it's like, let's not talk about that let's just move on. No, I'm sure it was great. Alright, static type hinting, I think that's a really good idea too, you know, we've got mypy, but it's optional right now. And, it would be kind of interesting to see, that, integrated into CPython or the core language if this is really the path forward. And I'm not actually sure what the roadmap says there.
 
00:16:02 KENNEDY: Yeah, I don't know either, it's pretty interesting, I think static typing is super valuable, I think having it mean something in the language, that would change the zen on Python, wouldn't it? I mean, because it's so much about the duck typing, and you don't have to worry about it, it's like, whoa, compilation error, we expected, IRunnable of, whatever, right, multiple templated thing, and yeah, I don't know.
 
00:16:25 GUESTS: Really change the face of the language I think.
 
00:16:28 KENNEDY: Yeah, I like what he's recommending here, I'm not so sure about the required static type hinting, maybe a mode to run it where you can check it, I mean, we have data classes, which do some validation, in a sense.
 
00:16:38 GUESTS: You're wrong, Anthony. No like, we're We're just, some really interesting thoughts about this, because, you know, what should go into, because obviously it's a big release, right? If you're talking about Python 4.0, it'd better be like, a really really noticeable improvement, otherwise people are going to go, like, oh. Which would be nice too, I mean, If it's just a 4.0 release and everybody's kind of, there's no upgrade hump, like we had from 2 to 3, that's kind of nice too. Well he does mention the idea of static duck typing, putting an iterator in there, as opposed to a generator specific type of thing, but, I don't know how you would really make that a truly generic thing.
 
00:17:14 KENNEDY: Yeah, well, as long we don't end up with a Python 3 death clock. We'll be in a pretty good place.
 
00:17:20 GUESTS: Nice, okay, so, the next item we have here is a GPU story for multiprocessing. So I guess the idea is that a lot of workloads that people use Python for these days are actually running on GPUs, you know? A lot of the deep learning stuff's all running on GPUs these days, and so, wouldn't it be cool if Python 4.0, actually had some facilities to run stuff on the GPU, for, like, parallel computations, and had it built into the language, wouldn't that be sweet? It's an interesting idea, for sure.
 
00:17:47 KENNEDY: Maybe like another decorator, like an @GPU? On your method, and you just,
 
00:17:50 GUESTS: And we're done.
 
00:17:52 KENNEDY: Add some type hints.
 
00:17:52 GUESTS: Boom. Yeah, and the last item here on this really interesting list is, number five, is, more community contributions. And, I think Anthony is saying that he's already seeing, you know, a lot more involvement from the larger community and now that CPython is hosted on GitHub, and, there's less barriers for people to contribute I guess, to the code, and, just seeing more growth in that and seeing more people involved in the actual development of CPython would be pretty sweet. And I totally agree. What do you think, Eric? Well, a lot of these features, I haven't been coding long enough to have a strong opinion about, one way or the other, but, I think, to me, obviously optimizing for hardware and who will say no to that? But, to me, the 4.0 story would be big in terms of this would be the first major release without having a BDFL. And, how we, I guess, we will figure it out by then, how 3.8 came about and all the PEPs, but this would be a major release where it's determined, I guess, by the committee. So it would be kind of interesting and, just see how that transition's going and, hopefully for the long term, and, 5.0, 6.0. I feel like, even outside the core developing team, Python naturally has had more community involvement over the years, and it'd be nice to see that with the 4.0, because even this podcast, you know, you mentioned __pypackages__ recently, and that's something that, that's not a PEP that's actually ready. That's something that it may or may not make it into Python, that's a discussion that normally happens, not behind closed doors, but in an open space that no one looks in, which is the core developer mailing list. Whereas it's on a podcast now.
 
00:19:25 KENNEDY: Some random people in Portland dug it up and talked about it on the Internet.
 
00:19:29 GUESTS: Getting all the dirt on your Python.
 
00:19:30 KENNEDY: Yeah so, that's it for all of our main items, just a couple of quick extra ones from me, one, I did an async webcast which is available, so if you want a one hour review of what async and await means, and why, I think now is the time for async in Python and you don't have to switch to Go, it's already awesome, like, just use it. So you can check that out, I'll link to that in the show notes. And then, if you happen to be somewhere near Tel Aviv or Israel at least, the first week of June, they're having PyCon Israel, which is pretty awesome, and call for proposals is open, just a couple days ago. So yeah, those are my extra items, any of you guys, got anything else?
 
00:20:06 GUESTS: Yeah, quick announcement, we're working on a new book for Real Python and we're going to release through Real Python, it's called the Python Basics Book. It's like a beginners' book for people who want to get into Python in the first place, and, Mike actually wrote the foreword for it. And, it's great, but it also kind of duplicates what we had said in the intro, so that means we've got to rip out a bunch of stuff and then use his foreword as a new intro because it's so much better than what we had. Thank you, Mike.
 
00:20:30 KENNEDY: You're welcome.
 
00:20:31 GUESTS: And shameless plug for the book. Thanks for making more work. So the only thing I have to share is that, some things in my world I'm, I have a goal for myself to write more, because writing blog posts takes me so much time! And so that's something that I'm just announcing publicly here, only so that I will commit to it over the next quarter or so. And there's some, kind of, big things that folks on my mailing list know in the Python works that are going to be coming up soon.
 
00:20:57 KENNEDY: Yeah, sounds great, so, I guess we got to close this out with a joke, so, we got a whole list of jokes here, and I'll just grab two for you guys. And let you all, see what you think here. So, why did the angry function exceed its call stack size? It got into an argument with itself.
 
00:21:14 GUESTS: I don't know, so,
 
00:21:17 KENNEDY: Oh no, oh no, there's more. Well wait, why the developer ground their child? As in, you can't go out, you're in trouble, you stay home for the week? They weren't telling the truthy.
 
00:21:29 GUESTS: Mmmm...
 
00:21:29 KENNEDY: And with that, I think we're going to close it out. 'Cause that's, what are we going to do with that? Alright so, Trey, Dan, Eric, thank you all for being here. And everybody, thank you so much for coming. PyCascades was great, Brian we miss you, and, see you all later. Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes that's Python Bytes as in B-Y-T-E-S, and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way, we're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
