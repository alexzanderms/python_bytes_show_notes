00:00:00 KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 121, recorded March 13th, 2019. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:11 KENNEDY: And this episode is brought to you by Datadog. Check them out at pythonbytes.fm/datadog. More on that later. Brian, how you been?
 
00:00:18 OKKEN: I am, well actually I had a rough week last week but I think I'm getting back to it.
 
00:00:22 KENNEDY: What did you get in a fight with a dentist?
 
00:00:24 OKKEN: Yeah, I went to like two dentists and two doctors just to fix one tooth, but yeah, it's all done now.
 
00:00:30 KENNEDY: Glad to hear you're doing better at least. You know I'd say the future is looking bright. What do you think?
 
00:00:35 OKKEN: Yeah, especially with Python 3 coming everywhere.
 
00:00:38 KENNEDY: Yeah, absolutely. All right, so what's your first item?
 
00:00:41 OKKEN: The first item is, oh yeah, you were doing like a whole transition thing. So yeah, I get it now. Futurize and autofuturize. So futurize, there's a website called pythonfuture.org and they have this thing called futurize that you can turn it on in stages so has a whole bunch of different modular switches and the idea is to to automate your conversion from Python 2 to Python 3.
 
00:01:06 KENNEDY: So like one thing you can do is fix the print statement but nothing else, things like that? Is that the idea?
 
00:01:12 OKKEN: Yeah. There's a whole bunch of different little modular things you can do and I actually didn't dig into it enough to know if you can really go really small and granular and only change a few things at once but one of the things they do have is a staged conversion so they have split up a bunch of their stuff into relatively safe fixes. Things like changing the exception syntax, using print function so that the print function's easy to change. Making sure that your classes have an object base class and apparently the iterator syntax changed but apparently I didn't realize that and a handful of other things are really safe to just change so there's a stage one that just changes all that stuff and then the stage two, where there's some more risky items possibly they do more kind of wrap some of the Python 2 style stuff with Python 3 style code, and in of course all of this would only be for large projects because small projects, just go do it yourself man. Anyway if you're going to try to do all the these modular things, it'd be kind of neat if you could test between them and save all your changes. Timothy Hopper put together something called auto futurize that is a shell script that uses git to save all your changes and then tox to run your, is assuming you're using tox to check your code and it, it goes and go ahead and does all of these changes to your code and test it in between, and if it does a little bit of a change and your tests pass, it does the rest of it and it doesn't check in things that don't work. So, this is kind of fun and it'd be kind of fun to try on a project.
 
00:02:52 KENNEDY: Yeah, I like the idea of both of these. I can totally envision some high paid consultants sitting down to do the Python 2 conversion for the companies that put their head in the sand until January, then they come in and they just run this for the morning, go have a long lunch, come back in. Everyone will be super happy how quickly they did it and it'll be great. The machine will do all the conversion.
 
00:03:16 OKKEN: Yeah, there'll be like two files that they have to hand edit to fix.
 
00:03:21 KENNEDY: Exactly. It's going to take a few weeks but we'll see if we can get it done without too much of a problem.
 
00:03:25 OKKEN: Hey, that's a new business idea, maybe I should start another side business.
 
00:03:30 KENNEDY: It's a little shady, but you know. It's all right.
 
00:03:33 OKKEN: So thanks Tim, for Christmas money for next year.
 
00:03:36 KENNEDY: Yeah, thank you Tim. And in all seriousness, it's a cool project and I think it's going to help a lot of folks. Speaking of helping folks, Anthony Shaw, he's putting a lot of content out there for everyone and the reason we talk about him so often is often he's doing some kind of blog post or he's written some kind of cool article and he went kind of meta recently and did a live stream. I think it was on YouTube of how he goes about writing these posts, how he does research, how he thinks about the different formats, all that kind of stuff.
 
00:04:05 OKKEN: So I was just, it's still going to-do list to watch, so you watched it was pretty good?
 
00:04:09 KENNEDY: I watched about twenty minutes of it. Didn't have a chance to watch the whole thing but it was good. Him just writing a post and you just watch him write it. He goes through and talks about the different posts he's written. Some of the trade offs and how he works and things like that, so he talks about one of his posts called Modifying the Python Language In Six Minutes which is like a deep code-focused article. He talks about listicles so he talks about five easy coding projects through the kids he did. He talks about what is popular and like why those are popular. Pretty interesting. He says one type of article he likes to write is question articles so why is Python slow? For example, and of course to disprove that or whatever and then also the tourist, like I'm going to take you on a tour or something, so a tourist's guide to the CPython source code. So if you're looking to up your writing game or get inspired. You know if you sit down, like I got to write about something, what I'm going to do? Well here's how much of ideas like do I want to write a listical job or do I want to write a tour or do I want to write a question and so on. It really helps focus the mind and get you going I think.
 
00:05:06 OKKEN: Yeah, I'm definitely going to check this out because he's pretty much crushing it and I'd like to kind of learn from that technique.
 
00:05:12 KENNEDY: Yeah and very very well done, nice job Anthony. I feel like you've chosen a very controversial topic for the next one. Not so much but pretty interesting.
 
00:05:20 OKKEN: Yeah I guess I just totally forgot that it was controversial. And I know it was like a big thing at the time but it's the Walrus operator or PEP 572. And I kind of love the Walrus operator because it's the, what, the colon with the equal sign and it's basically the assignment expression that's coming in Python 3.8 and it's kind of hard to describe on audio but it's a... A lot of times if you were to say I do a lot with dictionaries or if I'm looking into some data database or something, I want to find out if an element is there and if it is there, I want the value. And it's always this two stage thing and it'd be great... And pattern matching is another one, regular expressions. If there's a match, then search for it and get the stuff, otherwise don't do something and being able to do this as one assignment expression is going to, I think, help out quite a bit. Anyway you can play with it now so that that's the whole point of this is a Alexander...
 
00:06:22 KENNEDY: Holtner.
 
00:06:22 OKKEN: Holtner, yes. Wrote an article saying that now that the alphas, some of the alpha releases for Python 3.8 are out, you can try these out and he wrote a post demonstrating exactly what I was talking about. Getting elements out of, iterating through dictionaries and grabbing keys out of their elements as if they exist. He used pyenv and to grab the new releases. I don't know why but I just like to download the stuff so I added the links to the two 3.8 alphas available so far if you want to trade up.
 
00:06:56 KENNEDY: Yeah the one that I really like here is the list expression which could be a generator or it could be set expression or whatever, a list comprehension because those have to be one line and if you want to assign a variable and then test it and do other stuff that you can't really, can't really do that. And without the Walrus operator, if you're going to like apply a function to the elements that you're looping over and then when I use those, you have to basically get access or compute that twice for each element and the Walrus lets you do it all in one, so these little expression, they're kind of like the lambda has the you know the colon and then the body type of syntax, it's a little bit like that, kind of inline and it definitely seems nice to me.
 
00:07:38 OKKEN: Yeah that's a pretty cool use and I hadn't really seen that before this article, 'cause I didn't pay much attention but using it in a comprehension is pretty cool.
 
00:07:46 KENNEDY: Yeah. Cool, yeah also your little nested for loop if test. It's pretty nice. You know I guess I'm coming around to the Walrus operator honestly.
 
00:07:56 OKKEN: Once I start using 3.8, I'll be using it all the time. It'll be like using f-strings I think to say, okay well now it's 3.8 and above because I don't want to use anything else. I'm not there yet.
 
00:08:08 KENNEDY: Awesome. All right well before we get on to the next one which I'm pretty thrilled about it because it's simple and amazing. I just want to tell you quickly about Datadog. They're sponsoring this episode of course. Datadog is a monitoring and analytic service that brings all your metrics and logs and distributed traces together. And their client automatically instruments things like async libraries such as asyncio and popular frameworks like Django or Tornado to help you visualize your performance. If you want to trace your request across service boundaries and figure out where your app is slow or find errors, go over to pythonbytes.fm/datadog. They've got a cool free trial there and you get a nice little Datadog t-shirt too. So check them out and help support the show. Now, to this awesome thing. We talked about Click and we talked recently about argparse and other cool ways to build command line applications right? And there's of course the tried and true input. Input, what is your question and you set the value and then you maybe have to test it to see whether it's an integer and then if there's an error, you say no there's an error. You can't say that, you go to same integer and there's all these challenges right? So maybe I've got a list of things I'd like them to pick from, like maybe you're building a site and through a generator and say well what kind of data backend do you want? I want Django ORM, I want SQLAlchemy, I want raw SQLite, whatever. You might give them a list and say well pick one, two, three or four. Which box do you want? Well with Bullet, have you seen Bullet?
 
00:09:35 OKKEN: I'm just looking at it right now and it's pretty exciting.
 
00:09:38 KENNEDY: It's incredible right? So what you get is, imagine like a drop-down combo box, like you would have on the web that is the list and you can click, but in the command line. As a command line argument. So it says choose something and you can arrow through it, it has like a little indicator which one you're on, aw man it is slick.
 
00:09:55 OKKEN: It supports colors and emojis.
 
00:09:57 KENNEDY: It has a scroll bar. It has a scroll bar. You can even scroll through them if there's too many choices to fit on the screen. It's pretty cool and it's easy to use so that's nice. There's also other types of inputs. Like you can have a password. It says enter your password or what is the password and it does the star marking.
 
00:10:15 OKKEN: Wow.
 
00:10:16 KENNEDY: Which is cool. It has yes/no questions and numbers. A number input, you can only enter numbers. It won't accept junk that won't parse so you don't have to go through all the steps. It's pretty incredible, right?
 
00:10:30 OKKEN: Yeah so we need somebody to write cookie cutter with Bullet perms.
 
00:10:35 KENNEDY: Exactly, I was thinking of cookie cutter exactly, because cookie cutter asks you all those types of questions all the time. It would be beautiful to have Bullet just beautifying all these things. There's one idea if people want to contribute to open source. Another one is, right here on Bullet, there's probably other types of input besides passwords, yes/nos, and numbers. Like maybe multi-select, I don't know, but also looking for Windows support. I think right now this does not work on Windows 'cause the way the terminal works versus on Posix systems. So pretty cool though. Yeah, still diggin' it. Go Bullet.
 
00:11:08 OKKEN: Go Bullet.
 
00:11:10 KENNEDY: So we actually have a couple of items to do with pip and packages and installing. You go first.
 
00:11:15 OKKEN: Okay well last week, I think it was last week, maybe it was the week before? We talked a little bit about maybe you want to try something different than Travis for your pipelines.
 
00:11:27 KENNEDY: The exodus after all the layoffs and all that business huh?
 
00:11:30 OKKEN: Yeah. Or just maybe you're just want to try Azure anyway or Azure just because it looks neat. There's an article I thought was super cool that was hosting private pip packages using Azure artifacts and the ideas of the article is let's say if I'm using Azure pipelines to do actually a data pipeline, doing a whole bunch of different stages of changing the data or whatever. Whatever you do with data pipelines. Some of the work can be packaged up and used in later stages with just like a pip install. That'd be cool. And then how do you do that? There's a few gotchas that they get through and they've for instance in one part you can't just use the normal pipelines just by itself, but you can use the CI pipelines from Azure DevOps tool to get the packages into an artifact form and basically it's all the hacks that you need to do to make this work. I just thought that was cool, it was neat.
 
00:12:28 KENNEDY: Yeah I think that sounds really cool as well and go ahead and leverage those artifacts to make your pipelines, which is cool.
 
00:12:35 OKKEN: I don't think you can make these public, they're mostly, you know you're using it for your own stuff so they're a little bit private. Like they're talking about using credentials, hooking up your credentials so that pip install can get those correctly. And then I also wanted, one of things we did talk about last week was Anthony Shaw's pytest, Azure pipelines pytest plugin. We've already covered that last week but one of the things that's cool that's happened since then is that plugin is now part of the recommended setup for Microsoft itself.
 
00:13:09 KENNEDY: Yeah that's pretty cool. Well then so it's definitely going to be sort of the de facto way over there now. So I want to talk about something pretty unique. Maybe we haven't touched on this before, it has to do with GUIs. So last week we spoke about mixing in the asyncio, this is two weeks ago, the asyncio pipeline, sort of event loop and mixing that in with Qt. You know, Qt for Python and PyQt and things like that. So all GUIs have event loops. They're always just going around and around going did something happen? Did they click a button? I'm looking for mouse move, I'm looking for keydown, resize events and it just passes it on to the various event handlers. Well asyncio is another loop that kind of goes around around, process things but like how do we put those together? So a guy named Andy Bulka sent us a message after hearing the first conversation about what was it? I think it was async QT? Qt was the name of the project. After hear about that, he was like "Hey, I work on wxPython and there's a cool thing called wxasync as well and it does a really similar thing and it basically merges those two event loops into one thing." which is pretty cool. So he wrote a really nice in-depth medium article about it called async and await for wxPython.
 
00:14:29 OKKEN: Oh very nice.
 
00:14:31 KENNEDY: So one of the challenges which wxPython apparently is doing background work. So you try to call service or you try to do something and then if you don't take extra measures, it's going to block up that event loop that is the GUI thread and just like your app's going to freeze and not respond and do all sorts of bad stuff that you're not supposed to do in desktop apps. So with this, you can have async handlers that run in the background, so if you're like waiting on a call to go to the service you just await that the event loop keeps on chugging. So it's it's pretty cool. Obviously can do threading and multi-processing and that kind of stuff but this is a little bit cleaner if you want to use async and await.
 
00:15:09 OKKEN: Yeah, nice.
 
00:15:09 KENNEDY: The other thing that he talks about in his article is about this sort of viral nature of using async and await. So if I define a function, I say async def something, the function that's going to call it may well have to itself be async so it can await it and then the things that call that have to become asyncified and so on it. It creates this kind of from the bottom up spread of async invading all of your code. Which that can be a challenge. And it talks a little bit about that but I just wanted to throw a shout out which is something I think we've spoken about before. If I haven't we should definitely make it in full featured item later. But unsync. Have I mentioned unsync on the show?
 
00:15:52 OKKEN: I don't remember.
 
00:15:53 KENNEDY: All right, well it's probably going to be a new thing. If we haven't, I'll double check but unsync is a super simple library that puts a unifying API on multi-processing threading and asynchronous methods and it manages its own little background queue running somewhere else on another thread. It allows you to do a lot of things like just blocking on those running sub-method calls to get their results so that you don't actually have the problem. You can sort of use it to stop this async spread of these methods. It's an interesting article. It's interesting it covers that and I want to throw unasync out there as one of the cool solutions for it.
 
00:16:33 OKKEN: Cool. That's a good thing to bring up. I kind of didn't think about that. I mean I'm used to it in C++ world that if you're running multi-threaded, everything's got to be multi-threadable.
 
00:16:42 KENNEDY: Yeah it starts to go crazy and it's just like yeah similarly. Okay pretty cool? All right, well that's it for our main items. I have a couple of follow up ones and I have a set of jokes for you. I have a joke generator for you even, how's that?
 
00:16:55 OKKEN: That's great yeah.
 
00:16:56 KENNEDY: All right, you got anything you want to let people know about?
 
00:16:58 OKKEN: No.
 
00:16:59 KENNEDY: So you just released a new Testing Code episode.
 
00:17:01 OKKEN: Yeah just released an episode talking about a fun alternative or version of TDD that's called TCR, Test Commit Revert, with the idea of what happens if every time your tests fail, you just throw away all your code that you've changed since the last code commit. And it seems absolutely crazy but it's a fun thing to talk about.
 
00:17:24 KENNEDY: Yeah it does seem a little crazy but also seems fun.
 
00:17:27 OKKEN: Yeah and then there are a whole bunch of cool people lined up. I've got like six interviews lined up so there's going to be lots of good content coming up soon.
 
00:17:33 KENNEDY: Sweet sweet. Well I have a couple of things. A correction, some self-aware acknowledgments and then a joke. So correction, we spoke about the MongoDB licensing and the AWS kerfuffle, where AWS said you're going to change your license so we can't use MongoDB to use our own service? Well fine, we'll rewrite a new implementation that has nothing to do with you but is wire protocol identical and things like that. Well mostly I got that right, however, Will S. sent me a message that said "hey, I actually "posted a message on the comment section of that episode and said hey, you said they switched the AGPL. They actually had already been on the AGPL but they switched to something called the SSPL, server side license." And turns out that the OSI, Open Source Initiative doesn't even recognize SSPL as an open source license because the way of some of its conditions and so it's interesting in some sense that like MongoDB might not even be open source anymore based on its license, not in their traditional what does this license mean sense anyway?
 
00:18:40 OKKEN: Right I took the perspective of let's say I've got a service out there, and just to have a side project where I've got a service out there and I just run my own instance of Mongo and have a I'm using that. Do I have to worry about this license change and the answer is no.
 
00:18:56 KENNEDY: Yeah that's what I saw as well. It's a bit if you want to be a cloud provider and you want to offer this service, then you do.
 
00:19:03 OKKEN: Right but if the service you're offering isn't Mongo, it's just some other service that happens to use Mongo, you're good.
 
00:19:09 KENNEDY: Yeah, like businessinsider.com or whatever. So, MongoDB license, sorry, it's SSPL, that's the change. It was already AGPL, thank you Will for that. So Brian did you know that legacy Python is self-aware and has actually entered the fifth stage of grief?
 
00:19:27 OKKEN: No.
 
00:19:29 KENNEDY: So people out there can try this. So if you type python2 -m and you run any module. So like python2 -m pip list, that's a meaningless command, you'll get the output that says deprecation python 2.7 will reach its end of life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. Moreover, my word, a future version of pip will drop support for Python 2.7.
 
00:19:57 OKKEN: Oh wow. It makes sense.
 
00:19:59 KENNEDY: I feel like that's acceptance right? It's like yeah, I'm going away, sorry. There's a funny Twitter thread as well that I threw out when I first saw that go by so it's cool. And then finally we talked about pip and packaging and stuff. There's this thing that Dan Bater from RealPython shot me over. It said "Hey, have you seen this? It is kind of cool, called PyDist." So it's a thing of service, I guess, that is in beta and the idea is you can use it as your package source, for pip and whatnot, and you can have public and private dependencies there. It'll mirror the public ones and keep a copy of them and never ever delete them, even if they were deleted from pip, PyPI, so that you'll always have them there stable. It's pretty cool, it's supposed to do a bunch of other stuff like show you if you use this package, here are all the packages that depend upon it and what you're going to get, which is not really available right now and things like that but it looks like it may be at some point become a paid service. I don't know it's in free beta, they don't say one way or the other. So anyway, maybe that's helpful to people out there.
 
00:21:04 OKKEN: Yeah, interesting though, cool.
 
00:21:05 KENNEDY: All right ready for a joke?
 
00:21:06 OKKEN: Definitely
 
00:21:07 KENNEDY: And this is super hilarious. All right let's do this. pip install --user pyjokes. So you got to do it. Or better, I am super lovin' pipx so pipx install pyjokes if you got that, because that is the business these days. Pipx is awesome. It's like home brew but for a Python executable.
 
00:21:25 OKKEN: Okay, this is going to take too long.
 
00:21:26 KENNEDY: All right, I'll do a couple and then you can give me one at the end. So what this is, this is a package that you can install that gives you a command line access to developer jokes.
 
00:21:34 OKKEN: Really?
 
00:21:35 KENNEDY: Yeah okay, so once you install and type pyjoke, there are two ways to write error free programs, only the third one works. This one, I think you'll like this one. A Q.A. engineer walks into a bar. Runs into a bar, crawls into a bar, dances into a bar, tiptoes into a bar, rams a bar, jumps into a bar. Okay? That's it. How many programmers does it take to change a light bulb? None. They just make darkness a standard. A good programmer is someone who always looks both ways before crossing a one-way street. See, these are like once you've installed pipx and pyjokes, these are at your hand. Like I'm feeling a little down, what we going to do? Why do Java programmers wear sunglasses? Because they can't C#. It just doesn't stop apparently.
 
00:22:28 OKKEN: We don't even have to have anybody submit any jokes for us anymore. We can just use these.
 
00:22:33 KENNEDY: We have the endless fountain of jokes. Although I'm sure there is some limit to how many jokes are in there. You can go to their website and actually submit a joke to be included in the app. Which is all good.
 
00:22:43 OKKEN: So I have to make sure I update it every once in a while.
 
00:22:45 KENNEDY: Yeah, that's why you need pipx, 'cause then you just use pipx update all and it does it. Sweet, anyway that's our joke. People can go out there and install pyjokes, the package, and run it. Although they might not need us anymore Brian.
 
00:22:58 OKKEN: Yeah they will because they'll need our wonderful transitions from one thing to another.
 
00:23:04 KENNEDY: That's right, that's right. All right well, a lot of fun as always and I'll chat with you later.
 
00:23:08 OKKEN: Bye.
 
00:23:09 KENNEDY: Thank you for listening to PythonBytes. Follow the show on Twitter via @pythonbytes, that's pythonbytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
