00:00:00 KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 122 recorded March 20th, 2019. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: And this episode is brought to you by DigitalOcean. They have some big news to share with you. I'll tell you all about that shortly. You can check them out at pythonbytes.fm/digitalocean and get a $100 credit for new users. So, tell you more about that later. Brian, how you doin'?
 
00:00:26 OKKEN: I'm doing good. And if I chuckle, it's because you got your mic up but then you kind of look like a rapper doing the thing.
 
00:00:32 KENNEDY: Yeah, I'm going to drop it at the end of this episode.
 
00:00:36 OKKEN: Anyway, no, things are good.
 
00:00:37 KENNEDY: Since people can't see, yeah, like so I've got my microphone on a different stand. So we'll see how it sounds. But yeah, I think it's working all right. Nice, all right, so I find dictionaries sometimes get used in Python. Like every now and then people will make use of this fancy data structure.
 
00:00:53 OKKEN: Yeah, definitely, one of the hard things, and I don't have a link to this, maybe we could drop it. But one of the things you need to do with dictionaries is pull 'em apart and put 'em together and stuff. There's a PEP 584. This adds the + and - operators to the built-in dict class.
 
00:01:10 KENNEDY: Yeah, that makes a lot of sense to me. I mean we already have it for list. Well not the minus, but we have the plus
 
00:01:15 OKKEN: List makes sense because it, operators are neat, and the thing that throws me off is the massive difference between what if you do dictionary one + dictionary two? It's different than dictionary two + dictionary one because the second thing always wins.
 
00:01:34 KENNEDY: Right, if there's duplicate keys, the second one it's going to override the first one. So you're saying that addition might not be commutative. That might be a problem.
 
00:01:43 OKKEN: Well, maybe, but I mean like strings are like that. Like if you've got, I dunno do we--
 
00:01:48 KENNEDY: That is true. You don't get the same result of like hello + world or world + hello.
 
00:01:52 OKKEN: Yeah, exactly, so maybe it's okay. When we're linking to the PEP, actually I think it's nice because if you look at the alternates, the alternates are gross. Like you can unpack both dictionaries and then create a new dictionary. Or you can copy one and then update it with the other. They're, all of those are not obvious. And so I think + would be good. So we're going to link to that article, but also Guido van Rossum wrote an article called "Why Operators are Useful" that partly talks about this. And then also there's a email link of why, apparently one of the options for combining dictionaries was to use the pipe operator instead of plus. And so I've got a link to that too.
 
00:02:35 KENNEDY: Wow.
 
00:02:36 OKKEN: Actually so this is just a, we don't know if it'll go in. It's in draft status, and it just got proposed. But I think this would be a neat thing to add to Python.
 
00:02:43 KENNEDY: Yeah, I'm honestly a little bit surprised it's not already there. It would be nice. I certainly prefer + over |. Pipe is not something that's commonly used in Python for combining stuff. Maybe if this was C or something I don't know. But it's certainly in the Python world, + seems like a more natural choice here. So this next one comes from Matthew Rocklin, a guy behind Dask and data sciencey things that I recently interviewed him on Talk Python. But time-shifting, it will be in the future when that comes out. But I was reading through some of his articles and found something I thought, well at least it super resonated with me. I don't know how you roll this, Brian, but mine is a constant stream of inbound inquiries, requests, comments. Watch the Talk Python Twitter account, and my personal Twitter account. We share watching the Python Bytes Twitter account. I have a Gitter channel. I'm on a couple of Slacks. I'm on Cisco teams or something like this. Email is insane. And there's just too many places that stuff comes at me. And I'll spend, there is times where I'll take a week and I'll take a full two days off to just write email and respond to messages. And I'm still not all the way caught up. It's really a problem. So I read this article called "Why I Avoid Slack" by Matthew Rocklin. I'm like oh, yes, this definitely resonates with me because when you get that much inbound stuff, anything that's transient is super hard to keep track of. Right, like @ mentions on Twitter. Maybe I'll catch him, but if I don't, I'm sorry but I just, I lost it. It went by in a stream somehow on accident. Or something on Slack, right, it's 100 messages back. And I dropped in there, and I didn't check it. Marked messages read and left, and now it's just gone right. It's never going to come back. So I feel like those kinds of things, while kind of fun and interesting and more lively, are also just adding stress and not really positive. So Matthew wrote this cool article, saying why I avoid Slack focused on for open source maintainers of projects. Right, should we have a Slack channel for a open source project? He says no. So he says instead of doing something like that, I mean I guess a Gitter channel would be basically equivalent. He says I encourage colleagues to have technical and design conversations on GitHub or some other system that is public, permanent, searchable and cross-referenceable. What do you think?
 
00:05:11 OKKEN: Actually, especially for that case of open source projects and those types of conversations, I think I totally agree.
 
00:05:18 KENNEDY: Yeah, so he says a couple reasons why say GitHub, public GitHub repos and their issues and their conversations and PRs and what not around it are better than Slack would be because you can engage collaborators who aren't on Slack, right. Not everyone is on Slack, but if you're working with a person who doesn't have a web browser, it's probably okay. You can ignore that person. But most people can get to the web, and they can read or even Google search and then find some kind of thing. Also, you can record the conversation because it sounds like his life's a little bit like mine. Like hey, everybody just needs a couple minutes of your time every couple minutes. You know and it completely derails any form of productivity, so it's super hard. And the reason is they'll drop in a Slack channel or some other conversation and go hey, why is it like this? Or just a quick question about that. And it's like if you have it in an issue and Disqus or something and say that's issue 17725. We talked about it for a week. Here's a whole detail, all right. Also, you can serve the silent majority. But it's people who go to Google, and they type in a thing and say, I need help with this thing or why does this work that way? GitHub ranks super high on Google, and those issues often come up. And you can see the whole conversation.
 
00:06:33 OKKEN: That's a great idea.
 
00:06:33 KENNEDY: Yeah, the other one is encourage more thoughtful discourse. So if you're writing one on one or a couple people on a Slack channel you're willing to just throw out kind of quick off the cuff comments. If you're writing in a public permanent forum that's associated with your GitHub profile, it's much more likely that you're going to write something thoughtful. And finally, you get across reference issues. So you can say, we talked about it part of it here and part of it over there on this other issues. And then there was this PR, and then we're bringing it back here. You know Slack is siloed. You can't cross-reference people and conversations and things like that. So here's a call to say enjoy Slack, chat in Slack but don't use Slack for design decisions and other stuff, right. Maintainers come and go. Maybe you want to have a history of these things and not just a transient chat stream.
 
00:07:21 OKKEN: Yeah, and the bigger a Slack channel gets, the more useful it is in some respects. You get answers really quickly. But also the more it reflects kind of just a topical party at somebody's house with lots of conversations going.
 
00:07:34 KENNEDY: Right, there was a cool chat about this thing on the couch. But that doesn't, that's not the same as we wrote up our thoughts on that thing.
 
00:07:40 OKKEN: Yeah, exactly, I'll have to read this.
 
00:07:42 KENNEDY: Yeah, it's pretty good. It's not much longer than actually what I talked about, but it's still really helpful I think. What's the next you got for us?
 
00:07:49 OKKEN: That reminds me, actually, now I had a leak in my memory. No, that's bad.
 
00:07:54 KENNEDY: That's pretty good, actually. It's so bad it's good, I like it.
 
00:07:57 OKKEN: There's an article from Zendesk from Wai Chee Yau that's called "Hunting for Memory Leaks in Python Applications". And we've covered memory leak stuff before, but I really liked this write-up. And it's specifically they've got, Zendesk has a bunch of machine learning and Python written, and one of the problems they run into is some of 'em will have really big memory spikes or memory leaks, and they want to try to figure that out. So this was a specific use case, so he's not covering all of the options. Just some of the tools that were used there. And I think it's cool. I didn't know some of these things were around, so for example, there's a combination of the memory profile or package with Matplotlib where you can easily run, without doing anything to your code, you can and run some Python code and then get a visual graph of the memory utilization, which is cool if you're hunting into stuff and trying to break things around. There was a discussion of using, adding some code to your code to use, it looks like muppy, M-U-P-P-Y.
 
00:09:03 KENNEDY: Yeah, muppy.
 
00:09:04 OKKEN: That will heap dump in certain places. So if you think, sometimes time really doesn't help you too much, but you can at certain places where you think you're at a stable state, doing a heap dump, especially if it's something that's looping and you might be able to catch something there. A reference to object graph or objgraph to profile the memory object lineage. So objects that create other objects.
 
00:09:28 KENNEDY: Yeah that can be tricky because you've got, maybe have some object, it's a class and it's got some field. That field is a list, and that list, it has a bunch of objects. One of those happens to hold onto a pointer to some other huge dictionary that you thought should be gone, but right there's still some reference keeping it alive, right. So this object graph will tell you that basically? Nice.
 
00:09:48 OKKEN: For example, he dumped some of the heap dumps. Some of those examples, it's just you've got so many megabytes towards strings. Well I dunno if that really helps you too much having, finding out where it came from might be helpful.
 
00:10:02 KENNEDY: Yep.
 
00:10:03 OKKEN: And then he ends the article with a bunch of tips. Do click feedback if you think something, one of the things I liked which is probably really good is if you have memory intensive tasks or something you think might be the problem, separate that into a separate process so you can debug it separately. The Python built-in pdb has bunch of stuff that can help you as well. And then also watch out for leaky packages because the leak might not be in yours. It might be in your dependencies.
 
00:10:30 KENNEDY: Yeah you might have pip installed a memory leak for sure.
 
00:10:33 OKKEN: Which I was surprised that he said for example Pandas. And I'm like really? Pandas is like, must be tested the heck out of it. But apparently there's some known Pandas problems in some corner cases. But oh well.
 
00:10:44 KENNEDY: Yeah it probably was kind of tricky with the C layer, holding onto pi object references and all sorts of funkiness right.
 
00:10:51 OKKEN: My first reaction to dealing with memory in Python is like well we're not supposed to have to, so it must be a real pain in the rear. But these tools don't look that bad to work with if you need to.
 
00:11:01 KENNEDY: This object graph looks really cool, and it will actually create a png visual graph of the relationships, which is cool. And you can even ask for back references. It seems like this is the thing that has all the memory. It should be gone, but why is it not garbage collected or cleaned up? And you can say, draw me a graph or a not, like a mathematical graph, not a parabola type of graph. A graph of all the back references to this object.
 
00:11:28 OKKEN: Very nice.
 
00:11:29 KENNEDY: Yeah, so you can ask it in both directions.
 
00:11:30 OKKEN: Yeah right, if you think it should have been deleted and its not, it's because somebody's still referencing it.
 
00:11:34 KENNEDY: Right, so who is that? Tell me about that, I need to know about that right now. Yeah, that looks really cool. It's definitely something I'd like to explore. Actually, let me rephrase that. I don't want to explore it. I don't want to have memory leaks. But if I do, I will find it very useful.
 
00:11:47 OKKEN: Yes, definitely.
 
00:11:48 KENNEDY: There you go. Also useful, DigitalOcean, let me tell you a cool thing that they just released. And this came from one of the listeners. They sent me a message like hey, this looks really cool. Did you know about this? So they announced this thing called the DigitalOcean Marketplace. So the idea is that different companies and other people can create these pre-configured virtual machines. And then you can just do one-click app install them. Like if you want a Ghost blog server configured with Nginx and all that, you just click Ghost blog server, pay your $5 and now you have one.
 
00:12:20 OKKEN: Nice.
 
00:12:21 KENNEDY: Or maybe you want a GitLab Enterprise, a MongoDB server or even you can say I want a Django server, and it'll give you Django, Nginx, Gunicorn, Postgres, Certbot, a whole bunch of stuff pre-configured all to work together in a few seconds. That's pretty cool, right?
 
00:12:35 OKKEN: Yeah definitely.
 
00:12:36 KENNEDY: Yeah, yeah, yeah. So I think this is a really nice feature. It's already great to run infrastructure there. Now if you can get it much closer to the end, it's a little bit, I'm sure it's Docker inspired right. It seems like that but for their infrastructure.
 
00:12:49 OKKEN: You still have to figure all that stuff out and to be able to throw a few dollars to the people willing to do the work to put it together, that's great.
 
00:12:54 KENNEDY: Yeah, it's beautiful. All right, so check them out over at pythonbytes.fm/digitalocean, create an account and then once you get into your account, there's a little marketplace tab over there. So super cool. So speaking of Docker and all these other things, there's a cool article by Craig Kerstiens. It's called "Give Me My Monolith Back" or "Give Me Back My Monolith". As opposed to a whole bunch of microservices, right. So there's been a lot of hype, excitement, I dunno, choose your side of the fence around microservices. And this is the idea of yeah, you have a web app, and it's got like 500 Python files and maybe it's doing all these different things. And wouldn't it be better if we could take the credit card processing and make it its own service with its own database. If we could make the caching its own service, its user accounts its own service, all that kind of stuff. And then that user account part is super simple, right, because the whole purpose of this application is who are you, what can you do, can you log in, can you reset your password or something like this right. It seems good, yeah? There's a lot of really good uses for this. If you have a large team of people working on a large web app, it might make more sense to break it into these small pieces and have some people in charge of each piece. I think that actually legitimately makes a lot of sense. It's easy to bring on a junior developer who can say all right, I'm going to work on this caching bit or whatever. And I don't have to know the whole thing. I just got to work on my little API, it does core, async, or whatever it does. That makes a lot of sense, but most people who are working on web apps aren't in that space of having 30 people on their team. Right, that's really rare right. You've got 'em down this rant of you're not Google, you're not Facebook, you're not LinkedIn, right. You don't need all these patterns 'cause you're not them. You're a little, relatively smaller company or project. Anyway, this guy feels like that adds a lot of complexity and challenges, and he lays them out of like why does the world have to be so hard? Wasn't it easy before, and now it's not? Not from the article but just a thought of mine. When I think of this microservice architecture, what you're doing is you're taking code complexity, and you're moving it to infrastructure complexity.
 
00:15:08 OKKEN: Yeah, definitely.
 
00:15:08 KENNEDY: Instead of having one kind of complicated bit of code, I now have 12 super simple bits of code, but they all have to work together in fairly complicated network environments, failover, all this kind of stuff, this topography and whatnot. So my thought is at least well which of those two things are you good at? Infrastructure or code? That drives a lot of these decisions. But he runs down a couple of things that he said used to be simple, but now we get to revisit them, get to. So setup went from like chemistry to quantum mechanics. A lot of this has to do with bringing new people onto a team or junior developers and things like that. So it says onboarding a new engineer, at least for the initial environment, used to be half a day. And now, we've ventured into microservices. This onboarding time has skyrocketed, and it's super complicated for them to understand all the moving pieces. And then the next one is so long for understanding our systems. Back when we had monolithic apps, you had an error, it had a stack trace. You click on the hyperlink generated, in the editor, to take you to the line where the stack track is. And now you have different services that talk to another service that queues something on a message bus that another service pulls it out and then you get an error. What caused that, right? How do you follow that through? How do you debug that? So it says well, if we can't debug 'em, maybe we can test 'em. Talks about the challenges of continuous integration and what not but also takes about some services that were made into, some apps that were made into microservices that are now moving back sort of in a reverse migration to these monoliths. And you know, I got to say, I'm pretty sympathetic with this. I see the value of microservices, but I also know that I'm not Google. And so. Yeah, anyway, for me I don't think this whole microservice world makes as much sense in my space. But I dunno, what do you think?
 
00:17:03 OKKEN: We should go back to html and Perl.
 
00:17:05 KENNEDY: That's right, can't we just have static files? All this logic is bad for the brain.
 
00:17:10 OKKEN: CGI used to be easy, no.
 
00:17:12 KENNEDY: No, well actually it was never, ever easy.
 
00:17:14 OKKEN: I think that there's different ways to solve problems, and I think that making sure that you're paying attention to it I think is a good idea. It makes sure that people understand that microservices are a, sometimes it's a funny, funny, it's a shiny new thing to go learn, and sometimes that's not bad if you're willing to take on the risks. But it is a, changing from what you know to what you don't know is a risk so.
 
00:17:40 KENNEDY: It's definitely exciting. I mean you can bring in Docker and Kubernetes and do all sorts of fun stuff. But at the same time, just be aware of the trade-offs you're making.
 
00:17:48 OKKEN: Some of the things that it solved are now solved by async.
 
00:17:51 KENNEDY: Yeah, that's true, absolutely.
 
00:17:53 OKKEN: One of the things also is if you're in a single language or not. So one of the things that microservices gives you is the different teams can do whatever language they want as long as they provide an interface that's compatible with everyone else.
 
00:18:05 KENNEDY: Yeah, authentication bits in node.js, the caching tier's in something else and the front end's in Python or whatever.
 
00:18:12 OKKEN: Yeah, definitely.
 
00:18:13 KENNEDY: Makes sense, again it's not something you will do that often when you're just a couple of people. But if you're a big team or a set up teams, then sure, makes a lot of sense. All right, so I know of some famous laws and rules in software development like the solid principles, single responsibility principle, open close principle. These are all good. You found some more amusing ones, didn't you?
 
00:18:36 OKKEN: Yeah, some of them are serious, and some are amusing. All of them have kind of a little bit of a truth. And this is a older article, so I'm not really sure how I got ahold of it. But it's "The Famous Laws of Software Development", and there are 13 listed. I think I counted that many. I'm not going to read all 13. I guess it was written in 2017. It's not that old. But okay so Hofstadter's law, which is great. It always takes longer than you expect even when you take into account Hofstadter's law. It's self-referencing.
 
00:19:07 KENNEDY: I love it, yeah, I love it. There's so many good ones here.
 
00:19:11 OKKEN: So that's just funny. There's Conway's law, which it's not supposed to be funny but it's sometimes depressing. Any piece of software reflects the organizational structure that produced it.
 
00:19:22 KENNEDY: Yeah I think that's true.
 
00:19:24 OKKEN: Like microservices are great for lots of teams. One team, one monolith or something, I dunno. But I've seen that before, also that the hierarchy of different teams shows up in the software as well. And then of course, a couple more I'd like to point out, the Peter principle. In any hierarchy, every employee tends to rise to his level of incompetence.
 
00:19:47 KENNEDY: Sounds like a quote from The Despair. Calendars and posters, it's great.
 
00:19:55 OKKEN: Yeah, and then the 90/90 rule, which I haven't actually heard before, but that it's just hilarious. Have you heard this before?
 
00:20:02 KENNEDY: No.
 
00:20:03 OKKEN: The first 90% of the code takes 10% of the time. The remaining 10% takes the other 90% of the time.
 
00:20:09 KENNEDY: That sounds about right to me. Yeah, it's definitely, it feels like things just drag on and on right at the end of these projects. So the comments are good too. I noticed that some people, a good named Corey, threw in a thing and said, I'm shocked that Cunningham's Law isn't on the list. Cunningham's Law, the fastest way to get help over the internet is not to ask a question but instead to answer it wrong. And then someone also responds, maybe its omission was a conscious choice to invoke it.
 
00:20:38 OKKEN: That's awesome.
 
00:20:40 KENNEDY: So yeah, it's really good, there's a bunch of nice ones in there.
 
00:20:43 OKKEN: Yeah, that's real though. I mean the best way to get people to help you on the internet is to start blogging the wrong stuff.
 
00:20:48 KENNEDY: Yeah, enable comments and start writing. Yeah, it's cool. I got a quick one to round it out here. We talked about a plugin architecture before for building plugins that ran within your app. So basically ways to let people interface simple bits of code into your other systems and version plugins and all that. There's another one called Beer Garden plugins, which is pretty fun. One of the listeners suggested this. So the idea is it's a framework that will convert your functions. These are regular Python scripts. They don't know anything about the web or plugins or whatever. Convert those into composable, discoverable, production-ready services as in RESTful HTTP services with minimal overhead. So if you have a class, you can just go say this is a system, and then the functions in the class, you go these are services. And they take these parameters, and you describe what they take, things like that. And it will just go serve that. And it even does cool stuff like it does Swagger documentation of the services and whatnot. So yeah, it's a pretty interesting little quick way to convert code that was not meant to be a service into services.
 
00:21:57 OKKEN: Very cool.
 
00:21:58 KENNEDY: Yeah, pretty cool, it's apparently based on MongoDB, RabbitMQ and it supports modern Python. So that's pretty cool. It talks about what you have to do to get it running. Or something that's kind of nice is it also comes in a Docker and Docker compose form. So you can just clone the Docker compose bit from GitHub, and then you say docker compose up. And now it's up and running. And then you can give it these little apps and whatnot. It's pretty cool.
 
00:22:25 OKKEN: Nice.
 
00:22:26 KENNEDY: Yeah, so I think the idea is you run your code, and it plugs into the server there. So yeah, anyway, it's pretty neat. People can check that out if that sounds like something they're looking for. All right, well that's it for our official items. Anything else you want to cover here at the end?
 
00:22:40 OKKEN: Just had a really cool interview the other day. This will go out as a Testing Code 69, which should be available for everybody before you listen to this. But it was with Andy Hunt, who is now at the head of Pragmatic Programmer, I mean.
 
00:22:57 KENNEDY: Yeah, he's one of the original founders of it, right? Him and one other guy I think, is that right?
 
00:23:02 OKKEN: Yeah, Andy Hunt and Dave Thomas wrote the Pragmatic Programmer, and that was released in '99. And then in 2003 they formed their own publishing company, and they've been going strong. And the pytest book was under their publishing company. And so now Dave doesn't play an active role in the publishing anymore. But Andy does, and so it's a really cool conversation. Andy was also one of the original signers of the Agile Manifesto. And so we talk a lot about.
 
00:23:27 KENNEDY: Oh right, that's cool.
 
00:23:28 OKKEN: Yeah, we talk a lot about that and quite a few other things. So that's a fun thing to listen to.
 
00:23:33 KENNEDY: Excellent, I'm definitely going to check it out when you release it. That's a good one.
 
00:23:37 OKKEN: How about you?
 
00:23:38 KENNEDY: So I have two quick things to share with you. First there's this thing called Firefox Send. Have you heard of this?
 
00:23:43 OKKEN: I have not.
 
00:23:44 KENNEDY: Yeah, so Firefox Send is actually not something built into Firefox. But it's more like a Mozilla project to make the web better, right. So here's what it does is it lets you share files securely, large files like up to two and a half gigs per file. And it does end to encryption, end to end encryption, where the decryption key is actually stored in the URL. So if you don't show the URL, even the Firefox Send people can't decrypt it or whatever.
 
00:24:14 OKKEN: Okay, interesting.
 
00:24:15 KENNEDY: So basically it's a way to serve these files around without putting into Dropbox or One Drive or Google Drive or whatever where it's permanently there. Its going to be backed up. It's, who knows if you could ever truly delete that thing, right. Whereas here the maximum life of one of these files is seven days. And you can even say it can only be downloaded one time and delete it in an hour or something like that. And of course the encryption key is not stored with the Firefox folks, so if it gets lost, it's not that big of a deal.
 
00:24:47 OKKEN: Interesting, I'll have to check that out.
 
00:24:49 KENNEDY: Yeah, it's a free quick little thing. You can either sign in and have a larger file options or smaller ones if you want to stay anonymous. But yeah, definitely I think it fills a cool need, and it's kind of nice to see Mozilla just making the web better in that way. And it doesn't depend on Firefox. It just happens to be made by them. Nice, speaking of making stuff better, do you know what I really hate? I hate going to weather.com and them saying oh it looks like you're running an ad blocker. We want to serve you crap ads from an ad network and that may have malicious content and JavaScript in it. So please white list us. And every time I see that, I think, if you, these are not small little blogs or little article sites. These are CNN, The Weather Channel, major, major places right. And I always think, look, if you want to serve ads to me, why don't you do it on a system that is not broken? On a way that will not put my computer and my information and everything else at risk. You could easily talk to your sponsors, put an image on your site, let people click on it and it takes them to their offer. But no, they want to run all sorts of retargeting and tracking and they want to figure out oh are you a woman who's 36 who has also searched for this, right? It's really shady, so this is not a change for us. But this is more of a make it explicit for us. On pythonbytes.fm and also talkpython.fm we don't pop up these, hey looks like you're running an ad blocker, please stop it. Because our ads still show when there's an ad blocker because all they are is images. And we're not trying to re-target anyone. Isn't that cool?
 
00:26:35 OKKEN: That is very cool, yeah.
 
00:26:36 KENNEDY: Yeah, so there's this move I've seen on the internet to talk, this is sort of a pushback on that to say no, these are ethical ads. You see this on Read the Doc and other places. So I put a little note under our ads saying these ads are served ethically. We don't track you. We don't re-target you. We don't do anything. But here's our sponsor. If you like it, if you like the product, you want to support us, click on it and that will let 'em know that you came from us because of the URL. And that's all you need, right. So I really wish all these places that say please white list, instead said, could we have a better business model where we don't have to track people and do all sorts of nefarious stuff, so we're opting out.
 
00:27:14 OKKEN: Good job.
 
00:27:15 KENNEDY: Yeah, thanks, all right well I believe it's time to laugh a little bit. Alright, go first.
 
00:27:21 OKKEN: I really like this joke that Derek Chambers submitted. It is what do you call it when a Python programmer refuses to implement custom objects?
 
00:27:31 KENNEDY: What is that, I don't know.
 
00:27:32 OKKEN: Self-depravation. And then he adds sorry, that joke was really classless.
 
00:27:37 KENNEDY: Yeah, that's pretty good. I love it, that classless, classless Python. Cool, so I have another one for you. And I pretty much have an infinite supply of these now that I pipx installed pyjokes. So I ran these before our last episode, and this one came up. It said I had a problem, so I thought I'd use Java. Now I have a problem factory. I love it. Anyway, that's the jokes. And if you find yourself wanting more jokes between now and the next episode we release you could always pipx install pyjokes and get your fix in the command line.
 
00:28:12 OKKEN: Yeah, oh here's one more. Okay, I just ran it. I got to do this one also. There's only two hard problems in computer science. Cache invalidation, naming things, and off-by-one errors.
 
00:28:23 KENNEDY: Nice, yeah there's good jokes in that pyjoke's set. I love it.
 
00:28:28 OKKEN: Yeah, there's not an infinite number. So people still keep sending us jokes. We love 'em.
 
00:28:32 KENNEDY: Yeah, we're going to hit the limit eventually. It's got to happen but definitely fun. So we thank you for sending that in, Derek. And Brian, thanks for doing this with me as every week.
 
00:28:40 OKKEN: Yep thank you.
 
00:28:41 KENNEDY: You bet, talk to you later. Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the look out for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
