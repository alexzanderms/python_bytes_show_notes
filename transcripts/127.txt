00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your ear buds. This is Episode 127, recorded April 24th, 2019. I am Michael Kennedy
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: And we have a special guest this week as well. Kenneth Reitz, welcome to the show, man.
 
00:00:17 REITZ: Hi, and thanks for having me.
 
00:00:18 KENNEDY: It's great to have you here. I wonder if Requests will come up as a topic during the show, what do you think?
 
00:00:24 REITZ: Requests 3 might.
 
00:00:26 KENNEDY: The future of Requests. How exciting, awesome. Well, Thanks for being here. It's great to have you here. Before we get any further, I going to say thank you to Datadog for sponsoring this show. Check them out at pythonbytes.fm/datadog. More on why they're cool, later. Brian, I feel like WebAssembly, Rust, all these things, there's so many cool things going on around it and that's something you found for us to start off with, right?
 
00:00:47 OKKEN: Yeah I saw this from a cool, actually a twitter post from Mara Bos. I think it's Bos, B-O-S. And it's an extension to Rust that's inline Python, so if you're a Rust person and you need a little Python in there you can just inline it as, I think it's as a macro or something. I'm not a Rust person so I'm not sure how this works but you can inline Python code, including things like embedding a matplotlib call to pop up a window, so it's pretty neat. I don't really have much more to say about other than, neat. You can run Python within Rust.
 
00:01:21 KENNEDY: I think that's pretty awesome. Yeah, quite cool.
 
00:01:23 REITZ: I read something like this week, actually, for Bash in Python. So, you can do inline Bash in Python. So it seems to be a trend, people want to embed other languages in other languages.
 
00:01:33 KENNEDY: That's cool. Could people get to your Bash thing? Is that a public thing?
 
00:01:36 REITZ: Yeah it's just import bash or pip install bash.
 
00:01:37 KENNEDY: That's pretty cool. There's a lot of interesting interplays here. Brian, have I talked about Wasmer? As in W, I mean WebAssembly-mer before on the show?
 
00:01:48 OKKEN: I'm not sure.
 
00:01:49 KENNEDY: I think that's going to have to to be a topic. So, there's all sorts of cool interplays between Rust and Python these days, and like Rust obviously is big for generating WebAssembly and so there's now a project called Wasmer, which lets you, I think I talked about it last week, I did. Yeah, so, lets you basically run WebAssembly in Python. And this is kind of like, the opposite.
 
00:02:09 REITZ: Oh really?
 
00:02:10 KENNEDY: It's an interesting way. Yeah yeah, so kind of like Node.js is the platform for running JavaScript like outside of the browser, like Wasmer kind of does similar stuff, lets you take any WebAssembly thing and run it in your Python Code. You basically import the functions from it then you call them in straight Python.
 
00:02:24 REITZ: So do you have to do reflecting where you know what the structure of the code looks like when you import it?
 
00:02:30 KENNEDY: I don't know, I doubt it gives you any help but the way you interact with it looks like Python. You don't have to do anything special beyond an import statement.
 
00:02:38 REITZ: Okay, so you don't have to write C or anything?
 
00:02:40 KENNEDY: Like a load statement, no nothing like that. It's pretty much straight Python. This is really cool, Brian.
 
00:02:44 REITZ: That's awesome.
 
00:02:44 KENNEDY: Yeah I like this, very nice find. Cool. All right Kenneth, what's your next one? You want to tell us about the future with your back from the past microphone?
 
00:02:52 REITZ: Yeah, sure. Well I wanted to announce that Requests 3 is underway right now. We're doing a development cycle at the moment and I wanted to announce just some information about that, basically. So Requests 2, which is the thing that you know and love is going to go into CVE only mode, which it's basically been for a long time. That's kind of the way things have been for a couple years now.
 
00:03:13 KENNEDY: Does that mean like, security fixes only, or security fixes and bug fixes?
 
00:03:17 REITZ: It means that if there's a CVE, a true security vulnerability we'll fix that as soon as possible, and if there's any security conscious bugs that we'll address those as well. But people suggest UI changes a lot and it's just not going to happen at this point. It's going to happen in Requests 3 if you're going to...
 
00:03:38 KENNEDY: Awesome, so what's the story with Requests 3? What are you guys, what are the major features?
 
00:03:41 REITZ: Yeah, so, the major features are, there's going to have async and an await keywords, so you're going to be able to do asynchronous calls. We're ripping out urllib3, which is unfortunate because there's different approaches on how the future of the project could unfold and this needs to start happening now. So we're just taking action and making our own library for making these low level Requests and we'll see how far long we get with that but we don't see any blockers that we can foresee at this point, so. We'll have a new core, if you will, and it'll be as the new namespace Requests 3. So everything that you know that depends on Requests, this is going to have backwards incompatible changes but it'll be under a new namespace, so you won't have to worry about that. You can have both installed at the same time.
 
00:04:25 KENNEDY: Nice, and it's modern Python only, right?
 
00:04:27 REITZ: Yeah, it's only Python 3.6, and it has type annotations and all the public functions, so your IDEs can get some nice code completion, stuff like that. I'm pretty excited about it. So, I don't want to take up too much time though, so I guess we got to keep moving.
 
00:04:39 KENNEDY: Well we do, and I'm pretty excited. So, I have one more question. So, why 3.6 and not 3.5? 3.5 is fine for async and await. Did you do different type annotations, or what was the 3.6? Maybe f-strings?
 
00:04:50 REITZ: F-strings. It's f-strings.
 
00:04:52 KENNEDY: F-yes, right on. Brian, I still owe you a sticker.
 
00:04:54 REITZ: They're really useful when you're writing a load on a library or something that deals with a lot of URLs, it's really nice to have F-strings.
 
00:05:00 KENNEDY: Yeah, that's pretty cool. It's interesting.
 
00:05:02 REITZ: I don't find it acceptable to use 3.5. If you have 3.6, even three-six doesn't seem to be acceptable. I'd like, it's going to be documented as 3.7 on there because if you're going to be on latest Python you might as well be on latest, latest Python.
 
00:05:16 KENNEDY: Yeah.
 
00:05:16 REITZ: Yeah.
 
00:05:16 KENNEDY: Right on and by the time that that comes out, 3.7 will definitely be easy, easy, right?
 
00:05:21 REITZ: Yeah.
 
00:05:22 KENNEDY: What's the timeframe?
 
00:05:23 REITZ: I think it'll secretly work at 3.6, and secretly work at 3.7, but I'll just say it works at 3.8.
 
00:05:29 KENNEDY: I love it. Brian, you excited?
 
00:05:31 OKKEN: Yeah actually, I think that'll be fun.
 
00:05:33 REITZ: Yeah I'm thinking of also rippin' out the .get keyword. That's the thing I'm torn about at the moment. Like to requests.get that everyone uses.
 
00:05:42 KENNEDY: What's it lookin'?
 
00:05:43 REITZ: To force everyone to use Session.
 
00:05:44 KENNEDY: Ah interesting, okay. So you create a session and then you call get on the session, right?
 
00:05:48 REITZ: Yeah, so it would be, it's called an HTTPSession now so it'd be HTTP.Requests is what I want people to do, but I'm still playin' with the idea, so it might be not changed, we'll see.
 
00:05:59 KENNEDY: Yeah, you could face some backlash, but yeah it sounds good.
 
00:06:03 REITZ: I'm willing to take it.
 
00:06:05 KENNEDY: You've got some tough skin, you've been on the internet for a while, right? Yeah, let's not go down that path. Alright, so maybe you could even say that you've been in some flame wars? So the next item I have is called Pyflame. Pyflame is pretty cool, like if you want to know how the performance of your program or a certain library is going, you can generate what's called a Flame Graph for Python. And what's really nice about this is it's super low overhead enough that you can even run it in production without hurting your program. So you could say, ah there's something going wrong with the website let me log-in and attach, you know, Pyflame to it and see what's happening. And then just break loose and go analyze that rather than, you know, try to simulate what's happening. So, I think that's pretty cool.
 
00:06:51 REITZ: We actually used this on the pipenv team at one point to determine where our slow points were and like how fast our boot up time is.
 
00:06:58 KENNEDY: Yeah, and was it useful?
 
00:06:59 REITZ: It was very useful, yeah, it shows you every single call in your stack and just shows you a graph over time of how much time was spent on each call and all the sub-calls, so it's great. I really like it.
 
00:07:11 KENNEDY: Yeah, the graphs are nice as well. They're pretty obvious, not just like a grid of numbers like a spreadsheet but, ya know, graphs.
 
00:07:17 REITZ: Yeah usually when you hear someone talk about graphs that are generated from Python, it's like you have to work with them a lot to make them useful, but these ones are useful out of the box which I really like.
 
00:07:28 KENNEDY: Yeah, cool. Another thing that it said that it does, which is nice, has nothing to do with pipenv in this feature, but it's capable of profiling embedded Python interpreters. So, like, for example in uWSGI or Gunicorn or some of these, you know, back end worker processes for web servers, so you can get in there and get that and multi-threaded stuff. So I think it's pretty awesome. Brian, do you guys care about performance where you are? I mean you're doing testing on hardware, so it's not like users are directly interacting with it. Is it, I guess it's not, do you care about it, but is it something you have to worry about?
 
00:08:00 OKKEN: In my production stuff, the Python is not the bottleneck, its the communication, so, yeah.
 
00:08:06 REITZ: That's a great response.
 
00:08:09 KENNEDY: It's on the wire, it's not our fault.
 
00:08:11 OKKEN: Well it usually is our fault, but it's usually an optimization of doing too many calls and reducing the communication latencies.
 
00:08:19 KENNEDY: Right, having the chatty API verses trying to bulk up the thing you want to ask it or whatever, right?
 
00:08:24 REITZ: Are you working with a lot of Microservices?
 
00:08:27 OKKEN: Working with a test equipment, so communicating the commands and retrieving data.
 
00:08:33 REITZ: Yeah that would take a lot of time.
 
00:08:34 KENNEDY: Yeah, Brian tests actual devices with Python.
 
00:08:38 REITZ: That's awesome, oh that's right. I knew about this, yeah, you test like phones and stuff, don't you?
 
00:08:44 OKKEN: Yep.
 
00:08:45 REITZ: That's awesome.
 
00:08:45 KENNEDY: Yeah, pretty cool. Alright, before we get on to the next one, which looks pretty interesting. Let me just tell you about Datadog, so they've been sponsoring Python Bytes for quite a while and we definitely appreciate them. So they are a monitoring and analytics service that lets you take all your metrics and logs and tracing and what not across your services like Microservices like Kenneth just said and put them all in one place and it automatically instruments Async libraries like asyncio and Django and Tornado and helps you visualize all that stuff across the boundaries to find your bottlenecks. Super cool, so check them out. Get a free 14 day trial and a cool DataDog t-shirt over at pythonbytes.fm/datadog. Alright, thanks DataDog. Brian, what to you got next?
 
00:09:25 OKKEN: This was going to be one of my extras but I thought I'd just discuss it because I was curious what you guys thought. So Flit is, I really like it. It's a little package that allows you to quickly build a pyproject.toml file and a license file and basically if you've got a module you want to share with somebody or a package that's just a source package, it's just a few commands to try to get it into a wheel form, just so you can share it. And it even does publishing within it. The one thing I didn't like about it is it didn't support source directories and I like source directories in my packages, so I did what you can do with open source projects, is I submitted a Pull Request. So just submitted this last night. I've been playing with the corner cases today and there's still some, I'm listing it as a work in progress because there's some corner cases that still need tested and probably ironed out, but I don't know, we'll see. We'll see where this goes.
 
00:10:21 REITZ: Did you make it so it's configurable to any directory or specifically SRC?
 
00:10:26 OKKEN: Specifically SRC.
 
00:10:28 REITZ: Okay, cool.
 
00:10:29 OKKEN: It doesn't break any of the other, so really right now, it used to have two kinds of projects, just a module or a package with a name. And now I'm just adding those two within a source directory, the old mechanism all works, it's just extending it.
 
00:10:45 REITZ: Yeah Flit is a little bit like a combination between Twine and Cookiecutter a little bit, like it's far reduced in scope from Cookiecutter and Twine, all it does is publish things, publish wheels for you. I mean it's the tool I typically use in my work flow but Flit is a great alternative if you don't already have your set up stuff built out, I think Flit is a great first tool to go for especially if you don't have those files already written.
 
00:11:12 KENNEDY: Yeah, that's awesome.
 
00:11:13 OKKEN: Yeah.
 
00:11:13 KENNEDY: Well, hopefully people like it, I mean it's out there, the PR right, they can merge it. That's pretty cool.
 
00:11:17 OKKEN: Yeah, so hopefully.
 
00:11:18 REITZ: Hopefully they'll put it in, otherwise you can't use it on your project. You'll have to just come to our side where we don't use source.
 
00:11:25 OKKEN: Well, I could fork it.
 
00:11:27 REITZ: Yeah, you could.
 
00:11:29 OKKEN: But I don't really want to support it, so I'm hoping that...
 
00:11:32 REITZ: Ah, it's lit.
 
00:11:36 KENNEDY: Yeah you don't want that puppy. You don't need another thing to take care of, right?
 
00:11:39 OKKEN: Yeah, that's a good name, though.
 
00:11:43 REITZ: He's going to do it.
 
00:11:45 KENNEDY: Awesome, alright, so speaking of packaging and things that we've talked about and things we're like, I am a huge fan of pipx, I think pipx is really killer.
 
00:11:53 REITZ: Yeah.
 
00:11:54 KENNEDY: The way it works, I've ran into some issues with Homebrew in it but I'm going to put those aside for a minute. Also, pipenv, tell us the story here.
 
00:12:01 REITZ: My endorsement is also with this flag which is, I've run into some issues that I'm not sure what they are yet. So, it appears as though pipx is great. And what it does is it just creates virtual environment and installs binaries for you, so it's like a Pipsi replacement. Or a virtualenv wrapper if you have, sometimes people have like a system virtualenv, where they install their system utilities or they'll just, they'll keep their system utilities in the system instillation of Python and then they'll isolate their different projects into virtualenvs. This makes it so every single tool has it's own virtual env which is really best practice. So if you're using pipenv, if you're using HTTPie, if you're using anything pip itself, anything that's pip installable from the command mine, you can install it easily with pipx and it does appear as though it has shine. I'm not sure that it's fantastic but it appears as though it works pretty well so far and I really like that it supports multiple binaries.
 
00:12:59 KENNEDY: Yeah, I do too. It's quite nice and to me it feels like Homebrew but for Python executables, like it's not necessarily for managing stuff for your project, but for stuff that is Python-based that you just want to run, right? Like, I want to, I don't know, run Glances or Cookiecutter or something like that, right or pipenv.
 
00:13:18 REITZ: Exactly, and it gives you a nice isolated environment in which to install that and some of these, like pipenv has some, like, 50 dependencies or somethin' crazy. So it's really good to have an isolated virtual environment for that. 'Cause in Python you can't install multiple versions of a dependency, like you can in Ruby, so that's why we need to do this, basically.
 
00:13:38 KENNEDY: Yeah, cool. Well I definitely like it yeah.
 
00:13:40 REITZ: Yeah, that's the end of my endorsement with the asterisks afterwards.
 
00:13:44 KENNEDY: Yeah I'd love it, the problem that I ran into, the only problem I ran into, was when I installed Python 3 through Homebrew and then Python 3 got upgraded by Homebrew, it had lost like the symlink to where Python was and all of the virtual requirements that it had created.
 
00:14:00 REITZ: Oh, interesting.
 
00:14:01 KENNEDY: Yeah, yeah, so basically when I upgraded Python, it like lost track of what it was up to so I just had to re-pipx install everything. There's maybe another way to fix it but that was what I did 'cause all of the virtual environments it manages seemed to have gotten wacked.
 
00:14:16 REITZ: Yeah pipenv does that too, where it'll break, all your virtual envs just break if you upgrade your Python underneath it, so.
 
00:14:21 KENNEDY: Yeah, what do you do to fix it? You know better than I do.
 
00:14:24 REITZ: I just delete them all.
 
00:14:26 KENNEDY: Okay, so even you have the same fix as I do. Did you try turning it off and on? How many times? Three times, I always do it three times.
 
00:14:34 REITZ: I would like to automate that, so it does it for you, like you know, has a message like, oh you have appeared to have upgraded your Python, we're going to clean it up for you.
 
00:14:42 KENNEDY: Yeah.
 
00:14:43 REITZ: You know, there's limited time.
 
00:14:44 KENNEDY: Exactly, quite cool. Alright, the last one. Kenneth I think you'll like this one because it has to do with Requesting things on the internet and I don't know how to say this, I'm guessing Cheat Sheet. Cheat.sh as a domain, okay? So this is an interesting cheat sheet for getting started with Python or Bash or whatever and the way it works is you send it cURL Requests or send it HTTPie Requests on the command line to ask it questions, okay? So, you can go over there and say, like, if you have HTTPie installed, you could say, HTTP cht.sh/python that tells you you're talking about Python, then you could say, /sort+list. And if you run that, it will tell you, oh, here's a Python example of how you sort a list, you create the list and you say my list.sort, you set the key to like, string.lower or you know, whatever you want to sort. Say I want to sort alphabetically but without concern of casing. Things like that. So you can ask it arbitrary questions like cht.sh/python/connect+to+database or something like that with a plus in there. And it'll like tell you, here are some ways to do it with SQLite, or see what it says for this one. Oh yeah, here's a little example of how I use Peewee to open up a, create a little class and do ORM stuff to it. It's pretty, pretty funky, pretty interesting, and then you can ask it questions like, how to get started with a : learn on any project. Like, how do I get started with Python? And it'll tell you, in its little way and it's pretty sweet.
 
00:16:21 REITZ: I think funky is the right word for this.
 
00:16:24 KENNEDY: It's different, right?
 
00:16:24 OKKEN: So it's like google but harder.
 
00:16:27 REITZ: Yeah, basically. It's slightly more deterministic.
 
00:16:31 KENNEDY: Yes, but it has integration into Visual Studio Code and Vim.
 
00:16:33 REITZ: Oh, nice.
 
00:16:34 KENNEDY: Which is interesting. And then you can also, like you can install a client and put it into stealth mode, so if you're doing an interview, anything that you select in a text box, it will start on the side printing out it's response to that. Okay? So, if you're in a chat window.
 
00:16:54 REITZ: I'm looking at the read me and he really takes this very seriously.
 
00:16:57 KENNEDY: It is.
 
00:16:58 REITZ: It says, ultra fast, returns answers within 100 milliseconds as a rule, so he's definitely making scalability a concern so I think this a really fun production project.
 
00:17:07 KENNEDY: I think so too. And it doesn't use it's own data sources, it uses other community driven repos for different topics, and it tries to pull those in. So it's not like it tries to be the answer, it tries to be a facade for an API, to the answers.
 
00:17:22 REITZ: So it has sources that it gets it from. I'm interested in seeing that part.
 
00:17:27 KENNEDY: Yeah, it's pretty interesting. So just wanted to give a shout out to Jon Bultmeyer, he sent this in a while ago and, you know, I thought it was fun so I thought I'd throw it out there.
 
00:17:34 REITZ: He also has clipboard integration and tab support for Bash, Fish, and CSH.
 
00:17:39 KENNEDY: I know. I mean, this is in-depth, right?
 
00:17:42 REITZ: It's like, you can really go all out with this.
 
00:17:45 KENNEDY: Yes you can. Alright well that's it for our full major topics. I'm sure we'll have a couple of extra things to throw out here real quick. Brian, you want to start us off?
 
00:17:53 OKKEN: So you guys are giving me a bad time about being a Vi person last week so I thought I'd throw in an article about Vi is good for beginners, it's just a fun read for anybody that thinks that Vi is terrible.
 
00:18:06 REITZ: Have you used vim.vi? I've actually use PyCharm right now with IdeaVim.
 
00:18:10 KENNEDY: Yeah, this is interesting contrarian sort of take on the simplicity is good for you.
 
00:18:15 OKKEN: Yeah.
 
00:18:16 REITZ: Yeah, myself I think it's a good thing to learn.
 
00:18:18 OKKEN: I did a presentation last week with a Jupyter Notebook and one of the things I needed to do was to quickly make sure I cleaned out all the output of a bunch of notebooks and I found this tool called nbstripout, so I wanted to drop a link to that. It's pretty helpful.
 
00:18:35 KENNEDY: Yeah, nice.
 
00:18:35 OKKEN: It's just a command line thing and then we had a bunch of people, a couple of people including Cecil mentioned Pyodide, but we did cover that in Episode 93, but there was a recent article written up about Pyodide that's kind of neat, so I'll drop a link to that in the show notes as well.
 
00:18:51 KENNEDY: I'm super excited about Pyodide, I actually just yesterday interviewed Michael Dropboom who wrote that article you're referencing here and worked on the project on Talk Python going deep into WebAssembly and what Mozil is doing with Pyodide stuff, so yeah, it's super cool.
 
00:19:08 OKKEN: Kenneth, have you seen this Pyodide?
 
00:19:10 REITZ: I'm looking at it now. It's like all of the scientific Python stack in WebAssembly?
 
00:19:15 KENNEDY: Yes.
 
00:19:16 OKKEN: Including the libraries like NumPy and Matplotlib and stuff like that.
 
00:19:19 REITZ: That's awesome.
 
00:19:20 KENNEDY: Not just like, CPython.
 
00:19:22 REITZ: That is not unimpressive.
 
00:19:25 KENNEDY: No it's not. It's quite something. That's awesome, let's see. I guess I'll start mine really quick, I got some quick conference announcements and Kenneth I see you do as well. So PyCon Australia just opened their call for proposals. So, Australia is a beautiful place to be, either maybe you're already there and you just want to go to the conference or you want an excuse to go to Australia, submit a talk. That's awesome. And then, last time I had used about whether the gravitational waves of black holes colliding, that research was also done with Python. So remember we talked about the black hole picture and all that stuff, Brian?
 
00:20:00 OKKEN: Yeah.
 
00:20:01 KENNEDY: Well our listeners are awesome because they're like, oh Michael did you wonder about this? Yes, here's the package they used to discover gravitational waves and do all this amazing science. So actually, there are some really cool projects out there and I'll link to a video of someone talking about it, so thanks to Dave Kirby and Matthew Feickert both for that and I think it's gwpy? Yeah gwpy.github.io, a Python package for gravitational wave astrophysics, so detecting when black holes collide and the ripple in space time they make with Python is pretty awesome.
 
00:20:32 REITZ: Yeah I was pretty surprised to find out that when that code was made available that Requests was used for it--
 
00:20:38 OKKEN: That's so awesome.
 
00:20:40 REITZ: I don't know, I have no idea how.
 
00:20:42 KENNEDY: It doesn't matter, it's awesome.
 
00:20:44 REITZ: But it's in there, so I'm like, yes!
 
00:20:46 KENNEDY: That is super cool, congrats man. And then finally another thing that's awesome about our listeners is anytime we mention somethin' we think it's unique, they're like, there's four other ones, here's another one. So Bullet we talked about, Cooked Input we talked about, that's awesome. Bullet is super cool for drop downs inside terminal windows, and like nice selections. But it doesn't work on Windows, so someone else, Sander Teunissen, sent over Questionnaire, which is one that is also compatible for Windows, for our windows folks.
 
00:21:12 OKKEN: Thanks for putting that in because I need that.
 
00:21:15 KENNEDY: See, you were like the first, one of the very first people to benefit from this podcast. I feel the same way, like people are like, oh, like I benefit from this just like you guys do, it's just I happen to get there first before we publish it. Awesome, that's awesome. Okay Kenneth, what do you got?
 
00:21:29 REITZ: Let's see, I have a few CFPs I wanted to announce. One is for PyColorado, it's a great conference it's going to be the first year. It's run by a great team at least, it should be a great conference. They are actively looking for people to submit to their CFP, they have not had as many submissions as they would like to so far. They, you know, bad timing with the conference here, that type of thing. So if anyone has any talks that they think could be applicable to that event please submit. PyOhio also has their CFP open at the moment and they're looking for people to submit but they never have a problem with getting too many submissions so I wouldn't rush to that one if you're, you know, feeling iffy about it. The then the last one is a PyCon Remote which is something that I am going to be putting on if all goes according to plan with Calvin Spellingman, I believe is how you say his last name, who's from the PyTennessee organizers group. Him and I are cochairing.
 
00:22:21 KENNEDY: That's cool, what's that about?
 
00:22:23 REITZ: It's basically a PyCon but it'll be accessible to people who can't attend PyCon or who can't normally speak at PyCon.
 
00:22:29 KENNEDY: Is it also virtual or only virtual?
 
00:22:31 REITZ: Only virtual.
 
00:22:32 KENNEDY: Okay sweet. That's awesome.
 
00:22:34 REITZ: Yeah, we're still figuring it out with the feasibility of what different approaches are but it'll most likely be live streamed and people will send in videos ahead of time of their talks.
 
00:22:43 KENNEDY: Okay.
 
00:22:44 REITZ: Unless they're like a keynote speaker or something like that. So, we're still figuring out the details but it'll be, it should be good. We have a mailing list with like 700 people who signed up so far, so it should be something we can pull off. So if you're interested and want to learn more you can go to do/co/pycon-remote. I know it's not the best URL but that's the best I can give you right now.
 
00:23:07 KENNEDY: Awesome. Yeah, we'll put the link in the share notes people can just click it in there, the player that's awesome. Alright, well let's round it out with some jokes here. Brian, do you want to go first?
 
00:23:19 REITZ: We're not doing all the jokes are we?
 
00:23:21 KENNEDY: We've got to go fast, we've got to go fast.
 
00:23:22 OKKEN: Okay, so yeah I'll just pick one. I don't know how tasteful this is, we'll let it land anyway. So, Python used to be directed by the BDFL, Guido, now it's directed by a steering council, GUIDs[0:4].
 
00:23:39 KENNEDY: Love it. Kenneth, would want to do one? You got any?
 
00:23:41 REITZ: What's the difference between a musician and a pizza?
 
00:23:43 KENNEDY: I don't know, you can eat a pizza?
 
00:23:44 REITZ: Pizza can feed a family of four.
 
00:23:46 KENNEDY: Oh, that hurts.
 
00:23:47 REITZ: I can say that because I've made 25 dollars off of my music so far.
 
00:23:51 KENNEDY: Beautiful. Alright I got two but they're related so I'm going to put them together real quick. I think first to kick it off that Ubuntu users are apt to get this joke that I'm about to tell, okay? And then the second line the second line, this is fun. I actually, I know Kenneth you switched over to Windows recently and I am also kind of a fan of it, even though I spend a lot of time on Mac, still I like the joke. How many programmers does it take to kill a cockroach? Two. One holds, the other installs Windows on it. Alright, beautiful, well I think that's probably about it for our show today. Kenneth, thank you for coming. Brian, thank you as always for being here.
 
00:24:30 OKKEN: No, thank you.
 
00:24:31 KENNEDY: Thank you for listening to Python Bytes. Follow the show on twitter via @Pythonbytes. That's Python Bytes as in B, Y, T, E, S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the look out for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
