00:00:00 KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This Episode 130, recorded on was it May 4th 2019? Live from PyCon. I'm Michael Kennedy.
 
00:00:15 OKKEN: And I'm Brian Okken.
 
00:00:16 GUESTS: I'm Emily Moorhouse. And I'm Steve Dower.
 
00:00:19 KENNEDY: And it's great to have you all here, thank you both of you for joining us, it's going to be a lot of fun, I know you both have some pretty cool news to share so I'm looking forward to hearing about that and I think we'll go and get started with Brian's item in just a second but I also want to say thank you to Datadog, they're around here, they may even hear that but they're sponsoring this episode so thanks Datadog. Check them out at pythonbytes.fm/datadog and they track all your requests across your servers, microservices and put it all together in one holistic view of your performance and errors and all sorts of stuff like that so that's super cool. Brian, let's start with your item.
 
00:00:51 OKKEN: Well here at PyCon one of the booths here that I kind of had fun with is talking with the people at pgcli. Hold that thought for a second.
 
00:01:00 KENNEDY: Brian just locked his laptop with his notes on it. That's staying in the show.
 
00:01:05 OKKEN: Okay so my team actually, we've got a database of test data, air data, that we're collecting. We're moving away from just using Jenkins but we're pushing that all into a Postgres database and no matter how many times somebody tells me how to interact with the database through the GUI tools, kind of command line person so I was happy to talk with one of the people at the booth about pgcli, it's a command line interface to Postgres. They also have a similar one for MySQL but we're using Postgres so I like pgcli and I can't wait to get started using it, it's really fun, it's got some syntax highlighting and whadda you call the intellisense sort of thing? Auto-complete, yep. And then one of the things, it looks like a cursor's interface and I'm like well can I run that on Windows 'cause most cursors stuff I can't run on Windows and they're using the Prompt Toolkit, the Python Prompt Toolkit and that does run on Windows so cool, we'll be able to run it there. That's my item.
 
00:02:04 KENNEDY: Pretty awesome. I don't do a whole lot of CLI stuff to the database but I know a lot of people do so that's pretty cool. How about either of you? What's your style? GUI or CLI?
 
00:02:11 GUESTS: I switch between the two for sure, I'm a huge fan of DataGrab but like anytime I'm just doing quick creates and deletes and drops and all that stuff I usually go CLI. My data work tends to starts from CSV and end in Excel and occasionally via Jupyter.
 
00:02:26 KENNEDY: So use the most popular database deployed on the earth, Excel?
 
00:02:30 GUESTS: Yeah, yeah Excel is my database.
 
00:02:33 KENNEDY: Yeah that one tends towards the GUI side but that's pretty awesome. All right, let's see, I guess I'll go with mine next the one that I thought was cool was a recommendation from one of the folks here at the conference, it's called Papermill and I know Steve, you've heard of Papermill right?
 
00:02:46 GUESTS: Yeah I've had a little play with it but I think you'll probably do it more justice talking about it than I will.
 
00:02:50 KENNEDY: Yeah I definitely, I've learned a little bit thanks to John Lamb and some other folks so Papermill is a way to take Jupyter Notebooks and I'm sure you're all familiar Jupyter Notebooks and it's just such a different way of programming right, you go in there, you load up your data, you kind of explore it, you're iterated on it but what it typically doesn't do is it doesn't typically get called and then return a value, right it's like this thing you load up, you look and you go well okay that's cool, that must be the answer or that's the picture it makes or whatever. Well with Papermill you can turn Jupyter Notebooks into basically functions and command line arguments that you can run and you can actually chain them together like this Notebook then calls on that Notebook and then saves it and it does really cool stuff so apparently the folks at Netflix are doing really interesting things to run a bunch of ETL, Egress-Transform-Load, that type of stuff. They run 18,000 of those a day through Papermill and other stuff and apparently what's really cool about Papermill is if it crashes or doesn't work you get like a whole graph of Jupyter Notebooks that you can go open up and instead of just having a log entry or some kind of error and like an exception trace or something, what you get is actually the Notebook with all the stuff that Notebooks have explaining what it was doing before it died. If you do anything with Notebooks that sounds super cool, people should check that out for sure.
 
00:04:09 GUESTS: The workflow's actually a really useful thing. I'm aware of a couple of teams within Microsoft where I work that have, I don't think they're all using Papermill, some of them may be, we don't actually have that much, we don't tightly control everyone's workflow so they get to use what works for them. But there's certainly some teams that have services set up where people using them are going to send in a query or they're going to do something and occasionally there's cases that are not really failures but they seem weird, it's kind of like if you go to a search engine and you type in something that gets no results, whadda you do then y'know? You haven't necessarily failed but you probably want someone to look into that and figure out what it does and so I know that we have some teams with a similar kind of thing to what Papermill can do, it'll generate a Notebook to do the side of that analysis or there's some cases, some of the security teams that we have, the security research teams have templates for analyzing malware that's come in and that's the kind of thing that you can use Papermill to autogenerate, y'know, maybe a half-complete Notebook with the inputs that you already know and then pass it off to an analyst to work through and put them in a comfortable environment that they want to work in, which is Jupyter and give them the tools but have all of the information already there so they're not spending a lot of time loading it up and collecting URLs and...
 
00:05:19 KENNEDY: Yeah parsing log files and all that sort of stuff, yeah that sounds awesome. The way it works is basically you define a cell with default input arguments? And then there's a cell below it that are all the parameters passed. Emily do you do anything with Notebooks?
 
00:05:32 GUESTS: Not a whole lot really, I have a couple of internal tools. We operate at a very different scale so we are a company of like six people right now but I use Notebooks for a lot of internal tools and budgeting and forecasting and whatnot.
 
00:05:44 KENNEDY: All right, awesome, yeah well Papermill, check it out if that resonates with you guys. All right, which one of you want to do your item next?
 
00:05:49 GUESTS: All right, I'll go next. So I wanted to talk a little bit about one of my favorite events that I get to participate in at PyCon and that is the Python Language Summit. This is my third year attending and it's really really interesting to get to see kind of a lot of the inner workings and discussions that go on. So one of my favorite things, this year the Language Summit was run by a few new people to organize it and Mariatta and Lukasz Langa took a little bit of a different direction on it and we got a lot more community involvement so we got to hear from projects like CircuitPython and BeeWare and really just got a lot of new voices into the core development community and I think that that is something that is really going to help us moving forward, finding out not only what we need internally to continue the development of CPython but also what needs to happen to do things like supporting BeeWare which hopefully, if you attended his keynote or you can go back and listen to the video, Russell Keith-Magee's keynote talks a bit about this and so really just this true cohesion of different groups coming together and I'm very excited about that.
 
00:06:57 KENNEDY: Yeah and this is the first year that you've had the Language Summit after Guido stepped down, right so this is the first sort of independent one?
 
00:07:06 GUESTS: Yeah.
 
00:07:07 KENNEDY: I know that he was there but it probably was a little different.
 
00:07:09 GUESTS: I don't know, I didn't feel any differently, did you? [Steve?] No, I felt like it was, that definitely having more community involvement means we were getting a lot more opinions from outside the core development team and I think that's going to be really beneficial as we look towards Python 3.8 is approaching its feature freeze but 3.9 planning's already starting, we've got a few PEPs that people have been working on towards that. But having had those extra voices come in and call out some of the pain point and putting a face to it as well is such a big deal. So much of the feedback that we get to hear, that you always get to hear about software is a GitHub issue and it's just text and it's a made-up name and y'know an image that's generated from an IP address and there's no person there and y'know how much pain is this? We don't know how much pain this and when someone takes the trouble to get to a conference two days before it starts and prepare a talk and come and spend half an hour talking face-to-face with people, it has a very different impact and you get a lot more information and you get the follow-up and so there were a lot of chats after some of the talks where some of us heard the things and were like I thought that was a problem and now you're telling me it is, let's dig into that, tell me more about what we can do to help this. So I think for 3.9 planning we're going to get a lot of benefit out of the way this one was run.
 
00:08:24 KENNEDY: Yeah that's super cool and of course the high bandwidth in-person conversations has got to be better than oh I put up a GitHub issue or I put up a PEP and go read it, whatever right, being there in person's got to help.
 
00:08:35 GUESTS: [Steve?] Yeah absolutely, and that's one of the best things about PyCon. Those conversations haven't stopped. I walked away from some of those conversations to come to the podcast right now and probably...
 
00:08:44 KENNEDY: They're on pause!
 
00:08:44 GUESTS: Looking at people around here I might make it three or four meters before we start another one.
 
00:08:48 KENNEDY: That's right, that's right! Speaking of three or four meters, I just want to say thank you to Logan for the Papermill recommendation, he was the one who got that one on the show, so thank you. All right, Steve, sometimes you say you saved the best for last, I know that a lot of people are going to be excited about what you're offering here and you sort of wear two hats in the Python world, right? You wear the core dev hat and you wear the Microsoft hat and you're kind of going to talk about them both right now right?
 
00:09:15 GUESTS: Yeah and chatting with a few other people we need to get physical hats for some of this 'cause sometimes it's a little unclear which hat I'm wearing at any particular, and yeah, the Sherlock hat with the Python on the front, Microsoft on the back could be fun. Those who saw my brief little chat this morning from the stage will know that was very much the Microsoft hat but one of the projects I've been doing for a while for CPython itself has kind of been both hats at the same time. So when Windows 8 came out we added an App Store or Microsoft added an App Store as part of Windows and that's continued on so there's an App Store for getting apps for Windows 10 and that's always kind of been slightly different from downloading an installer and double-clicking it and next, next, next, next, next, agree, next. It's been, meant to be, a lot faster, a lot simpler to get installations, a lot more reliable, a lot more isolated and generally you start doing that by making it highly restricted. And so when that first came out one of my first projects at Microsoft was how do we get Python into this thing? And it turns out the answer was no, can't do it, impossible. Fast-forward a few years and those things kind of get relaxed over time and we've reached the point recently where it totally became feasible to put Python in the Windows App Store and so we did. And so as of Python 3.7.2 that was kind of a preview 3.7.3 is considerably more reliable and Python 3.8 is going to be better again when that comes out. You've been able to go to a Windows 10 machine, open up the store, type in Python and install Python that way.
 
00:10:34 KENNEDY: And those apps auto-update?
 
00:10:35 GUESTS: And it auto updates yeah. So it will stick within the major version so if you get the 3.7 app, some time when we push out the next version of it when you're not using it, it's just going to quietly update in the background and so next time you go back to it you'll automatically have 3.7.3 or 3.7.4, I actually get some really nice controls, I can do a gradual rollout on that so I can set the slider and say automatically update this many percentage of people, which is fun. But it's not going to take you straight to 3.8 without warning, that's going to cause you to take another step, go back through the Store, pick the new one. But the other half of that project while I was working on that was kind of still secret within Microsoft and we knew that we were doing it, we knew that it was going to happen but until it was actually out there we haven't been able to talk about it. Now at this point it's out there so some people are already seeing that if they're running Windows Insider builds because they've got the latest update already, that update's coming out in the next month or two. When that hits, every single Windows machine is going to have Python on it so if you go to a clean... which means if you go to a clean Windows machine and type python, previously you get a big fat error message. What you're going to get now is a pop-up straight to the page in the Windows Store with the latest released version of Python which means you're now one click away from installing it. I actually demoed this at the Language Summit so Emily can confirm that within like a three minute lightning talk I went and installed Python and had it running. The feedback I've been hearing so far is people forget they even clicked install and they're like I typed Python and it was just there by magic. And I'm really excited to just take out so many of those steps on where do I go to get Python? How do I get started? I've talked with some of the teachers and the trainers who instruct people on Python, they're really excited 'cause now you can go to any machine that people bring in and type python and it's either going to work or it's going to put them one click away from it working.
 
00:12:25 OKKEN: I really love this, I actually, well part of my job is monitoring the test environment within our company and our area but trying to get people to just install Python for the first, even that for some reason, some people get it messed up, somehow they install it in the wrong place and it's just a mess so I'm really happy about this, this is great.
 
00:12:45 KENNEDY: I know Windows has lot of like enterprise controls and group policies and stuff that I haven't thought about for a really long time but it seems like they could be used for good? Like can Window Store's apps be like set up company-wide? So could this just be like automatic on the machines at y'know, large companies?
 
00:13:02 GUESTS: I am not personally familiar, I probably need to get familiar 'cause this question's going to come up again and again with how to rollout.
 
00:13:08 KENNEDY: With how to publish it to the world, yeah?
 
00:13:10 GUESTS: Yeah with how to rollout this app to a whole lot of people, one thing I can say you don't have to be an administrator to install it but when you do, it still installs it as if you're an administrator so it's going to have a lock down secured install, no one's going to modify it on you so you have a secured Python install like that even though you weren't an administrator to do it which is really neat thing about the Store apps. Almost certainly you can roll it out but it's very few places that I'm aware of are restricting apps from the Store because those have gone through a Microsoft review process, we've checked them out and they're basically safe.
 
00:13:42 KENNEDY: Right, they're super isolated so that helps a lot.
 
00:13:45 GUESTS: That's true.
 
00:13:45 KENNEDY: They're super isolated, right?
 
00:13:47 GUESTS: Super super isolated yeah, which does lead to some bugs and some people have noticed this, it's like if you write to the temp directory from this it actually goes to a private one. On the bright side if you uninstall it, it gets rid of everything that it did.
 
00:13:57 KENNEDY: That's cool, and somebody, as somebody who writes courses and y'know if you write a book, it's always here's what you type to activate a virtual environment or run this script on macOS and Linux but you don't do that in Windows, you say python without the 3 and then you got to make sure the path is right and you check it, so that's the other good thing, right? I can now do python3 on Windows as a command?
 
00:14:18 GUESTS: Yeah so this is the first time we've actually done this in Python on Windows but when it comes it'll automatically go onto path by default and it comes with a Python shortcut, a python3 shortcut and a python3.7 shortcut, it also includes the same for pip and idle so you can, when you install this and in fact right now until we fix it probably in 3.8 you're better to just type pip install after using the Windows Store package than you are doing the python -m pip install.
 
00:14:44 KENNEDY: That's awesome, such good news, I'm really glad, I've wanted this for a long time. I remember on UserVoice I had posted something like that requesting python3 in Windows and it got like thousands of upvotes and comments and it was just like kind of crickets.
 
00:14:57 GUESTS: Yep.
 
00:14:58 KENNEDY: Y'know?
 
00:14:59 GUESTS: Takes some time but we do read those UserVoice.
 
00:15:01 KENNEDY: That's awesome and I'm really happy that you got this, I mean the impact this is going to have is going to be huge just 'cause the number of Python developers on Windows outnumbers any other platform right?
 
00:15:11 GUESTS: Yeah and it's going to be too late for the people that are listening to this on the recording but for everyone here live, I'm actually, I've got my talk tomorrow afternoon which is on this topic, Python on Windows is okay actually. For those who are listening you'll be able to find this online. That's one of my first points, is everyone's always surprised by just how much Python is being used on Windows because particularly for those of us at PyCon we look around and we get a very different idea of where people are using Python because virtually everyone has a laptop with some shiny fruit on the back and that's just not actually the case for everyone who's using Python out there.
 
00:15:45 KENNEDY: That's conference reality not reality reality.
 
00:15:47 GUESTS: That's absolutely conference reality. I joked that I'm the only person in the room with a Windows PC and far too often it's not enough of a joke.
 
00:15:54 KENNEDY: Yeah that's for sure. All right well, thank you for sharing that and announcing that to everyone here, that's super cool. So I guess let's close out the show with just maybe your main take-away from the conference. So start with you Emily?
 
00:16:08 GUESTS: Oh gosh.
 
00:16:09 KENNEDY: Your conference experience this year compared to last, something like that.
 
00:16:12 GUESTS: Oh yeah, so I think that this is a very unfair question to ask of me because my conference experience this year is very different because I'm co-chairing this year.
 
00:16:20 KENNEDY: Congratulations, that is so awesome!
 
00:16:21 GUESTS: So this year's like, thank you. This year's very much like running around like a chicken with my head cut off...
 
00:16:28 KENNEDY: It feels like work?
 
00:16:29 GUESTS: I'm surprised that I'm sitting for this long! But it's really really incredible, I'm very very grateful to be able to give back to the community in a different way and continue to be the voice of the community as Python grows throughout the years.
 
00:16:41 KENNEDY: Awesome, well congratulations, I'm looking forward to next year when you're even more involved in the conference.
 
00:16:45 GUESTS: Yeah, Pittsburgh 2020.
 
00:16:47 KENNEDY: Right on, and congratulations having your business on Python doing so well so it's great to see everything going so great. Steve?
 
00:16:53 GUESTS: Yeah so well again, this is very much a running round like crazy conference. Microsoft is keystone sponsor, we have a big booth, we have a lot going on and I've been helping round some of that so my experience has been a lot of people actually coming up saying oh I heard about some of your stuff, I've been trying to use it and I've been struggling like I've been hitting problems, I'm getting stuck in some places, are you able to help? And one of the things we came prepared to do, which I was keen to do and help drive through a lot of the planning was actually bringing some of our engineers, solely for the purpose of helping people get their stuff working and so we've had a table set up, we've had people coming up with their own laptops and helping them get whatever it is they're trynna do working, we've had migrating people to Azure Pipelines, getting people to deploy stuff on Azure, setting up VS Code, a whole lot of things so it's been a lot of experiences of people being frustrated at the start and walking away very satisfied and very happy to have come and actually met y'know a human from Microsoft who can help them with their computer.
 
00:17:53 OKKEN: Well so a couple of years ago was the first time, the second Portland one, I couldn't get tickets to the first Portland one even though I live there, but that was my first PyCon and since then the last two years Michael and I have been spending a lot of our time in a community contributors booth and this year I'm very grateful for PyCharm for including us in their larger booth and then also we've split up the time, we have more community contributors so we're not standing in the booth the entire time, we've really got to enjoy the conference and I'm really grateful for that, it's been an incredible experience, so thanks.
 
00:18:27 KENNEDY: Yeah thanks for this theater and this opportunity again, that was awesome and my take-away is really y'know kind of like before I said the people right? I getta meet so many people and you hear these stories like you changed my life in this way and like what I was doing didn't feel like anything like that it was just kind of like chatting, playing around but actually the community's great and we do a lot of things for each other and it's just wonderful, so it's great to see you all and be part of it and share the stage with you guys so thanks all for coming in.
 
00:18:55 OKKEN: Are we going to take questions?
 
00:18:56 KENNEDY: Let's go and take questions, we'll take two questions if you guys have any questions. Yeah Paul's got one.
 
00:19:00 OKKEN: Of course Paul has one.
 
00:19:01 GUESTS: A question and a half for Emily? Half question: I heard there's some event in Colorado you might want to talk about? Sure, yes, PyColorado 2019! It's going to be the weekend of September 7th and 8th, I believe, it's that Saturday and Sunday, inaugural Python conference in Colorado, come for the Python, stay for the mountains. Okay so the actual question, your reward for becoming a contributor was to take on the most controversial task in the last 14 decades of Python. Yes. Now that it's merged, looking back on it, was the process easier or harder than expected? To actually implement it? So I don't think this is a very fair question because I had spent approximately a year and a half plus really just diving into the code that I was going to need to work on, so I had been figuring out how the parser worked, how the grammar was defined, how all of the symbol table look-ups and everything were working so I think that it was a lot easier to implement than I expected only because I had all of this knowledge and so it was very rewarding for me to be able to take that year and a half plus of time that I had spent learning and just be able to apply it to something real and then there are definitely a couple of tricky bits about how scoping works with assignment expressions so that part was really fun to figure out and was more challenging but definitely a good balance of getting it 90% of the way there and then really having to figure out the tricky bits. What are you planning to work on at the sprints Emily? Well I'm actually going to write a bunch of documentation, which is everyone's favorite part. I want to highlight some of the tricky bits about scoping that I think might trip some people up but then I'm also really interested in kind of diving into some of the discussions around improving Python's parser and swapping that out for something a bit more modern. Follow up: is the new feature tested? Tested? Yes! I actually used legitimate test-driven development for the walrus operator, yeah.
 
00:21:07 OKKEN: 'Nother question?
 
00:21:09 KENNEDY: Yeah yeah, we've got one more question out there someone wants to ask? If not you're going to make me tell a Python joke or a programming joke. Now normally, oh yeah, go ahead Ricky.
 
00:21:17 GUESTS: Right so the question, and I'm going to skip some of the context unfortunately, but with Python coming in through the Windows Store and auto-updating from version to version, what about all the people that need to run multiple versions? And there's a lot of really good reasons to have multiple versions of Python around, it's actually the scenario that works really well on Windows and that's something that I'm really careful to not break or at least I'm trying to be careful to not break it. Obviously one of the main scenarios is testing, if you're going to write library code to share with people then you need to make sure it works on at least the two latest versions, probably 3.0 and also 2.7 depending on who uses a and so that's something that, my hope is to not let that go away. This is still kind of experimental phase so I'm not going to definitively say that nothing will break completely but one thing I will say is that the original installers are not going away and so just because you can get Python through the store, there's going to be a number of situations where it may make more sense to get it through the regular installer. And one of those is I don't want it to ever auto-update or I want to know that this is exactly 3.7.1 for some reason, even though that's a few versions behind. Occasionally there's legitimate need for that. The other thing is the Store version is actually only 64-bit and so there's some cases where you'll want a 32-bit version still, I've actually had people coming up to me saying I'm still only running 32-bit Windows and I'm like I didn't realize you could still get that but apparently you can. You won't be able to get it from the Store unfortunately, you'll have to get the regular installer still.
 
00:22:45 KENNEDY: That's pretty cool, all right. Well I guess I'll try to remember the joke that I heard earlier, since I can't type. Normally what we do is pretty amazing, Brian and I we type pyjoke in the terminal and then we take our favorite one out of there but it's back there so: If a functional programmer were to get a pet or a lambda, a pet or a... All right I already blew it. So the functional programmer were to get an animal, a pet, what would they get? They'd get a lamb-da. Sorry. See, I need this terminal. Dude, Brian, save me man. Type it, pyjoke
 
00:23:23 OKKEN: Oh, friends don't let friends use Python 2.7.
 
00:23:31 KENNEDY: All right well thank you all for coming out, it's really fun and y'know thanks for listening and thank you guys for being here, it's been great.
 
00:23:36 GUESTS: You're welcome.
 
