00:00:00 OKKEN: Hello and welcome to Python Bytes, where we deliver news and headlines directly to your earbuds. This is Episode 144, recorded August 20th, 2019. I am Brian Okken, and Michael's on vacation, but I have two awesome guest hosts. Welcome, Chris May.
 
00:00:14 MAY: Hey there.
 
00:00:16 OKKEN: And also welcome Mahmoud Hashemi.
 
00:00:18 HASHEMI: Hello everybody, it's good to be back.
 
00:00:20 OKKEN: So, both of you have been on Test &amp; Code, but have either of you been guests on Python Bytes before?
 
00:00:26 HASHEMI: I think I actually guest hosted once in a similar situation where Michael was on vacation or you were on vacation. I think it was me and Michael that time, so it's good to get the reverse.
 
00:00:36 OKKEN: Cool.
 
00:00:37 MAY: And I definitely never have been on Python Bytes, but it's been something I've been excited about ever since I thought I had the opportunity.
 
00:00:42 HASHEMI: Dreams do come true.
 
00:00:42 MAY: Indeed.
 
00:00:45 OKKEN: I really appreciate both of you coming on. As a reminder to everybody, this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean, get a $50 credit for new users, lots of good stuff. More about that later, let's just jump in. I'm going to put Chris on the spot and have him go first since he's new here and we can heckle.
 
00:01:06 MAY: Yeah, bring it on.
 
00:01:06 OKKEN: No.
 
00:01:08 MAY: Yeah, my first topic I selected was "Why your mock doesn't work" by Ned Batchelder. And it's a article that just came out, perfect timing for my team and I because there are members of my team who are building an application that's sinking or bringing data from one database server to another across Cloud platforms. And essentially they're trying to do a test-driven development and they came to me, and they're like, "How are we supposed to do this? Like, there are all these third-party clients that we're connecting to "and trying to get authorization from on all these different things." And they quickly found out that mocking these third-party tools was hard. I was just so thankful that Ned wrote this article to show us that one problem is that sometimes mocking, the way that they are setting up their mocks, the item that they were mocking never actually mocked the object that they were trying to mock. It's a little hard to explain in video, or in audio rather, but Ned actually has some great illustrations to show exactly how mocking works and when it works and how it can be messed up.
 
00:02:17 HASHEMI: I saw those illustrations. I don't know if he's using Graphviz or what, but they were definitely getting the point across.
 
00:02:22 MAY: Yeah, I was wondering 'cause I thought he did such a great job with those illustrations. Like, how did he take the time to design those? So, it's good to know that there may be a tool behind that.
 
00:02:33 HASHEMI: I mean he used them in his Python Names and Values talk in the blog posts, and I always, like, especially for beginner to intermediate programmers, I always send them to that Python Names and Values talk. It's a really good use of a half hour.
 
00:02:46 MAY: Nice. Hey look, we're getting bonus content already.
 
00:02:48 OKKEN: Yeah, and that Names and Values talk actually makes you a better mock user as well, 'cause it helps you understand how that all works. Plus, Ned's just really good at explaining stuff.
 
00:03:01 MAY: Absolutely. The other thing I love about this article is he also links to two other resources, another article and a video where people gave examples of when you don't want to use mocking and also good practices when you do. And one of the takeaways I took away for my team is that, especially if you're trying to mock third-party code, you're going to need to create tests and of course test your own application against the mock, but also test the mock against the third-party tool. And so, this is a bunch of stuff that you're going to invest in if you want to test with mocks.
 
00:03:33 HASHEMI: I mean if I can jump in, what I'll say, whenever you're integrating, right, and there's an SDK or a library for integrating, chances are you're not going to use 100% of that library or that service, you're probably going to use a little sliver. But I know it seems like, oh, great, they wrote all the code for me, let me jump right in and integrate directly with their library, but it really makes sense, a lot of the time, to use a gateway or some other pattern to kind of make explicit which parts of that library you use, because eventually when you have to integrate with another service or you want to throw it away, it's just going to be a lot easier to maintain that side of the integration. So, yeah, great post.
 
00:04:12 MAY: Yeah, I also like, too, I think it was in this post here where he mentioned like kind of what you're saying, usually there's only a thin sliver of the functionality you need and to create a mock that only does that, but also to make sure that across your organization or across your team to only have one mock object that handles that one third-party tool.
 
00:04:33 HASHEMI: Mm-hmm, mm-hmm.
 
00:04:34 OKKEN: That's a good idea.
 
00:04:34 MAY: Definitely.
 
00:04:35 OKKEN: Well Mahmoud, what do you got for us?
 
00:04:36 HASHEMI: So, what I've got for the group here is a little library/application that I ran into while doing some research for a talk that I'll get into later. But basically it's called Vermin. And the name's not really explained, but the only reason I can see behind it is that Python has snakes and snakes are kind of vermin and vermin kind of sounds like version. And so, what Vermin is, that's like, you know, V-E-R-M-I-N. Oh, wait, I just got it, it's like Version Minimum, okay. So what it does is, it's a rules-based Python version compatibility detector with a pretty clever name. So what it does, maybe you heard the news, but basically now all 360 top-downloaded PyPI libraries now support Python 3. There's a website for it. And the way that that's determined is I think Brett Canon has a library or application which basically looks at the setup.py and then looks at the index classifiers. And so, if the person who published the package says it supports Python 3, it takes it at its word and says that this library says it supports Python 3. Now, the top 360 libraries have done so, which is a pretty good milestone for us especially as we approach 2020. But the thing is that it's based on what people say, so if you, when it comes to your own code, right, like if you're a team at a company or a maintainer of an application that doesn't necessarily have a setup.py, caniusepython3 is not really going to help you 'cause you don't have those classifiers. So, basically Vermin, what it does is it scans over every single py file, every single module, and it tells you the minimum Python version necessary to import that module, and it even gets down to the function level. So, basically you can use this to scan your code and say look, there's a Python 2.7 feature being used by this function over here in this module. And then you can also certify that hey, this module over here uses Python 3.5 syntax or hey, that one actually is using a 3.7 thing but we're only on 3.6. So, it's rules based, it's got over 1,000 rules, it's pip install where you pip install vermin, and it has a little command line entry point. And, yeah, when I found it it had like less than 80 stars on GitHub, and I'm hoping, I saw how much work went into this, I'm hoping that maybe it blows up a little bit, because it's a very useful tool and I'll explain why in my next segment. But basically, yeah, definitely check it out, Vermin.
 
00:07:06 OKKEN: That's really cool. I mean I could definitely see...
 
00:07:08 MAY: Yeah, that sounds really cool. It sounds like a lot of work went into that.
 
00:07:11 HASHEMI: Exactly, a lot of work went into it and it's still a lil bit quirky, I'll tell you. Like, I ran it with just plain Vermin as described and I got one result. And then I ran it with -v, which made it kind of like, it's supposed to make you more verbose, I thought, but it actually made it look harder and it came back with a more accurate result. So maybe when you run it, run it with -v. Or maybe help the guy out, I think his name is Morten Kristensen. Maybe help him out and give him a PR, make the verbose act the same way as the nonverbose. But no, great tool regardless.
 
00:07:44 OKKEN: Okay, verbose might be more picky, interesting. Well, I think Vermin looks cool and I'm excited about going from, and not just from 2 to 3, but, for instance, we now are excited about Python 3.8 features or 3.7 features and I want to make sure that it's possible to move things around.
 
00:08:03 HASHEMI: Exactly.
 
00:08:04 OKKEN: There's a lot of use for that, and forever, I think. So anyway, I don't want to talk about a new feature. I actually want to talk about something that's been around for a while but I don't see it a lot in code. And I just saw this recently, an article called "The nonlocal statement in Python" and I'm going to attempt his name, Abhilash Raj, I think that's it. But the idea is if you use a local variable like in if you assign to a local variable, it creates a new thing in the namespace, a local name, unless, and you know, the normal thing that everybody knows is unless you add the global. But global doesn't just make it so that you can assign a variable that's not declared in this function. It also makes it so that it's a global scope variable. And sometimes that's not really what you want. You just want it to reference, like for instance if you got a local function defined within another function and you wanted to reference or assign to an outside variable, it's really easy to see when you look at the code. But I forgot this was around. I don't use it very much, but it's pretty cool. I think I run into this occasionally and I usually just make things global. Mahmoud, you probably have more experience than me. Do you run into this ever?
 
00:09:21 HASHEMI: Yeah. Oh my goodness, so back when I was really learning the ropes in Python and I remember it so clearly, back in like 2011, I was playing with the concept of dynamic scope, which is in contrast to lexical scope, so that's like, lexical scope, you sort of look within your block or your function, right? And dynamic scope is this older concept where it's like you would look up the stack for something. And I think Emac's LISP still uses this. Kind of glad that Python doesn't. But, you now, in the mad science-like mode of learning all of Python's cool features, I wanted to do something like that. Yeah, somewhere in there I was messing with generators in dynamic scope and I found myself just hitting right into a wall. And I talked to Raymond Hettinger and he's like, "Oh yeah, what you want is nonlocal and that's going to be sometime in the far future." Yeah, anyways, I mean. Here we are and it's there and frankly if I use it, I'm over that phase, so if I use it I feel like I'm doing something wrong and I should probably like factor this in a clearer way. But that said, I'm sure it still comes up and I think everyone's probably going to have a little mad science phase of their own. And so, let them use nonlocal and deal with the consequences.
 
00:10:31 OKKEN: Well, right, I mean it's like one of these features that it's used so little that you're just adding complexity to the code because most people won't know what it means, so, you know, be careful.
 
00:10:41 HASHEMI: But, you know, it still, like it has its own little place and I'm sure that someone has a legit use for it beyond like just messing around. So, I'm glad it's there still.
 
00:10:51 OKKEN: Yeah, definitely. I'm going to take a little bit of a sponsor break and thank DigitalOcean for sponsoring this show. DigitalOcean's been a longtime supporter of Python Bytes and we really appreciate it. And not only that, all of the infrastructure for pythonbytes.fm runs on DigitalOcean. We've got our website, our database, and even the audio file hosting, it is done through DigitalOcean. It's been wonderful, super affordable and solid. There's enough features to get us going and to let us grow, but not so many that it's too complicated. So, I think it's a great platform, easy to start, easy to grow, and highly recommended. So, if you'd like to give it a shot, visit pythonbytes.fm/digitalocean, it'll give you $50 free credit for new accounts, so you can give it a try. I think it's a good place to be.
 
00:11:42 HASHEMI: Get yourself a Droplet.
 
00:11:43 OKKEN: Yeah, a Droplet. So, let's start this all over again and not back from the beginning, but it's Chris's turn again.
 
00:11:52 MAY: All right.
 
00:11:52 OKKEN: So Chris, what you got?
 
00:11:53 MAY: Well this week, Microsoft announced that they've improved Python support in their Azure platform. I think in particular, they've announced general availability for a bunch of new Python things. The company I work for, we primarily use Microsoft Azure and I've used some of these tools in beta. But so now it's available to everybody, and I'm excited because reading through the announcement from Microsoft, I wasn't 100% sure what was new, but what I was really thankful for is Brett Cannon tweeted a link to it and said here are the specific points that he was excited about. The first off is that it's debuting with Python 3.6, but 3.7 support is currently being worked on and actually I can already see it in preview, which is nice. And especially good news for me is that 3.8 support won't take nearly as long. I'm hoping that very shortly after they release Python 3.8, it'll be available in Azure. And then the second thing is that there is native async and await support in there. And that's pretty exciting, but really the thing that I wanted to pull from that, that Brett didn't mention in his tweet, is that it's actually pretty impressive, the amount of stuff that Microsoft does for us. I mean in particular, the Azure Functions, it's just amazing to me because they have a way of deploying to the web where you essentially just create a new git remote and you just push your code up there and when your code arrives there, essentially it sticks into a docker image and runs it for you and it's a pretty fast startup. And all these things that's like so complicated, I can't imagine what's all going on and you don't have to worry about it at all. You just have something that runs in your computer, you push it up, and it's done. And it's really, really impressive.
 
00:13:38 OKKEN: I've never played with Azure Functions. So, are those kind of like Lambda functions on AWS?
 
00:13:44 MAY: Yeah, they sure are. And I hear that they're probably about as easy. I've intended to play with Azure Lambdas, in fact, at the local Python meetup, we've had a couple people talk about how easy it is to do and I was just thankful that here at work I've been able to try the Azure Functions, so it's really nice.
 
00:14:04 OKKEN: Nice, I'll have to give that a shot sometime.
 
00:14:06 MAY: Yeah, actually I think that Microsoft offers a free month or two months thing, if you want to do it. And, on top of that, the Azure Functions are incredibly cheap. They have a calculator up and you can check to see how much it'll cost to do certain things and I maxed it out. I have a function that calls a bunch of API endpoints and saves them to the database and we realized if we did it 48 times a day, against every single website that the company owns, we still would be in the free tier, so it's really impressive what you can do.
 
00:14:36 OKKEN: That's cool, well, I'm kind of excited about this next topic, like super excited, because we talked about, I'll have to dig up the episode, but we did bring up Awesome Python Applications before, but we have an update.
 
00:14:50 HASHEMI: Well yeah, I don't remember what it was, if it was testing code on Python Bytes, but I remember accidentally dropping this idea on the podcast and it kind of blew up, a little bit ahead of when I expected to launch it. But yeah, so, I'm going to bring an Awesome Python Applications update. And so, basically Awesome Python Applications, for those who haven't heard of it, is sort of like your standard awesome list where it's like your own GitHub, and there's a README, and there's a ton of links, you know? And all these links point to applications that are free and open-source Python. So, at first it looks like a normal awesome list, one, it's actually generated from some structured YAML, and you know when I started out it was like 25 applications, like Zulip and Sentry came to mind, but then, the more I looked, the more I found and it grew to something like 180 by the time it sort of went a little viral, and then, these days, it's like 255, frankly, it'll hit 260 by the end of the week. And so, the list keeps growing almost faster than I can keep up with it, thank goodness it's somewhat automated. So, this last weekend I was at the local Python conference, PyBay, you know, maybe see you at PyBay 2020? It was a pretty big hit there. I basically put in the show notes a link to my slides and where the video will be and whatnot, but what I did for my talk there was I took, like I said, a structured YAML, so I have all of the links, all of the repos. Technically, any awesome list could do this, and I'm surprised that more haven't, but I went and I cloned all of the repos and, this isn't just GitHub, this is things that are on GitLab, things that are sort of like off any particular Software Forge, there are things that are on Bitbucket, things that are in Bazaar, you know, it's a whole mix of things and I cloned them all and it was something like 30 gigabytes of code. Yeah, and these packages, or these applications rather, date all the way back to 1998, like Mailman and gedit, you know, if you're a GNOME user, gedit uses Python, and 95% of them have had a commit this year, 2019. So, these are all very active and the reason I've compiled this isn't so much that we can go use them, like, of course, I actually use several of them without even realizing that they're Python, but the thing is that, as application developers, we need exemplars we can go look to for patterns in testing, and documentation, and architecture, and packaging, things that people do without necessarily writing a blog post about them or going on a podcast or giving a conference talk. So, basically I went and I cloned it and I did all this analysis and this is how I found Vermin. And so, Vermin, the good news here, I should've led with this, right? But the good news is that, and I was surprised by this, only 2/3 of these Python applications which are, on median, 10 years old, 2/3 of them support and use Python 3. So, I was expecting to find that a lot of these had been, you know, it's tough to maintain open-source, and I thought that they would have maybe fallen behind a little bit, right? Goodness knows that most corporations I run into, well, I don't know about most, but you know a lot of them are still using Python 2 for their Python applications. Even like Google, everyone's favorite, right? Even Google hasn't fully ported over to Python 3 yet. So, yeah, but 66% support Python 3. And I had a bunch of other interesting findings, if you go to my slide, you can check 'em out. And I'll also be giving the talk at PyGotham 2019, so if you're in New York early October, I think tickets are available.
 
00:18:30 OKKEN: So, there's so many cool things in here, and there's stuff that I knew about once and forgot about, like eric, one of the Python IDEs, so that's fun, yeah.
 
00:18:41 HASHEMI: Yeah, I mean the newest one I found, someone at the conference came up and told me about it, is actually I think Nyaa.is or .si or something like that, it's a torrent tracker for anime. And so, this particular anime fan informed me that this is one of the largest torrent trackers out and it's written in Python, it's right there on GitHub. And it's not on PyPI, it's not really discoverable, you need this word-of-mouth to find these applications and all the lessons contained therein. I calculated it out, over 2,000 years of project maintenance in these repos, it's just waiting to be learned from, and I think the list should grow even further. So, if any of the listeners have applications that they happen to know are written in Python, hit me up on GitHub, I'll definitely consider and curate.
 
00:19:29 OKKEN: Nice, well this is cool, thanks.
 
00:19:31 HASHEMI: Absolutely.
 
00:19:32 MAY: It's amazing to see how much it's grown. I remember when you were on whichever podcast you were on and I was just inspired and now I'm even more so again to see how many things have been built with Python and I still haven't reached the bottom yet, that's amazing.
 
00:19:45 HASHEMI: My dream is really to make a static site for this so that you can filter, because basically I now have the data, and I'll look at publishing the data set somewhere, but basically it's like, show me the projects that use Docker, show me the projects that use PyInstaller, show me the projects that use Twisted versus whatever. You mentioned asyncio earlier and I was kind of surprised, there are quite a few older projects that have actually adopted async, asyncio rather, and it's pretty even split between concurrent.futures, Twisted, Tornado, gevent and asyncio, they're basically all around 20% on this list.
 
00:20:21 MAY: How 'about that?
 
00:20:21 OKKEN: Yeah, nice.
 
00:20:22 HASHEMI: Yeah, so, check it out!
 
00:20:24 OKKEN: Well, I'm going to wrap this up with a really easy one. We've talked about pre-commit several times I think on the show, and pre-commit is a tool to allow you to run some code before you check in your code, to make sure things that are whatever, you've got a style guide or some checks, or whatever you want to do, it really is general purpose. But how do you get started? And actually this is something that I needed myself. The pre-commit documents now, they just recently added a quick start guide and I love it. It just kind of walks you through installing pre-commit, configuring it for the first time, taking a look at what the hooks are, installing the hooks, 'cause you have to install the hooks, the hooks also, which is something I wasn't aware of. And then the initial attempt to just run your hooks against your project. That's awesome, but I wanted to add, and one of the reasons why I wanted to bring it up on the show wasn't just because, hey, go check this out, but I'd like to add that doing this slowly is a good idea. So, I tried this with like three, or four, or five different hooks, like flake8-black and some other things, and then let it loose on my code base and it changed like everything. And I thought, I didn't really know what's going on here, so, I'd like to modify it a little bit to say if you're adding this to a project, for each new hook, add 'em one at a time to your YAML file, install it, and run it against your files first, and then commit that if you're happy. Review the changes, if you're happy with it, your test pass and all that, check 'em in and then move on to the next one. I think it'll be easier for the rest of your team to swallow the fact that you just changed all the files.
 
00:22:10 MAY: That's great news, this is one thing when I saw that in the notes, I was super excited to see, because we want to start doing this here at work and now that I know that there is a quick start guide to do it, it makes me so much more excited to do it, because I tried messing with the GitHub hooks, so the Git hooks themselves, I'm like, I really need to learn Bash.
 
00:22:32 HASHEMI: Well, not just that, they're just basically unusable in a team environment without something like this to manage them, so I think Anthony Sottile kicked this off and he's really just kept running with it, right out the park, he's done a great job. And the community as a whole actually, too, because anyone can contribute useful pre-commit hooks there, too.
 
00:22:49 MAY: That's awesome.
 
00:22:50 OKKEN: All right, so that's done with our six. Does anybody have any extra information they'd like to shout out?
 
00:22:55 MAY: I have a couple things I'd like to share. First off, the Humble Bumble, Humble Bundle, easy for me to say, by the No Starch Press is throwing a special with the Python Software Foundation where if you buy, you can get a collection of the books for a certain price and the PSF gets money, which is wonderful. They could use as much money as they can get, I think. And I'm all about supporting them. And the second thing I wanted to share was, I know friends of the show, PyBites, have released their new Newbie Bites, which I know they have put in a ton of hard work into, and I'm excited for them to have got it up and running. I'm excited to, like, as somebody who runs a local Python meetup group, I'm excited that there's another resource out there to help people who are very new to Python to learn how to use it.
 
00:23:43 OKKEN: Nice, that's cool.
 
00:23:44 HASHEMI: I didn't have anything prepared, but I mean I guess that I'll just shout out again, I'll be doing an East Coast tour, PyGotham and the Maintainers Conference in Washington, D.C. You know, if you want to get a ticket to one of these, I'd be happy to meet anyone out there, chat about Python and versioning and all this stuff. I should also shout out my wife, she helped me make all the graphs for the Awesome Python Applications presentation, and she was using Real Python, I think, to learn a lot of the pandas to do so, she really, again, just did an amazing job, so thanks, Maya.
 
00:24:13 OKKEN: Sweet, well I was going to plug the Py 3 Readiness, but you already brought it up, so, we'll drop a link for the other one. The top 360 packages are now Python 3 which is great. And I was hoping that one of you had a joke. So, I only have one and it's not very good. So, either of you got a joke?
 
00:24:32 MAY: Joke, oh my goodness. You go first, I'll see if it's an act I want to follow.
 
00:24:36 OKKEN: Okay, I was actually looking for some, so I was looking for programming one-liners, looked at a Reddit thread, read a great answer which was any joke can be a one-liner with enough semicolons.
 
00:24:50 HASHEMI: I think that joke is obfuscated enough that I'm not going to try to follow it.
 
00:24:56 MAY: Oh, I've got a good bad one. So, a SQL statement walks into a bar, up to a couple of tables and says, "Can I join you?"
 
00:25:03 HASHEMI: Ah, just dropping that one one us, okay.
 
00:25:09 OKKEN: All right, well,
 
00:25:10 HASHEMI: Pretty good.
 
00:25:10 OKKEN: let's leave it at that. So, thank you everyone for sharing all these awesome items with us, and we'll catch up with you later.
 
00:25:19 HASHEMI: All right, thank you.
 
00:25:19 MAY: Sounds great. Thanks Brian.
 
00:25:20 HASHEMI: Bye bye.
 
00:25:22 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes, that's Python Bytes as in B-Y-T-E-S, and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way, we're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
