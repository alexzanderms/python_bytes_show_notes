00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 148, recorded September 11th, 2019. I am Michael Kennedy.
 
00:00:11 OKKEN: And I am Brian Okken.
 
00:00:12 KENNEDY: And this episode is brought to you by Digital Ocean, check them out at pythonbytes.fm/digitalocean, more on what they have to offer later. Brian, I feel like Python doesn't ship often enough. It's like an 18-month release cycle. That's a really long time to wait for these features to come out, especially in the world of agile, and scrum, and two week sprints. A year and a half is a long time to see an idea and have it happen. What do you think?
 
00:00:40 OKKEN: That's like eons in internet time, right, so.
 
00:00:42 KENNEDY: Right, for sure.
 
00:00:43 OKKEN: I'm actually excited about this. There is an, it's not been announced or decided yet, but there's a PEP, PEP 602, which is under discussion. We've got links to both the discussion and the PEP, but it's to bring a annual release cadence, so every year, every 12 months, instead of every 18 months, And there's some specifics around it, which are kind of neat. It does not mean that people will develop each feature, each release in 12 months, it's actually a 17th month cycle, which is weird, it's interesting, it totally makes sense when you read it. My first thought was, how did they fit 17 months into 12 months?
 
00:01:23 KENNEDY: You go really, really fast, and then you change a little of the space time.
 
00:01:25 OKKEN: There's five months of unversioned overlap time, where some of the new features can get worked on and they're not doing releases.
 
00:01:32 KENNEDY: Yeah, that's really interesting, because they have a cool graph in here, that shows them overlaid, and actually, all the releases laid out, and it's about a third, little more than that, down the page that we're linking to, and it shows, okay, we're going to work on the Alpha features, which is creating the features, and then Beta, is kind of where it stabilizes and gets cleaned up, but as it switches to Beta for one it kicks off for development, maybe more, a little bit later, but there's this overlap, right, where you stop working on one and you also concurrently start adding new features.
 
00:02:01 OKKEN: That's what happens in software projects anyway. Like in a commercial world, you're wrapping up one release while people are starting to work on features for the next release anyway. It's just, it's reality, anyway. I think it's good, there's some rationale in goals, smaller releases, less stuff within each release, one of the big ones is, there is often a rush to get stuff into the first Beta, because if it didn't get in, it's not going in this one, and then it has to wait 18 months, and waiting a year, it's only six months difference, but it, that's a big difference, so. There were also some weirdness, with how, I mean there's annual sprints, and PyCon, which is about the same time every year, but having their release cycle be sometimes, offset by six months every time, just was weird, so.
 
00:02:53 KENNEDY: Yeah, it means the sprints can more carefully align with, say, the alpha stage, or something of the next version if they time it right. There's also a mention in the non-goals section about switching to an annual release calendar allows for a more natural calendar version. So for example, Python 3.20, 3.20, might be the one released in October, 2020. The one, Python 3.23, would be the one in October 2023, and things like that, that might be nice.
 
00:03:26 OKKEN: Yeah, but we're only up to 3.08 now., how did we get from 3.08 to 3.20? Yeah, switching.
 
00:03:30 KENNEDY: Well it goes 3.09 and 3.20, that's like, that's how you count. Yeah, it's pretty good. Yeah, so this is proposed by Lukasz Langa and he's currently the release manager for Python, so he's the one with all the skin in the game, and yeah, I think this is nice. I've always thought it was weird to have such such a long release cycle, so, I'm happy to see this.
 
00:03:50 OKKEN: I mean, there's risks and downsides, of course. It would be on the other side, also with that same graph, you notice that there's five versions supported at a time, instead of four, so there's the test matrix of people doing distributions. They got to test five versions instead of four, if they're testing everything. It is what it is, so.
 
00:04:12 KENNEDY: Yeah, it's interesting, there's some rejected ideas as well. Keep the current 18-month release cadence, this is rejected, we don't like it. Double the release cadence to achieve nine months between major versions. But it's too irregular and too short, and just slow down releases and don't freeze them at Beta one. Yeah, I like it, this is pretty good. Glad to see it happening.
 
00:04:32 OKKEN: They didn't, wasn't even considered to have weekly release cycles. I'm not sure why.
 
00:04:36 KENNEDY: Yeah, we just ship whatever is on master. On the master branch. Yeah, daily, nightly builds.
 
00:04:40 OKKEN: Nightly builds.
 
00:04:42 KENNEDY: Might hold off on that. So this next thing I want to talk about, it's pretty awesome Brian.
 
00:04:46 OKKEN: Is it?
 
00:04:48 KENNEDY: Yeah, it's called awesome-asgi or ASGI. I dunno, I'm not sure what the phonetics of ASGI, but we have WSGI, which are the WSGI servers, this is like the traditional web service inter-gateway interface, where, basically, all the different web frameworks like Django, Flask, Pyramid, and so on, implement that and then all the servers like uWSGI and Gunicorn or whatnot, support that, and that's how they click together. That's their docking mechanism, and WSGI is broken, fundamentally irreparable, broken for building asynchronous web apps. It's unfortunate because async and await, and asyncio, is most important on the web server, right? Like, what do web servers do? They wait on databases, they wait on the network, they wait on third party APIs like Stripe. They just wait, like, that's mostly what they do. And so, if you could let your server do other stuff, while it's waiting, you could massively amplify the concurrent number of users for the same amount of hardware, and things like this. So, enter ASGI, I'm going to go with ASGI, for now, until somebody shows me the right way to say it. So ASGI is a new interface for this successor to WSGI, and it came out of Django channels. Which is a way to add some asynchronous behavior to Django, and it's also got boosted by things like Starlette, and Uvicorn and so on. So what this is, is it's an awesome list, for all sorts of things around asynchronous web Python things. So we have async web apps, async web frameworks, async web servers, like Uvicorn and so on, so if you were wanting to build some sort of high load, highly scalable website, and you want to figure out, "What should I be using?" It's super confusing right now, because things come and go so fast, like Japronto was really this big thing, til it wasn't. It stopped getting worked on, all right? Like the shelf life is no longer ten years, it's, maybe, a couple months. So knowing what's happening in this space is pretty hard. There's some good frame works talked about here, Bocadillo, Channels, FastAPI, hear it's really good, Quart is a solid one for converting Flask to async, Responder, Starlette. Starlette seems to be the foundation of almost everything these days, so it's really, probably the most important here. But, a nice grouping of all these various things that you might want to work with.
 
00:07:22 OKKEN: Yeah, and they also want to try to do more than just applications, but also libraries and middleware items as well, so.
 
00:07:29 KENNEDY: Yeah, so this is not as popular as, say, just a straight awesome Python list, or Mahmoud Hashemi's awesome apps list or something like that, but I do think it's important and you know, hopefully people go out there if they have some ideas they can contribute some projects to the list, that's smart.
 
00:07:44 OKKEN: Yeah, yeah definitely.
 
00:07:44 KENNEDY: All right, what's next?
 
00:07:46 OKKEN: Well, there's another awesome, a couple other awesome projects. But they're not awesome lists. Two awesome projects I want to talk about, sort of, are Jupyter and Pangeo. This comes up, because there was an announcement titled "Jupyter Meets the Earth" which, is, kind of fun, plus their both circular logos. The Earth has a logo, looks like the Earth, yeah. This is a write up about a really cool announcement that the National Science Foundation is giving two million dollars of funding over three years, as part of an EarthCube Grant program to go towards Jupyter infrastructure, and Jupyter and Pangeo. And it's, Hopefully it will be pretty cool. It's actually a really neat write up, talking about how the adoption of open languages like Python and on top of that, Jupyter, and others have really been taken up by a lot of different science backgrounds, and we really need some more Earth based science to utilize this, and so this will help it out quite a bit. It's kind of neat.
 
00:08:52 KENNEDY: Ah, this is super cool. And it's really great to see them getting so much funding, Jupyter is definitely doing well in the funding space. I didn't know where Pangeo was before, but it sounds like that's put some really solid money in the stable and growing, giving lots of support space.
 
00:09:07 OKKEN: One of the things I love about Jupyter and Python being the center around and some of the data science, is the openness, and so people are really pushing for open data as well. So that anything that gets published can be seen by other people, like that pushes science forward really far, because just even people in their bedroom might have a cool idea with the data, and find some things that other people can't, and help contribute. It's really kind of incredible to be a part of this.
 
00:09:37 KENNEDY: Yeah, absolutely, and one of these cases is for climate data, climate change studies, and things like that, so you know, definitely need some attention on that. I'm sure there's plenty already, but more is good here. So this write up is by Lindsey Heagy and Fernando Perez, and just want to mention, Lindsey was on Talk Python quite a while ago, talking about Pangeo, and her earth science research she's doing, so Geo-science, things like that, so, if you want to dive deeper, check that out.
 
00:10:07 OKKEN: Yeah, very cool.
 
00:10:07 KENNEDY: Yeah, for sure. Now, before I spring some pretty big news on people, let me tell you, real quick, about DigitalOcean. So, all of our infrastructure runs on DigitalOcean. They've been big supporters of this show. Their newest thing, is that they just launched two new things as a service. So you can instead of have servers to manage, you just check a box and now, you have services at your disposal, and those are MySQL and Redis. So if you want to use MySQL or Redis, you can now start doing that over at DigitalOcean. Previously they had Postgres, as a service, and Postgres was very popular in the Python space, but MySQL and Redis also are as well, And Redis kind of plays that alternate role anyway. It's a traditional relational database, caching, things like that. So, check that out, along with a bunch of other good things. pythonbytes.fm/digitalocean Now, I told you about the cool awesome list, right Brian? The awesome ASGI?
 
00:11:05 OKKEN: Yes, asynchronous is here to stay.
 
00:11:07 KENNEDY: It is here to stay. Now, there's a very notable absent framework in there. Talked about Quart, that's kind of of the async version of Flask, if you will. There's some talk that maybe those two projects will work together, just make Flask itself asynchronous, but that's a different story. But there's nothing really in there for Django. I mean there's Channels, but that's a separate project, right? Until now.
 
00:11:28 OKKEN: Yeah, so tell me, I'm excited, what's going on?
 
00:11:28 KENNEDY: Yeah, so, I don't know exactly how recently this was announced, because there's no dates on the announcement, which makes it tough to know, but, Django 3.0 all the details for it's roadmap are now out, so the release notes for Django 3.0 are here. It's expected that Django 3.0 is going to be released December 2019. So, that's like a Django Christmas present, or whatever. Something for the holidays, right? Coming soon, and there's tons of changes about, for example, Django 3.0 only supports Python 3.6 and above. They're dropping support for even 3.05, and if you want 3.5 support, you have to go back to 2.2, and of course 2.0 already dropped support for Legacy Python, so you got to go even farther back to get way back there, you don't want to go back there.
 
00:12:22 OKKEN: No.
 
00:12:23 KENNEDY: But that's all good, there's a bunch of other changes, MariaDB support and various things, you can check that out. But the big news, I think, here, is the ASGI support for Django 3.0. They say, "Django 3.0 begins our journey to making Django a fully async capable." They are making it fully async capable by providing support for running it as an ASGI app, and that doesn't mean they're dropping WSGI support, there are expect for these to sort of pair together as you might expect. A lot of these can be run either way, but you have to run it on an ASGI server to get the async features as we kind of hinted at before. Pretty cool huh?
 
00:13:01 OKKEN: Yeah, that's very cool.
 
00:13:03 KENNEDY: Yeah, so you don't need to change anything about your code, but you'll be able to start to writing asynchronous methods, so when you're waiting on that database or that web service, you can now wait on a thousand of them instead of one in the same process with about the same amount of work. Which sounds like a pretty awesome change for almost no effort.
 
00:13:19 OKKEN: When you say you don't have to change anything, does Django have a upgrade migration path for people to upgrade?
 
00:13:24 KENNEDY: Well, I think you just have to start rewriting your view methods. You've got to add the async keyword. Async def instead of def, and you got to start using async libraries. It's going to be interesting the database story. Like Django has a built in ORM, and it says things like, there are some side effects to be aware of. Like Django is now aware of the asynchronous event loops, and it will block you calling code marked as unsafe, async unsafe, such as ORM operations. So, maybe, I don't know what the story is around the ORM and async maybe, it's not totally clear, but it seems like a really good place to actually have async, 'cause the thing you hate on most is databases, so you should probably put await on them.
 
00:14:02 OKKEN: Yeah, and I actually am also interested in MariaDB. I hadn't really gotten into that before, so that's kind of interesting side story as well.
 
00:14:10 KENNEDY: Yeah, absolutely. So, there's all sorts of stuff we're linking to in Django 3.0, but I think the big news is, front and center, async support, right in the main project.
 
00:14:21 OKKEN: And I wonder if the drop of 3.5 is because people like f-strings.
 
00:14:25 KENNEDY: Yeah. I think so. We can't not use f-strings. I want to run Flint on this project, but I can't 'cause I might run in 3.5, let's make that impossible.
 
00:14:34 OKKEN: Yeah, yeah, okay.
 
00:14:36 KENNEDY: I've heard about this possibility of, like, different software engineers having different levels of effectiveness, and often times this is referred to as the 10x Engineer, right? This special person that makes all this money, and actually makes the startup do it's thing, or whatever, you know John Carmack and Doom, or yeah. So you found another kind of engineer.
 
00:14:57 OKKEN: Yeah, I really like this list. I found the 1X Engineer.
 
00:14:59 KENNEDY: The 1X Engineer, awesome. Well, what constitutes a 1X Engineer?
 
00:15:04 OKKEN: Well, there's a whole list, and you can contribute it, 'cause it's based on a Github repo. I think it's definitely a fun take on the 10X thing, But if you look at these lists, I think some of these are really good, and I think, actually should have been something like maybe 3X or 4X or 8X or something. I'm not sure how high this scale goes anyway, but here's a few of 'em. 1X Engineer has a life outside of engineering, writes code that others can read, doesn't act surprised when someone doesn't know something, asks for help when they need it, is able to say things like "I don't know," constructively participates in code reviews, shares knowledge, never stops learning, so, I like that, 'cause obviously they listen to Python Bytes, Talk Python, and Test and Code.
 
00:15:50 KENNEDY: Absolutely.
 
00:15:51 OKKEN: Yeah, has unproductive and productive days, fails from time to time.
 
00:15:54 KENNEDY: Doesn't hate on framework Y, when working with framework X.
 
00:15:59 OKKEN: Anyway, we pulled out a handful of these to put in the show notes, but the list is pretty long, and I like it, it's kind of a neat fun take on just basically, "This is what we expect from everybody."
 
00:16:10 KENNEDY: Very nice, it says, "I've never heard of that in lieu of nodding and pretending." And also, is willing to have a brightly colored desktop background. Very nice.
 
00:16:19 OKKEN: Yeah, I think the new 10X Engineer has pink, not black.
 
00:16:22 KENNEDY: That's right. Now actually this is really great, I like it, it's fun, and it's written in very fun fonts and style, right?
 
00:16:29 OKKEN: There's a button there that says you can go away from the fancy style.
 
00:16:34 KENNEDY: Nice.
 
00:16:34 OKKEN: What is that font? It's like, I don't know.
 
00:16:37 KENNEDY: I think it's like Atari 2600 font, or something. Maybe Commodore 64 font, it's beautiful.
 
00:16:43 OKKEN: Yeah, at least it's not Comic Sans, so.
 
00:16:45 KENNEDY: Nice, yeah, for sure, thank goodness, or Blinky. Okay, now, there's a topic that I think is important, Brian, That we should touch on, will you just tell me if we've spoken about this before? It has to do with Python 2 going out of the world here. Sunsetting Python 2.
 
00:17:00 OKKEN: Oh yeah.
 
00:17:01 KENNEDY: Have we spoken about Python and Legacy Python?
 
00:17:04 OKKEN: Maybe we haven't. So if we haven't, people should get onto the Python 3 thing.
 
00:17:08 KENNEDY: That's right, now what we're linking to is an official document that formalizes the sunsetting of Python 2. So this is over on python.org/doc-sunset-python-2 I'll link to it. And sort of a Q&amp;A, like, "What if I didn't know Python 2 was going away? "What should I do?" And so on. So let me just talk to you real quick about this, and this is something that you can share with people who are like, "Wait, why is our Python old? What are you telling me?" So, it says, officially January first, 2020, will be the last day, or the day that Python 2 is sunsetted. I thought it will be really great, New Years' resolution, write no more Python 2 code, I guess, is the way to interpret this? And it says, you know, Q&amp;A like, "Why are we doing this? We need to sunset Python 2 so that we can help Python users. We're going to add new features to Python 3 and stop supporting Python 2 even though we're not adding features to it." And it says, you know what? Back in 2006, like, long ago, we started working on Python 3. And in 2008, we said 2015 was the end of Python 2. That didn't work out so well. So now we're really meaning it, 2020. And then it says, "How long is it until the sunset date?" The Python Clock will tell you, it says. Which is three months, 20 days, 10 hours, 31 minutes, and 37 seconds. That's less than four months, that's coming up. This is for real.
 
00:18:33 OKKEN: Yeah, it's even faster if we hold off releasing this episode.
 
00:18:36 KENNEDY: That's right. And it's already going to be on the date. It says, "What will happen if I do not upgrade by January first?"
 
00:18:44 OKKEN: I going to come to your house and ridicule you, no.
 
00:18:47 KENNEDY: That's right, you will be mocked by all your peers. No, it says, look, if people find catastrophic security fixes in Python 2, or in software written in Python 2, most volunteers will not help you. Over time you'll find it harder to hire people, you'll find it hard to use modern libraries, and so on. So, probably, not the world is going to end straight away, obviously, but you're going to be in quicksand at some point, right, to some degree. It says, okay fine, "I wrote some code in Python 2, how should I port it to Python 3?" "Please read the official porting guide, here." And finally, "I didn't hear anything about this til just now, where was it announced?" Well, we talked about it at software conferences, in Python announcement mailing list, Python blogs, textbooks, technical articles, social media, and companies that sell Python support. Oh, and podcasts.
 
00:19:36 OKKEN: Does it say podcasts?
 
00:19:39 KENNEDY: No, I've amended it. Yeah, I believe we have talked about it, and now that I've gone through it, I do remember speaking about legacy Python before.
 
00:19:45 OKKEN: Yeah, we have and then the last question of "How can I make sure I don't miss stuff like this again?" Listen to Python Bytes, that's how!
 
00:19:52 KENNEDY: That's right, that's the official recommendation from the PSF, I'm sure.
 
00:19:54 OKKEN: No, it's, it's...
 
00:19:57 KENNEDY: Or Mailing list I guess, but, no, I do think, I mean we cover, we try to cover this kind of stuff, for sure.
 
00:20:01 OKKEN: Yeah, duh.
 
00:20:04 KENNEDY: Yeah, so there is the official sunsetting details from the PSF and the core developers. It looks good to me. Cool, all right well, that's it for our main items, what else do you got that you want to throw out there?
 
00:20:14 OKKEN: Well, there's two big newses, and yours is definitely going to happen, and mine is hopefully going to happen, so.
 
00:20:20 KENNEDY: In the past, it is more likely to have happened.
 
00:20:23 OKKEN: Okay, so, tell me about yours.
 
00:20:24 KENNEDY: Alright, we have been working, we, me, and a bunch of other folks have been working with the Humble Bundle folks, to release another Python Humble Bundle. Not just a bunch of books like an O'Reily bundle thing, but a bunch of cool tools and libraries and courses, everything, right? So we just launched the Humble Level Up Your Python Bundle, and yeah, there's tons of good stuff. Right, there's three courses from Talk Python Training, There's the code challenges from Python Bytes, there's some PyCharm stuff, there's books from Dan Bader, from Matt Harrison, there's stuff from Trey Hunner, all sorts of good things in there, so be sure to check that out. You can get it much, much cheaper for a very short time. So probably I guess a week or two left, if you listen to this the moment that we released it. So, yeah, there will be some time, but not a lot, and it's like a thousand dollars worth of stuff for 15 bucks or something like that, it seems like a good deal.
 
00:21:22 OKKEN: Yeah, yeah, it seems great.
 
00:21:25 KENNEDY: I see this next thing that you're talking about, you're trying to work on my social life, aren't you? Get me out of the house?
 
00:21:29 OKKEN: Yes, but I want to make it really easy on me. This next one is all about me, well it's about you too and everybody else in Portland, but mostly about me. I thought it'd be cool, there's a Python meet up, every month, Downtown Portland, and I don't live Downtown Portland. I Don't work in downtown Portland. So, wha me, but I'm going to put my, I guess, effort where my mouth is and start a Westside Portland Python meet up.
 
00:21:57 KENNEDY: Yay, that's awesome.
 
00:21:57 OKKEN: So.
 
00:21:58 KENNEDY: Yeah, 'cause you get down to the east side of Portland, if you are out somewhere by Intel, or Nike, or one of these, lot of the tech companies here in town, it's like an hour, just one way, it's a tremendous amount of traffic you got to go through. So this will definitely open up a whole other angle for meet ups.
 
00:22:15 OKKEN: Yeah, and I'm not trying to like, steal your thunder or something, I've talked with the Python meet up dude from Portland and, we're working together to make sure we don't overlap it. So I think we're shooting for like the second week in the month, because they have things on the third and fourth, there's nothing there yet, but if by the time this comes out, there will be, I registered pythonpdx.com, that's where we're going to announce stuff. Hopefully for Octoberder, "Octoberder," but if not, then, we'll get it done for November, but I'm really shooting for October. This is made possible because Rhode &amp; Schwarz, the company I work for, has this awesome room that would work great for the meet up, and they've agreed to let us use it. So, that's great.
 
00:22:57 KENNEDY: Yeah, sounds great.
 
00:22:59 OKKEN: Yeah, that's all I got, but I don't have any jokes.
 
00:23:03 KENNEDY: We don't have any jokes, hold on.
 
00:23:04 OKKEN: I mean, we could just stare at each other for a few minutes, but, that's not fun. Ooh neat.
 
00:23:09 KENNEDY: Why did the angry function exceed it's call stack size?
 
00:23:12 OKKEN: I dunno, why?
 
00:23:13 KENNEDY: It got into an argument with itself. What's the object oriented way of becoming wealthy?
 
00:23:21 OKKEN: I'm not sure?
 
00:23:21 KENNEDY: Inheritance
 
00:23:22 OKKEN: Oh yeah, definitely.
 
00:23:22 KENNEDY: Of course. All right, well, not terribly funny, but these are some good programming dad jokes, right.
 
00:23:29 OKKEN: Yeah, yeah, yeah, so.
 
00:23:32 KENNEDY: Nice, alright, well, thanks for being here as always Brian.
 
00:23:36 OKKEN: All right, thank you, bye.
 
00:23:37 KENNEDY: Yeah, good to chat with you, bye. Thank you for listening to Python Bytes. Follow the show on Twitter via @Pythonbytes, that's Python Bytes, as in B-Y-T-E-S, and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm, and send it our way, we're always on the look out for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening, and sharing this podcast with your friends and colleagues.
 
