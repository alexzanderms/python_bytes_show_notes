00:00:00 OKKEN: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 155, recorded October 30th, 2019. I am Brian Okken.
 
00:00:11 KENNEDY: And I'm Michael Kennedy.
 
00:00:13 OKKEN: And this episode is brought to you by Datadog. Thanks, Datadog. We'll hear more about them later.
 
00:00:17 KENNEDY: Absolutely. Brian, happy Halloween-eve.
 
00:00:20 OKKEN: Oh right, Halloween-eve. Yeah.
 
00:00:23 KENNEDY: Spooky. I have big news. It's not my big news, but I have big news to announce.
 
00:00:26 OKKEN: I'm on pins and needles.
 
00:00:28 KENNEDY: Guido has retired, officially, from employment. Which, y'know, congratulations to him, that is awesome. The news is, Guido van Rossum has left Dropbox, not for another position, but to retire, so, y'know I think that's great to hear.
 
00:00:43 OKKEN: Okay, what does that mean about his involvement in Python, do you know?
 
00:00:47 KENNEDY: I can only speculate, I don't know for sure yet, but my guess is actually that it will mean more Python involvement, not less. But that's just based on, I've been at big companies, and even when they say yeah, you can work on whatever you want, there's meetings and there's bureaucracy, and the proverbial TPS report, just like, y'know what, okay, well we're doin' nothin' today. And so, if he can work on whatever he wants, I have no idea what he's going to work on, but, there's got to be some cool creative projects, maybe not next week, maybe he needs a year just to sit on the beach and look at some sunsets but then eventually, I bet he will come back, do something.
 
00:01:23 OKKEN: Yeah, okay. He deserves a break. And you're linking to an article, a post that, where he announced it also, right?
 
00:01:30 KENNEDY: Yeah, so there's a link to his announcement, where he wrote, sort of the, the goodbye and all that. His final project there at Dropbox was really to work on mypy, and help them convert to 2 to 3. I think it's kind of fitting, right? Like one of his final things is to convert one of the largest Python code bases from Python 2 to Python 3, to kind of close that gap, I mean not globally, but at least in that realm, right?
 
00:01:55 OKKEN: You have a, not just his announcement, but a thank you, Guido, from Dropbox. That's kind of cool.
 
00:02:01 KENNEDY: Yeah, so, when I wrote this stuff down, it was just, I don't know, half an hour since that news came out? And it was just full of responses of so many things, so I just grabbed a couple to, y'know I thought maybe a nice way to close out this little section is just to read some of the, the messages that people wrote to Guido. On his Twitter announcement that linked to his full post. So, Vuyisile says, "Thank you for Python and helping to increase diversity in the teams that you worked with. Enjoy your retirement." Daw-Ran Liou says, "Congratulations and best wishes, thanks for the many contributions to open source software and for inspiring me." Phillip Guo, "Congrats and best wishes on the next era." Someone just goes by Steve, "Thank you for your contributions to the world. My boy was just learning how to code Python as his first programming language as I read this, basically." And, Freeman Crouch, "Best wishes, I literally don't know what my teaching career would've been like without Python."
 
00:02:58 OKKEN: Wow.
 
00:02:58 KENNEDY: I just want to say, thanks for everything, Guido that's awesome. He's really created something special, and he's put a big dent in the universe, obviously, right, this is a, a huge accomplishment of what he's done and what he's shepherded over the last 30 years, and it's definitely high time for him to retire, just so that he can go and just enjoy that, not stress. It's, it's cool that everything in place that, basically, this is not like a, oh my god, now what, it's just like oh, okay well, that's great for him, right? We kind of went through that last year, actually.
 
00:03:28 OKKEN: Yep. It's a interesting thing and, yeah I don't know what more to add other than also thank you. Yeah, I love the language.
 
00:03:34 KENNEDY: We both get to work on some really awesome stuff involving Python. And the community because of it, so, yeah, thanks. Alright, well, speakin' of awesome stuff built with Python, what's next?
 
00:03:44 OKKEN: Yeah, hard to transition away from that, but, I could have swore we'd covered this, but I guess we haven't. There's a cool project called SeleniumBase. And, what Selenium is, I mean most people know it because of the, in the Python community or other places, for testing web, testing websites, and, in such, you can also test APIs with it. But the Selenium web driver is what people often use to access Selenium through Python, and SeleniumBase is built on top of that, and it's built to, in conjunction to work with, it works with other things like unit test stuff, but it with pytest of course, and, it's, kind of layer on top that makes it quite a lot easier to, the Selenium web driver right out of the box has a lot of access. You can control, basically you're driving a web browser through, from Python, and, the SeleniumBase just makes it easier. There's, there's a lot of easier things, like, I'm going to link to, actually in the show notes I've got a, a little snippet of code, and it's really easy stuff like, open a webpage, or open with a URL and assert that a title is there, and, click on elements and you can use go back and click, and examine things, y'know search stuff. It definitely makes for testing, testing webpages a lot easier with all these utilities, but I also wanted to highlight, there's some, I was lookin' through it the other day, and there's some other things that it does that I thought was kind of interesting. One of the things that it has is, well one, it has support for a lot of the major continuous integration services. It also has a plugin built into it that you can take screenshots of test results, so let's say you have a test that fails because something isn't in the title, or something isn't present, or something's wrong, but what, what is there? And it's hard to describe with code, but it's not too bad with a screenshot, so it has the ability to take a screenshot on test failures.
 
00:05:40 KENNEDY: That's pretty cool. I wonder if you could use that as a, an assert itself. If you had a screenshot of the way, he said this, this page looks right now, and if something goes crazy like the CSS won't load, or... Somethin' is, like could you assert that the pixels are the same?
 
00:05:56 OKKEN: I mean that's, sort of a, visual testing. There is some visual testing with it, the, the main component that it has with it is making sure that the DOM is essentially identical. The DOM essentially reproduced the same thing. I don't think it does a pixel-by-pixel comparison. Maybe there's some plugin for it, but there is some built-in stuff to do basically, it should be about the same. Some other cool stuff, it works with Selenium Grid, which I wasn't quite sure what this was, but it's a, Selenium has built in an ability to, to run Selenium tests on multiple CPUs, so that you can do things in parallel.
 
00:06:31 KENNEDY: Grid computing. I want to test all of these pages, and it takes it a while, so just, spread it out. Okay, that's cool.
 
00:06:36 OKKEN: Yep.
 
00:06:37 KENNEDY: I hadn't heard of that either, that's nice.
 
00:06:38 OKKEN: The other thing is assisted QA, so sometimes it's really easy to have a manual procedure that basically says, y'know we want to throw this together quickly, just look at this page to make sure the graph is there. Sometimes it doesn't show up, so, or y'know, whatever, just make sure, and then pop up the little dialog box that says yes, it's there. There is some assisted QA, so it's like partial automation, and that's kind of neat. And, I think people poo-poo this too much, this is actually very powerful to have in place, and sometimes it's, it's a matter of pragmatism, of getting things done, so this is cool. And then one of the other cool things is, it has on-boarding demos capability, so, since you're using it to drive a, drive a web browser, you can use it to highlight things and pop up messages, and you can essentially give a, kind of an on-boarding demo of how to use a webpage. So this isn't a testing sort of thing, this is a, you would create a little demo to show somebody how to use some service. So, that's kind of neat.
 
00:07:37 KENNEDY: Yeah, it's super cool. This looks really nice, I looked at the, looking at the API that you got here. If you knew the tiniest bit of programming, and you knew CSS, you already understand this. It's, like there's no, no documentation needed. Obviously you got to have some documentation for real, but, it's super clear.
 
00:07:54 OKKEN: It takes away all of the, find item by element, and all those sorts of things, you, you don't have to do that too much, so. Anyway, a cool thing for if you want to automate a web browser or test a website, make sure you check this out. It's good.
 
00:08:09 KENNEDY: Yeah, it looks great. I love it, nice find.
 
00:08:11 OKKEN: Well, and another things that, that's nice, is Datadog. So, this episode is sponsored by Datadog, a cloud-scale monitoring platform that unifies metrics, logs, distributed traces, and more. Trace requests across service boundaries with flame graphs, correlate traces with logs and metrics, and plot the flow of traffic across multi-cloud environments, with network performance monitoring. Plus Datadog integrates with over 350 technologies like Postgres, Redis, and Hadoop, and their tracing client, auto-instruments common frameworks and libraries like Django, Tornado, Flask and Async IO. That's cool. Get started today with a 14-day free trial at pythonbytes.fm/datadog.
 
00:08:54 KENNEDY: Yeah, check them out. Big supporters of the show, thank you Datadog.
 
00:08:57 OKKEN: Yeah, and plus I love my purple T-shirt from them. It's good.
 
00:09:00 KENNEDY: For sure. Now, this next one I want to start by asking you a question, Brian, and you've done lot of C, C++, we even talked about that last time, right?
 
00:09:07 OKKEN: Yes.
 
00:09:08 KENNEDY: Is Python slow?
 
00:09:09 OKKEN: No. People are slow.
 
00:09:10 KENNEDY: People are, very good, that's a good question, or a good, good response, I like it. I think the whether or not Python is slow is really interesting question, and people sometimes say, well, I did a tight loop and I added x plus equals one, and it was slower than if I did that on C, and so Python is slow, right? But then you could also say, well, I have a job, somebody's told me to implement this feature. If I started in C, I would be done in 10 days, if I did it in Python I'd be done in six hours, so, and it took one minute to run it in Python and 30 seconds in C, so, Python is way faster. Right, it's half a day, or three quarters of a day instead of 10 days.
 
00:09:47 OKKEN: Yes.
 
00:09:47 KENNEDY: That sort of analysis. But sometimes it's interesting just to compare directly to these things, and, we also have the C-layer, so, yeah sure, it might be slower than some languages, but then if you called like NumPy, then it's probably faster than most, there's all these interesting angles, right? Cython and whatnot, but, this thing that I want to talk about now is this postmortem done by Darren Moffat. So he re-implemented the list users command, on Solaris, and it was originally written in C, and he rewrote it in Python. 'Kay? Which is kind of a interesting thing. Couple stats about it, so this is from like 19, the last time the C code was touched was like 1988. That's 30 years ago, 31 years ago, that's a good long while. And this, the implementation of this was about 800 lines, and it was written in a time when the number of users were small, and things like that, so, it didn't have to deal with tons of data. And, it even had some bugs, right, but it turned out that a basic implementation of what list users does is a set manipulation. You know what language has really good set implementation?
 
00:10:59 OKKEN: Python.
 
00:11:00 KENNEDY: Indeed. So, he decided to try to rewrite it in Python. And it turns out, the rewrite of list users in Python 3 was about 1/10 the number of lines of code, instead of 800 lines of probably fairly gnarly C code, it was down to 80 lines of Python.
 
00:11:18 OKKEN: Wow.
 
00:11:19 KENNEDY: That's pretty awesome. And a lot of the reason has to do with the fact that like, you don't have to reimplement set, you just, say the word set and you're good. But what's really interesting is on top of that, for 100,000 users, on tests they were doing, the Python version was 17 times, 1,700% faster than the C code as well.
 
00:11:40 OKKEN: Wow, that's incredible.
 
00:11:41 KENNEDY: Pretty cool, huh?
 
00:11:42 OKKEN: Yeah, it's actually not surprising to me. I'm glad we're covering it, because it would, it sure should surprise some people.
 
00:11:47 KENNEDY: Yeah, it doesn't surprise me all that much either. So, it's pretty interesting, it turns out that the, it's source open but not open source if you want to look at the implementation. What I mean by that is, the list users command is, this is from Oracle, right, they bought Sun so now they have Solaris, so, on 11.4 SRU9 or higher, you could just go to /user/bin/users, and it's a Python file so you just look at it, right? So you could see what they're doing and you could compare the code and whatnot, but it's not open source and it's covered by the Oracle Solaris license. So you can check it out, but it's not open source, it's source open.
 
00:12:25 OKKEN: This is cool, so not only is this, somebody tried to do it and it was faster, it also is shipping now with Solaris.
 
00:12:32 KENNEDY: Yeah. That's pretty awesome. And it's Python 3.
 
00:12:35 OKKEN: Of course.
 
00:12:35 KENNEDY: Of course. I bet there's some useful tricks in that code.
 
00:12:38 OKKEN: There probably are, actually I was thinkin' about this when you brought it up with sets. So, I admit it, I am capable of getting link-baited by the occasional listicle, and this is definitely one of 'em. It was 20 useful Python tips and tricks that you should know. Now, there's some fluff in there that I don't think that's useful, but there's a whole bunch of, enough of, that are useful, that I think it's a good, good thing to, to take a look at. Think for one, I'm not sure if, so chained assignment is one of the first ones that I looked at, and you actually don't, I don't see this in a lot of Python code, so is it, is it like bad Python style or somethin' to have like, x = y = z = 2 or something? Do you know?
 
00:13:22 KENNEDY: I don't know, actually. But you're right, I remember seeing this a lot in C. But not, not a lot in Python, no.
 
00:13:29 OKKEN: No, but it does work in Python, but I guess, make sure that you're not doin' something that's too unclear. I highlighted that mostly because, what I do see, what I use a lot, is chain comparison, and people coming from other languages don't know you can do this, so, for instance in C if you wanted to have, make sure that x was between 2 and 8, you'd have to go, 2 &lt; x and x &lt; 8, or something, but with Python, you can just chain 'em together and put 'em together.
 
00:13:58 KENNEDY: Right, like 2 &lt; x &lt;= 8.
 
00:14:00 OKKEN: Yeah, and you can have a whole bunch of 'em, so you can have a couple variables within ranges and stuff, and it's nice. Multiple assignment, which I think of as unpacking, I guess.
 
00:14:11 KENNEDY: Yeah, I think of that as tuple unpacking. Definitely that's common, right like, if you're going to do a for, you know, index, value in enumerate of collection, somethin' like that.
 
00:14:21 OKKEN: Yeah, but the thing that I've been using a lot more lately is tuple unpacking with the * operator. So, if you put a * on one of the, on one of the things you're unpacking to, it takes all the leftovers. And, so if you've got a whole bunch of stuff you're unpacking but you only care about a couple of 'em, you can name those and then just capture all the rest of 'em in a, like a * underscore or somethin'.
 
00:14:43 KENNEDY: Yeah, then throw away. Like I know have to have placeholder for this, but I just don't care.
 
00:14:47 OKKEN: I've seen in a couple articles, but the, it listed merged dictionaries, where you do ** of both dictionaries, within another dictionary in brackets, and that kind of combines 'em. Debate as to what you should use, but I kind of like that 'cause it's short.
 
00:15:02 KENNEDY: I like that one. Yep.
 
00:15:03 OKKEN: Yeah. And then joining strings, people new to Python, it's one of those things that it's nice to, you just take a, like a character or a, or a string, and join all the elements in a list or in, in the iterable, and this is something that, for some reason, especially the people I'm familiar with that come from C or C++ to Python, this is hard for them to get around, that, that strings themselves have object methods on them.
 
00:15:30 KENNEDY: Isn't it just a character pointer, or, something like that, like char*, char*, sort of.
 
00:15:36 OKKEN: Yeah, yeah. They don't think of 'em as objects, so.
 
00:15:38 KENNEDY: Exactly.
 
00:15:39 OKKEN: This brings up, you said sets before, so if you've got a, got a list of things and you want to make, get the list of unique things, well you can just convert it to a set and then back to a list, and there you go.
 
00:15:50 KENNEDY: Yeah, I do that sometimes, it's really nice. That's your distinct, yeah.
 
00:15:53 OKKEN: Yeah, the only thing left that I wanted to mention was using, this was something that was difficult for me to get, to get my head around, was the zip function, mostly because I was familiar with using zip on the command line to actually zip files, so, no, zip is completely different, it kind of pair-wises up all, a bunch of lists of things, and, I'd, I use it, I don't really, it's hard to explain when you use it, but when you do need it, it's really handy.
 
00:16:20 KENNEDY: Yeah, I feel like the intertools stuff, just has so many things, it's always, something new to me, y'know? I'm like, I don't,
 
00:16:28 OKKEN: Yep, so like...
 
00:16:29 KENNEDY: know all this stuff.
 
00:16:30 OKKEN: Those are the things I thought were good, and it was less than 20. The rest of the 20 wasn't that useful to me, but these were neat.
 
00:16:37 KENNEDY: Yeah no, those are really cool, and, a lot of times with these listicle-type things or like this top 10, or like, I don't know, some of these are cool or whatever, these all look really great, yeah, I like it. Cool, so, let's talk about waterfalls. Now, we've talked a little bit about code complexity on different things, I think we've covered Wily from Anthony Shaw which is a code complexity analysis tool. So, here's a article write-up, head over by Ahrem Ahreff, from, the article is by somebody named Nikita Sobolev, and it's called Complexity Waterfalls, pretty interesting, it kind of talks about the origins of complexity in our code, and, just the challenges of how that sneak in and, nobody starts out with the intention of writing bad, hard-to-understand code. You may know you're going down that path, he's like, I don't know what I'm doing here, but most of the time it's with good intentions that everything starts out, but, at some point it becomes this mess, right?
 
00:17:35 OKKEN: Yes. Some people are really good at it, too.
 
00:17:38 KENNEDY: They're, they do have a special skill. So this article highlights some of the types of complexity that you might find, how you might address them, some of the tools to actually automatically discover them. Two of the core ideas are things that I think will resonate with you Brian, are continuous refactoring, and architecture on-demand, from, using things like tests and continuous integration and whatnot, so basically, instead of tryin' to dream up this perfect architecture, just write stuff, in a simple way, and as it gets more complex, run some tools, discover the problems, use your unit tests to let you refactor, and grow the architecture out of it. What do you think of that?
 
00:18:19 OKKEN: Yeah, I definitely like that a lot, and I, and more and more I'm warming to the idea of, of using complexity measurements as part of your commit tools to tell you where to refactor.
 
00:18:29 KENNEDY: Yeah so, one of the things they use in here, to talk about the complexity and measure it, is this thing called wemake-python-styleguide, which is actually a linter, not just a guide, like it's a thing you could run, I believe. It actually outputs stuff, it's not just a guide. And it does pretty interesting stuff. So you can run it on your code, and it'll say, y'know you're missing whitespace between your type definition and your type, your variable definition and your type annotation, or between a comma, or, there's a bunch of different things, right? And it brings in some of this, these complexity measures. I've heard of, you've heard of cyclomatic complexity, I know we've talked about that, right?
 
00:19:11 OKKEN: Yes.
 
00:19:11 KENNEDY: We've definitely spoken about lines of code, right, like one, so the article talks about, hey, here's how line, individual lines of code become complex. Here's how functions become complex, or classes, or modules, or packages, and so on, and obvious measures or metrics would be, if your function is 5,000 lines long, it's wrong. I don't know what it does, I've never seen it, but I can tell you already, it's broken, right? These sorts of things are pretty, pretty obvious, but one that I don't know that I've ever really paid attention to is something called the, think it's the Jones, the Jones metric? Yeah, Jones complexity.
 
00:19:52 OKKEN: No, I've never heard of this.
 
00:19:53 KENNEDY: Yeah, so here's the idea. Like, if you had a line that was 80 lines long, says, example they give in the, Nikita gives in the article is, by print, three long variable names. Yeah. Verse, long name with meaning, second long name with meaning, the third one, and that's 80 lines. Or if you say print, three calculations, right like, you actually compute three or four thing, right, multiply, divide, whatever, multiple things in each of those print, you're still printing three values, but, somehow they feel more complex. So, with the Jones complexity, what it measures is it's like, if I were to take this line of code, and parse it into an abstract syntax tree, how many nodes would there be?
 
00:20:36 OKKEN: Oh, wow.
 
00:20:36 KENNEDY: In the first one there's like four, we have print, and then there's the three things we're printing, and the other one is like, 21 different things are participating in this one line. Right so, the reason I bring that up is, for example, the wemake thing, I believe will tell you, this has too high of a Jones complexity. Right? There's too much, it's a line, yeah, it says, it'll say things like, we found a line with a high Jones complexity of 15, this is an error, what should you do? And, well what should you, you should break those out into different variables, right, you should take those expressions and turn them into three variables and then print them, like three variables, one on each line, and then print them. So there's a lot of concrete little steps about, how do you go through and see this complexity, what do you do about it, and how do you kind of evolve your architecture through it, so, I don't want to go through all the details in there, but it's a pretty interesting read, and it comes up with some good ideas, including pointing out this wemake Python style guide.
 
00:21:36 OKKEN: One of the things I want to highlight when we're talking about this is that, a lot of times it is shifting complexity, so, you'll have a very complex bit of something, and that's a danger field, but to eliminate it, you're going to add complexity somewhere else. 'Cause like the example of a 5,000 line function, that's bad, but so is a, 5,000 two-line functions that are 5,000 functions deep.
 
00:22:02 KENNEDY: Sure, yeah, if you were to break it into 10 lines, you might end up with a module with 500 functions. That's also a bad thing.
 
00:22:08 OKKEN: Right, and, so that's one of the things that I like about these tools is they, you can break things out to where you think it's better, and then measure it again, and, also, please have tests in place to make sure that you're not breaking your code while you're refactoring.
 
00:22:21 KENNEDY: Yeah. So, one of the things that Nikita talks about is this iterative, continuous refactoring stuff, like okay, we fixed the Jones complexity of this, but now we've actually changed the complexity of, say, the module. How do we fix that, right like, keep doing it until it gets better, right?
 
00:22:38 OKKEN: Yes. And I love this, because, the idea, maybe some people can just think of the right architecture that they're going to need at the end, but I never can, so, starting small and building up, and refactoring where needed, that's the only way I know how to work.
 
00:22:53 KENNEDY: Well, usually the challenge is, you don't have a perfect understanding of the problem you're solving, until you're halfway through it.
 
00:22:59 OKKEN: Right, well, usually not until I'm completely through it.
 
00:23:02 KENNEDY: Yeah. Yeah, for sure, so, even if you tried to think, well maybe I should be more patient, I'm going to really think through this, well maybe, but, the way you figure out what the solution should be is by going through that step, and then there's this iterative fixing process, well.
 
00:23:18 OKKEN: I never understand why some coders and developers think that they really can architect the right solution to begin with. That's like expecting a novelist to not write a first draft, to just come up with the final draft at the end. Just doesn't work.
 
00:23:33 KENNEDY: Yeah, even if it can be done, it's probably not the most efficient way to do it, right, you just stare at the wall for a week, you're like y'know what, I wrote it badly in three hours, I fixed it in one, I went to lunch. Right, we're good.
 
00:23:42 OKKEN: Yeah, exactly.
 
00:23:43 KENNEDY: For sure, cool well, if you care about code complexity and this kind of stuff, this is a pretty good write-up, and definitely some of the tools mentioned are interesting. There's usually advice at each level, like here's what you do to make a line less complex, here's what you do to make a function less complex. I think the advice is generally good, but, it can't be taken absolute, absolutely, right like, it talks about, well if I have a function, fewer arguments is better. If I have a class, fewer methods and fewer fields is better. But if you push that to its extreme, you say well, all my classes have only one field and one public function, well okay, it's kind of, y'know, now you have 1,000, like you can't push it to its logical extreme, right? It's kind of a give and a take, but it's, y'know it points in the right direction, I would say.
 
00:24:27 OKKEN: Yep, I only have one argument to every function. It happens to be a variable length tuple, but.
 
00:24:33 KENNEDY: Exactly.
 
00:24:34 OKKEN: Yeah, anyway.
 
00:24:35 KENNEDY: It's called tuple complexity.
 
00:24:36 OKKEN: Tuple complexity, yeah, is that, is that in the list?
 
00:24:39 KENNEDY: No it's not, but it is now. I'm addin' it.
 
00:24:42 OKKEN: Have we ever talked about GUIs on this podcast?
 
00:24:44 KENNEDY: We should totally cover that, because Python needs to have more cool GUIs.
 
00:24:48 OKKEN: I think so. So this one came up recently, it's, and I don't know how to pronounce it, P-L-Y-N-T-H, Plynth? Plynth?
 
00:24:56 KENNEDY: I'm going to go with Plynth. I could be wrong.
 
00:24:57 OKKEN: Plynth. And I don't mean to make fun of ya, be Plynth, I think what, it's cool, what it is is cool. So it's a GUI framework for building cross-platform desktop applications with HTML, CSS and Python. Hey, we asked for this! But it's a, it looks pretty cool, it's a, integrates with the standard C Python implementation, in the Chromium's rendering engine, and you can basically run, you run Python, runs JavaScript and Python all together with Python, and, it's kind of hard to explain without lookin' at it, but it's, it's sort of a thing that's just starting out. And it's not an open source thing, it's a group doing this. They're going to do it for money, but it's not expensive. It's free for individuals and, including commercial use for individuals, and there's a bunch of tutorial videos. Now, I'm watching, some of the tutorial videos, you kind of, like one of 'em's like implementing a calculator, and one of 'em's like give a mini a spinning cubicle, or a cubicle, no, a spinning cube. But a spinning cubicle, that'd be cool, somebody should do that. Now, they clearly know what they're doing when they're writing this, and it might be that I'm just not a JavaScript person, 'cause, the code they're writing doesn't seem obvious to me, but it isn't that much, so a handful of code, a handful of little bits of code and stuff and you can implement something like a calculator on your web browser if you want.
 
00:26:18 KENNEDY: It's pretty interesting, so yeah, there's a visual calculator. I see that, and it looks like a desktop app, but obviously we know, it's basically the Python equivalent of Electron, right, like HTML and JavaScript and Node. What kind of surprises me here is, the, at least the calculator example, is integrated with Vue.js, which is, kind of actually super cool, so you define a Python class, in the dunder init, it sets up the Vue class, and if you've ever done Vue that looks really familiar, you would say, here's the element that is the root of the app, here's some of the bound data, here are some of the methods, and then you just point, you basically just set the function to the various Python functions, like they clicked on a number, they clicked on an operator. I like it, this is actually pretty cool.
 
00:27:09 OKKEN: Yeah, I think it looks neat, and it sounds like what they're doing is they're, they're having some way to automatically convert existing JavaScript libraries to Python modules, so you can call 'em from your Python, or hook up to 'em or something. I mean it's available, looks like it has development kits available right now for Python 3.6 and 3.7, and, anyway, for somebody wantin' to play with GUIs for Python, I think this is somethin' to pay attention to. I wish 'em luck, I'm not a zealot for open source-only. I make money on this by going to work, so some, these people can too as well.
 
00:27:44 KENNEDY: And then I'm over here looking at the pricing. Free for individuals, for commercial use, academic is free. Company enterprise, developer license, $5.99 per developer per four years. I, like that is, honestly, they should put another zero on that, and I think it would still be, still be okay because, that's totally reasonable, it's not like they're saying, oh it's $1,000 per year per developer, it's not much. So, I'm happy to talk about it, it looks great to me.
 
00:28:12 OKKEN: Yeah, looks neat.
 
00:28:13 KENNEDY: For sure. Well, what d'you got on the extras for us, Brian? Anything else you want to throw out there?
 
00:28:17 OKKEN: Yeah, I want to bring up a couple things. I wanted to thank you for the excellent search feature that we have on Python Bytes.
 
00:28:24 KENNEDY: You're welcome.
 
00:28:25 OKKEN: Because, every week, believe it or not, I got to come up with like three items to talk about, and sometimes, we've already covered it. And that was the case this time, I ran across another reference to a tool called Cerberus, which is a, a JSON schema validation tool.
 
00:28:42 KENNEDY: Yeah that's a cool one, yeah, I love it. It comes from Nicola, he's, he built that as part of the Eve framework.
 
00:28:47 OKKEN: Okay, well it's really pretty neat, and it has a lot of extensibility features that I haven't seen in other validation tools, but we covered it in Episode 70, so, and I found that out through your search feature.
 
00:28:59 KENNEDY: Awesome.
 
00:28:59 OKKEN: The other thing I wanted to bring up was this, a funny thing happened, I put some, the other day I put use data classes in some test files, test modules, because we've converted to Python 3.7 at least, I'm using, we're slowly converting to Python 3.8, but, a colleague of mine looked at my code and said, oh these data class things look cool. How did you learn about 'em? I'm like, well, kind of my job.
 
00:29:25 KENNEDY: That's awesome.
 
00:29:26 OKKEN: I didn't say, well you should listen to Python Bytes because it seems weird to encourage my coworkers to listen to it but...
 
00:29:31 KENNEDY: Send him my way, I'll tell him to listen it. They're not my coworkers, I can tell them.
 
00:29:35 OKKEN: How 'about you, got anything extra for us?
 
00:29:38 KENNEDY: Just something super quick, I ran across this article, it's not directly related to Python, so I didn't make a, into sort of a main item, but, there's this project from Google where they've been working on the upstream Linux kernel, using, what they have called sanitizers, and it basically, these are like C linter-type things that go and find problems with the code, so they had an address sanitizer for finding memory corruption and undefined behavior for certain code and other issues, and then they've come up with this one called the KCSAN? I don't know, the Kernel Concurrency Sanitizer, and they then turned it on the latest Linux kernel, and what they found is in a two-day period they found over 300 unique race conditions and deadlocks and stuff within the mainline kernel of Linux.
 
00:30:29 OKKEN: Wow.
 
00:30:29 KENNEDY: Anyway, there's some comments and stuff about this, and it links back to what they're doing, and it's kind of interesting. The code's on GitHub.
 
00:30:35 OKKEN: Are they fixing them or just, y'know, pointing out problems?
 
00:30:39 KENNEDY: Well, to point out a problem, like a concurrency problem like that is one thing, to fix it, I think, is a whole entirely nother without causing two more deadlocks somewhere else, so I don't know. Maybe they're just makin' people nervous. So, making people nervous, maybe this joke might a little bit, probably not. But after the one last week, I don't know, man. We're pushing the boundaries. So let me ask you a question, when you talk about a link on the internet, and it's http this or that, you call it a URL or an url?
 
00:31:08 OKKEN: Well, I call it a URL.
 
00:31:09 KENNEDY: Yeah, some people call it urls, what's the url for that, some people say URL. Alright anyway, whatever, so there's this, this joke that comes from Aideen Barry, right, what's a web developer's favorite tea?
 
00:31:21 OKKEN: Well it'd be, url gray, or URL gray.
 
00:31:26 KENNEDY: Course it would, of course it would. Awesome.
 
00:31:28 OKKEN: I love that joke. I laughed way too hard when that joke the first time, so.
 
00:31:32 KENNEDY: Yeah, me too, me too. It's, written it's even better, so check it out in the show notes. Alright, Aideen, thank you for sending that in, that's great.
 
00:31:39 OKKEN: Thank you.
 
00:31:40 KENNEDY: Yep, thanks Brian, catch ya later. See you.
 
00:31:42 OKKEN: Bye. Thank you for listening to Python Bytes. Follow the show on Twitter @PythonBytes. That's Python Bytes, as in B-Y-T-E-S, and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
