00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 156, recorded November 6th 2019. And we're recording from a special place here at Microsoft Ignite in Florida, live. You might be able to hear some background noise and that's because it's right here. And Brian is not here because he couldn't get away, he should have come to the conference. So I have not one, but two special guests. Dan Bader Hey, Dan.
 
00:00:27 BADER: Hey, how's it going, Mike?
 
00:00:27 KENNEDY: Great to have you here and Cecil Phillip.
 
00:00:29 PHILLIP: Hey, what's going on everybody?
 
00:00:30 KENNEDY: Hey, welcome back both of you. Been on independently, now together, very, quite close together in this little recording area we put together.
 
00:00:37 BADER: Cecil and I, we're sharing a mic, so we get to snuggle up here on the couch.
 
00:00:41 KENNEDY: You guys will be fast friends after this.
 
00:00:42 PHILLIP: Yeah, we're getting some intimate time together while we record this podcast.
 
00:00:46 KENNEDY: All right, awesome. Well, let's start by thanking Digital Ocean for sponsoring the show. Check them out at pythonbytes.fm/digitalocean. More on that later. Dan, there's a lot of debate about how you create a virtual environment. I know both you guys are fans of virtual environment, but there's venv. There's virtualenv, there's poetry, there's all these things. You've got a recommendation for us?
 
00:01:07 BADER: Yeah, so I wanted to call out, or showcase an article that Brett Cannon published recently. And so basically, it's about a best practice you can apply when you're running commands like pip install. Though, what Brett recommends in his article is instead of running pip install and whatever library you want to install, instead, you can run python -m pip and then run whatever command you want to run.
 
00:01:35 KENNEDY: Because Brett likes to type a lot or what?
 
00:01:37 BADER: He enjoys typing so much. And that's probably why we should all use that. No, so the reason is that if you use this other form, like -m will basically load a module and execute it, it will, you know exactly which Python environment this will affect. So if you just go pip install, it would be possible that pip actually points to a different environment, maybe not the one that you're think it does point to. So maybe you're accidentally installing something into your Python 2 environment but you want it to go into your Python 3 environment.
 
00:02:06 KENNEDY: That happened to me when I was new. I'm like, "Why is the requests not here? I don't understand what is going on."
 
00:02:11 BADER: So frustrating.
 
00:02:12 KENNEDY: Yeah, it's, I think I typed pip instead of pip3 or something silly. I was new and young. I didn't know what I was doing.
 
00:02:17 BADER: I just really liked this article because it gave some pretty clear recommendations and I'm pretty much on board with all of them. And if you follow this format whenever you run pip install, you will always just be 100% sure that you're actually installing stuff into the right environment, because if you hit the wrong environment, you have to go and uninstalled stuff. Maybe you end up upgrading something that you didn't want to upgrade, and it can get messy. And so I just felt like, yeah, that's a good recommendation there, and an article worth reading, because Brett goes into a lot of the backstory and why this is a good idea.
 
00:02:49 KENNEDY: That really cool, my first thought is I need to alias this. So that pip just means python3 -m pip. Cecil I know that you are a fan of virtual environments. Do you do anything special or do you just run python3? Or do you do pip directly? Or do you use something, like poetry or something else like that?
 
00:03:06 PHILLIP: I'm actually a big fan of pipenv actually. And so we do this live stream randomly, we actually showed that off at our last episode, how you could use pyenv and pipenv. For our students, it was really important for us to have that background information. But now they know how these little bits and pieces go together. And having one command line tool that will be able to orchestrate all of that stuff for us. This is a game changer.
 
00:03:31 KENNEDY: Yeah, that's awesome. So you're doing with Brian Clark, you're doing a twitch livestream programming series, which is really fun. We're going to talk about it on Talk Python, further down the road, pretty much in real-time close, but in release-time, far apart, sort of thing. But so it seems like there's a lot of beginners in that world. And so this is probably a tricky concept for them.
 
00:03:52 PHILLIP: Yeah, it totally is. And so using something, it's so much less for them to worry about in terms of installing and setting up, and what's the right combination of commands I need to use. What order I need to run them in. If I made a mistake, how do I back out of it and restart over. That one command just allows us to manage environments, managed packages, and it just makes it so much easier.
 
00:04:12 KENNEDY: Super cool. Well, we are here at Microsoft Ignite, which is, I had no sense of the scale this place until I came here, 29,000 people.
 
00:04:20 PHILLIP: Yeah, Ignite is massive, man, I know. Because Ignite is so much more than just a developer audience. It's developers, it's IT folks, it's CTOs and all these different types of folks, all at one conference. So when you bring all those people together, you get a pretty massive turnout.
 
00:04:35 KENNEDY: And you get a lot of steps in.
 
00:04:37 PHILLIP: You get a lot of steps. So as you can imagine a conference center's humongous. So there's sessions all across the conference center, there's sessions across the street and down the street. But sometimes you got to do a little bit of walking.
 
00:04:49 KENNEDY: That's right. The reason I bring all this up, is there was a pretty big announcement here that's quite close to Visual Studio Code, which is one of the most popular Python code editors, these days, so tell us about it.
 
00:05:01 PHILLIP: Yeah. So like you said, Visual Studio Code that runs on our desktop, runs on Linux, Mac, Windows. And then the Python extension has something like, I don't know, like 24 million.
 
00:05:11 KENNEDY: Yeah, I know. It's got a many, many, many.
 
00:05:12 PHILLIP: It's tons of millions of downloads.
 
00:05:14 KENNEDY: It's the most popular thing for Visual Studio Code. Way over C#, way over C++, it's massive.
 
00:05:19 PHILLIP: Right, definitely. And so the Python extension is easily the most popular extension, for Visual Studio Code, by leaps and bounds. But one of the big things that we had announced this week was our new Visual Studio online environment. And this is the real Visual Studio online and not the old one. And when I say that, I mean, so we used to have a product called Visual Studio Online. But that was essentially what turned into Azure DevOps. The Visual Studio online used to be our CI CD.
 
00:05:45 KENNEDY: Yeah, it was hardly even Visual Studio. It was like the continuous integration story, and TFS right, or the source control,
 
00:05:51 PHILLIP: It was source control. It was ticket management, it was builds and those types of things.
 
00:05:55 KENNEDY: That name was hijacked.
 
00:05:56 PHILLIP: Yeah, and so you know, now we're repurposing the name and now Visual Studio Online is exactly what you think it is, right? It's Visual Studio online. More specifically, it's Visual Studio Code Online.
 
00:06:06 KENNEDY: Right. which is so interesting, because Visual Studio Code is an Electron JS app. So it's got this frontend and this backend, already on your machine. I got node and then gnome, packaged into one thing. But now you just put, lots of dissonance and stuck part of it in the cloud, right?
 
00:06:21 PHILLIP: Yeah, totally. And so the background of it is a little bit of, so we have Visual Studio Code. And we also have some extensions that allow you to do what we call remote sessions and remote debugging into different environments. So for instance, I could have Visual Studio Code on my machine, and I can debug into a docker container, I can debug into a Linux machine, I can debug into a workspace that's not on my local machine. But then not only can I do that, I can have my environment specific settings and tools I have installed, extensions and those types of things, on that environment and not on my machine. So all that happens is that when I start to remotely connect to that machine, I'll just have all those additional things just added to my currently working workspace. So we're like, okay, well, if we can do that, what if we just created a completely online experience for that? So kind of like what you said, right? Visual Studio Code is built on web technology. It's JavaScript and CSS, and those types of things. And essentially, they just, they took the editor and they took all the tooling, and they put it in a web browser.
 
00:07:16 KENNEDY: Yeah, it's so cool. It's really a nice experience. And you get basically an Ubuntu machine. And you get like a little docker. Is it docker or just straight VM or what do you get?
 
00:07:26 PHILLIP: Honestly, I have no idea what type of machine it's running on.
 
00:07:29 KENNEDY: You just get some machine with a terminal that, like your stuff lives on, right?
 
00:07:31 PHILLIP: Yeah, you got a machine with the terminal. So essentially, what you do is you go in and you could create a new environment. Or if you have an already existing git repo, there's some markup that you could add to your markdown file that will add a button in your markdown
 
00:07:43 KENNEDY: Oh, is it like the launch binder for notebooks, but instead you launch in VS Code, right?
 
00:07:48 PHILLIP: You know, you see launch binder, or if you might have seen the thing that says "Build succeeded." or something like that, those little tabs, those little buttons you can add into your git repo. So you can add one of those that just says, "Create environment." What will happen is, per person, you'll get an individualized environment for yourself. So if I have my GitHub repo, and Dan can click the button and you click the button, and I can click the button, but we'll have three different environments pointing to the same repository.
 
00:08:15 KENNEDY: I see. So it's like, spin up a little dev machine but it links back to the source control.
 
00:08:18 PHILLIP: Right, which is great, right? Because when you think about companies that have situations where it takes really long time for us to do set up, but I got to installed dependencies and I, there's multiple things that needs to happen, before I can be even, start to become productive, right. I got to install this OSS thing, and I got an install SSL, and stuff has to happen, before work can actually happen. Now, we could have these predefined environments, where I could just be like, "Hey, let's just create this environment for this particular code project." And now we could just get to work, and it's running in the browser. I don't have to install anything on my machine if I don't want to, and I have everything I want right there, just running inside of the cloud.
 
00:08:54 KENNEDY: That's super cool. You could use it from an iPad. You could use it from a Chromebook, other places where it's hard to run code, right?
 
00:08:59 PHILLIP: I've had teammates that have run it from iPads, from their cell phones, from all over the place.
 
00:09:04 KENNEDY: Hey Siri, refactor this.
 
00:09:07 PHILLIP: What was really cool, if you remember the keynote, Amanda Silva was telling us a story about how she ran it from inside the airplane. She was debugging the demo that she showed, using the project for the, on the airplane, on airplane WiFi. And if anybody's use airplane Wi-Fi, we know that's not the most...
 
00:09:25 KENNEDY: Yeah, that's sipping through a straw.
 
00:09:26 PHILLIP: the most high bandwidth situation.
 
00:09:29 KENNEDY:  That's cool, man, that's super cool. So people can try this now, right. And the link is in the show notes.
 
00:09:32 PHILLIP: Yeah, people can definitely try it out now. Let us know what you think about it. I ran it myself personally, just the other day. The Ubuntu machine that it comes with, comes with Python 3.8 by default. Which is great. So I didn't have to install it or do anything with it. And I think that's also really cool, because Python 3.8 is what, like two or three weeks old as of today?
 
00:09:49 KENNEDY: Yeah, it's brand new. Yeah, it still has that new Python smell.
 
00:09:53 PHILLIP: These are brand new, fresh machines and images that you get to run your code on. So I think this is really cool.
 
00:09:59 KENNEDY: That's a great one. Thanks for sharing that. Now before we get on to another one, let me just tell you about Digital Ocean and they're sponsoring the show. All of our infrastructure runs on Digital Ocean. Super, super happy. We ship like 15 terabytes of data through there, we have millions of requests, and just love using it. So, do you want something like we got going on here, check them out at pythonbytes.fm/digitalocean. Now this last one, speaking of Python 3.8 and 3.9, the next version of Python should come a lot quicker because we've now switched, from an 18 month release cycle, to a 12 month release cycle. This is a project that Lukasz Langa has been working on for a long time, trying to make this happen, now that he's in charge of the release management. And so Brett Cannon, remember Brett Cannon from earlier, he sent out a message from, officially from the steering Council, which is a cool way to announce thing, that after a long discussion on changing the cycle, we've decided to accept PEP 602 and it's now yearly. Which I think is great, because it's just weird to have alternating times of year, or this, it just seems real, one, really long, and two, kind of weird. What do you guys think about this?
 
00:11:04 BADER: I think this is a is a good change because it puts everything on a very regular cadence in the year. So when you think about when PyCon is happening in the year, I guess if you have the 18 month release cycle, you're always in a different phase of development and preparing that release. But if it's on a 12 month fixed cycle, then you can always say, "Okay, we're going to get ready to finalize." So we're in this phase getting ready to a beta version or whatever, during that time, which I think makes planning a lot easier for everyone. And, yeah, I can understand the rationale for that, going to a 12 month cycle makes sense to me.
 
00:11:43 PHILLIP: Yeah, I'm actually pretty happy to see this. I think what I hope to see out of this is just we'll be able to see new features faster, try them out faster. And you won't have to wait until those official releases come out on that longer cadence. I think it's the same with most development environments. Unless it's an official release most people really don't play around with the betas and the alphas as much. So it's only when the official releases come out, where you get most of the developers and companies really jumping on new features. So I think with the shorter cadence now, we should be able to get more feedback. And I guess, people that are able to iterate faster, and some of these new cool things that are coming on in the language.
 
00:12:20 KENNEDY: Yeah, we don't have to have as much patience, we can get right to the cool new features that are coming up.
 
00:12:23 PHILLIP: Yeah, exactly.
 
00:12:24 KENNEDY: Yeah. So I'm really excited about this. I actually linked not to the official announcement directly, but to a Reddit thread, because the Reddit thread has a bunch of feedback. And it's, I would say, it's pretty mixed. It's like 50/50, positive/negative. It's really, it's an interesting look, and insight into what people are thinking, intersected with the weirdo Reddit world. So that's pretty cool. But my, that people are saying, "Well, it's going to be shorter, so there's not as much time for testing. So I'm concerned about quality." But there was a lot of pressure on that 16th and 17th month to get your feature in, because if you don't get it, it's a year and a half you got to wait if you missed that deadline. So you're going to scramble to get that in. Now it takes the pressure off a little bit. So I think it's actually a pretty positive thing. Dan, you want to tell us about this next one, another release story?
 
00:13:08 BADER: Yeah, sure. So I feel like this is the Brett Cannon and Lukasz Langa episode of Python Bytes.
 
00:13:13 KENNEDY: Yeah, shout out to those guys
 
00:13:15 BADER: So yeah, I've got another cool announcement. So Black, which is the uncompromising code formatter for Python code, just had a new release. So this version is called 1910, Beta 0 or B0. And the way I understand it, or the way I interpret Lukasz's Twitter feed. They're actually getting ready for releasing a stable version or stable release of Black the first actual stable release for Black Friday this year, which is kind of beautiful. Yeah, thing how that the naming scheme is working out there. And so maybe if you're listening, you don't know what Black the the uncompromising code formatter is. So it is essentially a tool that enforces a certain Python formatting standard, or like a style guide. So it will reformat your code to be PEP 8 compliant. And it, well just the great thing is it will reformat your code. And it would also call you out on anything that's miss-formatted or not following the standard. So it's a really great way to establish a consistent code style in a large code base, and then put that in place on a CI system, continuous integration, and it just makes sure that you never have to argue about code formatting in a pull request again, ever again. If there's ever a problem, you just run Black again. And it's great, honestly it's one of my favorite tools. I put it into every Python code base that I work with. It's been super stable, even though it is still in beta, technically, but I've been running it in production, if you will, very happily, pretty much since it came out. And if you just want to try it out, there's also a interactive playground on the web at black.now.sh
 
00:14:51 KENNEDY: That's really cool. I didn't know about that.
 
00:14:53 BADER: Yeah, it's really cool. You can just copy and paste a bunch of code there, or just enter code and it will show you what black would do to the code and how it would reformat it. And yeah, highly recommend it, it's like, honestly one of my most favorite tools there.
 
00:15:05 KENNEDY: Yeah, super cool. It'll be great to have that come out and be basically totally stable. Cecil, do you guys use that on your live stream?
 
00:15:10 PHILLIP: I think by default, we use this thing called auto PEP 8. So when I said by default, we use Visual Studio Code as you can imagine. And the extension when you save it, auto-formats it, based on if you have that setting turned on or not. And if you don't have a formatter installed, it will ask you at the bottom which one you want to use, and then it'll install one, right. So it's, Black's an option, I think there's one call YAPF. YAPF, I'm not quite sure how you pronounce that one, but there's that one.
 
00:15:38 KENNEDY: You got another format or something?
 
00:15:40 PHILLIP: Right, right, right. And then I think the default one that it uses is auto PEP 8, right. So if you just click, okay, it'll just use auto PEP 8. Or you could select one of the other options as well. But I'm kind of interested to try this out. And I want to see, what does the configuration look like, and how can you tweak the settings, those types of things?
 
00:15:56 KENNEDY: Yeah, cool. I think it takes away a lot of the debate. My understanding is it's kind of like a Model-T, you can have it any color you want, as long as you want it in black, right? So there's not a lot of debate about the format. It just it does what it does.
 
00:16:08 BADER: Exactly. So speaking of formatting options, there's basically none. So which is kind of cool because it prevents any arguments that you otherwise might have with a team about preferences. So yeah, so it's like a philosophical choice there that you're making with this tool, I guess.
 
00:16:24 KENNEDY: Pretty cool. Cecil, you also talked, when you talked about a Visual Studio Code? You just start by putting in a GitHub repo? and you can, once you load it up, you can navigate around within Visual Studio Code, right?
 
00:16:34 PHILLIP: Yep. So I mean, I think everything that we do as developers, at one point in time, touches GitHub. It's almost impossible today to write code that wasn't on GitHub or touch GitHub, or use something that was associated with GitHub at some point.
 
00:16:48 KENNEDY: If it wasn't for the weekends, imagine the streaks.
 
00:16:50 PHILLIP: Right, exactly. So GitHub is obviously a super important tool for us, for our industry. And they've been releasing tons of cool features over the past couple of months. And one of the features I want to highlight today is their code navigation. So inside of it, what you could do now is, if you go to their, you click on a file and you go to a code view, you can essentially, click on functions, and you can see things like, where was it referenced, and where the definition of the function was. And so you can imagine if I had one super huge code file that I have open, and I'm just looking at in the default browser inside of github.com. It makes it so much easier now for me to jump, and see, where was that defined, and whatever the case is. And so now navigation within the browser is super easy.
 
00:17:32 KENNEDY: That click and go to definition is so cool, because it'll even go cross file I think, within a repo. It's pretty killer.
 
00:17:39 PHILLIP: It's really cool. And not only it supports Python, obviously, but it supports tons of other languages. I think it supports Go it supports JavaScript, Ruby, PHP, again there's tons of language support, right. But obviously, we're going to be a little bit biased and we're going to make sure we try out the Python support inside of there.
 
00:17:55 KENNEDY: Yeah, that's right. We tried it out, I even linked to a file where we know that it works, from one of my courses. So this last one I want to talk about, it's going to sound like a joke, but I really mean it as a legitimate thing. I got a joke for you later. This thing I want to highlight is called lolcommits, like laugh-out-loud commits. And the subtitle is selfies for software developers. So the idea is you install this thing. And whenever you do Git commit, it will take the Git commit message, it will take a screenshot or take a shot of you with your webcam. And then it'll generate a meme looking picture, with your commit message on there. So it will give you this crazy, you can make a face like you're happy or sad. Did it work out? Did it not? Are you fixing a bug? Is it a fun new feature? So you can do this really cool, sort of meme looking picture here, and then you can get plugins for Slack and Twitter, and stuff, and you're post these pictures back up to, say your team Slack so someone not just knows there's a commit but they can see how you felt about it. They can see the message. What do you guys think about this?
 
00:18:59 PHILLIP: I don't know how I'd never heard about this until you mentioned it, but this is the coolest thing ever. This is going to make committing code so much fun.
 
00:19:06 KENNEDY: I know I'm going to pay so much attention to the Git commit message now
 
00:19:09 PHILLIP: You're just going to be committing, all day every day. And I'm like, "I got to get this committed. I got to get this committed." But I think this is super cool, man. I definitely want to try this out.
 
00:19:16 KENNEDY: Yeah, it looks pretty fun. It's very understated. It describes itself as being the single most useful piece of software known to mankind and stuff. But in all seriousness, it's fun. It talks about a lol repository, where you commit these, of you can create animated gifts of your commits over time, and all sorts of weirdness. So it's pretty fun. I just thought maybe this will make working in teams a little more fun. Dan what do you think?
 
00:19:42 BADER: I think this is awesome. Just looking at the website there. You apparently can have little, you can write your own plugins, or there's different filter options, so you can get a unique style for your commits. I'm wondering if, how frustrating this could be, if you're accidentally maybe lol committing something where, I don't know, if you're waking up in the middle of the night. Just got to get some code out and maybe sitting there, not really dressed yet or whatever. Okay, I'm not going to go into details of how I like to work, but it is great.
 
00:20:13 KENNEDY: Yeah, it's pretty funny. But yeah, it seems like it actually could foster a little bit of team humor, but also connection. Right, rather than just a dull commit log. Looks fun. That's it for our main items. Dan, anything else you just want to throw out there quick?
 
00:20:25 BADER: I would love to, I'm speaking of the latest release of Python 3.8, which just happened two weeks ago, I think, so at Real Python we've just released an article highlighting all the new features in Python 3.8, and going over all the nice and interesting new features that are in there, like the walrus assignment expressions, and also stuff like the syntax warning that's going to, it's a new type of warning that's going to tell you about maybe some cases where you're using the is comparison instead of the ==, and stuff like that, where previously we'd need a linter to highlight that, now actually Python is going to call you out on that stuff, which is pretty cool. And yeah, that's something we just published on Real Python. Geir Arne Hjelle did a fantastic job there. And I found that personally also very helpful just getting up to speed with the latest changes.
 
00:21:07 KENNEDY: Yeah, awesome. Your articles are great. Bookicles? We got to give them a proper name. They're a little bit longer.
 
00:21:13 BADER: Bookicle, yeah, I like that.
 
00:21:15 KENNEDY: Yeah, the course too. That's great. So very nice there. Cecil, anything for you? What are you up to these days?
 
00:21:20 PHILLIP: Sure, I definitely want to call out the weekly stream that we do. Me and my buddy Brian Clark do a very introductory learning Python stream, every Wednesday. It's at 11 am Eastern Standard Time. And essentially, we've just been going from the very bare-bones, all the way up to current different features of Python, and things like, what's a function, and what's a for loop, and some of those types of things. Again, we just try to be very beginner friendly. Try to be just open to everyone. But it's a really fun time, right? Because it's not just me and Brian going back and forth, talking to each other about Python. But we get tons of questions from the community. Tons of questions from folks inside of the stream.
 
00:21:57 KENNEDY: Yeah, super interactive, way more than even webcasts, or something like that, it's really cool.
 
00:22:00 PHILLIP: Yeah, super interactive. It's really cool when they ask a question like, "Oh, hey, what if I change this to this thing?" Or, "What if I remove this line?" Or "What if we try to do things a different way." We could do all of that on the stream, it gets recorded. And then now, not only are they learning from us teaching them, but we're also learning too, because now there's just all these different perspectives and scenarios that we're trying online.
 
00:22:21 KENNEDY: Have you heard about this library? Does it all together or whatever?
 
00:22:24 PHILLIP: Yeah, exactly.
 
00:22:24 KENNEDY: Awesome. So I'll definitely throw a link to that in the show notes. All right, last for me. The Python Software Foundation yearly survey is out. So this is the biggest survey that gives us a look inside the trends, and it's in partnership probably with JetBrains, it was last year, I don't know if it is this year, but I'm guessing that's the case. And they just do a super good analysis. And, yeah, please go fill it out, because it lets us know what the world's up to. We already did ours, so it's your turn now. Be sure to get to that. And also I want to announce a new course on Anvil. I don't know if you all are familiar to Anvil. Anvil is a web framework, but it's not like Flask or Django. Some people think, "Should I do Anvil, should I do a Flask, or Django? This is really different. If you've ever tried to build web apps, and you're like, "I don't want to do JavaScript, CSS is a nightmare, I don't really want to work with databases. All this deployment is a challenge. All that kind of stuff. I just wanted to Python." Maybe for an internal app or something cool like that for your company. This is a framework that will run in the cloud, it will let you write server side Python code, design the UI with a drag and drop widgety type thing, very much like ASP.NET Web Forms that's from actually way back in the day. And the big deal is the front-end runs Python in the browser, super well. It is ridiculously cool. You build a SPA, Single Page App, in Python which is actually kind of a dream. So check it out at talkpython.fm/anvil. The course is free and play around with it. I thought I just put this one out here for people to get exposure to the courses.
 
00:23:52 PHILLIP: That actually sounds pretty cool. Do you know if it's doing a web assembly thing or is it translating Python to?
 
00:23:57 KENNEDY: I had Meredith, the guy behind the show, and another guy on the show. And I'm so sorry, I forgot his name. On to Talk Python to talk about sculpt, they're using sculpt, which is a Javascript implementation of the interpreter. So it doesn't compile it to JavaScript. It has a JavaScript runtime that is like CPython, I believe. But it's not using web assembly. The reason it's not using web assembly is the interaction between the DOM and web assembly is actually very slow. And this is like a super chatty communication between the Python bits and the web UI. And it's actually slower in web assembly, until they can improve that, that cross web assembly DOM story. But it's prime for a good web assembly story, isn't it?
 
00:24:37 PHILLIP: It kind of feels like that's what it would be.
 
00:24:39 KENNEDY: It should be.
 
00:24:39 PHILLIP: But I guess I completely understand, right? Because you go from Python to JavaScript, and then JavaScript, to web assembly. Then there's this whole interpreter on top of an interpreter on top of interpreter thing that's going on.
 
00:24:51 KENNEDY: Yeah, and so if you have a fire and forget, something happens, a web assembly is fast and good, but if you're doing super quick back and forth between the DOM, apparently that's slow. All right, so last thing, time for a joke. Now I told you my lolcommits was legit. I got another lol for you, LOLCODE. So LOLCODE is this official language specification. Last time I checked, it was on level two, 1.2 No no, hold on, I think it's at a different level now. Anyway, it's an official language based on LOLCODE. So this meme's passing a little bit in time. But there's the lol cats with all the weird cat speak on the images, with a funny cat, like, Hi world, with H-A-I world, you know, and weird stuff. So this is a programming language derived out of that, and it's a joke, but you can literally run it. There's commands for getting started, you git clone repository, you C make it, and then you're ready to LOLCODE it. So I just want to call out a few things of the language features here, because they're pretty incredible. Yeah, we're on the spec 1.2 right now for the language. So if you have a comment, you'd have something like "I has a var" and then if you want to have a comment, you say, btw, by the way, var is null and untyped, things like that. It has some really funny error handling. So you have try-catch, but you don't say try and catch. You do the parts, and then the good part is "awesome thanks". And then the the catch part or the except part is "No, oh no!". Let's see, the ifs statements are pretty awesome. Like, "Oh, really? Yeah, really." And then, else if is "maybe", and then else is, "No way." But the best I think really has got to be the switch statement. So maybe a little not safe for work, but it's just letters so I'll just say them out. So if you want to do a switch statement, where maybe you have R, or Y, or G, or B, as colors, as strings. You could say caller wtf question mark Oh my god, quote R, and then you have your block, Oh my god, quote Y, then you have your block of code. And then the default case is O-M-G W-T-F. That's the default in the switch. So this is just such a crazy language. But the thing that is even more crazy, is somebody built the interpreter compiler for it.
 
00:27:06 PHILLIP: I think what's even crazier is that there's a spec here and as we're looking at this spec, we're literally scrolling, and scrolling, and scrolling. There is 507 lines of specification here that defines how this language even works.
 
00:27:20 BADER: I got to try this out, man. This is crazy.
 
00:27:21 KENNEDY: It's a joke, but you can, it's probably Turing complete as well.
 
00:27:24 BADER: Yeah, apparently this got started in 2007. And the latest update to the spec is from 2014. So it's super cool that this has been maintained and updated since then, so.
 
00:27:35 KENNEDY: How about that a practical joke for you all?
 
00:27:37 BADER: Yeah, is there a just in time compiler for that?
 
00:27:39 KENNEDY: Oh, yeah, I don't know. I actually don't even know what the performance looks for LOLCODE, but it's probably pretty funny.
 
00:27:45 BADER: Are you going to port talkpython.fm to that, to LOLCODE?
 
00:27:49 KENNEDY: Yeah, I'm thinking about rewriting the websites. And this is a real strong contender right now. Because I'd just be laughing every day. Like, it's a bug, but it's hilarious, look at it. All right guys. Well, thank you so much for being on the show. It's been really good to have you both here.
 
00:28:00 BADER: It's been great, thank you.
 
00:28:01 PHILLIP: Yeah, thank you, man, this has been awesome.
 
00:28:02 KENNEDY: Yeah, bye guys. Thank you for listening to Python Bytes, follow the show on Twitter via @pythonbytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
