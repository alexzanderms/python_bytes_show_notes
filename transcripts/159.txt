00:00:00 OKKEN: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 159, recorded November 26th, 2019. I'm Brian Okken.
 
00:00:12 KENNEDY: And I'm Michael Kennedy.
 
00:00:13 OKKEN: And this episode is brought to you by DigitalOcean. Thank you, DigitalOcean. More about them later. Michael, what are we talking about right away?
 
00:00:19 KENNEDY: You know, I'm a big fan of type annotations, and I don't know how I missed this one. I can't remember what I was reading. It was something we covered on the show recently, and it was talking about the final type annotation. I'm like, wait a minute, what, there's a final? As in, with object oriented programming, there's abstract methods, virtual methods that can be overwritten, protected types, and some of those things appear in Python. Abstract methods, for example. But others don't, such as protected or internal. Another thing that until very recently did not appear in Python is a final type saying this class cannot be overridden or this method cannot be overwritten in a type hierarchy. But now you can.
 
00:01:01 OKKEN: Oh, cool.
 
00:01:02 KENNEDY: And this actually already in Python 3.8, if I'm reading this right. So this is PEP 591, its status is accepted, and its Python version is 3.8. So I have not actually had a chance to test this out, but yeah, it looks like it's part of it, and because it has to do with typing, of course, Guido van Rossum is the BTFL delegate, which is kind of interesting. He's his own delegate, in a sense. But now that the steering council is there, it's a little bit different. But yeah, so, he was part of this, and it adds a final type. So I can see this class cannot be derived from, this method should not be overridden. And those sound pretty straightforward. But as far as I can tell from the use cases they put in the PEP, it's something that is very, very close to a constant value, as well.
 
00:01:50 OKKEN: What do you mean?
 
00:01:51 KENNEDY: So, one of the things I can do is I can put an @final decorator on a class, and if I try to derive from it, the type checker will give me an error saying you cannot derive, you cannot inherit from final class, whatever, right? If I put it on a method and then I try to have a derived class that replaces that method, effectively, implicitly overriding it, I'll get an error that says cannot overwrite final method foo, whatever, right? It was first defined. But I can also say that there's a variable called rate, which is final, and it equals 3,000. And if I try to set it to another value, like rate equals 300, the type checker will give me an error, say, cannot assign to a final attribute. Or I can go to a class and I can put that on a field, and if I try to change the field, like if I have a class called Base, and it has a default_id, if I say base.default_id equals something other than what it was initially set to, error, cannot override final attribute. So the error doesn't say this is a constant value, you cannot do this, but it's like a constant.
 
00:02:48 OKKEN: Yeah. Okay, that's nice.
 
00:02:51 KENNEDY: It's interesting, right?
 
00:02:51 OKKEN: Well, I guess it totally makes sense, because overriding a, like, deriving from a class or something is kind of similar.
 
00:02:59 KENNEDY: You're certainly changing the name. Like, the redefining the method in a base class is like replacing the name of it, and so the implementation seems to just catch straight-up attributes, as well, just probably with not much extra work, if any. Yeah, so this is all the stuff that I'm telling you. This is all type checker magic. This is not real, right? This is not runtime behavior.
 
00:03:24 OKKEN: Right.
 
00:03:25 KENNEDY: But I suspect that tooling like PyCharm, for example, if you tried to set that, it would turn it yellowish and say warning, this is a problem here. And already if your editor tells you not to do it, or continuous integration maybe checks these things, I think you're in a pretty good place.
 
00:03:41 OKKEN: And I think that more and more we're going to see as the years come on that people's workflow is just going to include type checkers with their code as a, with large projects, at least.
 
00:03:52 KENNEDY: Yeah, at least with large projects. I agree. Cool, well, I'm pretty excited about this. I was really surprised to see that was in 3.8, but I'm happy to spread the news about PEP 591. How about you? You've got some numbers that are incrementing, as well, huh?
 
00:04:05 OKKEN: Yes, so Flit. Remember we talked about packaging?
 
00:04:11 KENNEDY: No, I don't think we have enough. Not enough. Let's keep going.
 
00:04:15 OKKEN: I'm almost positive we've covered Flit before.
 
00:04:17 KENNEDY: Yeah, we certainly discussed it, if not made it a pure topic. We've definitely talked about it.
 
00:04:21 OKKEN: Right, so one of the beefs I had with Flit, which was just a minor thing. So Flit makes it easy so that you can, like, super easy. So if you've got some code you want to share with somebody, you just install Flit and say Flit init, and essentially it does the right thing to create a package for you. You don't have to read up on setup tools or anything. It just kind of works.
 
00:04:42 KENNEDY: Oh, that's interesting. It's like npm init, sort of.
 
00:04:45 OKKEN: Okay, I don't know what that is, but I'll believe you.
 
00:04:47 KENNEDY: That creates a Java, an npm package, yeah, yeah.
 
00:04:50 OKKEN: The news right now is Flit 2 is here. So when initially playing with Flit, I noticed a little, a lot of quirks with it. So you, for instance, you couldn't use a source directory to put your source code in. Your package needed to be a top level directory or just a module. That was actually a pull request that I did to try to get the source directory added to Flit, and now it's in, so it's in 2. But also with...
 
00:05:15 KENNEDY: Sweet, that's awesome.
 
00:05:15 OKKEN: Yeah. So when playing with it now, also, it used to be that it really assumed you were going to be in a git repository. That's fine except for when you're just playing with stuff, sometimes you're not. You're just trying...
 
00:05:28 KENNEDY: Yeah, you just, I want to just try this out. I'm not committed yet to this even working. Let's just see what happens, right?
 
00:05:32 OKKEN: Right. Flit now does work without if you're not in a git, it determines what files to include in a package with git stuff, with what's in git and what's not in git, and I don't know how it works when you're not in a git repo, but right now, it does work if you're just playing around, if you don't have anything checked in, it still works, and that's pretty handy. I mean, I definitely want everybody to use version control, but if you're just trying this out, you can now, and it's really cool. And there's a whole bunch of improvements. We're just, I'm linking to the release notes or the history. It's just sort of, if you've tried it before and were frustrated, try it again. The caveats I'd like to say is this kind of a lightweight packaging system, it does not work for compiled code. So it's not built yet to deal with compiled parts of it.
 
00:06:22 KENNEDY: Right, if I had, like, some Cython bits or something, doesn't deal with that.
 
00:06:25 OKKEN: It doesn't. And then there's a couple other reasons why you might not want to use this, but for I think the 80% case where people are just trying to share some Python code with each other, this is the way to go.
 
00:06:37 KENNEDY: Okay, that sounds super cool.
 
00:06:39 OKKEN: Yeah, one of the other things that I love in the second version is your email address is optional now. It used to be required, but you're not required to put an email address in PyPI, so why require it for these tools?
 
00:06:54 KENNEDY: Yeah, that makes a lot of sense.
 
00:06:56 OKKEN: Yay, so now my big beef with Flit, not SpringSource, is, I'm done with that beef.
 
00:07:01 KENNEDY: You know what, this is a super cool example, as well, right? Like, it's one thing to just complain and say, you know what, this thing is crappy or it doesn't work the way I want or something. It's another to say and I'll help to make a difference, right? So the reason it's supported is your PR was merged in, right? That's awesome.
 
00:07:20 OKKEN: Yeah, and it also, it doesn't add any, I didn't add any flags, didn't add anything. It's just within the init part of it. It detects that your code is in a source directory and it just uses that, so.
 
00:07:31 KENNEDY: Yeah, super. Nice work. You know what else is cool? DigitalOcean.
 
00:07:34 OKKEN: DigitalOcean is very cool. DigitalOcean is making Kubernetes easier with their DigitalOcean container registry and one-click apps. After building your app into Docker containers, you'll often want to store container images in a centralized location called a container registry. From there, you can pull images into a Kubernetes cluster or a VM, whether it's a development, testing, staging, or production environment. While you can post your containers images into the open internet freely using services like Docker Hub, clearly you don't want to do that with confidential software or your own private stuff. So DigitalOcean introduced a new managed service called DigitalOcean Container Registry, and it's now available in early access mode. So DigitalOcean Container Registry is simple, private, secure, and fast, and you can get started using it by going to pythonbytes.fm/digitalocean.
 
00:08:34 KENNEDY: Cool. I feel like this next item that I want us to talk about, I feel like we talked about it before, but I went back and I searched and I couldn't find anything about it. So if we covered it, like, three years ago, we're going to cover it again. Nonetheless, it deserves to be covered because it's really cool. This comes to us from Andrew Simon, and it's called Pint. So how many cups is in a pint, or do pints go into cups? Is there, how many gallons go in there, and if I had to convert that to liters or milligrams, what would, I don't know. All these questions are completely unknown to me without some charge in a calculator or Google, and I suspect they are to a lot of folks. Mixing some form of units, even if they're in the same system like meters and millimeters, can be tricky, right? So this Pint thing, its job is to basically apply units to numbers and calculations in Python. Okay, so I'm sure you took physics, and in physics, or maybe chemistry, your professor would tell you, you cannot just tell me the number is seven. You have to say seven what? You have to put units on this number or this number doesn't really tell us what the answer is or what we're working with, right? And so Pint lets you do that, and it has all these different types of measurements. It has energy and joules and it has distance and weight and all these different types of things. Even wavelength. It'll help you convert wavelength types of measurements and stuff. So if you've got some numbers you need to add together, like, for example, it's super easy to add two meters and five inches and get the right answer in the units that you want.
 
00:10:14 OKKEN: Oh, that's cool.
 
00:10:15 KENNEDY: Yeah, super cool, right? So I'm linking to basically a Python document that has a TXT ending on GitHub, so read that however you want when you get to it. It's a little unformatted. But it shows you all the different units and types of units that you can work with, right? It knows what a decigram or a decimeter is and all those different types of things. So I just want to share a cool, it's on the home page there that talks, on the Pint read the docs. So it talks about the Mars climate orbiter, and it said the MCO has determined, this is an orbiter that went around Mars until it didn't go around Mars anymore and it hit Mars, I believe. It met Mars in an unfortunate way. And it said the MCO mission investigation board, MIB, I'm guessing that's what that stands for, has determined the root cause for the loss of the MCO spacecraft was a failure to use metric units in the coding of the crowned software file small forces used in trajectory models. Specifically, the thruster performance data in English units instead of metric units was used in the software application titled sm_forces, hence, orbiter meet planet. So, yeah. You know, this is not the type of code I write a lot, so it's not directly useful for me, but I've studied science a bunch, and it seems if it is the kind of code you write, it's very simple and very powerful.
 
00:11:41 OKKEN: Yeah, one of the things I like about it is it's not that the unit's separate so that you can look these up. It stores the values. It just has values with units associated with it, and so you can pass 'em around and use 'em in other places and all the math operators work on it, and it's, I mean, if you really want, I mean, you kind of have to know the units anyway. But one other way to do that people often use is suffixing variable names with what the units are, but then that, there's nothing telling the software that it has to comply with that. It's just convention at that point. But, so if you're, especially with mission-critical stuff, I think this is a really great idea.
 
00:12:21 KENNEDY: Absolutely. So the way you would create, like, three meters is you would create an instance of a unit registry and you would just take the number three times meter. And now it's a three-meter quantity. So they override what the multiplication thing means, and yeah, it's pretty cool. That's clear.
 
00:12:38 OKKEN: You can add different units together, like meters and centimeters together, and it just works right, and it's great.
 
00:12:43 KENNEDY: Yeah, nice and simple. Speaking of simple.
 
00:12:46 OKKEN: I got to say that the unit thing that you looked at, you linked to, it has, I didn't know this, that yotta is one times 10 to the 24th. So yada yada yada is a really big number.
 
00:12:59 KENNEDY: I had no idea. That's a huge number. How interesting. What a cool piece of trivia. Okay, speaking about a bunch of numbers and great things.
 
00:13:06 OKKEN: We're going to take a look at some pytest plugins. So Jeff Triplett wrote an article called "Eight Great Pytest Plugins," and there was even some fun stuff for me. I'll just list 'em quickly. There's a couple that I'll highlight. So pytest-sugar.
 
00:13:22 KENNEDY: So sweet.
 
00:13:23 OKKEN: Yeah. It's just a fun one that changes the output. But it isn't just fun. It changes the output so it looks kind of nice. You get green check marks and stuff instead of the dots.
 
00:13:34 KENNEDY: Adds a progress bar, yeah. Progress bars are good.
 
00:13:35 OKKEN: Yeah, progress bar. But it also shows failing tests instantly instead of waiting to the end or something, so that's nice. It's cool. Pytest-cov hooks into the coverage so that you can more succinctly check your coverage on your code using pytest. I use that. It works great. The next one I want to, which I hadn't heard of before, is called pytest-picked, and this is a brilliant idea. So if you've ran your pytest code, you think your stuff is good, but what this one does is you're working on your code, and if you're using git, you've got modified and unstaged and uncommitted code within your repo. That's the stuff that probably the new bugs are in. So what pytest-picked does is it only, it tests files that, it runs tests that use the files that have been changed since your last commit.
 
00:14:30 KENNEDY: That is super cool. And it probably runs your test code that have been changed since your last commit, but what I would love to see, and maybe it does this. You tell me if you know. Is if it would look at the coverage data and it would rerun the tests that were covered by your tests, the files that were covered by your tests but then changed, it would rerun those tests that covered it.
 
00:14:53 OKKEN: Oh, did I get it wrong? Does it just run...
 
00:14:55 KENNEDY: I think it just straight up runs the files, is just like if your tests have changed. Yeah, I'm pretty sure.
 
00:15:03 OKKEN: It says, the tagline is runs the test related to the unstaged files, so, not sure.
 
00:15:11 KENNEDY: Yeah, yeah, not sure.
 
00:15:12 OKKEN: I'll have to try that one out and report back next week.
 
00:15:13 KENNEDY: Yeah, yeah, we definitely got to try that. My first impression from looking at it is it runs the tests that were changed, not the code that was changed covered by the test, but yeah, we'll report back. Both good.
 
00:15:25 OKKEN: Both of them are interesting, yeah.
 
00:15:26 KENNEDY: They're both very interesting, yes. They're, like, already, I think it is a super cool idea and I love it. If it does the second thing I said, then I'll love it even more.
 
00:15:40 OKKEN: Yeah, okay. The next one is pytest-instafail. It modifies the default output so that failures show up immediately. Right now if you run pytest, if you just run it with no options, you get a bunch of dots for all your passes. You will see the F for the fails, but you don't get the output right away, like, what the traceback is. And so if you really want to start debugging before your test suite is done, instafail might be the thing for you to show your failures right away, the details of your failures. Now, for people that really think that pytest is already giving you too much information, pytest-tldr is hilarious, but it's actually quite useful, and it will kind of remove some of the stuff from the pytest output, some of the boilerplate that comes at the top and bottom, and also just kind of reduces the output. It's kind of nice. And this is by freakboy. Kenneth, I'm going to get this wrong.
 
00:16:29 KENNEDY: Keith Russell-Magee.
 
00:16:30 OKKEN: Yeah, that's it. Now, the next one is pytest-xdist. A lot of people think of the xdist as the way to run all your tests in parallel. You can run 'em on multiple processors. The surprising thing is that you can also run 'em on not just multiple processors, but multiple instruments or multiple machines. You can have them spawn into other computers to run tests, which is really cool. But you can also do things like loop on fail, and just perpetually, you can just have this thing just keep running, so that's pretty cool.
 
00:17:01 KENNEDY: That is cool. Just periodically just say tried it, tried it, tried it, till it turns green?
 
00:17:04 OKKEN: Yeah, especially when you're, if you're actively working on a fix, why not just have that pop up whenever, when done?
 
00:17:12 KENNEDY: Nice.
 
00:17:13 OKKEN: The last two are pytest-django and django-test-plus are both things that will help you if you're testing Django, which is not surprising that this came from Jeff Triplett 'cause he's a Django guy, so.
 
00:17:26 KENNEDY: Yeah, very cool. I like these. Although I feel like you cheated, Brian. You were supposed to cover, like, six things each show, and here you've covered eight. Eight great pytest plugins. Come on, like, who would do that?
 
00:17:36 OKKEN: Oh, you know, I told you I was sucker for linkbait articles, so. Listicles.
 
00:17:40 KENNEDY: Yeah, for sure. Well, the next one I have is 11 new web frameworks.
 
00:17:44 OKKEN: Oh, you're giving me a bad time.
 
00:17:44 KENNEDY: Not for long, though. No, I think it's great. It's cool to touch on a bunch of those little things real quickly. Now, people know that I do a bunch of web development and I'm a fan of web frameworks, and for a long time we had kind of the mainstays, Flask, Django, and so on. But recently, and I feel like two things, both the type hints and the async capable ASGI servers, those two things have created just, like, a blossoming of all these different types, 'cause they're like, well, if we got to rewrite it so that it supports async and await, we're going to rewrite it so I can use type hints to grab stuff out of the query string. Let's just go crazy and create all these new frameworks. And, well, 11 new ones is what we get. Actually more than that, 'cause there's some that are not listed. Some we've spoken about, some we haven't spoken about but I've heard of, and some I've not even heard of. So it's pretty cool. I'll just go down the list really quick. One of the things that's interesting if you look at a lot of these frameworks, a lot of them are Flask-inspired. Like, you know, you create an app and then you do app dot, you know, decorated app.route to define it and stuff like that. A lot of them have adopted the Flask API without actually being Flask or coming from Flask. So, anyway, so the number one is Sanic, which is a web server framework meant to go fast, and this one is mostly focused around enabling async and await. That's pretty cool. Probably the most widely used, at least in terms of other projects, for the ASGI, the async type frameworks, is Starlette. So Starlette is cool. Comes from, I believe, Tom Christie and folks who are involved with the Django REST framework. And it's a lightweight ASGI framework, which is great for high-performance async and await services, and you can either use it as its own web framework or it's interesting as a foundation. For example, Responder is built atop it. I believe FastAPI may be, as well.
 
00:19:41 OKKEN: Yeah, I think so.
 
00:19:41 KENNEDY: Yeah. So there's a bunch of things that are derived from it. That's pretty cool. Both those first two are Flask-like. Masonite, I had Joseph from the Masonite team on Talk Python not long ago, and it's interesting. This is not an async and await framework. It's like a standard framework like Flask or Django, at least at the moment. But what makes it unique is it has this command line tool that lets you do things to the project called craft. So the craft CLI is what makes this kind of unique.
 
00:20:11 OKKEN: That was a really good episode with that interview, and I liked the example of somebody bringing in good ideas from other languages and helping out the Python community with that.
 
00:20:22 KENNEDY: Yeah, thanks. I agree. It was definitely fun to talk to Joseph. So, for example, with a lot of these projects, you create the project and then you're on your own, right? Say, okay, well, I use maybe cookiecutter or some other technique to create the project, and now I've got to write every little bit. But with Masonite, you can actually go and say now add this model or go add these other things, and it'll continue to let you evolve it using these sort of starter cookiecutter type things. So that's cool. FastAPI. If I was building an API these days, I would definitely, definitely look at this. Fast, modern framework for building APIs with Python 3.6 based on type hints. That's cool. Responder. This is from Kenneth Reitz. It's based on Starlette, and its primary reason for existing is to bring the niceties both from Flask and Falcon over into a single frameowrk. That's cool. Molten, which is a minimal, extensible, fast framework for building HTTP APIs with Python, and it's sort of magic. One of its magic things is it can automatically validate requests according to schemas. So you're building an API, it takes a JSON document, it can validate that by saying this is what this method takes. It takes an integer and it has this thing in the JSON document and so on. It's pretty cool. Japronto, another one of the async and await frameworks. This one's based on uvloop and picohttpparser, so it's super, super fast. Like, basically its foundation is all C. Klein, have you ever heard of Klein?
 
00:21:51 OKKEN: No.
 
00:21:51 KENNEDY: Me either. But apparently it's a micro-framework for Python, and it's incredibly, it's got an incredibly small API like Bottle or Flask. Speaking of Flask, there's Quart. This is the one that's closest to Flask because it is literally a superset of Flask. It's so compatible that it even takes Flask extensions and just runs those. But the difference here is it adds async and await to Flask. So if you have a Flask app, you do a find and replace the word Flask with Quart, and now you can use async and await in Flask.
 
00:22:21 OKKEN: That's pretty cool.
 
00:22:21 KENNEDY: That's cool. BlackSheep, we talked a little bit about that. This one is inspired by Flask and ASP.NET Core. One of its bits of magic is it automatically supports binding request values into variables, either by convention or type annotation. So I could have a view method, and it takes a username and it takes a product ID, and I could put a little decorator that says the username comes from, I don't know, a cookie or something, and the product ID comes from the query string, and it'll automatically go and pull those all together and just pass those arguments. That's pretty cool. And finally, wrap this up, is Cyclone, another one I have never heard of, but it's a framework that implements the Tornado API and the Twisted protocol to bridge Tornado's elegant API and Twisted's event loop enabling. A vast number of protocols, so very, very cool. Yeah, so unlike my list, you should not use all of these at once. No. Yeah, your list would be great. If you tried to use all these at once, yeah, you're just going to mess things up. It's not good. Like, pick one or maybe two. Maybe if you have APIs and you've got a web framework, but you probably don't even need to do that. Just pick one. Or you could end up with crashes and exceptions, all sorts of error messages.
 
00:23:36 OKKEN: Yeah, and one of the things, there's an application I'm thinking of doing that I assumed I would, I don't want to go crazy with the micro-architecture, or what are those things called, the...
 
00:23:47 KENNEDY: Micro-frameworks?
 
00:23:48 OKKEN: Not micro-frameworks, but the, a whole bunch of micro-services, that's it.
 
00:23:53 KENNEDY: Oh, yes, mm-hmm.
 
00:23:53 OKKEN: However, things like FastAPI and stuff make it so easy to write the API part that I am thinking about doing a two-level thing of doing a FastAPI and then a web interface based on that. It's just two services.
 
00:24:10 KENNEDY: It seems totally reasonable, yeah. It seems fine. And with Nginx and stuff, you could put it under the same domain and just put proxies to different parts of your app based on /api or not /api. Be real easy.
 
00:24:21 OKKEN: Oh, cool.
 
00:24:23 KENNEDY: So the deployment's really easy.
 
00:24:24 OKKEN: Well, it's a good thing I have friends like you, yeah.
 
00:24:26 KENNEDY: Yeah, that's right. Happy to help. So next up, I want to talk about exceptions. Like, I am exceptional and you're exceptional. We're all exceptional. Everyone's special. We're all snowflakes.
 
00:24:36 OKKEN: Yes. This is a nice article that just came out this November called "Raise Better Exceptions in Python." So this is just sort of a, I guess kind of like a public service announcement? Actually kind of a nice article, though, about when you're raising exceptions, it's, you know, you throw an assert in sometimes to be like, I should really never get here. But exceptions are not really unexpected things. They're, they should be, your software should handle it. It's really bad if your software's not handling exceptions at the top level. However, often exceptions will happen if you're raising from a try, you try some stuff, you grab a value error or something, and then you raise a more meaningful exception. That's a pattern that's often used. The article's really pointing at just don't put f-strings with value stuff within your, just all within one string as a value error, or any sort of, don't just try to bundle it all together. The point is most exceptions, unless you've mucked something up in the init, most exceptions take a unlimited number of parameters. So if you want to raise an exception with a whole bunch of values for your exception handler to be able to introspect and use, just put them in more parameters in the list of the constructor to the exception.
 
00:26:03 KENNEDY: That's super cool, and honestly, I didn't know about this. This is great, because, so the example is, if I raise a value error and the message is the value is too small, it's like, okay, great, so now what? Maybe you can't even get back to what the value was because of the way it got passed around or it wasn't in a variable. So what, can you report on that value? Could you log the value, whatever, right? But if you can just say here's the message, comma, thing one, thing two, thing three, thing four, and it just appears in the exception.args later and you can deal with it in your catch clause. That's great.
 
00:26:37 OKKEN: Right, and some people will realize that, but not realizing that you can put 'em as parameters, but realize that you want to know the value, so they'll try to put the value in a string, but that depends on the __repr__ function or the __str__ function being valid, and maybe that's the thing that blew up in the first place, so, yeah.
 
00:26:57 KENNEDY: Exactly. It's simple, but it's going to be really handy, yeah. Love it. Alright, well, that's it for our main items. You got anything extra you want to chat about quick?
 
00:27:06 OKKEN: Yeah, I did. It showed up on your list, but I'm going to bring it up anyway.
 
00:27:10 KENNEDY: So I was reading around on realpython.com, and I came across this thing. This, I don't know, there was this guy who was being interviewed. It was at a Python community interview with Brian Okken.
 
00:27:20 OKKEN: Yeah, I did that thing, so.
 
00:27:22 KENNEDY: Awesome, that's cool. Yeah, so if people want to learn more about you, they can go check out this interview on Real Python, right?
 
00:27:27 OKKEN: One of my favorite questions and answers is the question of how did you get into testing? And really, I never did. I've always been a software engineer. So that was a fun question and answer.
 
00:27:39 KENNEDY: That's cool.
 
00:27:39 OKKEN: Anything else?
 
00:27:41 KENNEDY: Yeah, I got a few more things I want to talk about. One of them comes from Brett Cannon, sort of. It also had you appearing on this little list of mine that I've got. So Brett Cannon put out a poll, and the poll said if you typically keep your virtual environment locally with your code, as I do, so at the top level of your project folder, what do you call it? Is it venv, is it .env, is it .venv, is it something else, and so on. And that's pretty interesting. You can see the polls. Straight up no-dot venv is what came up the most, and that's what I've migrated towards these days, mostly 'cause some of the tooling works better than the hidden ones or .env. But you've got some replies here and all sorts of stuff. But the one that caught my eye the most, and I think maybe you comment on it, was from Brian here, as in Brian Skin, and he said, "I actually use the ability to change the prompt name." right? So normally when you activate that virtual environment, it would just say parenthese venv, and you're like, okay, super. So something somewhere in my entire computer is different about Python, and, but which, right? But if you do --prompt equals, you can give it a name so that when you activate it it says, you know, like, Python Bytes web app, or whatever it is you want.
 
00:29:03 OKKEN: Yeah, I always use that.
 
00:29:04 KENNEDY: You do? That's cool.
 
00:29:05 OKKEN: Yeah. Because otherwise all my virtual environments are named venv, and that's boring.
 
00:29:09 KENNEDY: That's quite boring. So yeah, it's pretty cool. And you can even pair that with the read command and then take the, so when you create the virtual environment, you can set up a script that'll ask, "What do you want your prompt to be called?" And then it'll just put it into the virtual environment so when it activates, it converts it over to that, which is pretty cool.
 
00:29:26 OKKEN: So my request is, I haven't actually requested this yet, but I would like it to be the name of the directory that the virtual environment is in, not the venv one, but the parent directory.
 
00:29:38 KENNEDY: Yes, that would actually almost always be the right answer, wouldn't it?
 
00:29:41 OKKEN: Yeah, it's usually my project name. That's what I want to know. So that's what I'd like. And then Al Sweigart said, "I use venv." Al said he uses .venv for the reason that you shouldn't muck with it. It's just there, but you shouldn't change it. And I'm frustrated that he's right, and I think I'm going to try using it with a dot from now on, or for at least a little while and see what I think.
 
00:30:07 KENNEDY: Yeah, the reason I like not having the dot is that when I'm in the finder, if I go over there, I could see, okay, this one already has a virtual environment set up. I haven't been on this project. It was in GitHub. It's been, like, six months. I come back to it, like, do I need to create a virtual environment or is there already one here I just go activate, so.
 
00:30:24 OKKEN: In Finder?
 
00:30:25 KENNEDY: You can't see the dot files? No, it hides 'em. That's hidden.
 
00:30:28 OKKEN: Oh. I guess I use command line more than anything else, so.
 
00:30:31 KENNEDY: Yeah, yeah. So if you want to see them in Finder, you have to go into the dot folder and then you can say open dot or open that folder, and then it'll be half grayed out in Finder. But if you just browse to a project, you won't know whether or not it has a virtual environment if it's a dot something. Anyway, it's not a huge benefit, but that's why I kind of stopped using the dot, which I had been before.
 
00:30:51 OKKEN: So for the subset of people that are on Macs but don't like command line.
 
00:30:59 KENNEDY: I also like the command line, but I don't exclusively use it, right?
 
00:31:02 OKKEN: Okay, okay, all right.
 
00:31:03 KENNEDY: Yeah, anyway, this is a whole long discussion about this, and I thought it was actually pretty interesting, all the threads there, yeah. Pretty cool. All right, last thing. I told you about a new course last time, right? Well, since then I wrote another course and recorded it, and I think this one's going to be really fun for people, as well. I wanted to write a course for people who are team leads, who are decision-makers at their company and they're trying to decide, or they're working with their team to decide should we adopt Python or is Python the right thing for this project or not. So I wrote a course called Python for Decision-Makers and Business Leaders. If you need ammunition to help sell Python in your organization or if you want to know maybe when it's not the best choice, this talks through all those things, and it also looks at the job market and hiring developers and all kinds of random stuff that I think those groups would care about. So anyway, another course is coming shortly.
 
00:31:54 OKKEN: That's really cool.
 
00:31:54 KENNEDY: Yeah, thanks.
 
00:31:56 OKKEN: I might want to do a alternate course of Python for Indecisive Cogs.
 
00:32:03 KENNEDY: You might want to work on the name. We might not, like, a try, like, you know what, I am an indecisive cog, I will.
 
00:32:10 OKKEN: Maybe.
 
00:32:10 KENNEDY: Yeah, yeah, maybe, maybe. Anyway, it was a lot of fun to put together and it'll be out pretty soon.
 
00:32:15 OKKEN: Okay. You got a joke for us?
 
00:32:17 KENNEDY: I got something for you. You can tell me whether it's a joke. So this comes to us from Daniel Pope. He didn't send it in. I just found it on the internet and it was his joke, so I'm going to, at least it came through him, so I'm going to share it. This one is about farm implements. Okay? What is a tractor's least favorite programming language?
 
00:32:34 OKKEN: I dunno, what?
 
00:32:34 KENNEDY: Rust. That's bad, right?
 
00:32:39 OKKEN: That's definitely a groaner, yeah. But that reminds me, so how do you tell when a joke is a bad joke? When it's fully groan.
 
00:32:47 KENNEDY: Oh, that's a good one. I like it.
 
00:32:50 OKKEN: Thanks a lot.
 
00:32:50 KENNEDY: Yeah, yeah. Thanks for being here, Brian, it's fun.
 
00:32:52 OKKEN: Bye.
 
00:32:52 KENNEDY: Yeah, bye. Thank you for listening to Python Bytes. Follow the show on Twitter @PythonBytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
