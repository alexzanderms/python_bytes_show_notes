00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 161 recorded December 12th, 2019. I'm Michael Kennedy and Brian Okken is not here today. Instead, we have a very special guest, Anthony Herbert. Welcome Anthony.
 
00:00:16 HERBERT: It's nice to be here, thanks for having me.
 
00:00:17 KENNEDY: Yeah, it's great to have you here. You're doing all sorts of cool stuff in the Python space and I'm looking forward to sharing some of the week's news with you. I also want to say thank you to Digital Ocean. They're sponsoring this episode, as they have many, many of them, so check them out at pythonbytes.fm/digitalocean and get a $50 credit for new users. Anthony, people might know you from your website Pretty Printed. You do a lot of stuff with Flask and things like that, right? Yeah, cool, so people who have checked that out, that's the same Anthony. And you're here with a bit of a contrarian story on getting stuff solved, right, and I actually really subscribe to this idea as well about using crappy code when it makes sense. Tell us about it.
 
00:00:57 HERBERT: This is from a talk by Larry Hastings. It's called, "Solve Your Problem with Sloppy Python." And in this talk, he basically advocates solving personal problems with sloppy Python, not problems that you would have at work because that would be a huge issue. So in the talk, he gives three or four examples of how he solves problems that he has encountered in his everyday life, and three of the four have to do with string manipulation, so renaming files, and I think that's something that everyone has had to deal with at some point. I know I have to deal with it all the time. And another example is a script that he uses to install all the packages after reinstalling an operating system. So instead of going through and trying to install each package individually, what he does is he just writes a script and it installs everything that he uses, so Sublime, Chrome and even the latest versions of Python. And as an example of some of this sloppy code that he has, when he goes to install the latest versions of Python, all he does is he goes to python.org and he scrapes the latest version of Python there. So he gets the version number, then he can go and download the source for that, build the source, and then he has the latest version of Python installed without him having to actually do anything.
 
00:02:08 KENNEDY: Yeah, I didn't catch that he actually was using that to build from source, that's pretty funny, yeah. But he's doing a lot of cool stuff and I like this message. Like I said, I kind of subscribe to it. It's, there are times that you should put tons of energy into structuring beautiful code that's very maintainable and very abstracted, and, like you mentioned Anthony, when you are doing this on a team, if you create crappy code your team members are not going to like you. They're gonna be like ah man, I don't want to go work on that part of the code because, you know, it's always like, there's like two features and three bugs seems to be the ratio or something like that, right? But there's all these little things that, you know, like, you don't need to do a lot of error handling. You're just gonna run it and it just needs to do this thing and you're the one person looking at it, and if it doesn't work it's going to be obvious. You'll get a big stack trace or trace back, something like that right? The reason I like it is it allows people to say instead of spending a lot of work on building something fancy to solve my problem, I can spend 10 minutes and solve it for the rest of my life, right?
 
00:03:05 HERBERT: Right.
 
00:03:06 KENNEDY: Do you have situations in your world where you do that?
 
00:03:08 HERBERT: I have to move files around all the time and what seems to happen is like I start to do it and I feel a bit stubborn at times, so I just continue doing it manually, and then when I'm done I realize, you know, oh I could have written a script for that. So, what this talk basically reminds me to do is think about automating at first and do as much as I can in code and then minimize the manual parts. Like, there was something I did recently where I had to cut out pieces of audio files, like starting at a certain timestamp and ending at a timestamp, and I had to do that for about 30 files and it took me a couple of hours to do this and Audacity has the ability to be controlled by a Python script so perhaps I could have written a script to do that for me automatically instead of sitting at my computer messing with audio files for a couple of hours.
 
00:03:51 KENNEDY: Yeah and you know, you can do that for a few hours, but eventually at some point you're like, this is really hard. And in my own world I've had a lot of these experiences where I get to the point where I'm like maybe I should hire someone to do this, and then like, wait, wait, wait. I bet I could do this in Python, yeah, and then two hours later it's automated. I'm like why was ever thinking that? What a fool. So I threw out some examples onto the show notes of stuff that I was doing as well. So there's a bunch of little things that just make my life so much easier. If I export course sale data, I use Stripe. I gotta get it out of their format as an Excel CSV and then I got to convert it to something else that I process and filter and so on. And I was doing that by hand for years and why am I always go into the sheet, deleting these columns, copying this stuff over there, and I just wrote a Python script now it's one line of command line call, runs a Python script and it transforms my stuff into something I can just paste into the right, you know, sheet, a Google Sheet, or a calculation place. Another one is I always have like titles and stuff that I want to make into file names or folder names, you know, think the title of this show or the name of a video lecture in a course. I'm gonna take the title and make the file name that. So I wrote this thing called URLify, and it was like 20 lines of code because I was sick of lowercasing and putting dashes for spaces, taking away the dots, you know, taking away the punctuation, and I put that in as a just people can have it. I do tons of reporting this way. The deployment on my server I turned that into a script that I can use with Python, sort of, it does a bunch of stuff with actually async and await in there, which is pretty cool. Importing information from video files, because I don't want to go there and copy, like it's this long and its name is this, so now I can just point it to the directory and then just rip that out of there or same thing for duration of audio files. There's all these cool little things that were nagging me that I had to do all the time and I'm just like, you know what, this is getting some Python on it.
 
00:05:47 HERBERT: Yeah, sounds good.
 
00:05:48 KENNEDY: Absolutely. So I mentioned async and await, and the place where async and await seems to have the most power, right, is around, well, network stuff, so it's either on the server side where you have a framework that is some kind of web server that can scale out better because the web methods are async and await, or a client something like requests, more like httpx or something like that that supports an async way to talk to a bunch of different services or websites. So the next thing I want to cover is this little write up by Florimond Manca, and it's the "Introduction to ASGI: Emergence of an Async Python Web Frameworks." We probably all heard of WSGI, right? That powers Flask, and powers things like Pyramid and Django and so on. That's the Web Service Gateway Interface and it's, you've got a request, give me the answer, and that just doesn't work when you want to allow multiple requests all around at the same time, right? If I'm going to have a bunch of async stuff, I've gotta let some pause and let some new ones come in and all that kind of stuff. So, one of the areas where I think there's a ton of growth, and I'd like to get your opinion on this Anthony, is around these new Python web frameworks. It used to seem really clear, like yeah, there's Flask, Django, Pyramid, a few others, and now there's a new one every week. I don't even know what to keep track of anymore. How do you feel?
 
00:07:08 HERBERT: Yeah, and I don't know what to keep track of either, like I don't even know where to start. So I haven't really looked into any of them closely. Some people on my channel have been telling me to look into Sanic.
 
00:07:18 KENNEDY: Yeah, Sanic's got a lot of traction, yeah.
 
00:07:20 HERBERT: That was the first one I heard about a couple of years ago.
 
00:07:22 KENNEDY: And it's still going pretty strong.
 
00:07:23 HERBERT: I haven't looked into it yet and it seems interesting, like I've done a little bit of node stuff in the past, and I know this is bringing node-like functionality to Python, so I want to look into it, but I haven't looked into it deeply yet. And I noticed that Django, they just released 3.0, and they have support for ASGI. I don't think it's completely functional yet, but the beginnings of it are there, so I should definitely look into it more.
 
00:07:46 KENNEDY: Yeah, for sure, the foundations are there and if you're a Flask person like you are, probably the best thing to actually start with might be Quart. So I don't know if you've heard of Quart, but Quart is 100% compatible, even with the extensions, plugins and stuff for Flask API, but it also allows for async and await on the view methods. So basically the way you convert from Flask to Quart is you replace the word Flask with the word Quart. If it's lowercase flask, it's lowercase quart. If it's uppercase Flask, it's uppercase Quart, and that's it, and then you have async methods. You do have to run it on something like Uvicorn, but yeah, that's probably the path of least resistance, but it also doesn't take advantage of necessarily the best new features, right?
 
00:08:25 HERBERT: That seems easy. I can try that, Flask to Quart.
 
00:08:29 KENNEDY: Yeah, you can definitely try that. The thing is when I first did that and I tested it out, I'm like alright, let's how much faster this is, and I made the mistake of just running it as it traditionally had been, and it was running on a WSGI server, so it couldn't do any of the async stuff. I'm like, it's just the same! What a sham, this is not working at all. Like, oh, maybe I need a different server to enable this. Yes, that is what was missing, and so yeah it's pretty cool, and the thing is the slower the external systems that you depend upon are, the better your performance is going to increase, right? So if your database responds in 10 milliseconds, you can handle more requests if you switch it to async and await, but, you know, you're kind of doing more work in that 10 millisecond window, but if you're talking to a database that takes two seconds or web services that take two seconds, all of a sudden you have a whole two seconds of what was blocked up web server to now go do kick off a whole bunch more waiting or something like that, right, so it's pretty cool.
 
00:09:21 HERBERT: I'll look into that more.
 
00:09:21 KENNEDY: Yeah, nice. So they give a few reasons why you might care about this, so they say speed obviously. They're doing some tests and they say things like, well, they're getting 60 to 70,000 requests per second, whereas like synchronous Flask and Django do like 10 to 20,000, right? I mean, performance is always one of those things that's very hard to measure, and if you had a very slow Flask app like I was describing, you would get a much bigger percentage boost and so on, so pretty cool. Yeah, so they linked to a couple of different tools you might use. Uvicorn, which is a like Gunicorn but based on UV loop, which is the C implementation of asyncio event loop and plugged into Gunicorn. That's a good foundational production server, and then Starlette seems to be one of the best async frameworks. Like you mentioned Sanic and I talked about Quart, Starlette seems to be the foundation. It's like the foundation of Fast API, and some other ones and it has its own framework, so it's pretty good. There's a bunch of other things that are interesting like httpx as a replacement for requests where you have async there. ORM, which is an asynchronous ORM, because if you don't have an async database called and what are you waiting on usually. So a bunch of cool little things to bring together and if you're getting interested in this async and await plus web frameworks, check out this article here. It's pretty nice. Speaking of nice, let me tell you all about Digital Ocean. They're making Kubernetes easier with their container registry and one click apps. So, when you create a Docker image, Docker containers, you've got to have a Docker file that says, here's exactly how to construct my Docker container and maybe it has some files it copies in and all that kind of stuff, but you probably don't want to put that onto some public place like Docker Hub. You might, but you may well be really reticent to do that, so Digital Ocean introduced a new managed service, the Digital Ocean Container Registry, and it's in early access now, but you can check it out, it's simple, private, secure and fast, and you don't have to put your Docker file definitions up there somewhere where you would rather not put them, so check them out at pythonbytes.fm/digitalocean. Users get a $50 credit to get started. So what's this next one you got here Anthony?
 
00:11:37 HERBERT: So this is a blog called Python Insights and it's from someone named Tim Martin, and in his blog he just talks about the internals of Python so how Python works behind the scenes, because oftentimes when we write Python we don't really think about what's happening when it actually gets executed. So on the first page, for example, he has posts, like how context variables work, how the import statement works, and how even Python is converted to byte code, and one post that I saw that was pretty interesting was called, "Dictionaries Preserve Order." So when I first learned Python some years ago, one of the things that I learned about dictionaries is there's no ordering to them, because, you know, they're just hash tables. You put things in and there's no guarantee on what order they'll come back when you go to look at the entire dictionary. Well apparently since Python, 3.6 or 3.7, there is ordering now, so the order in which you insert things into the dictionary is the order that is always going to be there. So every time you look at the dictionary, you're going to see the things in the order that you inserted them and this is something that I would never have suspected, but they changed the implementation of how the memory of dictionaries work in Python, and this is something that he looked into so he goes to explain how all that works, how hash tables work in general and why the ordering is there now in 3.7.
 
00:12:53 KENNEDY: Yeah, nice. There's a bunch of just cool little insights, like take that idea and just dive into it and explain it. It seems like a good place if you're, especially if you're getting started. You want to dig into those ideas.
 
00:13:02 HERBERT: Yeah, the more you know about how it works, I think the better off you'll be.
 
00:13:05 KENNEDY: Yeah, it's kind of cool they finally decided to make dictionaries ordered, right. It lets them be using a few more places where maybe you actually need ordering and you're like well, I could use a list and I don't have the order, but it'll be slow to get the items out, but maybe that's the trade off we have to make, and now you don't have to.
 
00:13:20 HERBERT: Right, right and I noticed 3.8 they added a reverse function as well. Our dictionaries can work with reverse, so if you want to reverse your dictionary for whatever reason, you can.
 
00:13:28 KENNEDY: Yeah, that's really taking the order seriously. So this next one, since you're a big web developer, I think will be interesting to you and you're into Flask. This one is called Assembly. Have you heard of it?
 
00:13:39 HERBERT: I have not.
 
00:13:40 KENNEDY: Well, when somebody recommended it, Luiz Honda sent this over, said oh you should check out Assembly, my first thought was like, Assembly language? Like I'm really not interested in Assembly language, but you know, he said it's a web framework, so let me check this out. And it turns out that this is like an API on top of Flask. So, it has its own API but deep down, it's really Flask, right? And the idea is this person who wrote this project said I would like to build my web application using the concept of object oriented relationships. So for example, if you want to have just bare routes, so like maybe a just a / for your homepage, you want to /about for your about, /contact for contact or something like that, all you do is you create a class called index, and then you have functions, one called index, one called home, one called about, and it automatically sets up all the routing. And at first, it sounds like ah, you know, okay. How much is this really buying me in terms of, at that rate I could put app.route, put that in there. You know, maybe use a module to structure things that way. But, as you look through this more and more, there's just like all of these features. So I put a link in here it says decisions made for you plus features, and I'll just go through this, and Anthony you tell me, like, how these ideas hit you. All in this one framework, so it has smart routing, which I just described, it has class names as part of the URL, so if I have a class called UserAccount the URL will be, of all the stuff in there will start, be prefixed with user-account. Class methods can also be accessed in the same way, right? It'll put dashes and whatnot. And as a RESTful API, it automatically figures out the view to render. So in the templates folder if you have an Index class, in there you make a folder. In that folder you create, you know, I said there's a /about, you put an about.html and it'll automatically find that and render that as part of the template by just returning a dictionary. So I like that, although you can edit it with route. It also has built-in markdown support, so if you have a markdown file it'll process it and convert it to HTML.
 
00:15:46 HERBERT: Okay, that's nice.
 
00:15:47 KENNEDY: Yeah, that's cool, right? It has built-in support for passwords and uses bcrypt, which is an awesome thing to do. It has session-based support. You can use Redis, AWS S3, SQLLite, Postgres, all these things, it has backend support for that. It has Active Alchemy, which is a different take on SQLAlchemy. So SQLAlchemy is this unit of work where you start the unit work, you do a bunch of stuff and you commit it, and this one is more active record, so each thing gets a change, but it's still SQLAlchemy underneath. Woo, I'll keep going though, because these are cool, like cross-site request forgery on all posts automatically, idiomatic HTTP errors, storage, can be like S3, mail support, arrow for time, caching and pagination, assets, signals for dispatching messages to other parts of your app, and a bunch of other stuff. So that's a lot of things to add on top of basic Flask.
 
00:16:37 HERBERT: Yeah, it is. All those extra features sound great. The main part that I noticed was, you know, using the class to organize your routes and, you know, that's a little strange to me. I'm used to just writing functions that are part of blueprints, because I think that works so well that I haven't thought of a reason to switch that up but I'll definitely look into it because I'm sure there's a reason why this was done, like I don't like to dismiss things right away because, you know, I don't understand it. Like, if they spent the time to build this library then there's a good reason, so I'll look into it and I'll see what the advantages are of using a class for this.
 
00:17:10 KENNEDY: Sure. My two impressions, like, to me, the things that seemed like two advantages, there's some other stuff that I didn't mention about RESTful APIs and whatnot, but the two big ones seem to be automatic URL generation and grouping, so if I've got like a blog class and then the you know, latest post, like that latest method, it automatically says that /blog/latest, and I don't have to think about that. I think that is one part that's interesting. Stuff that's grouped in that class is purely grouped in a URL hierarchy. And then the other is the automatic discovery and rendering of the template, right? If your template structure looks like the shape of your classes, then it will just find the template without you saying Flask render_template and give the template name. I don't know if that's enough to win people over, but I think that that's what they're going for.
 
00:17:56 HERBERT: Okay, yeah, and I always name my templates the same as the function, so that would definitely help.
 
00:18:00 KENNEDY: Yeah, I try to do that too, but this thing just says and we're going to use that to figure out what to render and whatnot. So it's pretty new, and I think this is one of the challenges. There's all these cool and exciting ideas, but it's just getting started and you don't know which one is going to survive, right? Like you've been doing a lot with Flask and you're like well, maybe I should look at Sanic, but maybe Sanic won't be here in two months, so maybe I shouldn't look at Sanic. What else should I look? There's just so much churn, which is beautiful because there's all the things coming, but at the same time, it means it's really kind of hard to pick a horse in the race.
 
00:18:29 HERBERT: Yeah, Flask has a huge problem with this. Like Flask itself is fine, but so many extensions, you know, they're, they get popular, then there are no more maintainers after just a few months, so.
 
00:18:41 KENNEDY: Oh wow.
 
00:18:42 HERBERT: You have to find a new library if you want to get the latest.
 
00:18:44 KENNEDY: Yeah. Alright, this next thing you have is pretty interesting. Some physical hardware, huh?
 
00:18:49 HERBERT: Yeah, so this is an article by Lenin and it's called "Building a Standalone GPS Logger with CircuitPython Using Adafruit and Particle Hardware." So, I've never done anything with hardware because it seems kind of mysterious to me. So reading this post was interesting because kind of showed how straightforward it is. Like obviously you have to figure out what components you need to build something, but in terms of writing the code to control all this with CircuitPython, which is a version of Python for microcontrollers, it's pretty straightforward. It reminds me of, you know, taking data from an API and just writing it somewhere, so to like a database. So in this case, you know, you have the GPS logger, so that's like your API in a sense you have data coming from that and you just take that data and you put it somewhere else. So it's really that straightforward. Obviously you have some code to check if the hardware is working properly, but the actual code to do what you want is pretty straightforward, so he built his GPS logger because he wanted a way to track his GPS location over time instead of just having like the current location, like your phone gives you, and in a way that doesn't just drain your battery. So he shows you what components he has to purchase and how he put them all together and then he he gives you the code that he wrote to control all this and I found it quite interesting. It makes me want to think about hardware projects I can attempt.
 
00:20:06 KENNEDY: Yeah, it doesn't seem that out of reach, right, and it's not too expensive. One of the things that I think is really challenging about these hardware projects and Adafruit makes it better, because they have all these options, but I'm like, alright, maybe this microcontroller thing would work and it's $10 and I'll probably need a battery. I don't even know how to hook the battery to the microcontroller. And then I need the GPS thing, but will that hook on this or do I need a board? It's just like all the little parts. I'm like, what even goes together? So one of the cool things is, it's like here are the seven things I used, right? Yeah, that's cool.
 
00:20:35 HERBERT: Yeah, so it makes it approachable and there are tons of tutorials as well for the beginners who want to get into hardware, so I think I'm pretty sure once you learn like the basics of, you know, what works with what, I think you can do similar things to what he's done in this tutorial.
 
00:20:50 KENNEDY: Yeah, that's cool. So if you wanted to like, go skiing and have a little trace of every bit you've done, you can just throw it into your backpack or whatever and just at the end of the day, it goes for like four days or something on its battery. It's got a little SD card, right, take the little SD card out and you just, you have all your data, you can do whatever you want with it. Nice. So let me wrap up our main items here with a little article that folks can use to maybe make a case for using Python or learning Python at your organization or for yourself, and it's called "10 Reasons Python is Good to Learn," and it's pretty straightforward. So, you know, obviously Python is popular. If you go and throw Python and all the other major languages into Stack Overflow Trends, it's ridiculous. I did this recently. A couple years ago, Stack Overflow covered this and talked about, they have wrote an article called, "The Incredible Growth of Python," and they predicted Python just blowing past JavaScript and Java and all the, and just really going, and the others kind of going and flattening off. If you go and put those same things into Stack Overflow Trends now, Python is even more popular than they predicted and the other ones are going down more than they predicted, it's ridiculous. And so the question kind of becomes why and I think that this article touches on some of them, but before I talk about it really quickly I just wanted to throw out this idea that I have, and it's that Python is a full spectrum language, and this is an idea I'm trying to popularize about why Python is popular. So on one hand, maybe, you know, let's think of like a scientist, a biologist or physicist or somebody who's, they don't think of themselves as a programmer. Let's just go with biology, but the person has all this data and they can't properly analyze it in say, Excel, so they got to use some kind of programming, sort of in quotes, thing to work with it. One option is they can use MATLAB, MATLAB's like thousands of dollars, like $800 a year continuously, plus all the add-ons. And the other thing is you can't build real apps with those kinds of projects, right? Like nobody builds YouTube with MATLAB or, you know, Windows with MATLAB. They just, it's just doesn't do that. On the other hand, you could pick other things that can do those sorts of things, like C++ or .NET or whatever, and you're hit right from the beginning with all the complexity, like the biologists, instead of just being able to add a reference to a couple of libraries, not even write a function, just write 10 lines of just straight in the script Python code that solves your problem with Python, in say .NET, you've got to have a namespace, you've got to have a static class, you've got to have a public static void, you've gotta have like all the compilers, like all that stuff, you know, it's just, it hits you right from the beginning that's there to build these major apps. And so I think Python, one of the reasons it's so popular and bringing in people from these sort of edge cases of programming and computation is they can start really easy, but then over time if they just add a little more and a little more and all of a sudden, you know, they're like oh, I just actually used machine learning to study ancient manuscripts with Python, but I'm not even a developer, what just happened, you know? What do you think about this idea, Anthony?
 
00:23:48 HERBERT: Yeah, I think that's why people, like especially people who have absolutely no background in programming, like what I notice is when they look at Python, they feel they can understand it, whereas when you look at something like JavaScript or C or pretty much anything else, like it looks difficult. It could be the exact same, accomplish the same thing, but Python just looks approachable. You can kind of read it and understand what's going on, so people love it for that and I think that's why so many people new to programming go with Python first.
 
00:24:19 KENNEDY: Right, it draws them into like oh hey, I can actually program in Python, but then they grow into real programmers doing real cool stuff with like scientific libraries and other things or Flask or whatever, and then they're kind of hooked, right? Then they're in that space and I think that's part of the secret of Python's growth. But let me go through my listicle here nonetheless. So the 10 reasons that they claim in this article that Python's good to learn is it's free and open source. Obviously nice. It's popular, loved and wanted. Hat tip to the Stack Overflow survey where they asked those exact questions. Who uses this, who loves the technology they use and who wants to use some technology they're not, Python always ranks high there. It has a friendly and devoted community of course, elegant concise syntax, not all those semi colons and curly braces and type specifications. It's multi platform for most of the platforms, at least. It supports multiple programming paradigms, just like, no functions straight down the script, versus actual functions, versus functional programming versus object oriented programming and so on. It has tons of libraries, built-in and third party. It's a general purpose programming library, unlike my example of MATLAB, right? You can do stuff in it till you hit the limit then you just can't do anything else. And then it also integrates with other languages, C, C++, it's got tons of integration there. It has Rust integration, it has .NET integration and a bunch of cool stuff like that. So anyway, there's a bit of a take on why Python is good to learn, or why people are adopting it. Alright well, Anthony, that does it for our main items. Got a couple of, a little bit of time to just talk about a few extra things. Maybe you start first and tell us about what's going on in your world.
 
00:25:59 HERBERT: I'm from prettyprinted.com and mostly the YouTube channel, so URLs for YouTube are a little tricky, so if you just go to YouTube and search for Pretty Printed you'll find my channel, and I basically talk about Python web development there. I occasionally talk about other topics, but it's mostly Flask and Django that I talk about there. And then on my website, I have courses that I have available and I'm also trying to write more, so hopefully you'll see some articles there soon as well, so that's what I do and if you watch my videos, that would be great.
 
00:26:28 KENNEDY: Yeah, awesome. Yeah, you're doing good work. So I have four quick announcements, maybe three announcements and a follow up there. So I was just a guest on the .NET Rocks podcast talking about Python for the .NET developer, so if people are into .NET and they want to hear what does the world of Python look like from that perspective, maybe you're working at a company that mostly is a.NET shop, but you really love Python, right, check that out. You can share that with your co-workers about why they should maybe pay a little more attention. So I got a link to that episode that just came out yesterday. I'll link to that in the show notes. And then also, kind of tying together with that, these sort of one precipitated the other, is I just released a new nine hour course called "Python for the .NET Developer." So the goal is to help all these .NET people take their skills, like they know how to talk to databases using Entity Framework or create websites using ASP.NET, like recreate all of that, take those examples and then recreate them in Flask or SQLAlchemy or so on, so that's a really fun course if you're into the .NET space. I also have another course, "Python for Decision Makers." Like, if you're thinking about whether Python makes sense for your organization or your team, check that out as well. Links to all those are in the show notes. And then finally a couple episodes ago, I was talking to Brian, saying one of the reasons I call my virtual environment folder venv is it doesn't show up in Finder, and when I'm cruising through Finder, and I get to one of my courses or one of my old projects, I want to be able to look really quickly, say does this have a virtual environment, or do I need to pop over to the terminal and create one real quick? And by default, if it's .env, which many times it has been, it's hidden, you don't know, you've got to go in there and go into the terminal and just find out. It's not as hard, but it's not like immediately obvious. It requires a little step, right? So many people, too many to name, I mean many people sent me this message, which kind of blew my mind and said, if you were in Finder and you want to see hidden files, you hit command shift dot and it will refresh with all the hidden files, so you see your dot files and your dot folders and whatnot. Did you know about this Anthony?
 
00:28:29 HERBERT: I did not because I do not use Mac.
 
00:00:00 KENNEDY: Right, so this is not a problem that you have, right? What do you use, Windows?
 
00:28:35 HERBERT: Yes Windows, and I use the Linux subsystem.
 
00:28:38 KENNEDY: Nice. Yeah, in Windows this is more of a setting, right? You set in the Explorer, in the File Explorer you say, I would like to see hidden files or not see hidden files, but in Mac there's no such setting, so apparently it's a hotkey. Right, well that's all my announcements as well. We always close this out at the end with a joke, so are you ready for a joke? By the way, I also would like to point out that they're not always funny, but we always try.
 
00:00:00 HERBERT: Okay, I'm ready.
 
00:29:00 KENNEDY: Alright, so here, speaking of different languages and all that, here's a failed pickup line. So this girl's hanging out with her friends at a bar. They're just hanging around and some guy's like, I'd really like to meet her. Maybe I could come up and say something clever. She looks like she might be a programmer. Maybe I'll say some computer thing. He comes up and he says, you know, maybe he's been watching too much Jerry Maguire, he's like, you're the semi colon to my line of code. She responds, get out of here, creep. I code in Python.
 
00:29:31 HERBERT: You know, that might be the reason number 11 to learn Python.
 
00:29:34 KENNEDY: Yes, exactly.
 
00:29:35 HERBERT: To come up with better pickup lines.
 
00:29:36 KENNEDY: Exactly. You don't have to take that semicolon thing. No, it's pretty funny. Alright, well, Anthony, thank you for filling in for Brian and being here today. It was great to spend some time with you and talk about these ideas.
 
00:29:48 HERBERT: And thanks for having me here.
 
00:29:49 KENNEDY: You bet, bye. Bye. Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's Python Bytes as in Bytes. And get the full show notes at pythonbytes.fm. If you have a news item you featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
