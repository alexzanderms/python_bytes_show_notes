00:00:00 OKKEN: Hello, and welcome to Python Bytes where we deliver Python news and headlines directly to your ear buds. This is Episode 162, recorded December 19, 2019. I am Brian Okken and today I've got guest host Aly Sivji. He's one of the organizers of the Chicago Python Meetup, and we met last week when I was there, but briefly and we already started recording this, but I forgot to press record, so we're just starting over. So thanks, Aly, for hanging in there with me.
 
00:00:28 SIVJI: Thanks, Brian, I'm glad to be here.
 
00:00:29 OKKEN: And this episode is brought to you by Datadog, we'll talk more about them later. But first, Aly's going to tell us some exciting things about Django.
 
00:00:38 SIVJI: Yeah, so Django 3.0 just came out in early December, and so I really wanted to find out what was going on. I found a talk from DjangoCon 2019, by Andrew Godwin, titled Just Add Await: Retrofitting Async into Django and Andrew's been the one leading the implementation of asynchronous support into Django. And he discussed what the 3.0 really signifies, also went over the implementation road map for upcoming releases.
 
00:01:04 OKKEN: Okay, wow, that sounds fascinating.
 
00:01:06 SIVJI: Yeah, he started by giving an overview of the async landscape, talked about how synchronous and asynchronous code interact. A key point that he made was that, when we have asynchronous functions, they're very different than synchronous functions. This makes it really difficult to design proper APIs and one of the difficulties in adding asynchronous support to Django is that, this project, it's been around for a really long time. There are a lot of people familiar with it and for these new async implementations, they want it to have that same familiar feeling. And so they made a plan to implement async capabilities in three phases. And so phase one that was completed with Django 3.0 release, and this phase, it's really meant to lay a lot of the ground work for future changes. And so Django now supports Asynchronous Server Gateway Interface or ASGI, and the ORM, it's also async aware. So if you actually call ORM code from async code, it's going to raise an exception to make sure that you're not calling the synchronous function from your async code. You don't want to have unexpected behavior there. Phase two is going to be tracking with Django 3.1 and they're going to be adding async capabilities to the core parts of the request path. This means we're going to have async views, async handlers, and async middleware, and there's already a branch in the Django repository where this is mostly working. They just need to add a couple of tests to make sure things are passing with all those cases.
 
00:02:30 OKKEN: This sounds really well thought out.
 
00:02:32 SIVJI: They've put a lot of work into it and there's a really detailed Django PEP, I think it's called a DEP of all about it. And then finally with phase three that's going to make the Django ORM all async, and Andrew called this the largest, most difficult, and most unbounded part of the project. So if we just start thinking about ORM queries, sometimes they can result in a lot of implicit database lookups if we're not really careful, and this is where a lot of those complexities are going to come from. I really enjoyed this talk, I think it went into the right amount of depth while being really accessible, and I just want to call out the fantastic diagrams, it really helped to improve my understanding of Django internals. And if you check the show notes, I'm going to include a link to the Async Project wiki, Andrew needs some help putting these things into Django. He's got a lot of areas there. If you have some time, you have the expertise, please go ahead and help him out.
 
00:03:20 OKKEN: Yeah, awesome, I like doing calls to action on the show, to try to get people involved. And I've been just studying Django for several years now, just dipping my toes in and out every once in a while. And I was waiting for this new version to come out, so I'll probably check this out first. But I like that idea, of having, since they're gradually rolling it out, doing error messages for if you try to do things that aren't implemented yet, so that's cool.
 
00:03:46 SIVJI: Yes, always best to be explicit. So would you say you've been playing around with Django?
 
00:03:51 OKKEN: Yeah, okay, nice segue there. So the next topic, speaking of playing, I don't know how you got into programming, but a lot of people get into it with games. And I actually feel bad that I'm in that camp also because, I don't know, it's just cliche. But, yeah sure enough, gamesbyexample, is GitHub Repo by Al Sweigart, and other contributors as well, or I think there's others, but he wants more. So the idea is these are standard I/O games, and it's a collection, he's got a collection of games with the source code to use, for example, programming lessons. They're all written in Python 3, and you can just clone the repo or just view it and copy and paste if you don't really, even for people who aren't used to the Git stuff. I think it's neat, 'cause I, before I even learned any of the concepts of programming, I was programming games by copying them out of magazines and typing them into my old TRS 80 way back in the stone ages.
 
00:04:53 SIVJI: That's awesome.
 
00:04:53 OKKEN: I didn't know what I was doing but I could modify things and sort of interpret it 'cause you can kind of read basic. So there're some cool features of these games that actually I would have enjoyed at the time. Some of the neat things is that they're short. They're limited to 256 lines a code, just an arbitrary number, but that's a pretty nice small code size. They're all single file, single source code files, with no installers so you just run them with Python, they'll use just the standard library if they're only using print and input for interacting with the user. There's some downsides to that but there's some upsides too, 'cause they're fairly simple. He's tried to make them very well commented and very readable, so he mentions that they're elegant and efficient is nice sometimes, but understandable and readable is better for education purposes, so that's what they're planning on doing. That's what his focus is. Also input validation on everything so that you can't crash Python from typing in something weird. This is kind of cool but made sure that every function has a doc stream to describe what it is, because it really is meant to be teaching people. And, I think this is a pretty cool.
 
00:06:05 SIVJI: Yeah, Al does a lot of good things about structuring things in a way that everybody can understand. Really love all the stuff he does.
 
00:06:11 OKKEN: This would be great for people to use in, I think in helping your kid out. I'm going to try to get my kids running with some of this stuff, to just say, "Hey, watch, this is how you run it. Now, play with it, and break it." He also included to do list of things he wants to do with the project but hasn't done yet, and I love that because it gives people direction if they want to help out with the project. One of the areas is testing, he wants more tests. So, I'd love for people to get involved with that.
 
00:06:38 SIVJI: Always going to make the call out for testing.
 
00:06:40 OKKEN: Yeah, definitely. So, before we move on, I want to give a shout out to our sponsor. This episode is sponsored by Datadog, a cloud-scale monitoring platform that unifies metrics, logs, distributed traces and more. Trace requests across service boundaries with flame graphs, correlate traces with logs and metrics, and plot the flow of traffic across multi-cloud environments with network performance monitoring. Plus, Datadog integrates with over 350 technologies like Postgres, Redis, and Hadoop. And their tracing client, Auto Instruments, common frameworks and libraries like Django, Tornado, Flask, and Async IO. That's cool. Get started today with a 14 day free trial at pythonbytes.fm/datadog. Now, speaking of testing, Bulwark has some, I stole your thunder, but in this topic has some test-related stuff, right?
 
00:07:36 SIVJI: Yeah, so Bulwark is an open-source library that allows users to easily property-test their Pandas DataFrames. It makes it easy for data analysts and data scientists to write tests. So let's just take a step back, we all know that tests are important, but tests for data, they're just a little bit different. These tests, they're not as deterministic, and they require us to think about testing just a little bit differently. So with property tests, what we can do is, we are able to check that an object has a certain property. And so property tests for dataframes include things like validating the shape of a dataframe, checking to see if a column is within a given range, verifying that a dataframe has known NaNs, and things like that. So with Bulwark, you're able to implement these property tests as checks, and each check takes a dataframe and some optional arguments. This check will make an assertion about some dataframe property. If things are good, the check's going to return the original dataframe. If the check fails, the assertion error's raised and you have a little bit more insight into what went wrong. And this is really helpful when you have a large data pipeline.
 
00:08:45 OKKEN: That's cool.
 
00:08:45 SIVJI: Yeah, it's really, really cool. And so one of the ways that Bulwark lets you implement property tests is also through decorators, and so when you're creating data pipelines, it's really useful to do them as functions. You have some input data, you perform some action, it returns it output, and with Bulwark what you can do is you can add decorators to your pipeline functions, and validate that the properties of your input dataframes meet the conditions that you really want it to have. So Bulwark has a lot of pre-built checks already in there, there's one for has certain data types. Is this column monotonic? Is this within a certain number of standard deviations? And it seems pretty straightforward to add new checks. And instead of stacking decorators from multiple checks, they have a special decorator, a multi-check decorator, which won't fail only on the first, it's actually going to run through them all and tell you all the ways your data either passed or did not pass.
 
00:09:39 OKKEN: Oh, that's great, wow, neat.
 
00:09:40 SIVJI: Yeah, you can use Bulwark for implementing unit tests, you can use them in the ETL pipeline, specially on the extract and the load steps, and Bulwark can be used during development, and they also have some options to turn assertion errors into warnings for production. I'm not really too sure how I feel about that, but that functionality is there if you want to use it.
 
00:10:00 OKKEN: This is cool.
 
00:10:01 SIVJI: This is actually coming out of a Chicago Python community member Zax Rosenberg. He created this and gave a talk about it at ChiPy, so I just wanted to share it with the rest of our community.
 
00:10:10 OKKEN: I think it's great, and I think that there's seeing more and more. I did a recent episode of Testing Code where we talked about, I talked to one of the people on the Great Expectations project. That's around testing with data also. And some frameworks are attacking the problem differently, and also just some people like one style over another, this is a little bit different style than Great Expectations. I think it's definitely worth checking out. And having more, gosh, more and more of our life is controlled by data pipelines. Not necessarily controlled but influenced by results based on these data pipelines. So having these checks in place to make sure that our data is just as solid as our source code, this is awesome.
 
00:10:54 SIVJI: Yeah, it's really good to see all these data scientists and data engineers, thinking about testing in a different way.
 
00:11:00 OKKEN: Oh, gosh, there's some interesting contributors, to this. This is great.
 
00:11:04 SIVJI: Cool.
 
00:11:06 OKKEN: We got off on the test side, I could go down that rabbit hole for all day long. But let's pop out and talk about packaging a little bit.
 
00:11:13 SIVJI: Packaging. Have you talked about it before?
 
00:11:15 OKKEN: Yeah. Yeah, actually so, packaging is such a, we do cover almost every story packaging related, because it is a stumbling block for a lot of people to go forward. At some point you get into the intermediate Python developer, and how to share your code is, and dealing with virtual environments and stuff is one of those things you have to run into. So I think it's kind of cool, I am not a Poetry user but I might try this new one out. So Poetry just announced that Poetry 1.0.0, there're no longer zero versionings, they've got 1.0, awesome. The announcement is by Sebastien Eustace, and highlights some of the changes for, and a good caution right off the bat is, they are breaking backwards compatibility with this version, because the ZeroVer is often, we're trying things out and I think it's completely fair to break, it's always fair to break with the major versions, but I think this is reasonable. So, one of the things I, I think it's, this highlights, I want to highlight a few things. I think it's very, for this version we can really take Poetry seriously, I think that they're planning on sticking around, and people that like it, there's a lot of changes that are good. They've added different ways to manage environments, so within a project you can have Poetry help you coordinate multiple versions of Python within the same project. That's pretty cool. I don't know if it had that before, it's neat. One of the things that I want to bring up next is, private indices, and if you're working with projects within a company, this is very important, to be able to have your own private, something like PyPI, you can, yeah, one of the ways you can do that, is you can have your, a private version of something like PyPI, but you can also just throw a whole bunch of wheels in a directory, and use that as an index as well. And, so, having, there's some improved support you can have even specify a different index for each dependency if you want, but you can also set up a primary and secondary, a default and secondary index, and have them be non, something other than PyPI if you want, so this is cool. People using Poetry and other tools like this within continuous integration, sometimes it's hard to pass things around, and so environmental variables sometimes, they're ugly but they're useful within CI, and so there's new environmental variable support. And then since there's all this new support for different dependencies, the add command has been expanded to allow you to just add dependencies and put them in the right place with the right source and everything. The other thing I want to highlight is they've improved some things around publishing, to allow you to put API tokens in place instead of having to use text passwords and users, so. Very cool changes from Poetry, I applaud their progress.
 
00:14:12 SIVJI: Yeah, I haven't checked it out, but I want to go check it out. Looks like there's been a lot of changes made, pretty excited about the 1.0 release.
 
00:14:18 OKKEN: This is neat. People I respect all over the place, there's some people that absolutely love Poetry, there's some people using Pipenv, I'm a straight, just using the built-in venv, and all the tools around that, but yeah, whatever floats your boat I guess.
 
00:14:34 SIVJI: Yeah, for sure.
 
00:14:34 OKKEN: What do you got for us next?
 
00:14:35 SIVJI: So Kubernetes has been a huge part of the DevOps ecosystem in the last two, three years. With a rise in containers, Kubernetes is the defacto platform for running and coordinating applications across multiple machines. It's not really something I know a lot about, but it's something I want to get to know more about. And I just found this awesome link from DigitalOcean, they put together a Kubernetes for full-stack developers curriculum.
 
00:15:00 OKKEN: Oh, neat.
 
00:15:00 SIVJI: And what it does, yeah, it follows all the steps that a new user would have to learn, in order to deploy applications to Kubernetes. So you start by learning Kubernetes' core concepts like what's a pod, what's a deployment? Next you'll start building modern 12-factor web applications, and then you're going to start packaging these applications inside of containers. Next you're going to deploy your container as applications on Kubernetes, and then finally you're going to be, learn how to manage all that cluster orchestration and the cluster operations. I went through the first link which was like an introduction to Kubernetes, I found the material really easy to understand. It's pretty much what you'd expect from DigitalOcean. I learned how to do a lot of my operations work from Digital Ocean, and I'm really excited that they have a lot more resources for the community. And I want to throw a link in the show notes to a talk I gave about introduction to Docker, if you're ever learning how to do Docker, I think this is a really good place to get started.
 
00:15:55 OKKEN: Yeah, and so just to be clear, Docker and Kubernetes are closely tied, right?
 
00:15:59 SIVJI: Docker is the container where you package your applications in, and then Kubernetes is the platform that manages all your Dockerize, your containers, across multiple machines. So, this way with Docker, you can build your application, with Kubernetes you can deploy it and scale it pretty much infinitely.
 
00:16:16 OKKEN: Cool, and it wasn't like, I'm forgetting the guy's name, but I saw a talk a couple of years ago about Kurbenetes, and I didn't realize that this isn't just, I mean, yes it's intended for cloud stuff, but you can test the entire Kubernetes set up locally on a laptop, even. So, that's pretty neat.
 
00:16:34 SIVJI: Yeah, for sure.
 
00:16:35 OKKEN: I'm not lying there, is that true?
 
00:16:36 SIVJI: It's like kubectl, if you can have a kubelet on a machine, and pretty much do whatever you need to on the cloud locally.
 
00:16:43 OKKEN: Okay, cool. Definitely good for playing around, you don't have to pay for anything.
 
00:16:47 SIVJI: Exactly.
 
00:16:47 OKKEN: Well, now, so the last topic, I want to apologize to people, I'm perfectly okay with making mistakes on the show. So on Episode 159, we were going through a whole bunch of pytest plugins, and one of the things we covered was pytest-picked. And I incorrectly assumed that it would run, there's a quote on the pytest-picked site that says it runs the tests related to un-staged files or the current branch, on the current branch according to Git. To me that sounded like it runs the test related to code that's changed, but I was wrong. So Michael was right, I was wrong. It just runs, it uses Git to find out which files have changed. And if any of those are test files, it runs the tests related to those test files. That makes sense, and that might be, if you're developing tests, that might be exactly what you want. But if you're developing code, you might want something different and the tool I was thinking about, was pytest-testmon, and that's a plugin for pytest also, and I'm just going to read their blurb. So pytest-testmon is a pytest plugin, which selects and executes only tests you need to run. It does this by collecting dependencies between test runs, and all executed code, internally by using coverage, the coverage data. And comparing those dependencies against changes. So, it updates the database on each test execution so it works independently of version control. So, that's the thing I was thinking about, so if you use this coverage to find out what tests are affecting different parts of your code base, very cool, so if you're making changes this sounds like black magic to me, that I'm glad somebody else wrote it. But it does look pretty neat, and I think I'm definitely ready to try this again. I tried it a while ago, and for some reason, I don't even remember what I, I don't think I had any beef with it but I just didn't think I needed it. But this looks exciting enough, I'm going to try that again.
 
00:18:46 SIVJI: For large test weights, I think this would save you so much time instead of re-running everything.
 
00:18:50 OKKEN: Yeah, there's other ways to, if you know specifically what you want to re-run, yeah, if you've got a whole bunch of different tests, and they all run pretty fast but you, you're not quite sure which ones you should run based on your code changes, this is neat.
 
00:19:04 SIVJI: Awesome.
 
00:19:04 OKKEN: So that's the end of our normal topics, we didn't really get to know you a little bit, but here, so you have anything extra or you want to tell us what you're up to?
 
00:19:12 SIVJI: Sure, so one of my favorite things about Python is the community, and as the organizer of Chicago Python, it's no surprise that building hyper local communities is like one of my main passions. And in Chicago we have a lot of events for our members. We have talk nights, project nights, open-source sprints, we recently started one to help people with white-boarding coding interviews. But there's great user groups all over the world, and I just want to include a link in the show notes, so how your listeners can go out and find a local community they can be a part of. And I also want to give a special shout-out to all my fellow organizers, who are listening to this podcast. Thank you for all you do for the community.
 
00:19:51 OKKEN: Yeah, I didn't know that the Chicago community was so huge. You guys are, did you say 11 organizers?
 
00:19:59 SIVJI: Yeah, we have 11 organizers. We've been around since like 2003, so it's one of the OG Python user groups. And we actually have matplotlib debuted at ChiPy. So, a lot of historical things happening.
 
00:20:12 OKKEN: Yeah, it was cool. So I was in Chicago last week and I, I don't know, I posted something on Twitter like Chicago is cold. Some people made comments but Aly reached out and said, "Hey, if you're in town and available ?or a drink or something, we should meet up." And so, totally impromptu, we met and had dinner together, it was a blast. And yeah, talk about community, that's one of the things I love about the community. I find wherever I'm traveling, I can try to hit up people in that area and I say, "Hey, I'm in town, I only have three hour window but is anybody available?" And usually I can get somebody to come by and we can BS or something and so it's great.
 
00:20:49 SIVJI: We have Python friends all around the world.
 
00:20:51 OKKEN: You have a note here on PyTennessee?
 
00:20:53 SIVJI: Yeah, so PyTennessee is going to be happening on March 7th and 8th, I'm going to be giving a talk on design patterns and tickets are available at PyTennesee.org. It's going to be in Nashville, my third year in a row going, can't wait. And Bryan, I think I saw your name on the talk list as well.
 
00:21:09 OKKEN: Oh, yeah, I am going to that.
 
00:21:12 SIVJI: Awesome.
 
00:21:13 OKKEN: I'm like, I don't think, I thought I was going to Nashville, oh yeah, that is in Tennessee, yes, I failed Geography. So, cool. I've never been there, so it should be fun.
 
00:21:23 SIVJI: Yeah, we'll grab some dinner or a drink or something, it'll be fun.
 
00:21:25 OKKEN: So, speaking of community and this podcast, I just want to announce that the next Python PDX West Meetup, the one in Hillsboro, just west of Portland, is happening January 7th, and I'm bringing it up because Michael and I thought it would be fun to just do a live recording of Python Bytes, with everybody hanging out at the meetup. There's also going to be one to two other talks there and we'll have food, so if anybody's in the Portland area the 2nd week in January, swing by.
 
00:21:54 SIVJI: Sounds like a lot of fun.
 
00:21:55 OKKEN: A couple jokes for us. So the first one is sent in from Tyler Madison. It's just a short joke. So two coroutines walk into a bar. Of course it's a run-time error because bar was never awaited. Async jokes.
 
00:22:14 SIVJI: I've got one for you. So how many developers on a message board does it take to screw in a lightbulb?
 
00:22:19 OKKEN: I don't know.
 
00:22:19 SIVJI: So the answer is, why are you trying to do that? To all those people that are just trying to make sure that, they're making sure that you're doing things their way.
 
00:22:29 OKKEN: Yeah, I hate that. When people like, somebody asks a question and before anybody, it might be a simple answer but somebody will say, "Yeah, you shouldn't be doing that." Don't do that. This was fun. Thank you so much for filling in for Michael and co-hosting today.
 
00:22:42 SIVJI: Thanks so much for having me, Brian.
 
00:22:44 OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter, @pythonbytes. That's Python Bytes, as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
