00:00:00 OKKEN: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 168, recorded February 5, 2020. I'm Brian Okken.
 
00:00:11 KENNEDY: I'm Michael Kennedy.
 
00:00:12 IDRISSA: And I'm Kojo Idrissa.
 
00:00:13 OKKEN: Yay, we have Kojo here as a special guest.
 
00:00:15 KENNEDY: Hey Kojo, welcome to the show. Happy you're here.
 
00:00:17 IDRISSA: Hello, thank you, thank you.
 
00:00:19 OKKEN: This episode is brought to you by Digital Ocean. Thank you, Digital Ocean. Michael, I'm actually confused about this.
 
00:00:25 KENNEDY: It's a little bit of a funny name, right? So let me tell you about Donkey Car. Have either of you participated in or at least watched a proper RC, remote control car race?
 
00:00:36 IDRISSA: Not really, just the sort of like, the random ones. Random people have random remote control cars and running them around the neighborhood, but not an actual official, proper one, no I have not.
 
00:00:44 KENNEDY: Brian?
 
00:00:45 OKKEN: Yeah, I just watched a little video that you sent me, and it was quite exciting.
 
00:00:49 KENNEDY: These are really weird things. If you've never seen one of these, I've put a link to like a three-minute video from GoPro, where they put a GoPro on one of these little RC race cars. I used to have one of these when I was a kid, like high school, maybe late middle school, and they were insane. They were these little cars, you know, remote control, and they go like 35 miles and hour, they're super quick and responsive. Really interesting, but what would be even cooler, is if I could use Python to win an RC car race. Don't you think?
 
00:01:16 IDRISSA: Uh huh, yeah, that would be cool. You're right.
 
00:01:19 KENNEDY: Yeah, I mean you've already got the GoPro on there. It's already got a camera that's high quality. So the thing that I want to talk about is this thing called Donkey Car. And it's a minimalist modular self-driving library, self-driving car library for Python. So people are always looking for ways to get kids into programming, or themselves to get into programming, if they don't have some formal project. Like hey, I want to build this website, or I've got this data science thing I want to do. Something like a self-driving car, I think could be really interesting. They have some much tamer vehicles that they have pictures of on the Donkey Car repo where it's more like little LEGO cars and stuff. But you basically have these little tiny cars, and you can put cameras on them, and you put a Raspberry Pi, and then you teach it how to drive. And I think that's pretty awesome.
 
00:02:08 OKKEN: Yeah, that looks fun.
 
00:02:10 KENNEDY: Doesn't it? Yeah, so it says you can use Donkey Car if you want to make an RC car drive itself and win an RC car race. That would be awesome. If you want to compete in self-driving races like DIY Robocars or the Great Robot Race from DARPA way back in the day. I guess that's probably a little bit quite enough, but still quite cool. If you want to experiment with like autopilot or mapping computer vision and network, neural networks, if you want to log sensor data while you're driving around, if you want to drive a car via an Xbox game controller, that's pretty cool, 'cause you can then communicate with the controller over to the Raspberry Pi and then just tell it to drive however it tells it. Yeah, a lot of cool stuff, and I think if you have anything to do with like, you're playing with AI and computer vision, this seems like a really fun way to make it interactive or kind of exciting, without a lot of code, it's pretty simple actually.
 
00:03:07 OKKEN: Do you know if any of these robocars are going, or the self-driving, or going like 35 miles an hour?
 
00:03:14 KENNEDY: I don't see, well, when I watched the video that I included, on one hand, I don't see why it would be hard, 'cause they have these little rails and it's kind of clear where the edge of the track is, you can even put up markers, like little things that you could shine, have detected with the computer vision, but they're so bouncy, they're incredibly jiggly and it's really hard, like I think it would be a little bit hard, so maybe slow but I don't know, my joke about winning the race it seems a little far fetched, you'd have to have a really stable camera, which I guess you could get. But, anyway, I think this is a fun one, so if people are out there looking to play with a little AI computer vision, then this seems cool, check it out.
 
00:03:50 IDRISSA: It's very interesting.
 
00:03:51 KENNEDY: Yeah, for sure, Brian, there's a bit of a sad one coming up, right?
 
00:03:55 OKKEN: Yeah, rest in peace. I ran across an interesting article by Nick Timkovich, I think, called, "RIP Pipenv: Tried Too Hard. Do What You Need with pip-tools." So, I didn't realize that Pipenv was kind of stagnating, there's not been a release in 2019. I didn't check to see if maybe they slipped one in in 2020 yet, but apparently there's some problems with the sub-dependencies and complicated release process or something.
 
00:04:28 KENNEDY: Well, I want to add one really bit of, small bit of detail here because I think it's interesting. There's not been a release of Pipenv in 2019, and that makes it sound like, "Oh, people have walked away, haven't done anything," there were 650 commits to that project, and there's still not a release in the year which is kind of rough, right? The people who've worked on it, if that stuffs not getting released, that can't be great.
 
00:04:50 OKKEN: Yeah, so I'm not sure what's going on. But the main emphasis of the article really isn't that, whether or not Pipenv survives or it's really dead, I don't think it's dead, I don't know what the state of it is, but one of the benefits that we saw with Pipenv was this idea of pinning everything and using, like having a Pipfile and a pip lockfile, or a lockfile that says, "These are the packages that I really depend on, and then all those plus all of the sub-packages, I put those in another file, a lockfile, with their hashes, so that I can know that I can reproduce that environment." And that's a really cool idea, I like the concept. Most of the bulk of the article is just basically saying, "You can do that yourself without Pipenv but you can use pip-compile that comes from pip-tools, and there's a generate-hashes function." but basically you do that yourself, you just have a smaller requirements file that just has what you really need, your direct dependencies, and then you can generate a hashfile that is directly readable by Pip, you can pip install from this other generated-hash pip requirements file. The other part of Pipenv that people are using is virtual environment support. But I guess I'm on board with Nick to say, "I don't understand why these were bundled into one tool," and I'm using venv, the built-in just fine. I don't really need Pipenv for that. So I think I'm going to try to incorporate this possibly in my work flow, at least on one project to see how it goes.
 
00:06:24 KENNEDY: Yeah, that's pretty cool, I didn't realize you could output the requirements.txt with the hashes using pip-compile, either. That definitely was one of the selling points of Pipenv, was like, everything is locked, not just by pinning the version but by hash as well, and make sure that it couldn't get messed up.
 
00:06:41 OKKEN: Pipenv uses pip-compile anyway, so.
 
00:06:43 KENNEDY: I see. And it uses pipfile and pipfile.lock. You know more about this than I do, Brian, isn't pyproject.toml the new hotness instead of pipfile?
 
00:06:53 OKKEN: The pyproject.toml doesn't have, I don't think that it supports doing hashes and stuff like that, so there's still kind of support different ideas, I think the pyproject.toml is, I'm not sure where they crossover, but there still is this difference between a library that you can use for lots of stuff with lots of different versions of things, and an application. With an application you definitely want to lock things down so you know what you're doing.
 
00:07:22 KENNEDY: For sure. Kojo, did you use Pipenv any? What's your virtual environment preference?
 
00:07:28 IDRISSA: So I used it a small amount, I never used it a huge amount. I think my virtual environment preference has been, well, it had been Virtualenvwrapper, but I've recently started using Pyenv. Well, actually, I started using Pyenv but that's more for managing different version of Python.
 
00:07:46 KENNEDY: Right, right, I want this virtual environment to be Python 3.7 and not one to 3.8, and gasp that one, too.
 
00:07:51 IDRISSA: Exactly, yeah, and so, I've been using Pyenv to manage different version of Python, but then there's a pyenv-virtualenv module, so that makes it a little easier to create virtual environments as you switch between Python versions. But for me so Pipenv, again I'd never really gotten into using it, but haven't looked at it in a little bit, and I saw some of the earlier talks about it, you know, it introduced me to that idea of a lockfile and then my personal blog is Jekyll which is in Ruby, and Ruby uses a similar thing, that sort of gemlock file, and so just the familiarity with there from Pipenv was helpful to me, as far as having to try to sort out stuff with Jekyll, because Jekyll is the only Ruby project I use, it's the only time I ever really use Ruby, so, it was helpful at least to be familiar with that set of concepts there.
 
00:08:37 KENNEDY: Yeah, cool. And Brian I'm very excited about Python 3.9 having the --prompt . so you get the folder name without the extra bits that you have to put in there to make that happen in the show. That's going to be cool.
 
00:08:51 OKKEN: I love using prompt.
 
00:08:52 KENNEDY: Yeah, for sure. Kojo, what you got next?
 
00:08:54 IDRISSA: You know, talk about string method called casefold, and this is something that's interesting, it actually just came up this morning, I was working on something this morning, and you can use casefold in places where you're trying to do comparisons without having to look at the case of a string, and so they call it caseless matching, and so the standard thing in Python, or the more common thing that you would do in Python, is maybe use like the string method, like string.lower(), and so you're not worried about whether someone typed something in with uppercase or lowercase, and that works in a lot of situations.
 
00:09:27 KENNEDY: Wait a minute, wait a minute. You're telling me that I've been doing it wrong for all these years, completely wrong?
 
00:09:32 IDRISSA: Yeah, shame on you.
 
00:09:33 KENNEDY: Yes, I didn't, I knew the function casefold was here but until you brought it up I'm like, "Oh, oh whatever, I like lowers," I've been doing it wrong, carry on, this is awesome, I'm ready to hear about it.
 
00:09:42 IDRISSA: Well, so the interesting thing about this is that lower works in a lot of, it covers a lot of use cases, especially if you're using English or a similar language, it's interesting in the docs in the casefolding, it's similar to lowercasing but more aggressive, which is just a little funny to hear, one of my coworkers got a kick out of that, and I think where casefold becomes especially useful is if you're using a lot of unicode characters. And I think Michael you had an example here, so it stood out to me partially because I was working on a thing where I wanted to make sure cases, things were being compared and I didn't have to worry about the case of what was entered versus what was expected.
 
00:10:18 KENNEDY: Right, right, right. And until like, today, I would've written .lower().strip() and been happy with that.
 
00:10:23 IDRISSA: Exactly, and so, I started looking for some other ways, I, in addition to other things, I lived in China for two-and-a-half years, I can read and write Mandarin, a functional ability to read and write Japanese, I taught myself to read and write Hangul, and so I tend to use unicode characters, maybe a little more frequently than the average American, and so for me, I was like, and if I'm trying to build something and I'm concerned about handling text or case matching, I'm always interested in things that will support unicode, unicode characters because of course, emoji, probably the most popular unicode characters, among English speakers, but you also have a number of other languages, where the entire language is represented in unicode characters, so something like this that will work in these situations where you get unicode characters is important, so, like I said, I just discovered that this morning, and ended up using it in a test I was writing, and I'm like, "Okay, I can see how I can use this going forward." And another thing, Michael I think you got like a, a slightly more flushed out example.
 
00:11:20 KENNEDY: Yeah, yeah, so, let me just give people an example. Because aggressively lower casing, that doesn't mean anything to me. When I read this I'm like, I still have no, I read what the doc said about it, I'm like, "I still have no idea what this means." Like, if I had Michael-Kennedy, would the dash be down, like underscore? No, I mean I just don't even know, right? And so I found this example and it has two strings, der Fluss, the river in German, and there's sort of the formal German way to spell it, where you have what's called an Eszett, it's like a, looks like a Beta symbol, which is like two sharp, two 's's together, like a super 's', and then you could just, if you were on like an American or English keyboard, you're like, "I can't find that character." just type two s's it common in German, and if you casefold those, it will actually convert der Fluss with the Eszett, the Beta thing, down to lower case f-l-u-s-s and compare it, which I had no idea, that's pretty cool. So it'll take these letters that are I guess considered uppercase, but not quite the same, and it'll sort of normalize the string more than just lower, is the way I see it, It's like the canonical lowercase version of it.
 
00:12:26 IDRISSA: Yeah, and I've skimmed the example like that and I have no knowledge of German at all, but it was useful to see that example, it's like, "Okay, here's another concrete reason why you might want to use this." But I think also with a lot of applications, be they web applications or standalone apps, when people are dealing with internationalization and localization, that kind of thing, having some sort of a method for caseless matching, that you know will work across in unicode characters, and you know it's not going to break what you get outside of the 26 letters of the English alphabet, is helpful.
 
00:13:02 KENNEDY: Yeah, Brian did you know about this?
 
00:13:04 OKKEN: I'm like blown away. I've always been doing lowercase and so.
 
00:13:07 IDRISSA: You've been doing it wrong!
 
00:13:09 OKKEN: Yeah.
 
00:13:10 IDRISSA: I think it's pretty new from like, I think it got added in Python 3.3 so it's not like a thing that you haven't been using for a very long time 'cause it hasn't been around that long. Another thing that drew me to it was that the idea that in Python 3, going forward, everything is unicode. The default sort of text handling what is unicode. And so, it's not brand new, but it's also not like super old so it you haven't been using it, you haven't been missing out, and again being that lower still works unless you run into a situation where you actively having to do with unicode characters, which a lot of us, honestly, a lot of folks here in the US don't.
 
00:13:47 KENNEDY: Yeah, yeah, pretty interesting. Thank you, that's awesome.
 
00:13:50 OKKEN: This episode of Python Bytes is sponsored by DigitalOcean. They have awesome infrastructure and awesome product. And we use them in our services. Do you have a memory intensive workload? Maybe something like a high performance SQL or NoSQL database, or an in-memory cache, like maybe Redis or some indexes, or some kind of large data analysis run time? Well check out DigitalOcean's new memory optimized droplets. They're an optimize, especially for these high memory workloads. So, check them out at pythonbytes.fm/digitalocean and you can get $100 credit.
 
00:14:25 KENNEDY: Awesome, yeah, thanks to DigitalOcean for sponsoring the show. Brian, I feel like we're kind of in the same groove this week. You pick this, Rest in Peace Pipenv, which, to be clear, the Pipenv people didn't say, "Rest in Peace our project," someone from the outside looked at it and made this declaration, but it's still an interesting article, right?
 
00:14:42 OKKEN: Yes.
 
00:14:43 KENNEDY: Something that I have often wondered about is like you see a lot of times people talking about Virtualenv. And this was like the way to create virtual environments prior to venv being built in Python, right?
 
00:14:55 OKKEN: Yeah.
 
00:14:55 KENNEDY: Yeah. There's a new release of it, and my first thought was, "Why?" Why is there a new release of it? Because Python 3 -m venv, whatever I'm going to type after that, seemed like it's solving my problem for me, and so why would you continue to work on this? You know like it's we're technically in the post-Python 2 era officially, right? I mean not in practice, there's a lot of Python 2 still out there, but it is now no longer supported being past January 1, 2020 so why work on this thing, right? Well, Brian Skin sent in this and I'm like all right I'll take a like, Brian usually recommends good stuff, and it's this announcement by Bernat Gabor, who is working on the project, and today we just did a major release of Virtualenv. I'm like, okay, I got to figure out why this is still a thing and he said, "Look there's a couple of pain points that exist with current, you know, the -mvenv style, that creating a virtual environment is slow, it takes around three seconds even in offline mode, unless you're on Windows then it takes longer, I don't know how much longer but it seems to be that it copies more into the virtual environment rather than symlinking it on Windows, so it seems like it's a little slower. The other thing is is that the API used around PEP 405 is great if you just want to create virtual environments, but it doesn't allow you to target very much around that or describe the target environment without actually creating the environment. And then the duality of Virtualenv versus venv, so Python 3.4 has venv added as I said, so in theory you could just switch away, but there's some other benefits that he talks about as well. So, specifically over venv, which is the ability to discover and use alternate Pythons. I could say -p2 to create a Python 2 virtual environment or kind of like you were saying, Kojo, I could say, -p3.8, or 3.7, or even -p3, and get one of those environments created. So I can select from the different installed Pythons, as I create these, which is pretty cool. It also packages out of the box, out of the box it packages a wheel package as part of the seed, or cache as part of the wheels as part of the seed packages which after it's been created and cached, and it speeds up the install time, especially for things like uWSGI or whatever, like that thing takes 15 seconds to pip install, at least. So, making that faster seems awesome, and it's also guaranteed to work in places where venv is not included with Python by default. For example if you get Debian or certain versions of Ubuntu and you say, python3 -m venv it'll say, "Venv is not installed on this computer." and you've got to apt install it, right? Which is kind of funky. And then around that as well, you can also, because it's pip installed, not apt installed, you can upgrade it right away with Pip, whenever there's new changes, and version it separately than what the OS is versioning venv. So I don't know, what do you guys think? That sounds like a pretty good reason for it to be around, actually, all those reasons.
 
00:17:58 OKKEN: Yeah, the downside of it's confusing to have two.
 
00:18:03 KENNEDY: It is confusing to have two. Well, and then I was confused about it as well. And I'm not saying I'm switching to it necessarily, but I can see why that it's pretty interesting.
 
00:18:10 IDRISSA: I'm I guess between the two of you, from the standpoint of, I like that there is a lot of activity in this space as far as both, like we just talked about Pipenv, with virtual environments and with installing and package management, that sort of thing. It's sort of a tricky issue, and so the fact that people are trying to improve, and people are looking at pain points, and trying to build tools to improve on those is fantastic, I think sort of the confusing part is, and again, as someone who just started a new job, I've just been going through the process of setting up a new machine.
 
00:18:41 KENNEDY: You've been installing all the things, right?
 
00:18:43 IDRISSA: Either installing all the things or unfortunately, you run into sort of like a, name space pollution thing, where almost everything is called like, Pyenv something, or Pipvenv, or you know like, a lot of the names are very similar. It's one of those things where, it's sort of the good side, the bad side of the coin. Again, it's great that these things are being worked on because especially with Python, you want to have some sort of separation, some sort of dependency management, wanting to make sure that you're developing the right version of Python and that you're not overriding things or creating conflicts, but I guess it's a situation where one or two dominant solutions show up, we're all sort of standardized on those, but now there's a little bit of confusion as we get to that point.
 
00:19:29 KENNEDY: Yeah, yeah, it's good to see a thousand flowers blooming but it is tricky to know which one's going to be around, right?
 
00:19:35 IDRISSA: Yeah, which flower do you pick? There are over a thousand of them blooming, so.
 
00:19:40 KENNEDY: Exactly, exactly. Brian, what you got next for us?
 
00:19:42 OKKEN: Well, a little bit of testing. I don't know if we've talked much about Hypothesis, but people probably know about Hypothesis, property based testing.
 
00:19:50 KENNEDY: Hypothesis is kind of mind-blowing a little bit to be honest.
 
00:19:53 OKKEN: It isn't a silver bullet but it's kind of a cool thing. So, I am highlighting a project which is relatively new by Zac Hatfield-Dodds and Paul Gannssle are two people working on it so far. It's this idea of adding property based tests for the Python standard library and for the built-ins and they're comments are that, "The CPython's existing test suite is actually very good but bugs do still slip through occasionally, and maybe throwing some property based testing tools at some parts of it could help." It's not a magic bullet but computer assisted testing techniques routinely try inputs that humans wouldn't, and Hypothesis is what we got for Python so why not? There's not very much covered yet in this project, so I'm highlighting it to try to get other people that are interested on board. But they want to try to have a compelling proof of concept by PyCon US this year. To be running as, and to see if it'd be worthwhile, to have it running as part of the Python continuous integration suite. See how that goes. I think it's really, my view on Hypothesis, really, is that it's especially geared towards helpful for algorithmic pure functions, and in a lot of cases where you have like two functions that work kind of in opposite directions so you can do roundtrip, it's easier to set up a test for Hypothesis to see like for instance, encode or decode, you can take some sort of string or something, and incode it, and then use the decode to make sure that you've got the final output is the same as your input, these are easier tests, functions that are not pure that have state, that depend on state, those are harder things to test with Hypothesis. So, I think there's actually quite, and that kind of applies to a whole bunch of the standard library, so I think there's a whole bunch of stuff that could be tested more thoroughly with Hypothesis, so this is pretty cool.
 
00:21:46 KENNEDY: Yeah, it's a really interesting way of testing, and I'm glad to see the project, it looks cool.
 
00:21:49 OKKEN: One of the things I like about it is these are some people that I respect and having some people do these focused examples of how to use Hypothesis in this way I think will actually help as a teaching tool to help other people learn how to use it.
 
00:22:06 KENNEDY: I would love to see like a big set of the standard unit tests for CPython, moved over and maybe condensed and brought down into like this Hypothesis style to see what the two sets of test suites look like. That would be interesting. Feels like a lot of work but it would be interesting.
 
00:22:23 OKKEN: Oh, but even like a specific case of taking like one, what are the functional tests, that exist in CPython already, what do those look like compared to the property based test. They're testing different things so it'd be cool to see them side-by-side, too, that's neat.
 
00:22:38 IDRISSA: So property based testing is a thing that, so in my prior job I did most of the QA, so I started to look into property based testing, it's one of those things that it sounds very interesting, something that I'd like to know more about and just have another time to dig into but this project looks interesting, and it also kind of flows right into my topic. So, the people that you were just talking about, Zac Hatfield-Dodds and Paul, they are doing a tutorial on property based testing, and so what I wanted to talk about was just about, what time is it now, 3 my time. So about two hours ago, I got an email from PyCon, saying that the PyCon tutorials, or the schedule for the PyCon US tutorials, PyCon US 2020, the schedule for those tutorials is up and available and you can register for them now. And so if you are thinking about going to PyCon depending on what you do, different people, you know some people work in places where, their companies would just send them PyCon is not a big deal, other people have to make a business case, to try to sort of convince their organizations to let them go. If you are in a situation where you need to make a business case, the tutorials are often an excellent tool for that, because you can get a lot of high quality training from people who are very knowledgeable in their field, so one of the tutorials is actually "An Introduction to Property Based Testing," by the same people that Brian was just talking about. So, there's a link here to pycon.org. There's a full schedule of the different tutorials that are available, and you can register for them now if you'd like. They tend to sell out pretty quickly though. The PyCon tutorials tend to be pretty popular. They tend to sell out pretty quickly. The good news is that the videos of the tutorials are all available, so even if you haven't, if you weren't able to make it to a prior PyCon, the videos for those tutorials are available, and so you can look at past tutorials. The big advantage of actually going to PyCon, and going to a tutorial, is again just the fact that you have a chance to interact with the people who were giving the tutorial and to be able to ask specific questions that meet your specific use case.
 
00:24:36 KENNEDY: Yeah, and make connections, right?
 
00:24:37 IDRISSA: Yeah, exactly. Make connections with the people, again, if you are trying to, say for instance, just say with the property based testing, if you're trying to implement that where you are, not only now is there this effort to bring some property based testing into CPython, but you take a tutorial, you can actually interact with the people who are leading this effort, and then if you have specific questions, you made a connection where you can reach out to those folks and try to get some help as far as implementing, trying to figure out what to do to implement that kind of thing where you are, to get a better understanding of the use cases, that sort of thing. So I went through, like I said, I think the schedule just went up an hour or so ago, so I went through and sort of looked at ones that were interesting to me, a couple standouts to me were, one, there's a tutorial on "Migration from Python 2 to Python 3," and as Michael was just talking about Python 2 is now end of life, and so if you have not moved to Python 3 now is the time.
 
00:25:33 KENNEDY: Got to get busy!
 
00:25:34 IDRISSA: Earlier was really a better time, but there's no time better than now if you haven't done it before. So a tutorial on that, that'll be really helpful. Another one called, "Welcome to CircuitPython!" by Kattni Rembor. We were talking before with Michael's point about the remote controlled cars, if you're looking at ways to get started with programming or to get other people into programming, actually programming hardware is a good way to do that. Few things get people's attention, like writing some code and making a light turn on or making a light change color or making it flash in a certain pattern. And so the CircuitPython, I remember, I think at PyCon last year everybody got a CircuitPython playground board, a small, a little mini circular board, that had lights and various sensors on it, and so I've been to one of Kattni's tutorials, like at PyOhio in 2018 maybe, and so the CircuitPython boards are really interesting, you've got lights and sensors and you can build all sorts of things with them, and it's a great gateway into programming, a great way to get started, or if you're an experienced developer, a great way to get started with hardware programming, and then the "Intro to Property Based Testing", and then there's another tutorial called, "Minimum Viable Documentation," by a woman named Heidi Waterhouse, and I've met Heidi, we spoke at PyCaribbean together I think a couple years ago, but it's this idea about how do you set up a proper technical, a proper documentation structure for your projects, and focusing on the technical writing aspect, I think it's one of those things, especially as a project gets larger, but even in a smaller project, it gets overlooked sometimes, there's so much focus on, "Let's write code that does this thing.", and that's fantastic, but what if you want to add a second person? Add a third person to that project, and then you options then become either, the first person sits down and just spends four hours talking to the new person, or if you have a good documentation structure you can just point them to the documentation and let them get up to speed on their own. There are multiple other tutorials but those are ones that just sort of stood out to me. But if you haven't been to a PyCon US, the tutorials are I think one of the strong reasons to want to go, among other things, meeting people, and making connections and that sort of stuff, and the open spaces and the hallway track, but the tutorials, especially also if you're in a situation where you need to make a business case to your company, to get support to go, the tutorials are a really good option for that.
 
00:27:49 KENNEDY: I love that angle. And I also approached it the same way that you do, it's like, "Oh these are out! Let me see which are interesting to me." So I came up with three as well. "Maps and Machine Learning: Spatial Analysis with TensorFlow, scikit-learn, and PyTorch," and I think it's really cool, kind of like you were talking about, the hardware's like, you take geospacial data and real world things and do awesome stuff with it, with Python, so here's kind of the map version of that, I think that one's a fun one, and then, "Hands-On Web App Test Automation," by Andrew Knight, Brian, that'd be a good one for you, as well, that sounds pretty interesting.
 
00:28:25 OKKEN: Yeah, that does look good.
 
00:28:26 KENNEDY: And finally, "Bigger, Better, Faster, More! Building Applications in Python." that also looks pretty cool to me. So there's a bunch of other great, and this is not like the Best Of list or whatever, this is just like stuff that stood out to me, like, "Oh, I'd go to these." Sounds pretty cool.
 
00:28:40 OKKEN: And these tutorials are priced way lower than any sort of corporate training is going to priced.
 
00:28:44 KENNEDY: Yeah, yeah, pretty cool. You guys are both going to be at PyCon, right? Brian you are speaking, is that true?
 
00:28:50 OKKEN: I am speaking, yes.
 
00:28:52 KENNEDY: On what topic do you speak?
 
00:28:53 OKKEN: I am talking about parameterized testing.
 
00:28:55 KENNEDY: Awesome and Kojo, I'm guessing that you're going to be there, you're at a lot of the conferences.
 
00:28:59 IDRISSA: Yeah, and actually so this year, I just started a new job, I'm working with a company called REVSYS now, they're sponsoring it so I will be there. But yeah, and I would have been there either way.
 
00:29:08 KENNEDY: Yeah, awesome, I'm glad you're going to be there, as well. All right, Brian, I guess that's it for our main items, huh?
 
00:29:14 OKKEN: Yeah it is.
 
00:29:14 KENNEDY: You got anything to share with folks?
 
00:29:15 OKKEN: I was going to share with folks that I'm speaking at PyCon, but we already covered that set.
 
00:29:19 KENNEDY: We snuck it into the previous one. How about you Kojo, anything extra you want to throw out there for the world?
 
00:29:25 IDRISSA: No, I don't think I have any new exciting Python related stuff.
 
00:29:28 KENNEDY: Well I've got a couple to share. One, Eric Chou just released the third edition of his "Mastering Python Networking" which is a cool little, use Python to control all the network things and set up network topologies. It's quite interesting, and I got a chance to write a foreword to that, so thank you, Eric, and I'll link to the book. Also, speaking of network things, both Pyramid through the waitress web server thing, and Django have issued like vulnerability CVEs, yeah if you have either of those in production, and they're on the internet, or even not, you might want to do a little upgrade, a pip install upgrade all the things on it, because, yeah there's like, a SQL injection vulnerability, like a little Bobby Tables vulnerability in Django and some other similar type of thing for waitress, and those are not good to have.
 
00:30:18 OKKEN: And why is Pyramid and waitress together? Is Waitress bundled with Pyramid?
 
00:30:22 KENNEDY: It comes with Pyramid and I think the guys who work on Pyramid may also work on waitress, I'm not sure, I could be wrong about that, so I'm sorry people who work on waitress if I got that wrong, but certainly when you install Pyramid, you get waitress and you want that to be up to date. Waitress, server, you know, things like that. And then the last thing kind of like your item here, Kojo, even shorter time, like 45 minutes ago, the Stack Overflow 2020 Survey is open, so everyone should go fill that out, there's a ton of information about where the broader ecosystem is at here, so it takes about 10 minutes, it's a little bit long, but it's totally worth it I think.
 
00:31:01 OKKEN: Yeah, and if there's anywhere in there where you can plug our podcasts, go for it.
 
00:31:04 KENNEDY: There totally should be.
 
00:31:07 OKKEN: Like, "Where do you get your news?" Or something like that.
 
00:31:09 KENNEDY: Yes, exactly, other. Alright Brian, I picked a joke for us that's graphical, so we'll have to do a little work describing it, but I think it's going to come out pretty well, because I think it's right up your alley actually here. So this is a comic which is, "Richard's Guide to Software Development." I'll kick it off, there's like a cat, with little super bionic legs, and underneath the caption is, "How the software is designed." You want to take it from here?
 
00:31:38 OKKEN: Okay, well then the next one is, "How much time has to be spent on each part?" And there's like 4% for the head, 2% for the middle of it, 80% for the tail, oh yeah that's totally true.
 
00:31:52 KENNEDY: Nice, the next one is, "How the software looks before the Beta test." It's a cat but it has no back legs at all but it still likes to spend it somehow.
 
00:32:01 OKKEN: Yeah, and then, "How the software looks after the Beta test." There's no front legs but there are back legs.
 
00:32:07 KENNEDY: I'm just trying to imagine what happened here, like, "No, no, we wanted legs on the back of the cat." Like, "Oh, you want the legs on the back, sure we'll put them on the back."
 
00:32:13 OKKEN: "Okay, we'll just move them."
 
00:32:14 KENNEDY: "How the software is advertised." Is like a tiger springing out of a picture with like action.
 
00:32:21 OKKEN: Yeah, "What the customer really wanted." It's just a questions mark, 'cause nobody asked.
 
00:32:26 KENNEDY: Exactly. And then, "How the software looks two versions later." It has a nose like an anteater or an elephant and there's just a random human arm coming out the back of it.
 
00:32:36 OKKEN: Oh, man. And the last scene has like a dude petting this cat that has the arm sticking out with the elephant nose, saying, "I still like you anyway."
 
00:32:46 KENNEDY: The cat says, "Toots.". Anyway, there's a nice little testing one, actually for you as well, Kojo, right, you were in QA.
 
00:32:53 IDRISSA: Yeah, used to be, yeah the developers love their software.
 
00:32:57 KENNEDY: That's great. Alright well, this was a lot of fun. Kojo, thanks for being here, and Brian thanks as always, glad to have you back this week.
 
00:33:05 OKKEN: Yeah, yeah, thanks.
 
00:33:06 IDRISSA: Thanks for having me you guys.
 
00:33:07 KENNEDY: Yup, bye everyone.
 
00:33:09 IDRISSA: Bye.
 
00:33:09 OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter @PythonBytes, that's Python Bytes, as in B-Y-T-E-S, and get the full show notes at PythonBytes.fm. If you have a news item you want featured just visit PythonBytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
