0:00:00 OKKEN: Hello and welcome to PythonBytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 170 recorded February 19, 2020. I am Brian Okken.

0:00:11 KENNEDY: and I'm Michael Kennedy.

0:00:12 OKKEN: And this episode is brought to you by Digital Ocean. They've got something cool. We're gonna share with you a little later. But first tell me about whatever you're gonna tell me about first.

0:00:23 KENNEDY: I want to kick things off by building a picture for you. A picture of something awesome and yet something fairly complex. The Python visualization space. I don't know how you feel about it, but whenever I think Oh, my gosh, I got I like, go make some cool pictures and do neat things with Python. I'm like MatPlotlib. Bokeh.py PyPlot. What else should I learn? All these other things and then if I want to do this graph like just there's a lot of stuff out there.

So Prayson Daniel sent across a website, a resource for anyone who feels like me and says, "Ah, there's like, kind of overwhelming sense of all the things happening." And this is called Pyviz at pyviz.org.

And basically the idea with Pyviz is they've characterized and mind-mapped all the things around. I've gone data visualization, and they've grouped into different stuff. So the way they described, as they say, it's an open platform for helping users decide on the best open source Python data visualization tools for their purpose with links, overviews, comparisons, examples and tutorials. 

0:02:00 Brian: That's cool. 

0:02:01 Michael: Yeah. That sounds good, right? So they have different sections that you could go check out, overview of all the packages, which is like a nice visual graph relationship thing. High level overview. The tools. A, live table comparing maturity, popularity and support. Also special focus on building dashboards that are like interactive Web things that people can interact with for scientific visualization, for rendering embedded three dimensional objects. And I said some tutorials and examples. Also, some of the examples talking about If you have this kind of data, here's how you visualize it. What do you think?

0:02:06 OKKEN: Yeah, I like it. The subset is still a lot of work if you know what you want to do, and you still have to try to figure out well, you want to do with it but at least it's broken it down into, um, just a handful of things that you have to figure out.

0:02:18 KENNEDY: Yeah, absolutely. Well, it doesn't entirely alleviate the challenge of this. But like, for example, if you go to the overview section, you can see there's three main sections Javascript. Matplotlib in openGL. And that might sound like "I thought this was Python. What's up?" Like these are I'm gonna work with Python and to get the outcome as a Javascript thing on a Webpage or something, I can get into Matplotlib or something I can get into, like an open geo window for interaction and white on. So, yeah, there's a bunch of stuff here that you can, but but I think it's interesting to see the relationships as well.

0:02:55 OKKEN: Well, we had a visualization thing that we used it work that we had originally done a ah JavaScript side one, and I think that we're gonna switch and go back to a Matplotlib side, mostly because it's whether or not it's being happening on the front end of the back end. Yeah, that's a division that we have to make made that decision. But, you know, it's only software. You can change it.

0:03:19 KENNEDY: That's right. It's not concrete.

0:03:21 OKKEN: Just get another intern. So

0:03:24 KENNEDY: Indeed, indeed. All right, Well, I definitely am going to make  use of this site if I've got some visualization to do. And yeah, there's a couple of things I'm really would like to up the reporting exploration game for both the course side of things, understanding what users are up to, but also for the podcast. Right? So we can understand how our listeners air listening a little bit better. So I'll see what I can do around that for us. It might involve one of these

0:03:48 OKKEN: Yeah. That'd be cool. I'm intrigued by the breakdown of some of the dashboard ones.

0:03:52 KENNEDY: Yeah. Would you say that? That projects awesome. That I was thinking about

0:03:55 OKKEN: I think so. Yeah that would probably be an awesome project.

0:03:58 KENNEDY: What else is awesome?

0:03:59 OKKEN: Oh, well, Zen is awesome. There's actually like a lot of these. I have to admit it. I like the awesome sites, the collections, "awesome collections" of different things usually thrown upon get hub. And this one's also and get

0:04:12 KENNEDY: they're usually more concrete, though they're more like awesome a sink. Servers in Python are awesome, you know, Web frameworks,

0:04:19 OKKEN: right? But, you know, we're getting gonna be real little reflective here. We've got a rabbit hole of Zen with the "awesome Zen of Python". Yeah, I was trying to make a bad pun of a rabbit whole Lot of Zen.

0:04:31 OKKEN: So anyway, so the Zen a Python is the thing. So you import this and you see it and we've covered, I think at least one article talking about that. But somebody put together a collection of articles and video and talks and some other things about the Zen of Python because people have thought about it and written about it. And I like it. A couple of things. I wanted to point out Al Sweigart has a a nice one that's Zen of Python explained it's a really quick reference if you're if you're new and are curious about the Zen a Python and you read it and you don't quite get what the heck that is. I think that he did a good start. Probably get his name wrong. But Moshe Zedka has a meditations on the Zen a Python, which is probably longer, couple of paragraphs per item, a little bit longer. But I like his take on it as well.

0:05:21 OKKEN: And one of the things I just learned recently is that there's a reference to the increment and decrement operator within the Zen A Python or not the decrement, but postdecrament and pre-decrement from C is like something that trips up. C people? There's actually a joke embedded in these in a Python about that.

0:05:39 KENNEDY: How nice.


Yeah, If it has to be an interview question about what increment a variable does, it might be too complicated.

0:05:49 OKKEN: Yeah,

0:05:50 KENNEDY: what happens if you test If you know, plus plus X of this thing or whatever, right? Like that's, uh, not good. So

0:05:58 KENNEDY: although I do wish Python had an `X++`, you know, sometimes.
0:06:03 OKKEN: go, Yeah, just an easy. increment or decrement operator would be good, but we don't need two.

0:06:10 OKKEN: I gotta admit I read in the now we're getting down the C world in a four loop. It's recommended that you do a pre-increment because it's a little bit of savings on conflicts. Objects to do pre-increment, But give me a break. It's `i++`, at the end of a four loop. I always do that.

0:06:26 KENNEDY: Yeah, it is. Definitely is. So I'm glad Python doesn't even have a for loop.

0:06:32 OKKEN: we have for-loops. Just not...

0:06:33 KENNEDY: "for, in". Yeah, `for i==0`.

0:06:38 KENNEDY: Yeah, pretty sweet. Yeah, This is a cool are the cool find here. I like this.

0:06:43 KENNEDY: The Zen a Python is something that's frequently spoken about but is very terse and there's not a lot of explanation about it. So, you know, it's like one of those things. I remember being new and being like "Oh the Zen of Python" How cool! What does it mean?

0:06:58 KENNEDY: You know, I mean, like, could I get an example for each line? Please would be nice, you know?

0:07:02 OKKEN: Yeah, I'm also including a link. I think it's important to read Zen A Python is a joke, and here's why. And it talks about a few aspects of it as to basically don't take it too seriously. And Python is a language that you're really not supposed to take too seriously. Yes, it's serious. We can get a lot of work done. But look, it freaked out on stuff.

0:07:22 KENNEDY: It's named after Monty Python, after all. Come on?

0:07:25 OKKEN: Yeah, exactly. Lighten up, people.

0:07:29 OKKEN: You know what else is awesome? Kubernetes, kubernetes and Digital Ocean? Yes,

0:07:35 OKKEN: So there is an enormous amount of material on the Web about communities available both online and in print.

0:07:42 OKKEN: So the digital ocean community realized that it's a little, you know, you might have trouble figuring it all out, even though there's a lot of information. So they developed a kubernetes for Full Stack developers course

0:07:55 OKKEN: to provide a thorough, well maintained, an approachable reference set of tutorials for anyone who would like to start learning about kubernetes. And if that wasn't cool enough, they also realized that some people don't want to take courses they want to read about it. So they compiled the course curriculum into an ebook to make it available for more people. So you can see that if you go to Pythonbites.fm/do-kube. And you can download the book and visit the course. And, as always, you can visit pythonbytes.fm/digitalocean to get $100 credit for new users to build something awesome.

0:08:32 KENNEDY: I think we should just keep a lid on things that are awesome. Yeah. So Matt Harrison inadvertently recommended this next item to us. (Really?) I mean, like, very indirectly. But he does. So he posted on Twitter How he is absolutely loving. Jupytex.

0:08:48 KENNEDY: J U P Y T E X. Jupytex.

0:08:53 KENNEDY: And I didn't even see it on Twitter. No, Twitter emailed me a summary of popular tweets, which said Matt Harrison liked this. So thank you, Matt. I


0:09:02 OKKEN: Interesting.

0:09:03 KENNEDY: Okay, so Jupiter, no, books are awesome. They're super cool for exploring data. And they're really powerful for people who are doing, like, more exploration rather than writing software. Right. You can run the first bits. They might take a while, but then you can slice and dice stuff, visualize it and explore it as much as you want.

0:09:20 KENNEDY: However, they're not all the way Awesome, because if I put one of those things in to say, GitHub and you were to check it out, and I were to be messing with running it, and that was getting, like, live data, so non deterministic results. And you did the same, and we both put it back. It keeps like those results and stuff, and it's not very friendly.

0:09:39 KENNEDY: in git right?

0:09:41 KENNEDY: Another thing that would be nice would be. Sometimes you want to explore stuff in Jupyter, but then product eyes it, turn it into a script of its natural language, right? It supports a bunch of languages. Now would be nice to Bill ago. And here is the one we run. Where the comment, the text becomes comments or whatever. So basically, that's what do text does. It will take Jupiter notebooks and turn them into mark down documents or Python scripts. Wow. And then you put those in source control or whatever, right? You can work with those so you could then export it out and work with it in, like, my charm or something like that. You also get meaningful defense of what changed

0:10:19 KENNEDY: when you know you look at the differences of those. So this thing is really cool.

0:10:23 KENNEDY: You can export the Jupiter notebooks in all these different script languages. Currently it supports. Ready for this Julia Python are bash scheme closure, Matt, lab active, which is the open source. Matt Lab C++ u K g B plus I d l I've script JavaScript scale a rust Our shell c sharp f sharp hand. My favorite behind Python robot framework.

0:10:49 KENNEDY: I don't wanna work in the robot framing what languages, you know. I know, Robot. Really

0:10:53 SPEAKER_3: cool.

0:10:54 KENNEDY: Yeah. Anyway, people who are working in Jupiter notebooks, this looks super helpful. And Matt, thanks for having a popular tweet that got emailed to me.

0:11:01 OKKEN: Yeah. So can you do scheme in Jupiter? You must be able to

0:11:04 KENNEDY: You must be able to I did. Scheme is my CS 101 course wouldn't idea. It's Zs courses.

0:11:12 KENNEDY: And I'm not a fan of all the clothes prophecies. To be honest, I'm like,

0:11:17 KENNEDY: what a crazy language this is. But apparently you can, uh thanks. I guess I would rather do that over, Like, rather than through, like, an ex term or whatever, but yeah, yeah. Pounding

0:11:27 KENNEDY: pretty cool anyway, So if you work in the Jupiter notebooks and you want to be able to export them in school ways and do other stuff as well, check that out.

0:11:33 OKKEN: Well, one of the things I want to talk about is stuff that we iterated over

0:11:39 OKKEN: Okay, This is a failed attempt as a transition.

0:11:42 OKKEN: So a great article called a tour of Python itertools and `itertools` is one of those things that you kind of. It's so cool. But you kind of blast past it when you learn it. And you when you're learning Python, it's a little bit a little bit more advanced than you want, but this is cool stuff. This articles by Martin Hines and he's just kind of briefly describes what handful of the different tools within `itertools` and a library called`more-itertools` does, and all of these air around iterables and iterating over things. And you wouldn't think right off the bat that you could do so much. But I'm gonna I like that. A few of these not all of them foreigner tools. He talks about compress, accumulate cycle and tee and I had not been familiar with `cycle` and `tee` but they're pretty cool. So terrible's some of them that they like their empty once. You go over it once, and `tee` allows you to make multiple references to one interval. That's pretty neat, and cycle is so cool. It allows you to like, so you. If you generate over like, say, a set or a list of items, you can just generate through it once. But cycle allows you to just keep going over and over and over again. It's like a never ending repeating  and, ah, the little example in the document or in this article that shows you how easily jittery through characters to make a never ending spinner on a command line. So it's kind of fun.

0:13:11 KENNEDY: Oh, yeah, that's cool. Yeah, you just put the the different ones and a list, and then you just cycle it.

0:13:16 OKKEN: Yeah,

0:13:17 OKKEN: the note is that, like for things like games and stuff like that, if you generate through you're different players, you might have to do that. But there's a lot of cases where I wanna, like maybe zip through a couple lists, but I it's really just ah, site. One of the list is a cycle. You can kind of do that at school. `more-itertools` has a whole bunch of things like he's highlighting different things that are different ways to chop up your iterations like there's a divide that just divides it into different salvage terribles

0:13:46 KENNEDY: like paging Almost like process, um, 25 at a time or something?

0:13:49 OKKEN: Yeah. So there's a whole bunch of different, like in `partition` is like, if you have ah, expression to the can be mapped to true or false on any of your elements it will split the interval into two intervals based on that critic, it which is pretty cool. A, _side effect_ that I never knew about. So if you want to add another another function that gets called with each element during iteration Wow, this is cool. I think that's neat. I don't know what it use it for, but I'm gonna come up with the use.

0:14:18 OKKEN: There's, ah, bucketizing to be ableto do a bunch of buckets, `map`, `reduce` just a whole bunch of new things. And I think this is a good if you think you you like, sunk your teeth into Python and you wanna like take it to the next level. This is a good article toe learn itertools.

0:14:34 KENNEDY: This is ah, super interesting. And `itertools` is definitely one of those things where you feel like I'm always surprised that there's extra stuff

0:14:43 KENNEDY: `collections` as well. You know, it's just like, Well, yes, also that thing. Why did I not ever use that thing? You know,

0:14:49 OKKEN: there's some things about programming that I know. Some people say, though, when they come to a problem and they need a solution for, then they'll look up. That's how they learn new things. But you're right with `collections` and `itertools`. You don't know to look it up because you don't know there's a solution there. So these air good things, too, like skim through so that you just have seen them once. So that later, when you run into a problem, you're like, Oh, there's a thing in `itertools` that I can use for this.

0:15:15 KENNEDY: Yeah,

0:15:16 KENNEDY: I know that That's true even before I look. But I don't know what it is. I just know if I go dive around, there's probably something I can use at some point. Yeah, that's a cool one, and it's nice to see it put together and highlight it like that. I just really want to talk about this next one. Okay? Okay. All right. So this next one is called justpy and the idea is I want to create a web application that allows me to do single page app. Cool interactive friend and framework type stuff that I would do with something like Vue.js, but I don't want any JavaScript, so it's pretty interesting. It's a Web framework that lives on a server. So put it on your standard... It actually supports async stuff, so you'd put it on like an async server, like starlet or something like that or you uvicorn. And then you express how the pages are supposed to look in Python, and it creates the Java script that's going to make that happen. And then

0:16:18 KENNEDY: I guess, Web sockets or some form of back and forth back to the server to run your private code as people interact with it. (Okay...), using effectively like AJAX type of interaction.

0:16:30 KENNEDY: So, yeah, let's you create these front end and, you know, sort of full stack Web Apps with no front-end programming.

0:16:37 KENNEDY: And the way it works is like I said, it has no front and back in distinction. All the programming is done on the back end, allowing a simpler, more productive way a more private nick way to create a Web app, but it intercepts the relevant events on the front end and sends them back to the back end to be processed, either talking to a database or just like having the Python logic. They're neat. Yeah, it's a really, really different take, and it's been getting a lot of traction,

0:17:02 KENNEDY: my personal thought on it. The verdict's a little bit out. I'm not sure how I feel about it, but I definitely think it's interesting that people should check it out to see what they think about it. It's really based on, like classes and components, so you can create these components, which then can be put onto the page like here's a logging component,

or like a component that displays a list of podcast episodes or whatever. We put those in different places and you create these custom components, and they could either be just straight Python where you create kind of the Dom in Python. That's part of the It was more HTML based. I'd be happier, but it does also support HTML components that then work with it and even has, like interactive charts and grids. That's pretty cool.

0:17:45 OKKEN: Yeah, I see what you're saying. It's gonna need. But also, if you don't want to learn HTML and Javascript learned this instead.

0:17:53 KENNEDY: Yes, exactly. It's kind of like that. It's like too much avoiding. Hmm. I think it's awesome that the logic of it is in Python. And this this no distinction stuff is really cool about the front and back in. I just wish I would design the site in html CSS and then plug in the live nous through this not as much of the content definition that said, quasar, I suspect many listeners are not familiar with the Quasar Library, but the Quasar library is a cool library that's got all sorts of stuff built on top of Vue.js So their little slogan is build high performance of Vue.js user interfaces in record time so you could see they've got, like, think of kind of like what Bootstrap did for Web design is kind of doing that for a Vue.js right, You get some, like cool stuff going on there, and the reason I randomly diverted sideways and started talking about view Js and Quasar is because just pies built on libraries that you would know so starlet and you ve a corn for the service side, but view Js for the front end. That means the quasar library automatically plugs in its components and functionalities into just pie. So that gives it, like, actually a huge boost like, Oh, there's already That's really cool library. They just plugs into it. 

That gives it a boost. But yeah, I wish you could define more stuff in HTML and then bring it Now you can say, like, here's an HTML page. I'm gonna import it and like, work with it. But it's not. It doesn't seem to be my first reading that that's like the natural way to go. (Yeah, okay.) 

But nonetheless, I love that this exists. It looks really interesting, and people should check it out. Nice. Nice. I wouldn't with the maintenance story like is around it, though.

0:19:34 OKKEN: Yeah, curious. So we want to talk about maintenance, and I'm not sure why. This articles, titled _Modularity for Maintenance_, So module every for maintenance. It's, um, a bunch of automation tools that you can use to help maintain your open source projects, and it's really terse with links. But it's got continuous integration and tox and lending tools and type=checking and dependencies and security scanning and using code coverage and formatting help and releasing. And all these automation tools that help you, which is, actually, it's really cool to have all these listed down in one place. 

And I like that if you done all this for a bunch of projects and then you start a new project, or maybe you split one project into two projects, just the overhead of making setting all that stuff up again for another project is in itself a lot of work. And so he's hoping for some sort of, ah, cookie cutter like thing or something for somebody to make so that you can save some time. But all of us also, I never really thought about all of these time saving things. You actually end up having toe set up again for each project.

0:20:43 KENNEDY: Are they actually saving your time?

0:20:45 OKKEN: Yeah, right.

0:20:46 KENNEDY: It depends. It depends. How long used the project? Probably they are, but yeah,

0:20:49 OKKEN: probably, but I guess it is interesting to think about the extra overhead and the and the you have to have some of these require, like, log in, you know, sick credentials and stuff they have to set up. But I actually really like all this list, and I kind of want to go take one of my projects and make sure see if I can, you know, make sure I'm hitting all of these things.

0:21:09 KENNEDY: Yeah, it's super cool. And I just last night use cookie cutter. The brand new Python package. Template from cookie cutter to create a Python package that I'm working on. So, yeah, this is super well, I'm like, Oh, I bet there's a cookie cutter thing to set up like the setup. I'll just write and integrate talks and whatnot. Yeah, let's hit it with that.

0:21:31 OKKEN: Where was this? A new cookie cutter thing?

0:21:33 KENNEDY: It's not super new if you go to ah, cookie cutter, there's like, uh, a place called apart called entry full of cookies or something like that. Let me go out for a bit early. Quick, under the documentation on cookie cutter, don't read the docks. There's a pantry full of cookie cutters, and then the 1st 4 are for making packages. So there's _Audrey's ultimate Python package_ project template creator thing. There's a minimal package for `pip install`-able projects. A couple others. The one I used was the second one I believe. No third one. 

I don't know. I can't remember anymore. And it was on a different computer, so I can't get to the history of it. (Okay). Yeah. Anyway, these really cool, because basically, it sets it up. And I use the one that was the minimal pie package minimal that it already magically sets it up to work with pytest

0:22:23 KENNEDY: and has the `setup.py`. All generated based on what you tell it and stuff like that is pretty cool. Okay,

0:22:29 OKKEN: well, if it is not using Flint. I don't know if it's really minimal.

0:22:34 KENNEDY: but the thing is, it doesn't have all these things that glimpse talking about, right? It does have Travis see, I integration in there, but there's a lot of things that it could be added, and it's pretty need somebody could for that in and make it.

0:22:48 OKKEN: Yeah, I definitely think so. So

0:22:51 OKKEN: hopefully

0:22:51 KENNEDY: Yeah, Nice. All right. Well, I guess that's it, huh? What else? We got? What you want Let people know about.

0:22:55 OKKEN: Here's a quick one. Not really big enough to warrant a whole topic, but ah, I noticed. Ah, Sentry is helping to fund some open source projects. They got some money from somebody else. They decided to match it and pass it along. And, ah, they're gonna help fund black, PyPi, Pytest, Strucl log and a rust tool called Gimli. Cool. And that's pretty neat. I like the actually, I haven't played with Struck like too much. I've played with a little bit, but all the others I use all the time.
0:23:26 KENNEDY: Oh, yeah, Very nice. Yeah, Sentry. Nice open source based company, buddy. An open source. Pretty nice.

0:23:33 KENNEDY: The circle of life, except for Sentry is not eating any of these, But other than that, this is nice.

0:23:41 KENNEDY: Thanks. All right. Ah, Couple of quick announcements on my end Just launched a new course _Python for Absolute Beginners_. So this is like, Hey, I didn't take CS at college. What the heck is all this stuff about when people talk about, like, reallocation and labels and data structures, but actually really getting started? Python. So that's a super fun one. People can check that out, build a lot of games, but learn a lot of Python.

0:24:04 KENNEDY: and then also related on talkpython.training I started streaming a couple of our latest courses where possible, including this one I just announced

as high-DPI So almost 4K stream and it's It's like night and day. It's so awesome to look at the screen and go, That is like as if I'm looking at a real monitor.

0:24:26 KENNEDY: Just went back in time. So anyway, I'm trying that out. Hopefully, it's so far it's been working well for people, but for some reason, doesn't people consider me a note?

0:24:34 KENNEDY: Here's an interesting one that comes from Anthony Sottili. Amazon Web services has decided to no longer publish AWS CLI. Their package, aws cli to PyPI. I pulling a 700 _million_ download package off of PyPI. I think of all the bandwidth they're saving.

0:24:53 OKKEN: That's weird.

0:24:54 KENNEDY: So this is not their Python Library, potentially. This is the CLI tool that people who don't even do Python would use. It's just implemented in there, so

0:25:06 KENNEDY: it's not a huge deal. It's not like a giant. Oh my gosh, what's happening to the world sort of thing, But it's also strange. So what's more strange is I'm linking to, Anthony Sotilli's, twitter thread that talks about this. But then that links over to GitHub where there's more conversation

0:25:22 KENNEDY: on one hand, it makes sense, right? Like why use pip to distribute a library that is not specifically for python developers but of the other bit is while the replacements and inversion zip file of scripts. SoI don't know which is better. Totally funky. And finally,

0:25:43 KENNEDY: people might have noticed some weirdness with the podcast. I don't know what is going on, but something happened. I think it was at Apple

0:25:50 KENNEDY: on TalkPython, all of sudden started showing four episodes, some from three or four years ago as the latest.

0:25:59 KENNEDY: And you might say, Well, maybe something changed in the database and the dates got wrong or the numbers like we changed nothing. We didn't change the RSS feed generator. We didn't change the data. It just all of a sudden started going crazy.

0:26:12 KENNEDY: And ah, my theory is they've put some kind of limit on the size because we were shipping like 2.5 megs of XML for each request for our, especially for pythonBytes cause the shownotes are large,

0:26:25 KENNEDY: and I think it just limit like No, but it's it's response to know was just to do something really weird. So

0:26:32 KENNEDY: on Python bites, we now are showing just the last half year because the alternative was to have things massively broken in the RSS on podcast players. So if you want the older ones, they're still available on the Web site. We're not doing anything like that, but this was the fix that I had to put in to get things to work again,

0:26:51 KENNEDY: Yeah, I don't know what happened.

0:26:53 OKKEN: I think it's a fair trade off.

0:26:54 KENNEDY: Yeah, I do, too. And also like it means stuff to refresh us faster or people they're not pulling two point by MBs, like all day long with their podcast players. I don't mind on the Web server, but for them, they might mind.

0:27:05 OKKEN: Yeah, they don't pull it all unless they downloaded every episode or something. Well,

0:27:10 KENNEDY: it's constantly pulling that 2.5 megs

0:27:13 KENNEDY: over and over and over, right? Like if you pull up the tail of the Web service is going to him to him against that over and over and over it. Then it pulls the actual episodes it finds that are different. So all right. Okay. Yeah, but it is hitting the full on ours. Do now. The RSS feed is like 250KB, which is still pretty big, but it's not 2.5MB.

0:27:32 OKKEN: Oh, yeah. One small.

0:27:34 KENNEDY: Are you a fan of physics? Einstein? Yes. Relatively.

0:27:38 OKKEN: L a gravity. It's good.

0:27:39 KENNEDY: Yeah. Yeah. And you're also a fan of software quality. Has most tougher faithful, shifty, a suspect. But did you know that E equals M C squared?

0:27:49 KENNEDY: It has

0:27:50 OKKEN: heard that on t shirts before.

0:27:52 KENNEDY: It's it's a statement about about programming. Really? I didn't realise Einstein was into this, but is about, like, testing and good quality and bug rates and whatnot now, because e equals m. C squared is errors equals more code squared. So as you add code, the errors increase at the square of the Kana Monaco. Basically, that seems not totally untrue.

0:28:15 OKKEN: Yeah, that's funny, but yeah, you're right. It's sort of kind of true. Yeah,

0:28:19 KENNEDY: not sure of its the square or it's like 1.5. Or maybe it's like, definitely nonlinear, though, you know, some polynomial, but it's It's nonlinear and it grows. Yeah, for sure, for sure. Anywhere = MC^2. That's the joke for the week. First law of software quality equals MC^2

0:28:36 OKKEN: Nice. I like it.

0:28:38 KENNEDY: Awesome. All right. Yeah. Thanks. Bye

0:28:40 OKKEN: bye.

0:28:41 OKKEN: Thank you for listening to PythonBytes. Follow the show on Twitter at Pythonbytes. That's Pythonbytes as in B Y T E S and get the full show notes at pythonbytes.FM. If you have a news item you want featured just visit by pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken. And on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
