0:00:00 OKKEN: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 172. Recorded March 4th, 2020. I am Brian Okken.

0:00:12 KENNEDY: And I'm Michael Kennedy.

0:00:13 OKKEN: And this episode is brought to you by Digital Ocean, and they've got all sorts of cool stuff we'll hear about later. Who's going first? I always forget.

0:00:22 KENNEDY: You know, I guess I'm going to jump in on this one because I've got some cool stuff from Hank.

0:00:26 OKKEN: Hank. You even met messed his name up, worse than I do Hynek. Okay.

0:00:31 KENNEDY: All right. Sorry.

0:00:32 OKKEN: I have to give you a bad time because he gives me a bad time all the time.

0:00:35 KENNEDY: Yeah, well, it's all, cool, but unusual name, which is probably gonna result in mispronunciation. He's got a cool article. He tweeted about a little while ago, a week or two ago, and I thought it was really interesting. Basically, it's his thoughts on running Python in production.

Though it's kind of Ah, look back on some places he heard interesting discussions on people running Python in production as well as maybe some got some nice little call outs on things that seem solved but aren't solved that are interesting to talk about and whatnot. 

So I just thought I'd maybe talk about that little bit. (Yeah), Yeah. I mean, I definitely relate to this being someone who runs Python in production. So I, in order to keep the two podcasts, the courses, various other things other service is running. There's, like, eight servers and whatnot. So there's There's a non trivial amount of DevOps-y production, architecture stuff. It's not anywhere near Facebook, Google or whatever, but it's way more than you know, a $5 host running some like WordPress thing, right? So it is meaningful? I guess so. Anyway, his article, basically the premises that he's missing, a key part of the public Python discourse in that it seems like people really aren't talking about running Python and production, although maybe the exception of Instagram or Spotify, right? Yeah, that's pretty interesting. And he listened to this podcast episode recommended or guess listens, podcast episode sort of kicked him off down this path of thinking about it like there was this podcast and try to remember what was it called? He'll pull it up it's called well, _Running in Production_. Actually, it's a pretty interesting one by Nick JinTakis

0:02:20 KENNEDY: Probably mispronounced That name is well, but Nick's got interesting thing where he talks to people from all sorts of different technology backgrounds. JavaScript or ruby or Python or whatever.

0:02:31 KENNEDY: And he interviewed this guy named Gareth Thomas from the UK, where they have some Plone app There's actually running like 10% or getting like traffic from 10% of the UK schools or something really interesting in this.

0:02:49 KENNEDY: But it was more interesting to just think about listening to that episode. Looking at Hank Hynekâ€™s next article and saying, When do I agree with them? When do I disagree? And he said, "Look, I disagree with a lot of their choices". Actually, I think they're using Microservice is a bunch, and he was like, Thank goodness there. No no, I'm not doing Microservices basically and it's really interesting, even if you disagree to think about the trade offs that people made, because while you might make different trade offs, that might be because you have different goals or different things you're optimizing are different experiences or things that you need over what they need, right? So I just think this idea of exploring how people running Python and production, how they're solving problems. It's pretty interesting.

0:03:33 OKKEN: Yeah, I also kind of have to agree that I like I like the idea of hearing more about the pathway of why people are were there at what decisions they made in what things they faced and why the way they made those choices because that's almost more interesting than what in into product they came up with is what the path they took to it. I mean, like, Lord of the Rings would be nothing without the path to the
end, right? 

0:04:01 KENNEDY: Exactly. Oh, yeah, they get the ring back. Yeah, yeah. So his article, like all good complaints, comes with a suggestion, and he says at the end, "here's a bunch of things that could get discussed more. And so here's an offer."

I would love to encourage people doing interesting stuff with Python running websites or API and what not to tell them about basically to do talks at Pycon at meet ups and in blog's. And I think he even offered to help mentor people to get those kind of talks accepted more frequently at conferences.

0:04:31 OKKEN: I think that's a great idea,

0:04:32 KENNEDY: I think is a great idea. And, you know, maybe we should do that at the

0:04:36 KENNEDY: PDX Python West meet up.

0:04:38 KENNEDY: Could be fun. Yeah, yeah, you think about that. But I definitely like this idea because on one hand, if it's always the same story, it's not that interesting. But I do think there's a lot of trade offs that people are making, and I think it's it's pretty fun to see what's working.

0:04:53 OKKEN: And it's clearly going on. We're just not talking about it because we're I mean, you and I have noticed that there's a lot of people in the Python community that are in  the web side, of the Python community and it's way more than just the instagrams and dropboxes of the world. So

0:05:10 KENNEDY: yeah, absolutely, absolutely.

Yeah, it's really cool, and there's a bunch of more stuff that I've not covered in this article. But I mostly covered it because I love his offer of like, "Hey, let's get more of this conversation out there." You know, we could do open spaces. We could do Python Maikon pox suggestion, you know, proposals, things like that. I guess one final thing to throw out there is Dan Bader and I did have this conversation for TalkPython in the training and Python Bytes and whatnot

0:05:38 KENNEDY: as well as for Real Python over on Talk Python Episode 215 at the Last PyCon. We recorded that one so we'll see what happens with this pie con. But that's a small contribution towards that, and that was a really popular episode. But I definitely want to encourage people to take Hynek up on his offer here and get the word out a little bit more. All right.

0:06:04 KENNEDY: Yeah, so bright. When I think about testing what not I feel like you should be really be honest and like testing to tell the true story. And you should never like cheat with testing, should you?

0:06:14 OKKEN: only. Yes, you should definitely cheat. Cheat as much as you can.

0:06:18 KENNEDY: tell us about this next one.

0:06:19 OKKEN: So this comes from, I think it's Simon Willison. The article is called _How to Cheat a Unit Tests with PyTest and Black_. It's got all my favorite things. Testing, Pytest, Black and, well, I'm not a fan of the unit part, but we'll get there. 

So the premis is, I'm gonna quote this. "In pure, test driven development. You write a test first, and you don't start on the implementation until you've watched a test fail."

0:06:46 OKKEN: Okay, so the idea is you. It's the Red-Green refactor thing. So you write a failing tests, you write code to make it pass, and then you re factor it. So you're happy with it.

0:06:55 KENNEDY: And if I don't do that, I'm cheating (Yeah). Apparently, I think I might have cheated accidentally recently.

0:07:00 OKKEN: Okay, Well, yeah, my thoughts of partly on that is Ah, there is no such thing as pure test-driven development. Even came back himself. Says he didn't make this stuff up. He rediscovered it from previous best practices. So there's no pure test-driven development we can't even agree on, like, whether mocks are good or evil or what a unit is. So whatever works for you, man. So Simon's process really was to cheat on this and the way. And I think this is just clever pragmatism. His cheat method was to write a pytest test that calls a function that he's so he's been working on a function, and he thinks that he's happy with it. And he writes a test that calls it but then compares the output to, you know something he knows won't pass like just the output equals false or something. And you know that asserts gonna fail. So you run the test, and when it fails, you take a look at the output, and if you're happy with the output, you just copy that. Just highlight it. Copy and paste it into your test, and now you're test should pass. So this feels like cheating. But it's really just taking a manual test and make turning it into an automated regression test, especially when you're exploring stuff. I think this is a great way to to build up some of your cut test coverage. The bit about Black is that the output might be this big, long blob, something like a dictionary or a big list or something, and it might not be formatted well, and that's where he just turns black on his test code and reformat it nicely and make sure it's still passes, so I think this is a good time saver.

0:08:36 KENNEDY: This is interesting. I was working on some tests recently where I had a big chunk of test data that I wanted to compare against something kind of like he's describing here.

0:08:47 KENNEDY: And I was really tourney. I'd love to hear your thoughts on this. You know, I put this at the top of my test file so I could reference it, right? Didn't put it in the test. I put it kind of separate, cause I'm like, Oh, this thing is, you know, basically fills the screen, so I didn't want it to

0:09:01 KENNEDY: generate a huge test would say compare against that thing. Right?

0:09:04 KENNEDY: And what are the thoughts I had was creating, like, a a test data module where I could pull those things out, like, put it completely into a different file and pull it back? And

0:09:15 KENNEDY: it sounds like that might also be a nice way to organize things here, but at the same time, it takes what you would see as I'm comparing against this and it hides it away behind, you know, label of whatever that test module is. What do you thought so that good, bad, indifferent.

0:09:29 OKKEN: I think there's lots of times were then that if that is a good thing, especially like you said, it's a dated a big structure or something that you're comparing against. One common method to do something like that is if there's like for instance, um, it isn't really what you're asking. But if there's instead of comparing a whole bunch of different fields or something to actually compare structure, So to create the expected data structure, and especially with data classes, it makes it pretty easy. You can just say this is my expected object, and what I got back was this thing and compare those two

0:10:04 OKKEN: now if that thing you have all the data is huge and it makes it more clean to work with your test to stick it in and every file, then go for it. I think that's fine.

0:10:14 OKKEN: I mean, there's a method of regression testing, which is kind of the model of "I know it works now, and I'm going to modify the code for some reason". So I, instead of trying to come up with thorough test for everything, just running it with a bunch of logging and stuff and capturing all that.

0:10:31 KENNEDY: Yeah, absolutely.

0:10:32 OKKEN: then running it again and make sure all of your output in logging is the same. And just comparing gets that it's yucky to work with in the long run. But in the short term, that's a pretty handy quick thing to do.

0:10:44 KENNEDY: Yeah, instead of changing entire architectures, you can mock out everything. And then who knows? If you get that right. itâ€™s like right,

0:10:51 KENNEDY: I don't want it to change. Let's just start from, like, keep it where it is and it breaks. Then we'll figure out if that's some change we wanted, right? But just to know that it didn't change is really helpful. And that's a quick, easy way. I like it

0:11:02 OKKEN: right, and I mean, change-detector tests are a smell that you need to be aware of because they're not. You want to be able to change your architecture as long as you can make sure that you checking for you don't want the behavior to change. Sometimes these are good things. Be a pragmatist.

00:11:15 KENNEDY: Yup I, agree. For sure. Good advice. 

00:11:19 OKKEN: You know what else is good advice?

00:11:22 KENNEDY:
work with Digital Ocean?

00:11:24 OKKEN
 Yeah, definitely. We've been working with Digital Ocean, and we've got a lot of our infrastructure there, and we've been really happy with it. And so one of the things they've got, they have got Kubernetes clusters and all sorts of stuff. So however, getting started with hosting and running Linux servers or Kubernetes clusters and all that stuff can be a little tricky. And getting into that going from just building on your own computer to dealing with all of this, some people might not know how to do that. And so that's one of the reasons why Digital Ocean launched their new support center.

0:11:52 OKKEN: So the support center makes it easier to find the answers to your questions and to get help that you need right when you need it. You can search across product docs or community tutorials and forums, and it's all one place you can get all your answers, so I'm sure that's gonna help a lot of people really a lot. Check this out. You can visit PythonBytes.FM/do-support to see their tutorials, and, of course, you can use PythonBytes.fm/DigitalOcean to get $100 credit for new users.

0:12:23 KENNEDY: There. Tutorials are pretty awesome. And I just want a help. People like how helpful they have been. So typically, you know, especially is getting started. How come this micro-WSGI thing won't start? It seems like it should work when I run it, but it won't. Its probably something like the logging file didn't have permission to write to or something weird like that.

0:12:44 KENNEDY: You go search for that, and it's very likely that one of these tutorials are going to come up. But, you know, I just went and put micro WSGI into their tutorial thing here, and it comes up how to serve a flask app with micro-WSGI and NGINX on Ubuntu 18.04 But then it has a drop down. Oh, would you like to do that on 16.04 or 14.04 Or maybe on CentOS 7 or whatever, and you can actually change the operating system it's running on, and the tutorial will adapt. I mean, it's ridiculous. Like have involved it is.

0:13:12 OKKEN: Yeah, they've been really done a lot to help novice users come up to speed, too. Good things running well.

0:13:18 KENNEDY: yeah. I just remember how awful that stuff was for me. So yeah, check them out of Python Bytes that FM slash digitally shouldn't get that credit, but then use their support center to actually get going. You know what? I'm glad I don't have to support?

0:13:29 KENNEDY: hundreds of Micro-services

0:13:31 OKKEN: Yeah, me too.

0:13:33 KENNEDY: So I think I found this from Hynekâ€™s article when he was talking about how people were running in production and whether or not they should have Microservices or not. And that podcast I told you about, I believe those people reason Microservices He's like, Yeah, no way, No thank you.

0:13:49 KENNEDY: And refer to this article by Alexandra Noonan, who works for a company called Segment.

0:13:56 KENNEDY: And this is like a retrospective on their experience. So they had started out with a monolith app. I believe they're doing javascript, but it doesn't really matter. Basically, it's like package managers and maintaining versions that talk to APIs. Itâ€™s the same story for Python. Could you just switch the code samples or whatever

0:14:14 KENNEDY: and they're not really relevant. So there's this article called _Goodbye Microservices from 100 problem Children to One Superstar_ and it talks about how Segment was founded during the height of microservices as the the architecture du jour (architecture of the day) and how to sort of decided that was gonna solve all their problems. And at first it did. But as they grew and grew and grew, it turned out to be such a huge headache,

0:14:43 KENNEDY: They had three software developers, and eventually they said, basically, the three. Software developers were spending almost all of their time

0:14:51 KENNEDY: tracking down broken tests across these hundreds of different variations of microservices and all sorts of stuff. They were just going nowhere. 

0:15:02 KENNEDY: So it talks about how all the benefits that microServices should have, like prove modularity, reduced testing burden, better functional composition, isolation, team autonomy and all that and how many of those things turned around to actually become like molasses in their world and slowed them down instead of letting them work faster. So, basically, its a really concrete story about how they took a step back from micro service is how they actually made that step backwards because with 100 microservices into one app, that's kind of a beast to pull off.

0:15:34 KENNEDY: and how it helped them basically get everything under control again. So what's really interesting is basically the places where things broke down. So, for example, each micro service was talking to a similar but slightly different API, the customer integrations and stuff.

0:15:50 KENNEDY: And they had slight different needs toe over time, some of the like the core bits of those libraries were slightly different across the different APIs and it became, instead of having things you managed separately for each end point, you actually ended up with 100 different service is all of which you had to manage and like, if you're going to make a big change, you got to test it against all these variations.

0:16:14 KENNEDY: Their tests were super slow to run. And there's just a lot of, things. Also dependencies, you know, as in requirements.txt type dependencies. They wouldn't upgrade all of them at the same time because they wanted to make sure that it had to test it and whatnot. And so, if you're going to, you know, be running on requests, you 0.1 over here in 2.2 over there. Are you sure? You know, like if there's a problem with that, like, how do you How do you deal with that now? I'm a big fan of the big monolith type, absent and keeping a little more control over it that way. So I'm all behind this sentiment. But I do feel like they could have actually done a lot of work on the devOps side to make this dramatically better. And maybe, who knows, maybe they would have never switched.

0:17:00 OKKEN: Yeah, did somewhere I catch that There was a limited number of developers.

0:17:04 KENNEDY: I think there was, like, three or something.

0:17:06 KENNEDY: At one point there was three working on all of these things and, you know, micro service's air. Often touted as being really great ways for Dev teams to have autonomy. But when your dev team consists of three. You

0:17:18 OKKEN: don't really need autonomy. Youâ€™re already autonomous.

0:17:20 KENNEDY: Yeah, exactly. Like that's the one team it doesn't need more than one thing to be a totem is right, generally basically speaking. But you're so far, let me just take a step back and say, for example, like one of the big problems they said. "We've got 100 different service is that behave similar, but not the same, with slightly different integrations against different API endpoints. And weâ€™re feathering out or fanning out. Requests to those service is based on which thing they're kind of integrated with. And the big problem was the dependencies. Well,

0:17:49 KENNEDY: if they had used something like Docker or Kubernetes, and they forced them all to say, we're going to install the same runtime environment with the dependencies pre-configured.

0:18:00 KENNEDY: And the only way you get to release a new version is you get your little thing to work with the latest image that has, ah, uniform set of dependencies across the board.

0:18:10 KENNEDY: Well, that sounds like that would have completely taken out one of these problems to me, right? I mean, sure, you might do a little work to release a new version of some thing, but you're keeping it in sync, right? 

So it seems like there's a couple of things like that that they could have done. There's other issues on the testing side that we're caused by these variations, and I feel like there could have been some uniformity stuff done especially around Docker that could have made this a lot better. But still, I think there's a lot of interesting lessons there.

0:18:37 OKKEN: Yeah, I think I'm looking forward to reading this because that sounds like an interesting story.

0:18:40 KENNEDY: Yeah, yeah, it's pretty good. Well done. Has nice pictures.

0:18:43 OKKEN: Yeah, neat. Oh, I like pictures.

0:18:45 KENNEDY: Speaking of tests and running them on the web,

0:18:47 OKKEN: Yes. So one of the the workhorses of what front and Web testing is often selenium and selenium is awesome, but it can be abused, And also it takes a little bit of knowledge. So there, I think we've covered others, There are some higher level AP eyes that used Lee name under the hood but have a different interface. And I'm a fan of a lot of this sort of stuff because, if it simplifies your life, go for it. One of the things we're gonna cover today is helium him. It's a newer. Well, it's a very much newer, It's only a few months old Python library for automating Web browsers. It's ah, project that's built on top of selenium, and even though it's fairly new, it's already got like over 1000 stars on get have that school.

0:19:35 OKKEN: The claim is Selenium Python, 50% easier. Helium is the best Python library for a Web automation. Of course, it's saying that to itself, but it does look pretty clean. There's some pretty clean drivers to be able to control chrome, control your browser and navigate some stuff. So looks good.

0:19:54 KENNEDY: Yeah, I really like this. I think Michael Hermanâ€™s did an interesting job on this. And the reason that I think this is need is that  It takes you away from working at the structure level. So, for example, just like selenium, you say I'm going to open up this website, right? So you say, start chrome, github.com/login. But instead of doing some kind of CSS selector to find the the text box, you just say write, if you want to, like, set something to ah textbox to say write this text into and use, you know, give it, like, a short bit of text, like the label that is right before immediately before the text box, right, So write something into user name. And that'll just fill out the user name thing, Then write something into password and that'll type in the password and then click the button. These a click sign in.

0:20:46 KENNEDY: and it just finds the button with the text sign is what it's nice is like What a human sees about the page is how the code interacts with it. And you might say, "Well, that's unstable, right?" What if somebody changes the text? Well, you've ever had to work with CSS selectors. And then somebody redesigned the site in your automation stuff. It's not a whole lot better. So I might as well make it easy for humans. As far as I see it.

0:21:09 OKKEN: Yeah, in the I mean the API like so clean and short. So you've got, like, think like function calls like `click` And you Just give it like the tag, I think, the the button tag that you're gonna click on so, like

0:21:23 OKKEN: that's pretty sweet. And to fill in ah, user name, for instance, in a username field, it just is right. And then you give it to parameters that the name of the field that you're gonna write into and then what you're gonna write in there. So this is pretty slick, like it?

0:21:39 KENNEDY: Yeah, for sure. Too many things get the "for humans" tag and Python. But this one kind of could get that.

0:21:44 OKKEN: Yeah. So since this is new. And there's a lot of Web testing going on. I'll be curious to see if, uh, where this goes and keep an eye on it.

0:21:53 KENNEDY: Yeah, absolutely. And the easiest way. If you want to get a sense of like whether or not this is interesting for you, just go watch the little GIF animated GIF. Just watch that for 10 seconds and you'll have a quick idea. What? What you gonna work with?

0:22:06 OKKEN: We've said this before. Animated GIFs of how things work are good thing to get people excited about a project. This project also includes a cheat sheet of some of the common things you might want to do a single page with a whole bunch of stuff. It's kind of like an FAQ, but ah, but just sort of, Ah, no questions, just answers.

0:22:26 KENNEDY: Damn. So I'm pretty certain that's a good idea, but sometimes you're not certain.

0:22:31 OKKEN: Yeah, lots of times.

0:22:32 KENNEDY: So I remember. I don't know where I learned more about this either this was in physics or this was in statistics or something. I think I was on my science classes in college. I promptly forgotten it, so there's no way I could could work with uncertainties and measurements. Really? Well, maybe he's even engineering. I'll tell you a quick example, and then I'll ask you a question. You can't look ahead and don't cheat. I have the answer in the notes, further down.

0:22:59 KENNEDY: So imagine we're back in school or you're solving a real problem. Jane. She needs to calculate the volume over pool so she knows how much water it'll take, right,

0:23:07 KENNEDY: so she measures the length, the width and the height. Now, of course, you can't measure it ultra precisely. And also there's probably some variation in there, so she determines the length is 5.56 meters plus or minus 2.5%. Like that's her guests on the inaccuracy in the with three meters plus or minus 2.6% and the depth three meters plus or minus, 3.7%.

0:23:31 KENNEDY: So what is the uncertainty right? That plus or minus little bit that uncertainty? What is the uncertainty in the volume which is the length times of with times. The depth

0:23:41 OKKEN: I canâ€™t remember is do you multiply them together.

0:23:44 KENNEDY: Yeah. Do you multiply? Am? Do you add them? Do you average them like what the heck do you take the max? I don't know. Well, there's actually very strict rules about you do it. So when you multiply things Apparently I didn't remember this, but I've looked it up. Apparently, you add the uncertainties when you multiply things. So in this case it's 2.5 + 2.6 + 2.7= 8.8% uncertainty

0:24:10 KENNEDY: That is super tricky. And these kinds of calculations are the kind that ends up with space craft burrowing into like, a desert or into a moon because they're like, Oh, did we get that wrong? Whoops, Right. Do we use the wrong units, or did we get the wrong uncertainty or whatever, Right.

0:24:28 KENNEDY: So there's this really cool library called `uncertainty`, and it comes with all these different math operations, like it has values like a float. And it has, uh, sine right, which is, like, you know, sine cosine tangent sort of thing so you can do mathematical computation. But instead of having a regular float. It has an uncertain float, a ufloat. So you create like `x` would say, like a you float of`1` is the value and then `.1` is the uncertainty.

0:24:57 KENNEDY: And then, if you were to do math with it and print it out, it'll say, like `2 * x` actually be 2 Â± .2

0:25:04 KENNEDY:
And so it always carries its uncertainty. And then, as you take, like the sine of it or you multiplier, you square it, it will actually integrate and consider all those different uncertainties to give you a final uncertainty in your output. Isn't it awesome?

0:25:19 OKKEN: That's very cool. Yeah, this is useful in lots of fields.

0:25:23 KENNEDY: Yeah, if you ever have to compute with uncertainty this seems so glorious. This in pint, right? If you could put this and pint together, then it's on because point, let's you, ah, work with different units of measurement and then add and multiply and divide them. And then you throw the uncertainty on top that boom. Youâ€™re golden?

0:25:41 OKKEN: Yeah. Yeah, that'd be cool.

0:25:43 OKKEN: We had worked with once with a measurement value that it was a power level for a cell phone, and the uncertainty ended up being plus or minus, like, the amount of power that the sun produces. So we essentially don't know the answer, if that's the uncertainty.

0:26:01 KENNEDY: Right? Right, Right. It could take a AA battery, or it could melt the Earth. We're not really sure

0:26:06 OKKEN: what we're not sure which,

0:26:08 OKKEN: uh, not ready for shipment yet. 

0:26:12 KENNEDY: It's exactly Maybe we got it, like, you know, more accuracy there. The way this comes from Tim Head, who mentioned it on Talk Python, where we recently did an episode on `Binder`, which is super interesting, but not yet released. So literally we'll talk more about that. There's well, anyway, that uncertainty. Cool little library if you're gonna do any sort of computation with this kind of stuff.

0:26:29 OKKEN: Yeah, I think it's cool, but I'm not sure about

0:26:31 KENNEDY: Yeah, well, can you ever be? But you can be sure about the level at which you can't be sure using it. Yes.

0:26:40 KENNEDY: I'm pretty sure that I wish my Python prompt was cooler.

0:26:44 OKKEN: Well,

0:26:44 OKKEN: I don't I'm OK with

0:26:46 OKKEN: my Python prompt, but

0:26:47 OKKEN: you

0:26:48 KENNEDY: I don't know. I mean, come on. But

0:26:50 OKKEN: think of all the options you could do anything you wanted, and I never thought to do that. I mean, I do it with my like a bash prompt and stuff

0:26:58 KENNEDY: of, you know, we put our virtual environment name in there. It's stuff like that.

0:27:03 KENNEDY: Git status, git branch. All that kind of stuff.

0:27:05 OKKEN: Yeah, definitely. So you can change those things. So why not? This article comes from I think our Pete Biryani, and it's ah called Personalize your Python. Prompt those three right angle, right? Was that the right left greater than science that they were together. When you're doing interactive Python, apparently you can muck with those. There's a sys.ps1 one variable that if you signed to that, you can change it to whatever you want. And, of course, the author didn't stop there, said, Oh, it could be dynamic also, but you have to have a non-string object to make it dynamic, so it gives a little example to where you can in the way you do that is you have an object that has a `__str__` method. If that has dynamic action, that gets called every time. So for every prompt. So this is pretty neat eh has an example of doing some stuff. But I wanted, I didn't have time to do it this morning, but I was working on it. I was trying to get a prompt that would mimic the Windows Command prompt because apparently I want that on my Mac, because that would be fun.

0:28:12 KENNEDY: You want to confuse people like "What are you doing?" This is insane.

0:28:15 OKKEN: it.

0:28:16 OKKEN: I mean, `C:\` was easy. But I wanted to also put the windows path in there, and flip the direction of the slashes and stuff like that.

0:28:28 KENNEDY: Yeah, that's really cool. And I, one, didn't know that you could just set that assist. You know, import sys `sys.p1` equals something that now is your prompt. But I didn't really think that it could be a dynamic object like that has a `str().__str__` It's pretty cool.

0:28:46 OKKEN: Yeah, that isn't

0:28:46 KENNEDY: You could easily set up something like that. Jupyter,

0:28:50 KENNEDY: you have Jupyter notebooks. You have`[1], [2], [3]` for your various calculations. Like five lines. You got that in your Python prompt If you want it.

0:28:58 KENNEDY: It doesn't have to know that Because you can't change the order. But still, it's pretty interesting, I think. Yeah.

0:29:03 KENNEDY: Yeah. Quickly. All right. Well, that's Ah, good little find a quick and easy to play with.

0:29:07 OKKEN: Well, do you have any extra stuff for us? Not really. I'll go and throw one thing out for you. So I finished my _Python for Absolute Beginners course_. And so now I'm starting a new course, which is like

0:29:18 KENNEDY: adding a CMS to a proper data driven web app. So if you got a flask app or pyramid or Django or something like that, and you want to let other people right part of the site and the rest is more like Amazon would be with, you know,

0:29:33 KENNEDY: here's the categories. Here's the products here. The product page has a review page, like, very structured. But you want to just let him, like, right freeform stuff. So I'm working on a course that lets you kind of add that to existing site. So that'll be fun. I'm having a lot of fun working on that. Okay. Interesting. Yeah.

0:29:48 OKKEN: Is this what kind of where the markdown work that you were working on comes in play?

0:29:52 KENNEDY: Yes, exactly. So I decided this the work that I did for talkPython training to build out the landing pages in, like, the interesting stuff to basically

0:30:03 KENNEDY: make a whole section of that site just driven by markdown and just editors and whatnot. I'm gonna take that, extract it and sort of take it to the next level, like with rich markdown editors and, you know, database backends and stuff like that would be fun.

0:30:19 KENNEDY: Shall we close it out with a limerick? Sure.

0:30:23 KENNEDY: I'm not very good at limericks, so give this a shot. But this comes to us from Alexander A.

0:30:28 KENNEDY: He said this over. He had written it. This is his. He brought it recently, and this is submitted. Apparently, there's some kind of limerick contest at Manning.

0:30:37 KENNEDY: You win free content, like books and whatnot

0:30:41 KENNEDY: if you submit a winning programming limerick. All right, So here goes _Coding Environments in Three Parts_ 

To this day, some prefer BBEdit. VSCode is now getting some credit. Vim and Emacs are fine; so are Atom and Sublime. Doesn't matter much, if you don't let it.

But wait! Let's not forget IDEs! Using PyCharm sure is a breeze! Komodo, Eclipse, and IDEA; CLion is my panacea, and XCode leaves me at ease.

But Jupyter Notebook is also legit! Data scientists must prefer it. In the browser, you code; results are then showed. But good luck when you try to use git.

0:31:22 KENNEDY: I love it is good, right? 

0:31:23 OKKEN: This is great! Yeah, so good.

0:31:26 OKKEN: The way

0:31:27 KENNEDY: that last line I love it

0:31:29 OKKEN: definitely makes the whole thing worth it.

0:31:31 OKKEN: Yeah.

0:31:32 KENNEDY: Yes, indeed. So Well done, Alexander. Thanks for sharing that one that's used on the show. That's great.

0:31:38 KENNEDY: All right. Anything else? You got anything you wanna share it, folks? I guess I jumped ahead of you and did my limerick.

0:31:44 OKKEN: No, no, no. It's good. I've got We've got a whole bunch of, ah, great feedback from the recent _Test & Code episodes. No, it's been good.

0:31:52 KENNEDY: Yeah. What are some of the ones you know, you just did one with Anthony Shaw? 

0:31:58 OKKEN: Yes, we talked about security. We've talked about Ah, Django recently, and, um, just the most recent one is ah, talking about the most town loaded pttest plugins.

0:32:10 OKKEN: So, Anthony Sotili and I talked about 28 of the top plugins.

0:32:15 KENNEDY: That sounds like the perfect show. That's really great.

0:32:18 OKKEN: Yeah, really geeked out on a lot of stuff.

0:32:19 KENNEDY: I found some super interesting ones that I'm gonna talk about the next show, but we'll leave it at that. Awesome. Thanks. So All right. Yeah, Well,

0:32:27 KENNEDY: thank you as well. Happy to be here with you, like every week bye

0:32:30 OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter @PythonBytes. That's Python Bytes as in B Y T E S and get the full show notes at Python Bytes.fm. If you have a news item you want featured just visit Pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken. And on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.