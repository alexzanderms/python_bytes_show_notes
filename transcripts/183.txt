00:00:00 Hello and welcome to Python bytes where we deliver Python news and headlines directly to your ear buds. This is Episode 183. Recorded may 19 2020. I'm Michael Kennedy. And I'm Brian Akin. And Brian. We have a special guest Calvin Hendricks. Parker. Welcome, Calvin. Hey, guys, how you doing? I'm doing super well.

00:00:18 Great to have you here. Yeah, awesome. Well, I'm excited to be on this my first time, you know, being on one of your podcasts. And so like, I'm all giddy with excitement. I'm very giddy as well. It's great to have you here. It's always nice to have a third person with a fresh perspective. Because Brian and I, we've given our perspective 183 times and people are probably able to guess, the most far what we're gonna say. But not the jokes. The jokes are always original. Okay. Now, before we move on, I do want to say this episode's brought to you by Digital Ocean, check them out of Python by setup slash Digital Ocean get $100 credit for new users tell you more about that later. Brian, why don't you kick us off with something completely from 2001? I like blogging like blogging. Yeah. So one of the things that we thought maybe there weren't enough ways to blog right now, there's actually tons of ways to blog. But this is kind of a neat thing. This is called the fast pages. And it comes from fast AI. And it's a blogging platform that this it's an easy to use blogging platform with enhanced support for Jupiter notebooks. It's kind of put together it's a you know, where you write in Jupiter notebooks. And then you can also write markdown files. And for some reason, you can also write like Word doc files. But why would you do that? I blog in Word baby.

00:01:31 Weird has support for it anyway. And you can form your pages and posts and whatever and push it up to GitHub uses GitHub app actions to publish everything it use. I think it uses Jekyll on the back end, to publish to GitHub Pages. But it's all set up so that it's really fast to start. You can do things like

00:01:52 Altair interactive visualizations. And you can have code that you can code cells that you can hide and show or closed by default, if you want to. You can even do metadata, like the title and summary, they go and special markdown cells. But you can even embed Twitter cards and YouTube videos and tech support and all that jazz. It actually looks pretty slick To tell you the truth. If you want to publish something like a blog, but you're going to use Jupiter notebooks on a daily basis anyway, this might be a good thing to check out. Yeah, Jupiter is nice, but it's not quite all the way there, right? It's still like, the code is still shown on all the cells and they're not like collapse like this. This is a really nice presentation format, I think, in the fact that you're not really running on your own platform, right? Like, there's so many things. We're like, Oh, I'm gonna write my own blog. And then now I have to run servers and patches and like, wait a minute, why am I patching servers? Like what have I gotten myself into? Where is this just runs on GitHub Pages? That's pretty cool. I like the Altair interactive visualizations, right? Because it's one thing to take a screenshot or static image and put it up there. But if you've got live code and live interactions, that's pretty awesome, actually. So yeah, this kind of appeals to me. I'm not switching because I just I don't have the energy for one more thing that I put in a lot of focus on like a blog. I do blog, but not that much. But nonetheless, this looks really cool. If you're, especially if you're in the Jupiter world, man. Now you got to maintain your code on your blog page. Make sure it always runs. If That's right. That's right. Oh, you write tests for it. It'll be fun. Yeah, there we go. Okay. Yeah, exactly. Yeah, no, I looked at this. And I, I think this is a nice fresh take on like interactive code demonstrations in your blog. And to me, it's way better than just static code there with static pictures. Yeah. And it definitely, like I said, I think it's a the best for, for people that are spending their day in Jupiter notebooks anyway, then it's going to be a natural, natural place for them to be to, to write a blog with it. Yeah, absolutely. So yeah. Now this next one that I want to cover, I doubt heard of, and I discovered it from a Mahmoud Hashemi, who didn't realize that he had shared it with me, but he had like favorited it on GitHub. I'm like, Well, wait, that looks cool. What, you know, just that little activity stream of people you following Get up, or whatever is happening. So one of the things that I find lacking a lot of times is how you work with databases as sort of an admin side of things, right? Like if using Django, there's some kind of admin back end, you can put a point at it. But if you're using like, just SQL lite, and you don't have some web app to work with it, like, how do you work with it? I know there's a command line for working with it. You're right, DDL data, definition or description, language, whatever that is. I don't want to do that. That doesn't sound fun at all to me. So what I want is a nice visual thing. There's like a history of my most common searches, things like that. So there's this thing called beekeeper studio. Have you guys heard of this? I'm not No, no, I hadn't either. But if you go to their website, it is super polished. It certainly passes the Michael and Brian test have many screenshots and little animations because hey, it's a UI thing. And what it is, is it's a really polished free and open source, SQL editor and database manager. It checks so many

00:05:00 boxes, it talks to MySQL, Postgres, SQL lite, Microsoft SQL Server, it runs on all the things Windows, Linux, Mac OS, it has a bunch of cool features like it has built in support for connecting to your database server over SSH tunnels, which is really nice. Because you typically don't want to have your database out in, you know, digitalocean or wherever. Listen on the internet, that's just asking to be in the headlines of, Oh, yeah, company X has lost all their data, and is now you know, you now get, everyone gets free credit monitoring for a year. Thanks, right, you don't want that. So you can have like, the database lock down, but still SSH over to the server, and then just tunnel. But this has like built in stuff for that cool tabbed interface. It has autocomplete for your SQL queries, which is really nice. So like, your table schema. So you know, you could pull up table name, dot and it'll drop down all the columns in like your where clauses or your SELECT clause, which I think is super nice. It has kind of an Excel view, where you can just pull up the data in a table and like filter it and sort it by clicking on the column. So you don't have to be super good at knowing that by default as a dark theme. That's pretty cool. Yeah, so you know, it's first series programmers. Yeah, it's legit, baby. It is totally legit. Because it's default, you have a dark theme, for sure. That's right. That's right. So there's just a bunch of cool things like you can save your most common queries. There's like a favorites queries section on the left, that you can just pull up your common queries and like rerun them. If you got to do a report or something you always have to ask about, like, you can run that which I know this seems like a really nice tool. And I'm telling you, it is worth every penny, you pay for it. Is it free? It's pretty as you know, for tours, I installed it and I connected it, some little sequel light toy things, projects from my courses that I was working on, and it came out great. So how do we keep them in business felt like we need to keep them in business somehow. I know we don't want this to go away. But yeah, it's nice. You know, we're on GitHub, they've got quite a few stars. 1.4 thousand. So it's, it's pretty new. I'm not sure how long they've been around. But I'm excited to see him here. It's great. Well, then people. Alright, Calvin, what do you got for your first item here. So my first item on the docket is the second annual Python web conference, which I'm actually one of the CO organizers of this web conference. So I'm excited to come on here and tell you all about this amazing event that's coming up. We did this last year. And we thought it was a pretty good success. And so we wanted to actually continue that tradition. And it seemed to fall perfectly within all these conferences, converting to virtual conferences, we are a virtual first conference, this was not a planned change to virtual, we're really doing this for real as a virtual conference. Just to be clear, you guys did this last year, when it was a Yeah, not required to be right, when it was not hip and cool to be a virtual remote conference. So at least a year ahead of your time. We are, I like to think I'm a trailblazer when it comes to some of these things. But I'm only taking credit for the amazing work done by the people who are certainly behind me doing all the real work. But we're basically putting on the work. We're calling the most in depth Python conference for web developers. I know if you all been to pike on, there seems to be a lack of web and production level talks going on there these days. Well, it kind of goes back a long ways. And so we felt like this was a gap in the Python ecosystem for folks to come and talk about production use of Python, Python, in on the web now. So we're going to do talks on Django flask twisted, lots of testing talks, so maybe they'll draw certain folks from this audience in who like testing, sequel, alchemy, containers, deployment, like tons of stuff like that. So it's gonna be a bunch of cool web talks in just a little kind of three tracks. So it's actually gonna be three days, that is June 17, to the 19th. So make sure you mark that on your calendar right now. I would love if you went and bought a ticket right now. But go ahead and mark on your calendar, save the date. There'll be a full day of tutorials. So there'll be six tutorials three in the morning, three in afternoon, two days of talks with three tracks. We've got some awesome keynote speakers. So loreena Mesa from Python Software Foundation is gonna be on our keynotes. We've got henyk Russell, Keith McGee, who gave a keynote at pike on two years ago. 2018. Yeah, I think said it depends if you count this one. Yeah. Right. So he'll be coming back and hopefully giving some more insights into health. I'd love to see what he thinks kind of post Black Swan era, if you remember his talk from pike on at that was a super good talk. Yeah, it was a super good talk. And that's why I'm really, really excited. He decided to kind of join my merry band and go on an adventure with all of us. We'll have some fireside chats. So during lunch, there's going to be I don't feel familiar with Carl Meier. But he's, he works for Instagram. He's in their infrastructure team. And so he's really available to talking about like best practices. So we'll ask all kinds of deep questions. And actually, I've just enjoyed talking to him to no end about how things actually work in the real world for some of these kinds of things. Now, not everyone's doing micro services to the hilt like there are people who are running real things that are just Django monoliths and they still work in a kind of tried and true. So there'll be a 40 presentation 40 plus presentations, so

00:10:00 tutorials, fun will be had by all, hopefully connections will be made, we really work hard at making sure that these kinds of virtual events are maybe overly stimulating, so that you've got lots to do and kind of lost interact with, there will be, you know, kind of virtual cocktail hours afterwards online gaming. So we had a Mario Kart tournament in our last virtual conference. And we're gonna do bring back our board game night. And so actually, as part of the conference registration, you'll be sent a pre swag pack, that'll include something for the board game night. So if you actually want to play one of the games, we're going to give every player every person who attends what they need, actually, you don't need to have that to play but the book and have some specially themed ones made specifically for Python web conference, you point like your webcam at it, and everyone sets it up in the initial state and like keep seeking it, though. Okay, so I'll kind of get a little bit of cat out of the bag, but we're gonna play skull, have you ever played skull, it's a bluffing game. It's a lot of fun. So basically, everyone has four coasters, I mean, look like the coasters, you know what kind of like, you know, just a round circular cardboard coaster. Three of them have flowers, typically, and one has a skull on it. So it's a bluffing game, to see how many flowers you can acquire before you run in somebody's skull or your own skull. So we're going to do a Python themed version of that with a web slant, just to be pretty, pretty cool. Looking forward to that. That sounds fun. Yep. So the tickets are 199 and 99 per students. Now, as a bonus, there is a perfect for every professional ticket purchased, we're going to donate a ticket to an attendee in a developing country. So we want to be able to get people who couldn't normally even make it to a physical conference. At this event, you know, if you're in the middle of Africa, or some far off place, and you couldn't normally get to a conference like this, we want to make sure you can attend and actually connect with the Python web community. So I'm pretty excited about that. And then I do have a discount code for the Python bytes listeners, there'll be a 20% discount code, if you just use the code, Pb 20. And you guys will get Alright, cool at 20% off discount Nice. Yeah, this sounds like a fun conference. I really like that you're taking the like, digitally native approach and the conference, because I feel like there's a lot of attempts at this right now. And we'll see what, what sticks, but everyone's trying to reinvent conferences. And this feels like a pretty good attempt at it. I've attended a couple recently where they they kind of took conference skeuomorphism to an extreme, like you kind of VR style, walked into an expo hall and kind of click to go through a hall and you're sitting in front of a screen like Mystery Science, theater, 3000 style, like, you know, characters sitting in front of you. Yeah, though. The silhouettes of people for a year. That's not the way to go. That's not what this is. I saw I saw some thing where they're like, oh, we'll make it totally real. You've got to get like, go check in with a real person before they'll let you into the virtual conference and stuff like that. Yeah, no, no, no, no, no, no, no, no. Yeah. Yeah. So Microsoft build is running right now. They're, you know, trying to figure out what they're doing there. It didn't look super good to me this morning, the way the experience was going, but yeah, we're doing it for a week. So we'll or three or four days. So I don't know, maybe that'll be an example as well. They do. We assisted their summit. I didn't hear very good things about that, as well, as well. It's a big challenge. And there's a possibility that I might be speaking to this conference. Oh, that's right. I could I forget, we do have if you go look at the speaker's page, I'm super excited. I mean, is a who's who of Python web community, it just kind of speaks to the volumes of like the confidence these people have that we can pull this off that they're here to speak for this conference? Yeah, very cool. All right. Well, I definitely think it's gonna be fun event, people can check it out, obviously, links in the show notes and the discount code. Now, speaking of web and running stuff in the cloud digitalocean, sponsoring the show pretty cool place, they just launched their virtual private cloud, their new trust platform, which makes it easier to run secure code in the cloud with some confidence. So VPC, it's kind of like a virtual private network, but it allows you to create multiple private networks for your whole team, then you can stick your VMs where they need to go to make them to talk to different things. So I recently set up a whole bunch of complex firewall rules for all of our various servers that need to talk to each other. And it would be really nice to just like them in here, but I set those up before this existed, hence, I did it that way. So this is really a nice feature. It can auto generate your private network IP addresses, so you can control them, or you can specify how you want them generated. And you can even configure some of the droplets to behave as Internet gateways to kind of act as a bound area or place for those various private clouds. So that's cool. And then their trust platform is like a micro site with all sorts of information about security and running stuff in the cloud. So check them out at Python bytes at FM slash Digital Ocean, hundred dollar credit for new users. And so go out there and build something awesome and make it a little more secure. Wonderful. Yeah. You mean so I mean, I mean, secure, like real honest data, no fake data and no fake news. None of that fake news. Only there was a fake news generator.

00:14:48 There probably is. So if anybody knows the fake news generator, let us know. be fun. As far as fake goes we're talking about I have no idea how to pronounce this. Anybody want to try it in Miami?

00:15:00 nemesis, nemesis, I've actually used this tool in the past and I, this is a party game I love to play, describe an open source project and you see how everyone will pronounce it. Okay, anyway, maybe mimis is my missus, I think, I don't know. But it's a fake data generator. And I was reading it thinking, do we already have fake generators, there are a handful of other fake data generators around. But this one looks pretty cool. It helps generate fake data in a variety of purposes and variety of languages. It's actually got over 33 locales, so you can get like, you know, Russian names and Spanish names and all sorts of stuff like that. But the localization also goes to things like you can, if you have a addresses and food descriptions, and people names and things like that it can be localized. And that's pretty neat, different phone numbers as well. So there's a whole bunch of different locales you can do. Supposedly, it's super fast, they posted their benchmark of 10,000, full names of Faker versus messes, nemesis. And then they were like 60 times faster, which is pretty cool. The thing I was really impressed with it was one of the features is a data generation by schema. So you describe, describe what kind of the shape of some data and the different types of things like maybe. And we're putting in the show notes, a description of a structure that has a name, and an ID and a version, timestamp and owner information like email and creator name, full name, things like that. And then you can just generate from that schema, you can create a bunch of those. And that's pretty darn neat. I think, I think I could use this really readily. Yeah, we were just talking about building a web apps and stuff. And one of the things that makes that really hard, is you've got all this HTML on these loops in your templates, and all that kind of stuff in CSS that's going to describe, if I had data here, this is how it would look. And often you end up with no data or like just a few letters here or there. So having like legitimate looking data is really nice helping you design your apps. Or if you're trying to anonymize something for some kind of data science things you want to like, I want to randomly put in something here, but I wanted to seem normal, but not be actually tied to the person. So it's really cool, huh? Yeah. especially useful, like in Django projects, when you want to have a fixture to load up some personally identifying information ahead of time for the developers. You don't want to happen. Grab the production data and have that liability sitting on their local disk. Yeah, yeah, exactly. There's interesting, different classes that generate things. So there's obviously like a person, though. It's called person humans like Elysee Yep, person. So it has things like you might expect, like an age and an email and a name. But it also has an avatar, which is a link to a graphic as an academic degree, like whether or not you have a bachelor's degree or master's degree. It has like, nationality, occupation, political view, all these interesting, different things. And then they also take on different locales, right, there's a science one. So in the science one, you can have an atomic number, a chemical element, a DNA sequence, and RNA sequence. There's just a bunch of funky, different types of data you can put on here. Looks pretty cool. Yeah, there's looking through things like software development, things like

00:18:23 operating system, random operating system, random programming language, software license, things like that. That's pretty cool. Right? Like, was it os 32? Or what was it called? oS? Two? Yeah. This is a cool, cool find. And you know, I have a another one that's kind of in that same space, also with a bit of a web slant called schema thesis. So this is good. So the idea is, you've got an API. And the API is documented with something like open API, three, or swagger or something like that, which is bunch of HTTP endpoints, and then descriptions of the data is exchanged, right? Here's the endpoint. Here's the X of the JSON document, or God forbid, XML document. I almost said there. Right. But here's the thing being exchanged, right? And then you would hope that the actual service actually exchange data that looked like it described an exchange, right? So this project basically tests for conformance with the API as you declare it in your own documentation. That's pretty nice. It supports those two formats that I said swagger and open API. And it's built with hypothesis hypothesis, JSON schema, and from Oh, please, pi test. Yeah. So the idea is that read your application schema, and then using hypothesis, it will generate test cases that ensure your application is compliant with its own schema. That's pretty cool. Yeah, and it works in two ways. You can write tests with PI test. Obviously, it's kind of meta, but then write tests with PI tests and write code to talk

00:20:00 To these things, it seems like maybe the predominant way actually to do it is through this command line interface, where you can pointed out a URL at the schema definition, the documentation, and then the actual endpoints. And it'll just go and do all that work, which is pretty cool. Those, yeah, you can also parallelize it, you can pass the number of workers for concurrent test execution. Also, if you're testing something that has an app, as in flask, or a IO, HTTP or something like that, instead of firing up a thing that goes through the network that goes to the whole serialization layer and hit some running thing, it'll actually just load up your app and run it in process. Right as if you're doing unit testing against your flask or aIIow HTTP app, you can give it directly just the basically the package or the module and it'll just run it. Like without the web infrastructure in between, yes, that probably speeds things up quite a bit. Yeah, yeah, at least you don't have to have a server running somewhere. So it's probably also easier for ci CD, because there's not a second thing to be running to then talk to, you just run it straight out of the out of thin air. And then also Calvin, you're talking about being keen on Docker, this c li also can run as a Docker image. So there's like no setup other than just Docker run this live in a dream, living the dream, baby, it's always gonna work to doctor. Anyway, that looks like a pretty cool, cool thing. And there's a little example in here, it's not super clear to me, like how, how to put specific use cases into the code test. So that's why I say I think the CI is kind of the way to go. Like there's always write code and it uses a primer ization through hypothesis. But it's, it's a little bit generic, I guess, on what you would assert for. Anyway, if you've got API's, and they're already documented with swagger or open API, this seems like a cool thing to point at it, just to make sure that it's hanging together. Yeah, very nice. I wanted to give this a try sometime. Yeah. More testing is always better, especially if it's one line. Yeah.

00:22:03 All right. God wants this last one here. All right. So last one up here, there has been a lot of people, combing public code repositories looking for secrets. And a lot of the tools have been disregarding some common places secrets might be stuffed away. So right, so they look at like JSON files. They look Yeah, CLI dot j. s, like it's embedded in code or maybe a dot i&i. Yeah. So they're not looking for maybe byte compiled code. So actually, there's a blog post here by Jesse Lee. And I really enjoyed it, cuz it's finding secrets by decompiling, Python, bytecode. And public repositories. I mean, it's, it's really common for maybe people new to Python, not to realize that those pi c files could contain possibly sensitive information. So a lot common patterns might be put your secrets into files, like settings.pi, or config.pi, or secrets.pi, and then get ignore the PI file. But you could be accidentally still inserting the pi c file, which is the byte compiled version of that file. All right, like Dunder pi cache? Yes. dot p yc, is probably something to go look for. Right? So you should probably leverage whatever tools you're using to make sure you get a stock like Python, get ignore file. So if you're using like pi charm, and you have the Git ignore module installed, like it'll tell you like, do you want to generate the stock get ignores for your type of project, and it'll put a bunch of stuff like right in there for you, you should do that for sure. But if you don't, you might actually be vulnerable to having some of your KYC files contain API keys or using passwords, because that information gets compiled into the bytecode. What I liked about this post was actually handled will crash course on deconstructing Python bytecode. And like understanding what cached source means. So it wasn't just like, Hey, don't do this thing. That's pretty darn cool. It really can give you a quick little lesson and like what a p yc file is, or what's in that pi cache directory. So this post also comes with another game you can play which is kind of cool, a small like Capture the Flag. So there's a little lab in there for you to actually try it out and kind of play with it. So if you're totally in like security stuff and want to like see how this stuff actually works under the covers, like the author like went just kind of above and beyond and gave you like a capture the flag game to actually go explore those files and cache files that are up on on GitHub, which or any other public public repository, which is really cool. I see. That's cool. So the idea is the here some that have this problem. Your job is to go uncover them or something like that. Yeah, go on. Yeah, exactly. Here's a couple of sample stories go and cover this. So the kind of the action items from this post specifically was like if you do have pmic files containing any secrets, you need to make sure you delete them and then go revoke and rotate those secrets. And the other thing was using a standard get ignore for checking, not preventing that to happen all together. And ultimately, I think the best way to handle it I'm been preaching kind of a lot to folks who around me recently about how to store secrets, using tools like vault or one password depending on what your situations are. making it easy to get those secrets into, say environment variables for me is the way to go. Don't even have those secrets sitting on your file system.

00:25:00 in any form whatsoever. So I typically will have a little shell script that uses the command line tool for like one password, or uses vault with a token to actually grab the secrets in real time, stuffed them into an environment variable, either shove them into a container, or as I launch, I grab those out of my environment, and don't even take the risk of putting that stuff on my file system. That's a clever idea. You know, cuz so often, it's kind of a chicken and egg. It's like, Great, so you don't store it in GitHub, to now it's over in this other text file. Right? Like, how much better is that autists? later? I mean, I know it's better. But it's, it's still like not that awesome, right? So having an encrypted is nice, right? One password, and LastPass, and bitkeeper, are keepass all have command line tools that you can script to get data out of them. One password will give you back like JSON. And with Jq, you can basically filter it out and grab the thing and put it into an environment variable on the fly without ever touching your filesystem, which is really nice. Okay, that's interesting. I didn't know about that. I'm a big fan of one password. But I didn't know I did that. Oh, so go check out go grab the OP one password tool, it's got full access, you can just basically grab secrets. Yeah, you can edit secrets. I'm a huge fan of one password as well. And LastPass was nice as well. We used to use LastPass for a long time. But I store for example, like AWS secrets, I'll put those up in one password in the notes field, or I'll create separate special fields that have kind of key value pairs, which are environment variable name, and environment variable value. And then I just have a quick little one liner in my shell that converts those from one password JSON into export those two real variables in my shell. So more than just the secret key, like the region and like what profile to use, which assumed to do like anything is a variable that you put in my environment. I'll put into one password. Okay. Yeah, that's cool. devices. Good. Yeah. Right. Well, that's it for our six items. You guys got any extra stuff that you want to throw out there? Bryce, you got one here? Yeah, I just noticed that. The PSF is looking for volunteers to help migrate issues from bugs python.org, to the GitHub issues, to if you want to help out PSF and do something worthwhile, like this cool thing to volunteer for? Yeah. Yeah. That's cool. That's cool. How about you calm in case you missed it, there is a learn Python, humble bundle that is going on right now that will benefit a couple charities, the book industry Charitable Foundation, and the no starch press foundation. And so those are helping folks who basically need a safety net during times like this, like independent bookstore owners, comic book owners, things like that. For $15, you get like, nearly $400 worth of like, amazing. And no starch press books, at some point in time recommend, and probably almost every one of the books is on that list to folks too, so they can get jumped in both feet, how do I learn Python, I've got three of them sitting on my desk right here. Because they're, they're fun books. You know, there's like stupid Python tricks and automate the boring stuff. And it's really fun books in there. So I'd recommend anybody who's spending time at home and doesn't know what to do with their time, go grab these books for 15 bucks, 15 bucks or pay what you want, the money goes to a good cause. And you get to learn now awesome. Python language. Nice. Yeah, that's called the mission Python book is intriguing to me. That's definitely cool. All right, I got a few quick ones, Python three, nine, beta one is alpha testing. So if you're into that, you know, go check it out. You can run, download, run it and play around with some of the new ideas in there. Also, not beta. But for real Python 383 is also available. That's pretty cool. And then I got a cool message this morning from Jeff Derby Shire. And he sent over something that I thought was just kind of a cool little piece of information. I'll link to the paper in the show notes. So everyone's trying to help out this COVID stuff, some particle physicists put some free time, took some of their free time to design and build a low cost ventilator. It's pretty cool, right? Yeah. And, and they wrote a paper about it, because they're particle physicists. And if you look through it, it says things like, the target computing platform is Raspberry Pi four, as chosen as a trade off between computing power and power consumption and things like that, which is nice. The target programming language is Python three, and the UI is pi Qt five, and then the nvm GUI, and the UI for it is Python three software written with PI cute five, and pretty nice allows you to like steer and monitor the equipment. So anyway, here's a cool, effectively a Python ventilator created by particle physicists. That's like open source now. That's awesome. It's good to go. There's a huge number of names on this paper too. Yeah, it's pretty awesome. Anyway, I'll link to that people can check it out and if they're interested, but you got to do something to keep the these particle physicists off the streets. It's right. Don't just roaming around any old Collider. Alright, so for the joke this week, I thought I grabbed like a couple more. Oh really covers not O'Reilly. And I mean, you already have the Humble Bundle book thing. So we got the oh really ones that I thought we could just easily just do one. I'll talk about the first one here. It's a chameleon, which obviously is the lizard that can change

00:30:00 colors to blend in. Brian, you're like this one. It's called refactoring code without tests. It looks like it's working. No code coverage no problems. it just blends right in. Looks it works on my machine. I try it was written by Sir crash a lot. So cool. All right. Brian went to the next one. Sure. Becoming a manager and listening to people complain all day. Jesus Christ none another budget meeting. So luckily, I and the animal the animals a crab, of course.

00:30:28 I don't have to deal with budget meetings. Luckily. Yeah, yeah, me either. Alright, Calvin, here. This one's a special web one for you. Yeah, it is. I say this is perfect for me. So this is the Z index. Good Lord, how many zeros? I think it's 100 billion. Is it? 100 billion. It's the real world CSS. You've come this far. no going back. Now. That's so true. on so many levels there. I think you're like, the index equals one. No, no, keep going hundred. Fine. Just, it's eventually not going to be behind that thing. I love it.

00:31:00 All right. And then the last one, I'm a big fan of design patterns. So this one is avoid using dark patterns. And it says Do or do not. There's no try. And of course there's a Yoda on it.

00:31:11 Very good. Very good. So yeah, these are all the fun all fun these. These are really good covers. Yeah. Always a nice joke, as well as nice been here with you guys. So right as always, Calvin, thanks for joining us. It was wonderful. Thank you very much for having me. Thank you. You bet. Bye Ron. Do later. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in B yts. And get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian rockin. This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

