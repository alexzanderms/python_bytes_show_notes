00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 186, recorded June 10 2020. And I'm Brian knockin. And I'm Michael Kennedy. And this episode is actually brought to you by us. And we'll talk more about some of the ways you can support myself and Michael little later in the show. But first, let's side table that for a little bit side table. Yeah, let's put it to the side and talk about side table. Yeah, so side table is something that I noticed as new project from Chris Moffat, and longtime listeners of the show will definitely know that I am inspired by visuals.

00:00:40 And this is one of those. That's really nice, right, like, not long ago, when Geeta was on the show, we talked about a missing number visualizer for pandas. So you could have a quick view of just like, I got this data, I just need to really quickly see kind of what it looks like what's missing, correlate missing elements and whatnot. And so a side table is in this general Zen of things. It's like, I've loaded up some data, I just want to quickly ask some questions and get a sense of what's going on. Like, I've got a panda's data frame. And I want to be able to say, you know, can you just break this down by like, show me the top 20% of this, and then group the other stuff into just like an other category. Also, instead of just getting like a plain text output, you get a cool, like, alternating row color, nice table with extra information, and whatnot. And it's usually something really, really simple. Like, I could go to the DataFrame. And say, just give me the frequency of state and just, you know, group it by that or something. And it's, it does a group on those and a whole bunch of cool stuff. So really, really neat visualization, there's a picture in the show notes that shows you without it and with it. And given that the nicer version requires even less typing than the not nice version. I kind of like it. Yeah, just out of the box. Having just like, the alternating gray and white stripes is good. Yeah, absolutely. So basically, all you have to do is a pip install, of course, but then import side table, and it adds an STB functionality to data frames to pan a data frames. And then you can ask a question like frequency. There's other stuff that you can also ask, there's like a bunch of different functionality there. So really nice for exploring new data sets. And it's basically a supercharged version of pandas value counts with a little cross tab mixed in. So yeah, it's easy to use. And if you're working with pandas, especially in Jupiter contexts, you know, that's really where this makes sense. Give it a shot. I think it looks great. does a good job, Chris. Yep. And I know, I didn't, I totally didn't even intend to do another table one back to back. But we'll kick it off at all the tables. Yeah, which one you got here. So this was a suggestion from Tom McDermott. And for the tabulate, package. This is not for, it's not intended for Jupiter stuff. It's intended for just standard out sort of things. So you want to pretty print the tabular data in Python, for command line utility. Actually, I've been using this for years, I was like, I'm sure we've covered this, and I looked it up. And I don't think we have or at least I can't find it. I don't remember it's covering either. And it's really sweet. It's like, it generates nice formatted tables, but in ASCII, so like before, I said, you know, side tables, awesome if you're going to be doing this within Jupiter, but this is like if you're doing it within just a terminal command line app, by default, you've just got like a matrix of like a list of lists or, or a list of tuples or something to represent the rows. And you just want to print it with tabulate, it just does it automatically. But you can also, I usually use it with headers, so you pass in the header separate. So header, header information. And by default, it just prints stuff out with prints, the headers, and then dashed lines, and then your columns underneath. But it also like spaces it correctly. Because that mean, actually that trying to get that right by yourself by hand is just a pain to try to figure out how why things are supposed to be in whatever. So this just does it. It's great. Not only does it do it by text, like the example that you have in the show notes really illustrates like the nuance here. So it's got a list of planets that are radius and masses. And for the sun, it has it in scientific notation like 1.8 or 1.989 times 10 to the ninth. And then for the other ones, it's like 5,973.6 it aligns the decimal places, not all to the right. I mean, it's glorious. Yeah, the alignment is neat, and I really appreciate that. So you have control over some of your number formatting and your alignment. But also, if you're outputting for different things, there are multiple different formats, including like a simple markdown type table, but it also does GitHub flavored markdown tables and pipes that just looks look nice if they just kind of make it look like boxes.

00:05:00 There's JIRA style and media wiki and HTML and just plain if you don't want to any sort of stuff in between just spaces in between looks nice. That's cool. So you could like output this in JIRA format and like paste it into a JIRA issue as like, here's what we're doing now, or here's the problem. Here's the data. Yeah, definitely. Well, it's a good one for keeping track of tables. Yeah. Wow. Another good thing is all the stuff that you and I have to offer people to learn more information about lots of stuff. Yeah, absolutely. We have the podcast. But we also have other things as well. Yeah. So if you want to support what we're doing, one of the things you can do is become a Patreon supporters. So there's a link on the page where you can throw a couple bucks at us a month if you want. But also, I've got a book, if anybody was not aware of that there's a PI test book, you've written a PI test book?

00:05:49 I did. It's good. I really like it another podcast called testing code. I'd love to have more people go check that out and suggest what you want. So I'd like to have people talk to me about what what other topics should be covered there. Yeah, you also offer quite a few learning opportunities for people. Yeah, absolutely. We Oh, the main thing for me, if you want to support me, like, obviously, we have the Patreon. And that's great. But if you want to support us and get something back, you could take one of our courses over at talk Python training, or doing all sorts of cool stuff there. We've got like 120 hours of Python courses and exercises beyond that. But we recently just kicked off a cohort thing where people can go through as groups. So that's something I'm trying to put together. And you know, we'll probably be more opportunities to do that as well. So yeah, check it out. If you want to learn Python, that's what I recommend people go. Yeah, I want to think when I bring something up about your courses, there's a lot of the courses that are there's a lot of content there. And it's wonderful information. One of the things I really love, especially in this working from home environment where I don't don't often have a lot of time, is the way you've broken up all the courses into little tiny pieces. So there's a table of contents. So you can go through the course and see what you've seen and see what you haven't. But you can keep track of what you haven't. And there's often just, if you've got like three to five minutes, you can fit in a little extra video. Yeah, thank you so much. That's awesome. I like that you've done that. Yeah, I really want to try to make the courses have meaning as a reference afterwards as well. And like, nobody wants to go back and scan a 30 minute video for that 32nd clip you're looking for. Yeah, that's good. Awesome. You know what else is really good? tree beards. Yeah, for real tree beards are pretty awesome. Is that like a Neck Beard?

00:07:30 But for a tree? Okay. Okay. Yes, I actually have no idea the relationship of the Neck Beard to the tree beard. But tree beard is continuous integration for notebooks, which is pretty cool. Actually, that is cool. So this was recommended by Brian skin. And it's continuous integration for a particular subset of notebooks. Those are the notebooks that are binder ready. So if you're not familiar with binder, I recently did a talk Python episode on this and came to appreciate binder way more than I originally did. So binder is a place where you can basically point a GitHub repo or some repo at goto binder pointed out your repo. So here's the notebook. Here's the dependencies, files and everything. And then you just click a button and say, let me run this on binder. Because if you go to GitHub, you see the possibly the output from the notebook, but that's like cached what was run the last time if you want to actually run it and play with it, you can click Launch binder, it'll fire up a little Docker image somewhere magically in the cloud. And it'll just run it. So you basically configure the repo to describe to binder what it needs to run successfully. Right. So that's how this works is triggered basically says, if there's something that can be run on binder, then it will use that same functionality to automatically install the dependencies, which could be like conda, or PIP or whatever. And then it'll run the notebook using that cool library called paper mill, which sort of inverts notebooks into kind of function type things. It'll upload the output, and do NB convert on the notebook to save it and create like a version stamped last run of your notebook that you can go back through your continuous integration and see the history of the outputs saved as HTML, which is pretty awesome. And it integrates with a GitHub app that'll like push notifications back to your repo. It integrates with slack. It has all kinds of interesting things like this. So really neat mechanism to make sure that your code just keeps running. If it's a notebook. Yeah, it's even got like secret management. So you can if you have to connect with different things with passwords and stuff, don't just put those in the notebook. No, no, darn it.

00:09:43 Yeah, no, that's really cool secret management and all kinds of stuff. And basically, when I first saw this, I thought, Okay, well, what's the criteria of success? Right? Like how do I write a test to indicate a successful notebook experience? The way it works is basically it runs all the cells and if I

00:10:00 The sales run without exceptions, then it's successful. So it's not like it's making assertions, but it's kind of like a smoke test like it didn't entirely explode. So we think it's probably okay. That's not bad for starters. But you could I mean, conceptually, you could put a search in there. And that would throw an exception. Exactly right. You could build in the test that like some layer in there, like have even a Python file that you import that like, does the test. I don't know, whatever. There's, there's a lot of options. So you, right, you could make your notebook report outward. Yeah. Make some cells that'll blow up if things go wrong. For sure. Yeah, somebody should get ahold of us and tell us why beard. Yeah. Because trees generally don't have beards.

00:10:37 Well, okay. We live in Oregon. So they're often very messy. So that's true. They've got that little moss thing, if it's just right, actually, it could totally do that. Sure. Yeah. Okay. So one thing that surprised me, Brian, that seems to keep coming up and up. And both of us are talking about it next, like, I feel like we've aligned perfectly. So

00:10:57 we're both talking about virtual environments, you go first. Okay, so there's a couple things that we just ended Episode 184. We discussed virtual M and v, e and V. And actually, I learned quite a bit to find out that virtual env is still pretty cool. And fast. But that was in one of the four. But we had people get a hold of us and say, hey, there's more information that you guys don't know. And I love that, please keep it coming. If we do half the story, give us the rest of it. In Python three, nine. So V and V the built in one, it has a cool new flag called upgrade depths for upgrading your dependencies. It's like not all of your dependencies, but it's for virtual environments. Every time you create one week commented that you have to upgrade Pip. And this new flag allows. So when you install it, create a new virtual environment, it automatically upgrades set of tools and IP for you. Yeah, that's nice. That's in Python three, nine, I tried it out already. I tried it on beta one, beta three is already out. So you can try it out if you want. The other news is the virtual II virtual env is getting something new. And it's not there yet. I'm not sure when it's coming. But I think it's soon it's getting a feature called periodic update, which is super cool. So one of the things so virtual and since it's separate from your Python, or you can have it installed, make virtual environments for multiple pythons, for instance. But it also keeps a its own cache of new PIP new set of tools and new wheel, that package you need if you're creating wheels. And so it has those upgraded already, but the periodic update, it will just have this extra thing that in the background goes off and checks to see if there's new ones around. So whenever you actually need to create a new virtual environment, it'll automatically have an updated one that it can install right away. Which is neat. Yeah, that's pretty cool. Nice. And if you don't want it to go off and do in the background, you can manually say, okay, right, now I want you to go off and upgrade it right now. So okay, that's a cool idea. I like it. So you've got a better chance of having updated stuff. If like you're working without an internet connection at the moment or something it already had kept its own version of it, that would upgrade it. So you already can, it's newer than if you're using V and V. But I'm excited about it. And one of the other things I wanted to mention is I kind of complained about that the the prompt is different. And I got a little bit of the skinny about why the prompt is different in virtual m versus V and V. And it had to do with the prompt formatting on different operating systems was different, which is weird, but they coalesced it and made it in a single prompt and the need for like sometimes you actually want to not have a space, you might not want to have those parentheses. So there may be reasons to not have the parentheses in space. So there's, there's reasoning behind it. It just still annoys me. That's okay. But it's cool to actually know why though. That's, that's really nice. Yeah. So all these things that make working with virtual environments better, are great, but how about we just don't have virtual environments, but we still do, when that'd be better? I don't know.

00:14:16 So let me tell you what I'm thinking. So a while ago, for the three, eight timeframe, there was a proposal called Pep 582 and pep 582 is put together by a bunch of folks Steve dour and four or five other people, I'm forgetting Donald stuff. And I know there's two other folks that I'm forgetting, sorry about that. But anyway, it was put together an idea is that it proposes to add a mechanism to automatically recognize a Dunder pi packages and prefer importing packages installed in their over global packages. The idea is, you just go to your project and say at the top of your project, go, here's the top of my project, and then when you pip install stuff, it will put things in

00:15:00 There, you won't have to activate a virtual environment because you're not changing anything outside the global system. It's just going to drop it in right there. Okay? Basically, this is how Node JS works, right? So if I'm, by NPM, install a thing, it just traverses up the directory until it finds a node modules. And it's kind of like that, right? So it says, if you have this folder here, we're going to automatically install stuff there. And then Python will automatically know to look there. So if you're anywhere in a sub folder without even activating the virtual environment, and you type Python, something to run a command, as long as you're in the folder structure, it's going to use that environment. It's pretty cool. Yeah, that's pretty cool, right? So the motivation, at least is it's like every time someone's new to Python, they're like, well, I can't install this thing. It says Access Denied your like, Permission denied like, Well, okay, let me talk to you about virtual environments and why you need them. And also, to activate the environment on the different shells and the different platforms like Windows versus POSIX. You know, source versus not source, bin vs. Scripts is different. And so that's kind of a pain. So the idea also, every time you open up a new terminal or command prompt, you've got to reactivate it. Like I've all all for all these things. I have aliases that make this happen, right. Yeah. So the idea here is that you don't have to worry about any of that stuff. You just have to like admit your Python project, somehow. It doesn't. I don't remember seeing how that was supposed to happen. But once that pi packages folder is is there, it's like, well, that's the top of the project or go install there. And you presumably get have like a fallback, one at the top of your user profile, or something along those lines. Yeah, you have that. So that's for the packages. But what about in virtual environments? You also have local scripts that come along. entry points. Yeah. Do you know if it deals with that? I don't know. I don't know. But it's possible. I didn't read like every word of it. So it's in draft mode. But I was a little confused because it says its version is Python three, eight, I'm like, well, three, it's shipped, it should either be closed, or big or published. That seems weird. So I sent a message to Steve dour, just a moment ago on Twitter. And he said that shoulda asked one of the folks proposing it. I think the primary guy still working on it, the text itself hasn't been updated before three it's released, which is why the header still a little bit out of date. So it's probably more like a 310 thing or something. But it's still pretty cool. If you want to try to live in this world and see what it's like, David O'Connor has this thing called pi flow. And pi flow, basically does this. It integrates with PI projects. Tom, oh, man, we lined it up good this week. And you go through instead of saying pip install, you say pi flow install, instead of saying Python run, you say, or Python script, you say pi flow script, because it has to like, re initialize that every time because it's not actually changing something. Anyway, it's interesting, I would like to see something kind of like this. I think it's pretty neat. There's also some interesting possibilities around dirty envy that I'm looking into just talking to someone, Chris, who has got some cool ways to have dirty envy automatically activate virtual environments, which would be kind of cool as well. So there's a lot of a lot of stuff happening here. It's still kind of blows my mind. There's so much action around something that feels like it's just a I don't know, so. So plumbing and foundational, yeah. But like you said, it's one of the it is plumbing and foundational, but it's also one of those things. It's it's one of those tripping dams, it's like a loose the loose stone on the sidewalk that trips up all the new people all the time. So, so far, what we've managed to do is we've managed to like spray paint a yellow line on both sides of it. You know, somebody needs to shave that bad boy down. But right now at least it's like got a little marker on it. And I just want to say thanks to Louise, your beer, or beer, over on here, said that over and let me know about this whole project. So thank you for that. Yeah, that's nice. Yeah. So speaking of pipe projects, that tunnel, I actually really love I kind of like this. I like awesome lists. So awesome. Lists are thing. We've covered many of them in the past. There's even a Python bytes awesome list. Yeah, this one is awesome pipe project, project dot Tamil projects. So this is one of the great things about different sorts of source code lists is to go and look at examples. So this is a an A list of other projects that are out there that are already used by project Tamil so you can look to see how how other projects are doing it. So if you want to figure out for your own project, this is helpful. For instance, a lot of the testing and formatting stuff came along early. So covers pies in there pi test talks, black I sort I know knew all of those Ward was a new one to me. So word is apparently a way to test things without like string named test functions instead of function names. I haven't really played with it much other than looking at the documentation.

00:20:00 But it looks neat. But there's a code analysis like violent and unimportant. And the really long title, we make Python Style Guide, which is a linter and other stuff, but it's pretty cool. And then it has a couple links to articles about pi project tamo. And then what I think is also neat is a a list of projects that are discussing switching the pipe project tunnel. So you Oh, yeah, that's probably pretty interesting. If you're deciding if you're trying to decide yourself, right? Yeah. Does it figure out what sort of discussions are going on in other projects as to why this switch? And why not? So? Yeah, sure. Very cool. Very cool. Yeah. I think people switch, I'm using it everywhere, because it's just, it's sort of easier. What confused me for a little while was that it isn't, I thought it was something you needed flit or poetry to be using. But you can use by Project talan was set of tools projects also. So okay, interesting. Yeah, I didn't know about that. Yeah, I kind of thought it was tied to some of these higher order management, things like poetry and Flint. And so yeah, cool. Cool. And like you said, there's a Python bytes awesome list if people like awesome lists. Sorry, I put that at the end there. People can take that out. Thanks, jack for doing that. Yeah. So that's our six items, Michael, anything extra to share with us. I got something for everyone. I got two things, actually, one follow up. And one new thing. First of all, we had Calvin on a while ago, episodes ago is that last show for the couple shows ago. And we were talking about secrets. And he also he's in your camp, he doesn't put them in the notebook, or in the write their source code. He's doing something else. But what he talked about is actually using one password as like a vault. Right? So one password has awesome encryption, and security. And so a lot of the challenges revolve around Well, if I'm going to put them somewhere else, if I just put them straight in the virtual into an environment variables where people can grab them there. So maybe I want to put them some other place where it's like, encrypted or something, right. So he talked about his mechanism of finding all those environment variables at launch. And then like, just as you run your virtual environment, injecting them there, but storing them in one password instead of just on the file system or something like that. So he did a blog post about how he's doing that. And so I'm gonna just link back to that. Yeah. Nice. That's pretty cool. And also, I want to give a shout out to talk Python, specifically, the last episode, at least the time recording, it probably not be by the time we publish this. But nonetheless, just recently, you were a guest on talk Python, where we talked about 15, awesome. eye test plugins, mostly a few extension to like using with her alongside but mostly pi test plugins, and went through things like pi test sugar and freeze gun and all sorts of fun stuff. So people can't get enough of us. They can hear you've been a guest over there talking about pi test the entire time. Yeah, it's nice. Yeah, that was fun. Thanks for coming on. I like to hear myself talk so much that I also, we cross posted that on testing code as well. So yep, sounds good. And one of the things so as an extra bit, did you know that I wrote a book? Yes. Yeah, I've heard of that. No, it's a great book. I have it. I published through pragmatic publishers. And I just wanted to bring up that pragmatic has a shiny new website. So the pragmatic site is a little different. And there's an FAQ up there if people want to know why or what's different about it in for the most part, it looks a lot the same to me, but the entire back end is different in shackle faster. So faster is always size. makes it happen. Nice to work with. I have a joke. Let's pretend are roommates. You can be the first person and I'll be the second person. Okay. Okay. Okay. Stop by the store on the way on.

00:23:46 Stop by the store on the way home from work. Please stop at the market and buy one bottle of milk. If they have eggs bring six I came back with six bottles of milk. Why the hell did you buy six bottles of milk I just said it's just the two of us. Cool. What do you think man because they had eggs.

00:24:05 Obviously taking this programming logic a little strong, right, stop by the store. If they have eggs and get out of milk, eggs get sick.

00:24:14 That's pretty good. Water. Takes a little bit of thinking. So glad we have it written down for me. Yeah, yeah, we can go back in steady. All right. Yeah. All right. Well, thanks so much. Ah, cool. All right. Thank you. Bye. Thank you for listening to Python bytes. Follow the show on twitter at Python bytes. That's Python bytes as in V yts. And get the full show notes at Python byte set FM. If you have a news item you want featured just visit Python bytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Aachen and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

