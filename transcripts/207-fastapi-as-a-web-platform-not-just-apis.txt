00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 207, recorded November 4 2020. I'm Michael Kennedy. And I'm Brian Aachen. And this episode is brought to you by us. We'll tell you more, more about that later, Brian, how you been? I am excellent. today. I'm tired. I'm quite tired, actually. quite tired, but I'm doing alright.

00:00:23 Life goes on. And we continue to work from home and all those things. And you know, luckily, our industry and our tools were built for that world. Yes, I'm very fortunate. Yeah, absolutely. So speaking unfortunate. I think we're fortunate that Sebastian Ramirez created fast API, because we've talked about fast API before, it's super neat, we've talked about pedantic before, is a really cool way to take data class like things and automatically bind them with automatic conversion, validation and whatnot, or data that just comes from a JSON dictionary somewhere or just a Python dictionary. But it often is JSON being submitted to a web sort of web API. Yeah, the reason I bring up fast API is I've been doing a lot of stuff with it actually working on a series of courses around fast API as well, which is super exciting. And maybe I'll mention that briefly later. But one of the things that bugs me about fast API is it's so API oriented, that it's tricky to know what to do when you just say I just want to create a website that has like a couple of pages, and then some API. So for example, if you just create a couple of API's now. And they're like, say it's about weather, it'd be like slash API slash weather slash report, API slash weather slash latest or whatever, right? Well, if you just click the, you know, you run it, you just click the link in your ID or VS code, or whatever and open it. What do you get 404? Hmm, probably not. The best response that you could imagine is that like, the default behavior is just to like, open up the site, and it says, not found. So you got to like dive in this stuff. Anyway, it supports Jinja in like a sort of manual way, the same way that flask does, I guess, more or less. But I wanted a better way to have HTML pages inside of my fast API app. Because if you're going to build an API, there's a very good chance there's like two or three pages that you need, right? Yeah, yeah. So I wanted to have a couple of things, I would like to be able to have a simple function. That is a web view method could be something that is like a HTTP endpoint for an API, but more likely, it's gonna be one of these pages. And I want to just be able to have it returned dictionaries, and say that it takes some kind of template, right? So put a little decorator and say this one has the template home slash index dot HTML, and it's automatically going to take that dictionary, sitting over to whatever template engine you choose, turn it into HTML and send it back. You know, set the content type to be HTML, all of those things, because by default, JSON, okay, so you'd like it to be the JSON data, but have it be formatted like HTML. So well, often what with these templates, what you need to do is like, suppose you got a bookstore, and you want to say, here's the categories, you have to somehow pass data over to like categories, dot html, and it'll get like, a list of categories. And then you'll iterate over them and generate HTML, through that dictionary being passed over. That's the data that you're basically providing to the dynamic HTML, right? So what I did is I went and I created this thing called fast API dash chameleon. Do you want to use the chameleon template language, which previously was not really in any direct way supported, you could import all the libraries and just make it do it yourself. But that's kind of painful. Now you can just put a decorator, you know, from fast API underscore chameleon import template and just say at template and point some file at it, and boom, you return a dictionary. Now you have chameleon as your template language. Oh, cool. That's neat, right? And it also I found a way to write a decorator that will automatically adapt whether it's an asynchronous or a non asynchronous method, right? Because normally the decorator what it does is it has like a wrapped and as an inner, and then like, the inner function does stuff and then calls, the actual thing is decorating. Well, the thing is decorating is async. You got to do one thing, if it's not a thing, you got to do another thing. So how do you tell there's a cool library called inspect, which will let you actually look, even if it has a little wraps? decorator that tries to lie to you about what it is it'll it'll show you the whether or not it's a ko routine, which is pretty cool. Nice. Yeah. So on top of this, Mark Brooks saw this and said, That's awesome. But I don't really like I don't use chameleon. I like Jinja. So he forked my repo and created a fast API dash Jinja. So now you can do exactly the same thing, if you like Jinja. And guess what if there's someone out there that really, really wants to use, I don't know, Django templates or mayco, or whatever, right? It's like five lines of code away.

00:05:00 from doing that as well, the reason I think it's important to add these other template languages, not just say, well, it supports Jinja. So you're good. The reason I think it's important is if you've got some web application that has API's, it already has chameleon templates, or the other example that doesn't exist yet some Django thing and you want to convert it to use mostly fast API, but you don't want to rewrite all the HTML, CSS and JavaScript. If you can make it render those templates, then it's so much easier to move from some other web framework over to fast API, because you don't have to touch the HTML, you don't have to touch the CSS, you don't have to touch the JavaScript, there's just that middle part where you'd like handle the requests. And that's actually pretty limited. Yeah. So that was my idea for creating this was hopefully to make make it possible for people who have other stuff written in chameleon to move fast API really easily. And then also just to like, sort of inspire a cleaner programming model. Yeah, I actually was gonna ask you if it was possible to do something like that with Jinja. And you already answered that. Yeah, it's actually it's built in. But the way it's built into fast API is not with like a template decorator. It's, you know, you actually go in and you save the actual file name, and then you pass a bunch of it's like, it's not super clean. So it is, it is quite clean the other way around, which is cool. Yeah. Nice. Cool. Carrying on about API's, yeah, maybe a little less clean of away. So yeah, we've been very excited about fast API recently for API's. And in the Django world, there's the Django rest framework is quite popular. But what if you just want to use vanilla Django and write a REST API? Adam Johnson took that on and said, yeah, of course, you can do it. But you can also do it in one file. So we're gonna link to a little article where he has a simple REST API, completely written in one file as a one vial application. It's a it's a little API that gives you information on the characters from Rick and Morty, specifically, just Rick and Morty. And that's it. But it's a good example. I like it, it shows shows you how to do how you can do redirects. And so like, like, for instance, on the endpoint, one of his endpoints is characters. So if you type your application slash characters with a slash, at the end, it should return a Jason data with the information about Rick and Morty. Now, what if you just don't put anything if you put characters without the slash, or don't put characters at all, like your homepage thing, he shows you how to do redirect, so you can redirect to characters. And you know, it's pretty simple example, but it is kind of neat that you can do it off the shelf, Jason are off the shelf Django. He also shows he's got some hard coded data classes within the application. But it's easy, you know, not that difficult to imagine, you can extend that to something that reads it out of a database for some Yeah, absolutely. And it's like 63 lines of code, which is not too much for non trivial little example, API. You know, I'm not necessarily I'm bored of putting this in one file. But I am on board with this idea of like these simplified things, you know, when you hear about Django, you always say, go ahead, if I want an API, I'm gonna have to add Django rest framework and all these other things to it. If say, you're in flask, and you want to work with users like Well, I've got to add the flask SQL alchemy add in, I've got to add the flask users add in the extension. And maybe what sessions are gonna add flask session, like, none of those things are necessary, per se, especially on the flat side, like there's so much of it adds like one or two lines of code that you don't have to write. And now you have all the overhead of depending on making sure that that thing works, right. And the way you work is the way you want. And so having just a here's the bare bones view. And you can add in stuff if you like, I'm a fan of that. Yeah, I'm also thinking like, let's say you have a Django application already. And you built it not intending anybody to use it as an API. Yeah. Somebody says, I'd like maybe an internal application, your business or something. And somebody says, Oh, this data here where this graph is, can we get that as an API so that we can, you know, use it in something else? And this would be, you know, a good example, to be able to just add, you can use Django rest framework, of course. But if there's just something simple, you need to add as an API. This is a way to do it. Yeah. No, it's cool. And like, I do feel like these add ons and these extra layers that you had, they better add a ton of value, because they're also adding overhead and dependencies and breaking changes and like, all that. So yeah, if you've got something working, you want to just add a little bit of fun. Yeah, here's a few JSON endpoints. Let's do that. Yep. And for people that really enjoyed this article, and want to hear more from Adam, I've had him on testing code a couple times. So we'll drop links to those episodes in the show notes right on. Now, before we get to the next one, which is a pretty big item. Just want to say, This episode is brought to you by US forces over at talk Python training, testing code, podcasts and something to do with PI test. Do you do anything when I heard that pi test is the thing that people use to do anything?

00:10:00 Yeah. So I wrote a book on pi test, I still think and I still get call outs on Twitter saying, that's the best book they read, read to get started with testing. And they got excited about testing with reading, Python testing with PI tests. So it's a good book. Yeah. Awesome. Yeah. And over at talk Python training, I'm now working on a three part series. So like, three, four hour sections or so on building fast API API's and, and also like testing them and putting them in production and fun stuff like that. So that's exciting. Yeah, that'd be fun. Yeah, it'd be super fun. So anyway, that's coming, people can go over there to string.python.fm. You know, sign up to get notified and visit testing code, and listen over there as well. Yep, we also have Patreon, right? Oh, yeah. So had somebody reach out to us for the Patreon and say, Hey, you guys mentioned that a whole bunch of people sponsor you for a buck a month. But they said, that's the only tier you have. And so Michael and I are definitely going to talk about in the future, whether we should add some more tiers. However, there is an option, even if you sign up for $1 $1 a month, if you want to send us more, you can change that, and it within the Patreon thing, so we'd appreciate it. Yeah, much appreciated to everyone who supports us. Not all the ways every way is valuable. I appreciate. Speaking of valuable and appreciated, we often talk about the StackOverflow developer survey. I mean, in my mind, there's there's two major surveys that take the pulse of the developer community. One is the StackOverflow developer survey. The other is the PSF survey, which by the way, just got extended to three more days. By the time this comes out, that'll be already in the past. But you know, that's hopefully people have taken that we've talked about it before. And we talked about the 2020 StackOverflow survey coming out, I believe, and I told folks to go take it or you did. And then we just didn't follow up. Right. But the survey results are out. So I thought it might be fun to run through the survey results. Yeah. And they're just want to be clear, like I kind of lost track of this. I don't know exactly when this came out. But it is not brand new. It's it's like four or five, six months ago. But I just you know, we didn't, we didn't talk about the results. We just talked about the survey. So let's run through some of the things that are here. Now. The 2020 StackOverflow survey is focused a lot on demographics, and background and education and all those sorts of things. And if you're interested in that, definitely go check it out a lot to see there. Just because of format, I'm going to focus mostly on the tech side that they covered here. Okay, so not whether we have a full time job, how many of us work from home, none of that. So some of the most popular technologies. And I just want to point out, I think the PSF survey and the JetBrains folks who worked with them to put that together is in a much better place. There's this is a wacky, wacky, wacky survey, but it does have some good questions. Yeah, I'll expand on the wacky a sec. But we look at the most popular languages, most popular technologies, web frameworks, database, and so on certain languages. We have JavaScript, Python, and Java. And JavaScript has 68%. Python has 44%. java has 40%. That's good, right? I mean, like everyone knows JavaScript is pretty popular. So what's wacky here? Why is this weird? And I'm not necessarily saying there's not 68% of the people doing Node JS, they may well be. But do you know what language is between JavaScript and Python? CSS? Dude, I know no application that has shipped running on CSS. I can't even compile CSS, I could probably compile sass or less over to it. But I can't compile CSS to a running application. It's not a programming language. Yeah. And SQL perhaps is Turing complete. But yeah, and SQL SQL is a thing you use within a language. It is not a programming language that builds things, right. So they have this, this is what I was talking about where it's wacky, and JavaScript is in this world, right? They needed to ask very, very clearly, do you work exclusively in JavaScript as a Node JS developer or a pure front end developer? Or did you check I also use JavaScript and CSS and Python, I also use JavaScript and CSS and Java. Right. And so the JavaScript one has like, bundled up all these. I do anything in the web, on any language, plus the Node JS developers, right. I think the contention there is a little bit closer, but it still wouldn't surprise me if JavaScript was actually in the lead. I feel like I'm all hyped up on like percentages and trajectories, given all this election talk that we just went through. Well, I remember checking the box for JavaScript once and like, Yes, I use JavaScript. Yeah. What does that mean? I have an app that does use a little bit of JavaScript. I looked at the code once, right. Did you do $1? document dot Ready? Okay. You're a JavaScript developer like that. Really? Yeah. So yeah. On the other hand, if you built an app with Vue js, or Angular, you're a JavaScript developer. If you build something with Express note, you're a JavaScript developer. So I think it's a little bit weird that they didn't like really clearly make that too.

00:15:00 distinction because you can't put two buckets and add up those numbers next to other buckets and make that make sense, right? CSS is the same thing. Like, no one would check it if you said I primarily code and CSS to build apps and ship on the CSS platform. Anyway. Okay, so web web frameworks, you know what the most popular web framework is? Well, I do now that I just looked, do you believe it? But I wouldn't have guessed this? Do you believe it? No, it's jQuery. Nobody. How can jQuery be in the same category is like Django? Yeah, yeah. It's even on the front end side of the JavaScript front end framework, there's view, there's all those are really legitimate things. jQuery is not the primary way in which people write web applications, but a lot of people use it. So it's alright. So anyway, those two are a little bit weird. I take away Python is really quite popular. And up there, the Python web frameworks, I think there's just so many they don't filter very high to the top, individually, databases is much clearer. You know, you don't have to talk about other funky stuff. So for the most popular ones, we have my sequel at 56%, Postgres sequel 36%, Microsoft SQL Server at 33% and MongoDB, at 26%, which is actually pretty high in my understanding in the world. But that's pretty cool. For platforms as a developer I work on not I deploy my code to, we have windows at 46%, Mac OS at 28, and Linux at 27. So, again, most common platform for development is Windows, so we can't forget them when we build our packages and whatnot. Right. Steve Dotto goes on and on about that. Just good. My favorite part of this these surveys though, that these are legitimately good is the most loved and the most dreaded, the most wanted section. So the most loved languages are rust, TypeScript, and Python.

00:16:48 TypeScript personally drives me a little bit crazy, because it's like so picky. It's like, the type annotations but you don't get it exactly right. You're it's not gonna work. Anyway. It's still pretty neat rust, I would like to learn Python, I know something about the most wanted languages, I think is also interesting. So most loved is I work with it, and I love it, versus I dread it. Or I don't get to work with it very often. I'd like to do more is the number one Python ever to JavaScript number three, go. Go figures now most dreaded VBA and Objective C?

00:17:20 Does that surprise you? Well, in pearls number three is still interesting. It still brings dread. So that's the languages and then the databases most loved Redis Postgres Elastic Search, Elastic Search is like CSS a little bit too means that really database anyway. And MongoDB. So those are all quite high. Most Wanted databases. MongoDB and Postgres are neck and neck at the top. Okay. And you still do both? You do a lot of Mongo, right. Oh, yeah. I love maga. I think Sweden is so clean and easy to work with. I it's been years since I've had to do a database migration in production. I love it. As in like, I change my schema. Now. The app won't run unless I apply the script. Yeah, yeah. So anyway, rounded out most dreaded database, IBM DB two, doesn't surprise at all. Anyway, that's the survey, I just want to give a shout out there like a call to the community if you're if you have any influence on this, find a way to separate things that are unequal, right? Don't put just I do some JavaScript from I do some c++, those are not equivalent. Or I do some jQuery and Angular, and I do Django, those are just not even in the same category. And it really drives me crazy that they're put this way. And it just makes me appreciate the Python Software Foundation survey more because it had less of this weirdness. Yeah. Yeah. There's some weird things that get bucketed together. But yeah, interesting. I would say that PSF one is more regular when you say more regular. Oh, yeah. Nice transition. Thank you.

00:18:51 But before we move on, there was another. Nobody else would care about this. But me. But what was the other survey that is closing in a couple days? The PSF survey? The one@python.org I believe, that sees it. So

00:19:05 I don't know where it went. But yeah, yeah, it's right there the in the middle, can I mail in my ballot and get it as long as it's postmarked in time? Well, if you pose the market the right time. Yeah.

00:19:15 Sorry, couldn't resist. So regular expressions. So I'm sure we've talked about regular expressions before, but they occasionally crop up in my work. I always forget them. I learned them as in I forget them, I have to learn them all over again. So this is going to be helpful. Yeah. So Amit Chaudhary, I think wrote a visual guide to regular expressions. And this came out recently and this is kind of a very nice gentle introduction to regular expressions. By building up I think it helps you build up a correct mental model of, of how they work by he utilizes a visual highlighting as if he kind of went through it with a highlighter pen and highlighted the different things that could be matched. So goes through a whole bunch of stuff starts with just a specific character. So like you tried it. If you have

00:20:00 stringing, you're matching like the character a, or something like that, what would it hit, and then moves on to whitespace, and digits and word characters. And a lot of these gentle introduction type things, can go through some of the basics and then sort of stop there. And what I really love about this is he talks about some of the more advanced things like pattern negations. So like the and why they're why they're weird, like, slash lowercase D is digits, slash uppercase, these everything that's not a digit. And some of these exclusions, talking about anchors like beginning at the end of the line, character sets with brackets, and then ranges with a dash within the ranges, the talking about repetition. And this is kind of something that threw me off when I first learned about him, using curly brackets, I was used to using star for zero or more items and plus for one or more items. Think, or maybe it's other way around. Yeah, that's right. That's right. And then but you can use a question mark for it only can be one, but it can be there doesn't have to be. And then the if it has to be a certain number of times, you can use curly brackets for saying it needs to be two of these or something like that. And then goes on and says okay, well, now you've learned all this stuff. How do you put it in place with Python and with Python user, the one of the ways is the re module for regular expressions. But it goes through a quick example of using bind all match and match group and search. So if you're a Python developer, and you have to deal with some regular expressions, I think there's definitely something to check out. Yeah, it's really nice. And it's very gentle introduction, so people can just go through and the coloring and stuff. Yeah. Because normally, a lot of these presentations of regular expressions, man, it's like, right, only, you know, you look at it like, Wow, that is a mess. And then, you know, then it's gone. Like you could write it. Go back and read it again. type of thing. Yeah, yeah. Yeah. So this is nice. This is good. So yeah, cool. Nice one. Yeah. I can't take credit for that one, though. Somebody else wrote, you probably shouldn't take credit for it. All right. Did you do you create it, I mean, like, you probably shouldn't know, I brought, just bring it up. So I don't really know the whole story with this next one. But it's, I entitled it taking credit. And this was based on a GitHub project. In a tweet by Tim nollet, nolet, I'm not entirely sure to say his name, hopefully one of those works. And he created this project, which is called the check it out. headless recorder, over a play re, I believe, let's see, it is now just called headless recorder. And so what it does is it allows it's a Chrome extension that allows you to create scripts that interact with either puppeteer or playwright that do just like web automation, a little bit like non programming, programmatic, selenium, or those types of things, right, fine. That's all cool. So there's a bunch of JavaScript that you write in there. That's pretty interesting. And the tweet says, I'll just read the tweet. And then we'll go from there says, oh, AWS cloud, I really do love you. But next time you forked my open source project and present it as your new service, please give the maintainers a short, nice, good job kids or something. I mean, it doesn't necessarily have to follow the AAPL version to license and stuff, but at least a little credit would be great. So there's also a linked announcement about this thing called AWS, cloudwatch, synthetics launches a recorder to generate user flow scripts for canaries, which is, you look at the syntax, in the examples, it does now, say credits based on headless recorder at the bottom, but I'm pretty certain that he didn't say that in the beginning. I mean, I don't have like a diff of the web page. But it would not be surprising. I wouldn't think he would put that up there. If at the bottom, it said that. So now it does. And well, this is not relevant to this project. Really, at all. It's more just a conversation about what do you do when big companies adopt your open source project? But, but don't give you credit? I think that's lame. Well, I think it should be even more than that. I mean, I think anybody that personally, if somebody else, if I had, like, let's say, I haven't got a couple small projects that I don't really do much with it, if somebody else took that and forked it and then like, did something big with it and started making a startup or some some money with it, fine, good for them. But if it's a big company like Amazon, Google, Microsoft, Apple, AWS sort of thing anytime I think credit is due if you're not the one that came up with it, if you just forked it ran with it. I think giving some and that's typical. I mean, we often give credit to say, Hey, I ran with it. It started here, but I did a whole bunch. That's fine. But a big company. I think they should both give credit and I think some cash should go to the original idea starter. So yeah, yeah, I hear you if it's not cash, which, you know, that might be a hard sell. How about as we maintain that

00:25:00 This project, we sort of forked from your stuff will push changes back to make yours better, or at least some sort of, Hey, we based this on your thing, but by doing so we're going to make that thing better. Because we've made a commitment to at least, you know, do a little bit of give back prs improvements, right.

00:25:19 And also, I don't know, like, I don't know, this guy. But at the AWS reinvent conference, when they announced this, if they said, Hey, this is based on the school project by Tim, you know, that would raise his profile. And I'm sure he would really appreciate it. Personally, a lot of my stuff's under MIT. And so people don't have to mention me do anything, say anything, whatever. A few things are not. But it's, yeah, a lot of it's just example code. And people are like, Well, can I use this example? In my commercial application? I'm like, Yes, I really don't care. If you like, recreate my random sample in your project. That's fine, right. I don't want anybody to have those feelings. But if I was building something useful, I at least one, you know, a shout out. I guess that's all he's asking for as well. Yeah. Anyway, and they did it. So that's good. They did come around and do it. Yeah, they did. I did. really sure. That was not the beginning to join him. But now it is. And so that's, that's quite good. And just given the amount of people who are in the Python space, who listen to podcasts, I do open source. I thought this story be interesting, even though it's technically JavaScript. Yeah. I bet you could even run that JavaScript on a Raspberry Pi, Brian.

00:26:21 Maybe. So I was just curious. What was the first computer you programmed on? So the first computer that I programmed on was one of those Apple two E's that was beige and had a green screen? I believe, okay, he started two years ago. Yeah, but that was like, in middle school, or now maybe, maybe even Elementary School, where it was just, you know, so that I went for class, the very first thing that I actually actually got to sort of sit down and program on my brother had a Commodore 64, but I didn't really use it for anything constructive, I would say 286 IBM 286. Okay, I programmed to eat Apple to eat it school. But it wasn't confusing enough to me that I didn't run with it. Right away. I kind of dropped programming after that. But But anyway, I bring this up because I am there's a new computer out. And it reminded me of this, about the those early computers, so are the Commodore 64 is kind of the same category. So Apple two, he was kind of like cool, was, yeah, it was a higher end. I had a Commodore 64 was a little bit lower than to he I guess, I would think. And then below that is the trs 80. From RadioShack. That's what I had. I had my But anyway, so the the Raspberry Pi 400 is out now or it's announced and it's going to be out by the holidays, apparently. It's really cool. It's like it kind of reminds me of these Apple two E's. Because it's the it's the computer in the keyboard. So the The keyboard is the computer. And you can even hook up two large monitors to it because it does. It supports two displays 4k video, it'll do two 4k monitors out of your keyboard. Yeah. And this one's got four gigabytes of RAM. You both do Wi Fi and land has a hard landline entry point which is good. For core 64 bit processor. It just looks fun. They're telling us there's a whole kit for like 100 bucks, you get like, you can start somebody up on a computer. I'm covering this because yeah, that's super nice. I was thinking, geez, do I want to get this from my kid? Or do I want to get it for me? Yeah, exactly. It comes with a beginner's guide and shows you how to get started and even includes getting people a little bit started on Python. And apparently so that's good. Yeah, it seems super neat. And the processor is pretty good. Actually four core four gigs of RAM. And it looks like just one of these little you know, Wi Fi USB, like over the little RF radio frequency dongle thing, keyboards that you would get. But that's the whole computer on the back of the keyboard. It's got the HDMI ports, it's got the other ports, the power everything. Yeah, so you got to get your own monitor Of course, but plug it in and get started. And there's videos on the on the Raspberry Pi site that are amazing watching this thing go it's it's power in two big monitors is just feels looks like it's a Zippy as a normal computer. So I think it'd be helpful for educational use and lots of uses. So it's pretty nice even for just to travel computer, a travel computer. Yeah, right. Imagine when remember when people have left the house. So imagine that were like that again. And then you could go places but if you were just going on a trip and you're like maybe I'll just like need a computer I want to plug in it'll bring you HDMI cord, plug it into the the TV at the hotel, plug it into some sort of monitor at like some office you're dropping in on you could just take that and have you know do presentations and stuff. Oh, it's cool. Yeah, cuz like it. That's true cuz HDMI output. It's a lot of TVs just take that now too. So yeah, just bring a little short HDMI cable with you. If you need to.

00:30:00 And then you're good, but I'm including a linking to a video from Limor fried from Adafruit in there she says that it reminds her of Apple two is well, nice. I'll check that out. Super cool. So that's our main items. That's quite an adventure. Brian, you got any other other things you want to throw out there real quick once quick thing I got reminded I ran across this a while ago and I somebody reminded me of it on Twitter recently is vim adventures. It's vim dash adventures.com. Remember the dash, but it's a kind of like this adventure game, like these old going through and dungeon sort of thing and picking up treasure and things like that. And you just is to help you practice your vim key bindings while playing an adventure game. So if you're having trouble getting learning vim, maybe try this. Yeah, Alex, quite cool. Actually, it's a neat little adventure game. Now, I just want to throw out something I got from Tyler Pettersen just a little bit ago. And this kind of comes back to what the language talk, round StackOverflow that I mentioned. And this is an update for the to be indexed ti o ve index for November 2020.

00:31:08 And my feeling and my theory as that things like

00:31:14 Stack Overflow, and whatnot, those places are often measuring, like the pulse of the industry right now. Whereas to be seems to have a little bit of a latency like how many legacy apps have this style? Are you working on this technology and whatnot, right? So it's a little bit of a

00:31:32 longer term moving average? Well, anyway, the headline is November headline, Python is unstoppable and surpasses Java, for the first time since the start of the ciob. Index nearly 20 years, Java and C don't make up the top two positions. Okay. 20 years. Wow. So Python is on top, but it's right below C is right below C and it's you know, it's been a long time coming. Right. So anyway, I think this is pretty neat. And Tyler, thanks for sending that along. People can check it out. Yeah. Cool. Ain't no joke. How about a joke joke could be great. All right. So we got a cartoon, but this one is super simple. And I think just the the words will do it. So this is from geek and poke, which has some fun things. And the title is you build it, you've run it. It's all about microservices. Okay. Okay. So there's a woman developer and a guy developer just kind of staring each other and it says, when we decide to create a new micro service, we just need 30 seconds to get a blank microservice running that Kubernetes cluster so amazing. And they kind of stare at each other for blankly for a minute. Then the woman says, and what you just need another week to come up for with a funny name for it. Two weeks, two weeks.

00:32:47 Yeah, yeah. Anyway, I thought people running funky named micro services would definitely appreciate that one. Name is the hardest thing and burger. That's right. It sure is. Alright, but not this podcast. That was a lot of fun. Thanks for being here. It was. Yeah. Thank you. You bet. Bye. Bye. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in VYT s and get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian knockin. This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

