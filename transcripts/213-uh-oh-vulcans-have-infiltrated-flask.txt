00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 213. Recorded December 23. Or Anthony Anthony Shaw here is this December 23. And 24th. You tell me 24th Christmas Eve? Yeah, of course. Yeah. In Australia. Awesome in the future. Yeah. 23rd for us, Brian, to me, gear in the US. 2020. And yeah, this episode is brought to you by us. So we'll talk more about that later. And I'm Mike Kennedy. And I am Brian. And Brian. We got a special guest here, friend of the show. And then Shaw. Welcome, Anthony. Hi, there. Great to be Oh, yeah, it's good to have you here. Thanks for taking time out of your holiday. Jenna is pleasure started last night. So the Christmas holiday has now started. I'm off for two weeks. Should be lovely. Yeah. Yeah. Yeah. should be very lovely. So you've got I, I think everyone on Twitter is jealous of all the pictures that you post when it's like cold and gray. And you're like, Oh, yeah, there's this beautiful sunny beach here in the summer in Australia that I happen to be suffering through.

00:01:04 Yeah, this is middle of summer here. And it's Yeah, beautiful weather and five minute walk to the beach. So yeah, not too bad. Not too bad. Cool. Well, welcome to the show. Happy to have you here. I want to kick us off with this project called Django ledger. And Django ledger is Have you guys heard of this? Huh? Yeah. So Django ledger, you've probably heard of QuickBooks or freshbooks, or some of this accounting software, right? That you you've got to work with, you know, it's allows you to do either it's a desktop app, or some kind of online thing where you create purchase orders, you keep track of who your customers are, when they owe you money, you accept payments, all that kind of stuff. Right? So Jenga ledger is something like that built in Django, which I think is really cool, because it could serve multiple purposes. One, you could take it and just run it for yourself or for your company, and then customize it. Or you could actually use it to extend something, you know, build something on top of it, or maybe even offer services in it right? If you're like stripe, maybe it makes sense to integrate some sort of plugin here, because then you get 3% of everything that company makes basically that with credit cards go right. So it's a bookkeeping and financial analysis engine for the Django framework, which pretty sweet. It's open source. And if you look through its features, it has a chart of accounts, basically, customers, financial statements, has multi tenancy support, has stuff for operations for investing has bills and invoices, and bank accounts, all that kind of stuff. And yeah, pretty awesome. Right? We multi tenancy. So is there like North Tennessee and South Tennessee or that that would be Dakota, I think Tennessee, there's only just one tenant now. Yeah. I think if you wanted to run this as like a platform as a service type of thing, and you wanted to offer up if you wanted to basically create your version of freshbooks. I feel like that's what it would be. If you're if you're an accountant, that service multiple clients, he probably did that way. I guess it's pretty cool. I thought I'd does a project called ledger, which is open source. But it's a it's not a I don't think it's a Python project. I think it's written in something completely different. And so yeah, this is really cool. And great. I think for businesses who maybe have someone who can set this up, I'm guessing it's not available as a service, you have to kind of I don't think so especially Yeah, yeah, if you look at it, it says this project is under active development, it's not quite ready for production. So this comes to us from magewell Sanda, that's his project. And I would love to see like, what the roadmap for stability is, and like when this when this is ready when it's coming out, but it's basically all Python in HTML, and just a tiny bit of TypeScript. You know, like a salt level. stuff that's coming in is like inventory management, cash flow taxes, you know, all the fun stuff. And Brian, even BDDs coming. I don't understand you ever driven to Oh, behavior Driven Development tests? Yeah. And so they're also actively looking for contributors, especially anyone with financial or accounting experience. So if you're looking for some project to contribute to, you know, that'd be great if you could contribute to this one. It's not super well known yet, but I thought I would shine a little bit of light on it, because it seems like it's a cool idea. Well, it's even got invoicing and stuff too. So like it. I think this is pretty neat. Yeah, yeah, absolutely. So what's up next for you, Brian, what do you got for us? Next, Oh, um, so another web sort of thing. But this grant across flask meld so I smell I've never heard of this. So it's like,

00:04:39 it's like a Vulcan thing from Star Trek. Now, the idea is like melding The, the front end and the back end. And the it's a pretty cool, there's a, you should click on the example article. But yeah, that that first link right there. All right here, okay. Yeah. There's a it's basically it's fairly easy.

00:05:00 Simple interactive stuff where where that flat, you know, JavaScript gives you, but it's, um, it's super fast. And it just like, you don't have to write the JavaScript code. So the the article in this article talks about how this is from Michael Abraham thinks abrahamsson.

00:05:20 But he, he wanted to avoid writing JavaScript. So he wrote a whole bunch of JavaScript or

00:05:27 to make this plugin, so it's a flask plug his first flask extension, but you, you can modify the the flask templates to insert these elements. And then the elements just show up as like objects in, in Python. And you can program them like that. So all these all these elements are all implemented in Python. Oh, cool. And that there's a little video on there. But there's a demo as well. So there's a there's a working example. And and then the the code for the examples up on on GitHub as well. So you can play with it. One of the one of the fun parts, in one of his working examples is a drop down for like a search. So if you start like predictive search sort of thing, so you just start typing the example shows states, so if you start typing states, it'll like start filling in this list of states that you might mean. And it's like, super fast and nice. Yeah, apparently, it says right here, that it utilizes WebSockets and more freedom to create server side rendered HTML and swap out DOM elements without refreshing the page. That's the killer, actually. Yeah. And it um, it he's nice enough. I think this is cool. He's saying that he basically stole all the ideas from other people, and put them together for this or standing on the shoulders of giants, so to speak. And there's a there's a similar project called Django unicorn for Django, people. I played with that a little bit. The there's a, there's the Django unicorn is the documentation site. It's amazing. It's got a bunch of examples. But it seemed the I don't know if it's the the server that it's hosted on or what, but the Django example seemed a little bit slower. It seemed like there was this round trip thing going on, whereas the flask example, flask meld was Zippy enough that that would be completely sufficient for a lot of the applications. I'm, I'm thinking of throwing in some interactive stuff. So yeah, Steve had this, this is really neat. This idea of components is pretty cool here. Anthony, what do you think? Yeah, it's interesting, I didn't really use flask, but in the Django world, quite a lot of components and stuff that I've pulled in and plugins to do interactive elements. And, and each one is implemented completely differently, which is really frustrating. Whether it's like a search box, or a type of head or like a multi select fear, or just something that I need, which is not available in the standard forms model. And each one tends to have its own JavaScript and its own collection of books.

00:07:56 And yeah, it is quite frustrating to be honest, because you kind of think, oh, I don't need to write this from scratch in JavaScript, I'll use an extension that already exists out there. And then you kind of get stuck in does it work in Django, three, to know what state is the JavaScript in, and then you read through the source code, and you stumble across security issues, and it's like, okay, I wasn't there. You know, there's, there's a line between, it's easy to write it myself, and you end up I end up just maintaining folks of all these extensions, and then trying to get pull requests back into them to kind of fix things up. But, um, yeah, it's interesting to see it gets a different model for doing it, which, which, you know, could be applied to Django. So this thing brings me back to like the year 2001, web with ASP. NET webforms, which are like such a weird way to build web apps, they kind of like tried to mirror desktop apps, but you could put a little Ajax tag onto like a section and just that part of the page would just become like, would automatically refresh and interact differently. This gives me like, kind of that feel, but like, not old school web, but more modern will have which is nice. Yeah, I mean, like I was thinking of it in now, a lot of people that are comfortable with like jumping into some JavaScript, this seems silly, I'm sure. But for instance, like me, I never touched JavaScript. So if I've got a little, I've got like a little flask app that pulls up, like test result data. And it'd be great to just have a be able to get a little form there that says, hey, here's, here's the version I want to see the results for, and be able to pull that up. And it doesn't have to be pretty, but this way I could implement it without having to go in and learn JavaScript. So like, yeah, yeah. And I think this is super neat. I'm with you, Anthony, on the trade off of grabbing some of these cool plugins, flask, Django, whatever. And okay, this is just now adding functionality, but then you've kind of got to understand its assumptions. When does it work? Like why does it not quite work for what you're doing? It's always a trade off. I usually go for the vanilla version of the web and just build it myself until it's like really clear that there's a big benefit.

00:10:00 Yeah, and they you bring up an interesting point with the security concerns, especially anytime you've got dealing with input fields and stuff, you've got to be careful with that. Yeah, because they normally run queries in the database. So you've got to kind of audit these things to make sure that they're not using raw queries, and then using templates and stuff like them, right? They better be parameterised queries, and not little Bobby table type queries. Exactly. Yeah. All right. wrong one, this one. So what about what's next? Maybe they're using even bitwise operators in their thing? Possibly. Yeah. So my next link is bitwise. operators in Python, by bartosh, is actually ski.

00:10:45 And this one's really cool. Actually, I think if you've ever used bitwise operators, or seen them in the Python language, so this is where you'd use the pipe symbol to less than less than, which kind of looks like two arrows or right. Right, right, which is greater than greater than, and there's a x or is, is there another way, say x or I just use x? Oh, is what I say as well. Because now,

00:11:14 which is there, the hat sign? I can't what that person was called the tiller is for not.

00:11:20 So yeah, that is basically used for specific types in Python. And which support is bitwise operators. I like this article, because they're rarely used in Python, because you typically use types where you'd use a method to to do a lot of these things. And on most of the time, you wouldn't necessarily need to work with data, which is binary, so you wouldn't necessarily need to do these things. But if you are working with binary data, that's super useful.

00:11:50 And it takes a bit of time to get your head around. So I've got a couple of examples. But yeah, this I love this tutorial, because actually, it doesn't assume we know anything about this topic, explains what the winery system is. And it uses these icons of hands like it uses emojis, kind of like a mini sign language to explain the the kind of the bites and stuff like that, which is really cool. And see, I really like it for that reason, it's really illustrative

00:12:20 and kind of takes you through a few concepts, and then how you can use the special operators for some of the built in types, Python integers, bit strings.

00:12:32 You can also use them for byte arrays, which is really helpful. And then it goes into things like bit masks and stuff like that. So if you ever working with any lower level data, this is super helpful to understand. And also a little trick that I discovered a while ago was

00:12:50 if you've ever used the E num

00:12:54 builtins. So e num is a is a standard library. And if you want to describe an E num, you basically create a class and inherit from an enum type, which is an enum package.

00:13:07 And you can do a whole bunch of things and just represent things as enums in Python, instead of other weird ways of doing it.

00:13:15 Introduced in Python 3.7, I think it was, and but there's a little known feature in

00:13:23 in the enums, which is there's an int flag and a flag type. Int flag is an enum, which you can represent as a flag, which means you can combine multiple of them. So for example,

00:13:40 if you had a color income and you had red, blue, and green, you could represent y as being red, blue, and green. And by combining the colors together, so nice. Wow, that's cool.

00:13:53 Yeah, you probably wouldn't make a paint mixer in Python. But there's lots of things. flags, for example, like if you're representing system flags,

00:14:02 or compiler flags, or any other kind of flags. This is really useful because it actually implements all the binary operators.

00:14:10 So yeah, flag and int flags are super helpful types, which are built into the standard library. So if Yeah, if you ever find yourself doing something like this, or using package, which is implemented its own weird version of this feature, which is built in and you can upgrade it to this new syntax, and then you don't say, nice, tell me what is this auto do? Oh, so in enums,

00:14:36 if you're gonna say, you know, you need to make a representation of the enum name. And if it's an int enum, or in FLAC, you'd say, you know, 12345, like so if I save it to a file, or Pickler or something, then it's this is the number that it represents. So I can convert, so if you converted the number one to your income, it would know that red was one

00:15:00 So you know, you could basically use it for storage or something. It's also really helpful. Like if you're reading from XML files or JSON files or something, and there's like, there's a field which is stored as an integer, but you know, that actually represents something a bit more logical, like enumeration. And then you can you can do it that way. However, for flags, then because they support bitwise, operators, they should follow the, the binary sequence, so 1248 1632 64, etc. And once you get past 1024, most people start to forget.

00:15:38 So instead of working that all out in your head, you can just use auto, which is a function built into the enum, and it will basically just work out what that value should be for you. So you don't have to work it out in your head. It'll let you like reorder stuff and not have to go Oh, now I want this one to go 123. And or I want to add another one, but in the middle and accidentally mess that up or whatever. Yeah, I think I will use those anyway, just to just indicate that the actual number isn't important. It's just that they're there. Yeah, exactly. Exactly. I think. If you don't assign it, then a enums. If you don't assign it, then it works. But with flags, you need to assign it to something. Yeah, yeah. Just for people listening, who don't necessarily see the code, the show notes that I did you create a new class, and you say, like, category equals just lowercase auto, open, close. That's the way that you sort of invoke this behavior. Also, a couple questions from the listeners, who are in the livestream. Anthony Lister says, useful for micro Python or hardware, maybe what do you think? Yeah, absolutely. If you I mean, if you're working with, like, embedded systems or anything, I mean, Brian, you're the expert.

00:16:42 Yeah, you have to work with binary a lot. So yeah, this is super helpful. Because you can represent stuff, which is different states in the system. Or if you want to read read inputs and stuff from multiple channels, you're going to need to use bitwise operators. So both the bitwise operators are really helpful, as well as the flags enums. And Brandon Raynor says, bitwise always confuses me, when I see it, I tend to roll my eyes back and ask why I'm sure this reason, but Well, I mean, one of the things that comes to mind for me is, you know, you're thinking about storing stuff in memory, you know, if I wanted to store, say, a number, or something like that, or, you know, you put that into a Python number, that's like 28 bytes. But if you created an array of bytes, and you know, the size of them are going to be, you know, packed into little bits there, you know, like one to 10 or something a whole bunch, you could be way more efficient by, you know, creating little smaller containers, and then bitwise, oaring them together and whatnot. Yeah, like big fields, for instance, are really cool thing. But even just just straight numbers with bitwise operators are, are important for hardware, because you're like a lot of times who just have register access to something or you have memory, memory map registers. And you've, you know, just read those out. And there, there may be a whole bunch of data. So each bit might represent completely wildly different things. So you can't really just check for equality, you have to check is this bit on or off? Or I need to set this bit and leave all the rest alone? Things like that. Yeah, absolutely. Absolutely. All right. Before we get to our next item, let me just let you know, this episode is brought to you by us things that Brian and I are doing. And so one of the things we just launched over at talk about on training is our brand new fast API course, which is a super cool new API framework, I think brings together a lot of things that we've been proponents of, you know, things like pedantic type hints, async, and await all those all come together. Really nice over there. So if you want to learn that, check that out. Brian has some book on pi test. So yeah, you can check that as well. links in the show notes. The next thing I want to talk about, though, is why you should use an ORM. here. There we go. So Anthony, Brian, what do you guys think raw SQL ORM? What are your thoughts here? Well, I've been using like document databases lately, and I don't really need an origin. So I'm with you. So over there, maybe the R is a D, at least if it's a document database is the object document mapper, maybe but yeah, I, I find being able to work with classes, like the way I think of it in Python to be, that's how I want my data to be and just something else can figure out how the database has to break that apart into relationships and stuff. super neat, you know, like SQL alchemy, go and say create, like, if I had a user and the user had orders, like they might have an orders list on the user class, to create a new order, you can just go to the user dot orders dot append the new thing and hit save, changes, and then boom, you know, it like figures out that has to be inserted, and the relationship has to be said and all that. And then what do you think I'll use the Jenga or I'm quite a lot and really like it, learning all the edge cases where it creates queries, which are not super efficient, but so I guess there's pros and cons like if you were to write raw SQL, you know, sometimes if you know SQL really well then you can write more efficient queries. However, there are typically ways around

00:20:00 The n plus one problem in jenko is the biggest problem for sure. You want to describe them as plus one problem and take a shot at that. Oh, yeah. So if you sort of have a foreign key, and you reference an entity, which might be a many to many relationship, and then you reference a property, have it in the query, and not actually not in the query, but actually in the view, you you. You mentioned something or you look up a field, which is part of a mapping to another table that kind of like I described, like if you gave a user to the view, and the view wanted to know about its orders, yeah. So more of you gave a list of users and it wanted to know about the orders for each of them, right? That's the real bad case. Yeah. So you had it for like, you know, which group people are in or like, which team they're in or something. And now it is just, it's a team ID and then you actually want to show it on the table was the team name. So what ends up happening is that for every row in the table, it looks it does another query to look up the team name, even though they're the same across the board. Whereas if you're writing that in SQL, I'd hope you'd see that as a as an outer join. But

00:21:07 yeah, so an inner sorry, not an outer join. And so yeah, ohms are really useful in that sort of thing. But they do have edge cases for endless ones. Pretty sure he covered this one before. But there is an awesome tool called n plus one, which you can run in your test suite. So when you do all your integration tests with Django, it fails the test if it detects an N plus one query, which I use quite extensively.

00:21:32 I think, Adam, oh, I had not heard of this. I mean, this is not such a problem for me, because I work like Brian and document databases. But to the extent that I work with like, sequel alchemy and stuff like this is really this is the one you're talking about the one that Yeah, he led us. Oh, in E. Yeah, that one? Yeah. So I did it, I only add it in the test suite. So you don't you don't really need to put this into production. So you just press Anthony. Yeah, well, that's probably a starting point.

00:22:04 So or if you have your development environment, you can just turn it on, but it would,

00:22:10 yeah, basically, it would print a warning and stuff like that. However, there is a config option that says that it can raise an exception if it detects one, which is awesome, because when you run all your tests, it will fire off

00:22:24 and fail the test. If it detects this type of query. And the workaround in Django is actually really simple. You just add another function to the to the chain, the query command, basically, which indicates that I'm going to use this field in this other table. So it kind of pre looks up, right? Do the join or sub query load or whatever it needs to do? Yeah, yeah.

00:22:46 And the other thing about RMS that I really like is the is the migration ability, like, it's fine. When you initially design a system, you could, Yeah, fine, you can write your own custom SQL queries and stuff. But you know, within a week or two, you've added like, five extra fields. And actually, that one field you added now needs to be a different type, or, you know, databases are not static things like database structures change all the time, in a real application, so that becomes an absolute nightmare if you've handcrafted all your SQL, especially if you have tests.

00:23:20 So yeah, I mean, for different database engines, there's different ways to do I

00:23:26 mean, SQL Server like has DAX, so you can do deck packs, and DAC pack migrations, but most of the other database systems don't have that. Whereas if you're using the RM, then, you know, Django and flask and stuff would create the migration for you.

00:23:42 And you're kind of pretty sure that you can add fields as an as you wish, without necessarily breaking things, or you can add types. And you can describe what to do with the old ones. So I think it saves so much time in just working with a live system where you actually constantly making modifications to the to the table structures and stuff, and maybe have different developers at different stages, or you want to go back in the brand new assembly to go back here, and then work on this version of the app. At this stage, you want to be able to go to just run the migrations and get to the right structure. It's, I find it to be super, super helpful. I mean, there are times where you know, you want to get 100,000 Records back from the database in Orem doesn't make sense. But to me, I feel like you know, you should 89% of the time, use an ORM. And then there's that little edge case where something slightly different maybe needs to happen. But you shouldn't start there, because there's that 10% or 5% chance Yeah, that most our rooms give you the ability to write a rule query. Yeah. And, and yeah, you should also check those rule queries for SQL injection. And I do have a tool for that.

00:24:49 If you if you want to, you can run it through the Python security thing that I've built, which will scan your code and spot where you've used the raw SQL functions in the

00:25:00 flasco are m in the Django ORM. And we'll see if there's anything in them, which is pretty lik likely to leave you subject to SQL injection. Yeah. Is that built in to your PI charm security plugin? Yes. Yeah, maybe? Yeah, I was just mentioned this come like this conversation, although not exactly. We didn't pull out much out of it. But comes from an article I wanted to highlight called, why should I? Why should you use an ORM object relational mapper written by Kareem, I'll leave that in the show notes. There's a bunch of details that walks you through it. So I wanted to cover cover this. So people, if they're having this debate on their team, or they're not sure which way to go, or they're, they're new, and they're like, What are all these funky acronyms about? You know, they can check that out. There's, there's the obligatory little Bobby tables joke in there, I gotta gotta go with that. This is what your, your plugin is supposed to detect? Is this cool? XKCD? Cool. You're not on the receiving end. Um, one of the things I'd like to bring up around or EMS is that, like, a lot of the ORM tutorials, assume that you know, SQL. And I'd like to see more tutorials on how to use an ORM. And how to use it correctly without any SQL examples. Yeah, yeah. You know, classes in Python. Yeah. Here's your way. You don't have to know SQL. Yeah, I mean, I thought that was the point is that you can think in objects that have been sequels. So yeah, why do I gotta learn SQL in order to understand the tool.

00:26:25 Another thing that you can turn on, that's helpful for the n plus one problem, at least with SQL alchemy, you can go to the engine when you create it, and you can say, Echo, Echo equals true. And it'll echo every single underlying SQL command sent to the database, you can do something SQL alchemy, and I'll say, here's what the actual thing is. And if you've written your code well, and you've done the right join stuff, you'll just see like a couple of entries for each page or interaction you're having, you've done it wrong, you'll see your your output just screen by full of these things I got there's one of these problems. So that's, that's a easy way as well. Is there like a test way to like, like, for instance, to check to see how many first certain test sequence how many database interactions you've done? The other is yet there isn't there is in Django, you can kind of pack a bit of middleware, which kind of catches SQL queries and stuff like that. And it's not built in, but you can write it, I think I've got code sample somewhere that does that. Just say how many queries this page executed? Obviously, it depends on that's why it's important to see the database first with test data. Because, you know, if you just run it on an empty database, then typically, or you've got like one row or something, then it's going to be like, Yes, fine. But then when you deploy it to production, like it's actually running 1000s of queries, every pay. Yeah. Do you end up with what you got in the United States? When we tried to roll out the the healthcare.gov? And the entire system went down? And yeah, like, like the Yeah, whatever. They knew it was gonna be the entire country using it, and they didn't load test it. I Exactly. Oh, one more thing, comment from a tape. It's also useful when using Django to add the Django debug toolbar or Django silk to be aware of what queries are going on. And also, I would add for pyramid, there's a pyramid debug toolbar, and you can actually see the underlying queries and how many of them there are. And the timing. It's really nice those things. All right. All right. Well, let's move on to the next one. Sticking with the database stuff, Brian, definitely sticking with databases, and SQL. So this one's from Simon Wilson. And he's got a tool called our library set seek Well, yeah, sure data set, but SQL lite utils. This is a, it's developed as part of datas, the dataset project, but it's, it's usable by anybody that uses SQL lite, SQL Lite. And it's a couple things. It's a command line utility, which a lot of databases do have a command line way to enter to query the database. But I don't know if sequel lite does. But this is a pretty cool command line, you can interrogate, analyze tables, and dump things and do all sorts of stuff. In even search, it's pretty useful in pretty simple examples. The one of the things I really like, though, is the the API that he has. So there's a Python API to, I mean, you can use a like SQL alchemy, for instance, to interact with SQL Lite. But another way to do it is to use this sequel utils as a as an API for for sequel Lite. And it's a pretty clean, simple interaction. And I think that's something I'm I want to try because it looks like a I do need to get back into some SQL did SQL database work? And I think this would help a lot. Yeah, this comes from the data set found is one of the foundational tools from data set, this project that he's working on, which is really interesting. It's like empowering data driven

00:30:00 Then journalism and data exploration across all these different data sources by converting them all down to SQL lite databases. And then once they're there, you can explore them interesting way. So there's like Witter to SQL lite, various other things to SQL lite, Gmail to SQL Lite. And then you can like explore all these different things like geo JSON, the sequel light, what else we got here, there's just tons and tons of these things that plug in other stuff, and then gets into this common format. And then he also has this cool tool called dog sheep, which builds on top of those databases that creates like a personal search engine for your life. So you could like plug in Twitter, you can plug in your AI photos library, you could plug in your Gmail, and then there's a search engine that just says search that. So it's like that one of the foundational building blocks of like, how do I get everything from its original source into SQL lite? Pretty cool. Yeah. Yeah. So and yeah, and anybody think I'm actually really interested about the next link on his blog, which says, I commissioned an oil painting of Barbra Streisand clones, dogs.

00:31:05 It's really nice. Actually, I kind of like it.

00:31:09 For gazing the tombstone of the dog that they are, yeah, okay. Interesting. Yeah, I'm not sure what it has to do a sequel light. But now this is pretty cool, I think. Yeah, more tools for journalists and stuff as I start to work with data. And data becomes more readily available, or at least there's more of it. So yeah. And people necessarily, don't necessarily have the technical skills to work with massive data sets and stuff like that. So it'd be really interesting to use some some of these tools, for sure. Simon Wilson was one of the co founders of Django. I had him on talk Python recently, but it's not published yet. And we talked about data set and dog sheep. And there's there's just a lot of interesting stuff in one of the stories that he tells so people can listen to episode, but he has a dog, which may be this commissioned thing. He's like, really got this dog that has a Twitter, the dog has his own Twitter account. So for example, some of the interesting stuff that he did was his dog in the Twitter account will tweet when it goes to the veterinarian, like how much it weighs and stuff, and it will tweet pictures when it's on a walk. And he was able to do things like we create a graph over time of his dog's weight by just doing a SQL query against the dog's Twitter account that got pulled in, like all sorts of weird connections or like pulling data together that you just couldn't imagine. So yeah, anyway, really, really neat stuff there.

00:32:29 Okay, yeah. All right. People check that out. And then you want to wrap it up with a talk. That is very work from home ish. conferences. Very work from home. I should talk from there, maybe? Yeah, yeah. So my next one is from the pyjamas conference,

00:32:48 which happened a couple of weeks ago. And, and this is, yeah, lots of online conferences happening at the moment, which I kind of sign up for and look at the, you know, the talk list, and things are great. That'd be really interesting. And then never actually get around to watching any.

00:33:06 Yeah, I'm just kind of struggling with this online conferencing thing. I The idea is really cool. The concept is cool. But the practicalities of it. Yeah. Especially like it. I don't know if it's different in our house. But the conference ran over a weekend. And I just wanted, you know, maybe an hour or so to watch some of the talks and things but just sitting down on the couch and turning the TV on putting on YouTube and then sitting and watching talks. And it was like the kids and making so much noise. My wife's like, why are you watching TV? There's loads of stuff to do. And I'm like, Nope, I'm this isn't. And then his work actually is the work I always share. It is. Yeah, show the CLI work. Yeah.

00:33:43 So yeah, pajamas. There's pajamas up there. This doesn't make it this doesn't feel like work. Yeah, and I definitely wasn't in my pajamas not to get dressed because it was 10 in the morning.

00:33:52 So yeah, I don't know there's I know I kind of talked about this in a couple of other people said they're having similar challenges with these online conferences, just like where do you fit them in.

00:34:03 And if you actually go to a conference is like you've got you've got an excuse that this is more this is like my time is now set out. Whereas if I if I was to say I'm going away for a few days to a conference, that's fine, but if I try to attend that conference at home, it's like that's not Yeah, yeah, that's convenient. myself in my room and watch TV for two days. I'll be back. Yeah, exactly. Is that the same story? Yes, I'm gonna work as he suggested that we have like a work hotel sort of thing where people can attend virtual conferences.

00:34:35 Where you know, especially if you're on if they're late at night, or they're in weird time zones and stuff. So even if it's just in your local city, you can go and stick

00:34:43 to you can at least dedicate the time. Anyway, to see pyjamas which I really wanted to attend. I managed to get through half a talk.

00:34:53 And then I watched the other half like a week later, and so that was not very successful. However,

00:35:00 Little talk was brilliant. So I wanted to share a link, it was called what the struct

00:35:05 by Zachary Anglin. And it's talking about the struct library, which is built into the standard library. I didn't really realize there was a struct library, right? Like there is an array library that says this will hold floats contiguously. Same thing for structs. Right? Yeah, exactly. I think, you know, Brian was talking about these classes before we went live at sea. But um, you know, these classes are really cool. Like, if you wanted to represent interesting structures and stuff like that. And our M's are really important for this sort of thing. But if you're working with binary data, and reading the binary data, and then converting into native Python types, often, you know, you do C for that sort of thing. And in C, you just declare a struct and just say there's these fields. And you can just read and write that into binary structures, which is kind of built in. But sometimes you need to do that in Python, if you're working with, actually, I've got some examples. But so this explains what the structure library is. And it also has this macro language for describing what the underlying type is. And then you can kind of like, pack and unpack it, basically. So you can say, here's my, here's my class, or whatever. And here's the fields. And the underlying binary structure is a, you know, a float, 32 bit integer or a binary, Boolean, or, you know, it might be a ASCII string or something. So yeah, there's basically all these like little characters, for packing and unpacking data.

00:36:35 So yeah, it's really helpful if you're getting into this topic of working with binary data structures, or something that you've wanted to do. And I recommend, if you're on a Mac, using a tool called sign, analyze it, or spice analysis, and which is basically a GUI for working with binary data, and it has a database of grammars. And so you can basically like open a compiled executable, or, you know, something like that. And it would be like, Oh, I know what this format is. And it would then just represent it in actually something more understandable. And you can edit fields and hack around with stuff. And it's great if you're doing capture the flags. Or if you're doing some hacking for good.

00:37:24 It's also really cool if you want to edit files, which are not in human readable format, if they're in a binary format. And in the database, they've got a whole bunch of examples, including a lot of safe game format. So this is actually how I got into this topic, originally was when I was a lot younger playing games and stuff. And I'm like, What is this file, and then, you know, trying to echo it on the shell, and it would be like, Oh, that's all cardboard, and then realizing it's all in binary. And then, you know, trying to figure out if you open it up in a hex editor or something, but it is and then if I change this field, then I can give myself more gold, or I can make my character invincible or

00:38:04 So basically, like this game.

00:38:07 It'd be so much easier if I had 100,000 hit points or whatever. So let's increment that number. Yeah, exactly. I think modern games are a bit they kind of fit protections around the safe game, because there's a lot more online aspects, but definitely older games, you can you can hack the Save games, and most of them, give yourself whatever it is that you feel like. So yeah, understanding binary structures is really helpful on the struct. And you can even automate it using the struct much.

00:38:34 Yeah, nice. Yeah. There's also some good comparisons between, like the values of stocks, and then tuples, and name tuples, and data classes and pedantic so there's sort of a spectrum that gets covered there as well. Yeah, interesting goes in line. Well, with the bitman manipulation topic you're talking about, like, for instance,

00:38:55 very structured structs. are, are very important for like message systems, like communication systems with very defined fields within each. Within the, you know, we've got 128 bit sequence or 1000 bits in there. Each bit is specifically assigned to different things. And those are, yeah, you definitely don't want to just like hope that it's right. You have to put it exactly where you need it. Yeah, exactly. Like little network packet headers and things like that. No, yeah. Yeah, I'm using this at the moment because I'm writing a disassembler. So it's quite helpful.

00:39:35 Yeah, awesome. Yeah. That you're you're definitely doing some low level stuff these days. So I guess that's our main items for today. Brian, you got some, some extras you want to share? Yeah, we poked by the Python Software Foundation that we should probably plan some events. Because we're we're we've got a meetup, the Python pd x West meetup, but like, I can't access the building.

00:40:00 We normally held it in and nobody would come anyway. Right? So we're doing virtual. So we've got January 14, we're going to do, we're going to start seeing what it's like to do a virtual thing. And I thought, you know, normally when we did the meetups before it was in the evening. I don't really want to hang out in the in the evening doing this, but a lunchtime it'd be fine. So I thought, like a lunch Lunch and Learn thing. So we're gonna try that soon. It's Yeah, it's perfect. Being virtual. You could just do it during lunch, right? You don't have to go. Okay, well, they drive out, you know, fight the traffic or whatever. Right? Yeah. And I don't have to convince my boss to buy a bunch of pizzas.

00:40:36 Yeah, exactly. Exactly. All right, I got a couple of extras as well. I ended up doing fast API webcast with the folks over at JetBrains. So people can check that out. They want to go learn more about that. And then also, like, close my, our notes here, but I'll get them back. Brian, you go next. I gotta pull this up somewhere else. I just went. So let's say you've got an MD yet. Anthony. What are you up to these days? Well, actually, you got to share with folks. Yeah, so I'm going to be starting at Microsoft in February. This is big news for me. Congratulations. That's awesome. Yeah, yeah, I'm really excited about it. See, I'm gonna be the Python Developer Advocate working with Nino's aka Renko. So Nina's to the current Python developer advocate, and I'm gonna be helping out. And so yeah, really looking forward to doing and working with a bunch of smart people over at Microsoft. So yeah, all things Python. And do you do any particular projects you're working on? So I'm not going to be I'm not going to be I'm not on the engineering team.

00:41:38 And I'm definitely not working on pitching this has got nothing to do with

00:41:44 it contrary to the rumor, I guess. Hire dork I'm pitching. That's what I heard. Come on. Yeah. Yeah, definitely not. So yeah, this is kind of side by side thing. But yeah, it's kind of definitely the Azure platform and like using Python and Python working with Azure, and on Azure

00:42:05 VS code and the Python extension, and just the tooling in around that, as well as the Python ecosystem with Microsoft products in general, or Microsoft technologies, and Python in general. So, all things Python, and they're really looking forward to starting on the first fab. And yeah, have a long list of things that I want to want to get stuck into. Yeah, I'm guessing that's remote, not just now but permanently, right. Yes. Yep. Yeah, that's super. That's super exciting. But that doesn't mean, Brian that he'll be somewhat in our neighborhood more often. I suspect you'll come up to Seattle and Redmond sometimes when that happens again, when the world is let loose. Yeah, I expect so when we're not even allowed to leave the country at the moment. Yeah, I will. See you in the northwest Switzerland. Yeah. When when? Maybe 2022. Yeah, what 2030 will definitely see you 2030 no problem. Also from from the YouTube stream piling says Congrats. Anthony on the new job. I'm spawning. Yeah, so we should have like a like a webpage with like a graphic to show like how many like well known Python people there are in the like, maybe a Death Star Microsoft sucking all the Python people into Microsoft without

00:43:24 the feather pretty evenly distributed?

00:43:28 Yeah. That's good. All right. Well, I feel like it might be time to wrap this up with a joke, I think. Sure. Yeah. So this one came to us over Twitter from Lars. And there was apparently a question someone named Kate Maddox asks, What's the best programming language for coding your own therapist? You know, like, we're all stuck at home people are depressed, have social anxiety or just anxiety about the world in general? And Wes comes along with a an appropriate answer. What do you guys think here? Python, of course, is the language so you can call it there up? i? e. agrra.pi. Yeah.

00:44:06 I think it's pretty much on par for our standard joke, though.

00:44:12 Yeah. might be better than average, actually. Yeah, it could be better than I need a lot of drum kit in the background. Brian, you can. Yeah.

00:44:21 Some symbols will set you up with business expense. I'll totally get a drum kit.

00:44:27 Fantastic. All right. Well, Brian, thanks is always an Anthony. Thanks for joining us the gift it was a pleasure. Yeah, you bet everyone listening. See you next time. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes that Python bytes as mb yts and get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

