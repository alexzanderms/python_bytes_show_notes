00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 216. Recorded January 13 2021. I'm Michael Kennedy. I'm Brian. And Brian, we have a special guest. Yousef, welcome. Hi, great to have you here. You want to just take a quick moment and tell folks about yourself? Maybe about your podcast real quick. Yeah, sure.

00:00:23 Thanks for even being able to participate in this podcast. So my name is Joseph. And I might not be well known as you guys are for sure. I'm a mechanical engineer from Germany, and based in Germany as well. And I'm working for IT company called sim scale, while providing cloud based simulation technology. on the site. I'm hosting a podcast called engineer mind, and I'm working on bunch of other stuff. For example, my thesis, which will extensively cover, let's see him this podcast.

00:00:50 Yeah, I use a couple of cool libraries and stuff over there, which will feature here All right. Well, the very first item, Brian sock, let's talk about maybe doing what should I do PIP search a

00:01:04 lot? Yeah, well, um, I freaked I kind of forgot PIP search was the thing because when I'm looking for ipi stuff and go to IP i'd Oregon

00:01:12 just yet. So do I. That's Yeah, exactly. So it's really fast there.

00:01:16 Yeah, there's a there's, there's a feature called Pip, you can do a pip search, which the documentation says it's supposed to search for pi, ipi packages whose name or summary contains whatever query. So I can say, Pip search pi test, for instance, and it should show me Well, if pi test is a package on on pi pi, but right now, if you do that, it comes back with a big trace back and it says, faults, one minus three to 500, runtime error. x the PI's XML anyway, the API is broken. So this is on purpose. The what happened is actually I don't know really what's happened, but there's the it's with the services getting swamped, the search endpoint is getting hit extremely hard.

00:02:07 So I see some message or some tweet that was to the effect of is somebody out there running an insane number of searches against this endpoint? They Please don't.

00:02:17 Yeah, I don't know what's going on. But there's some guesses. Maybe it's a rogue, continuous integration server, or something's some something weirds going on. But in the meantime, there, right now, there's the there's a, we're going to link to a Python infrastructure status page, which has an update on this. So if anybody wants to follow, you can check that out. It says that the search endpoint remains disabled due to ongoing request volume. And I think this really started becoming a problem mid December. And so I'm not sure what happened, then the and then there's an issue a related issue on the on GitHub, for Pip. So there's a an issue open saying remove the PIP search command. So I think the the end result is and even the error message says the the search endpoint will be deprecated in the near future. So I think that this way to do Pip, Pip search is just going to go away.

00:03:18 So and that's actually a little surprising, because usually, a lot of these things are so backwards compatible.

00:03:24 Yeah. And there's there's quite a discussion on the the the issue thread, but there's the gist of it is is the the current architecture is not was never designed to handle the volume it's getting right now. So there's, there's a, there's a comment at the end of the thread that says if you've got an idea for how to do this algorithm better, or a way to do it scaled, go ahead and discuss it, but there's a there's a link to we're not going to put that link in the show notes. But in the the ipi thread or the GitHub thread, there's a there's a link to if you want to comment on that. But basically, I'm we're bringing this up, you may have figured out it might be a fluke or whatever. But it's it's really going on and in a plea to look at your continuous integration scripts. And if you're doing a pip search in there, take those out, they can work anyway, it's got to be some kind of bot some automatic thing like this, because it's already given the error message like people would stop. You know, if it wasn't you somebody's trying, like constantly trying to scrape all of the PI data out.

00:04:29 I don't know,

00:04:30 why do a search. That's just weird.

00:04:33 Yeah, exactly. I don't know what's going on here. But I guess don't do it. Dr. hurts when I do this, stop doing that. So the next one I want to talk about is q Python. Not Qt Python or cute or anything like that. But q Python, which is a way to do Python on Android. So we've talked about a couple of interesting applications. We've talked about carnet or Carnegie. I think it's French pronunciation. I've been Told. And that's a really cool way to do like Jupiter on iPad. So local, all these are local, not obviously not just running in the browser. There's pythonista, which is really interesting. And cute. Python is also an interesting one for a couple reasons, because you get an SDK and a repple for your Android device, which is pretty interesting. But what the reason I'm covering it, I think it's interesting. Somebody I think somebody sent this overnight, I ran across this myself anyway, is it allows you just to integrate with the underlying Android API's and features for automation. Cool, right. So you can do things like, check for, check the system, you can send out toast notifications, you can interact with applications, you can mess with a clipboard, you can do barcode scanning and speech recognition, send emails, like all those kinds of things around even, you know, screen brightness, or checking your battery or whatever. So if you want to get access, and automate your Android things, Python, well, here's a cool little app to do it. Okay.

00:06:06 Wait, wait a second. So I'm not an Android user that much. I've got like one Android tablet, but I didn't know it can make toast.

00:06:13 Yeah, well, it really prefers sourdough, but it it will go even as far as rye, if you have to

00:06:21 know what's toast, do you know what toast it is? I

00:06:24 got a pop up notification, I think,

00:06:25 Okay. Yes.

00:06:30 Are you an Android person? or an iPhone versa?

00:06:33 I have to confess I'm an iPhone person. I used to be completely against iPhone. But okay, once you're in the ecosystem, you'll never get out. They just

00:06:41 like the Godfather. They just keep pulling you back in man. Yeah, I just I just recently got a new iPhone as well. And I'm generally about it. But because we have our mobile apps, the training for the courses, I've got an Android tablet, and I've got an Android phone and so on. Oh, also got a comment here on YouTube. So is it an own framework? Or can you use it in Android kotlin. And Java, I believe it's more like an app that you run. And then within that, you can do little jobs and stuff. So wait a sec, it's not um, it's not a stuff that you can bring in that I'm aware of, because you install it from Google Play, for example, to get started, and so on. But maybe maybe you can plug it in, if they do talk about having SDK so possibly, but I got the sense that's more for like writing code outside and get it on your device. But yeah, pretty, pretty cool. So if you're into Android, you want to do Python automation on it. This is pretty cool. It's free, get on the Android store. Apparently, it has ads, but it's also open source. So go with that,

00:07:39 you know, that's a counterpart for iOS.

00:07:42 I don't know about the automation side, there's a thing called carnets, which is really cool. Let's see if I can find that aarnet. app. I believe that's how you spell it. Yes. That's Jupiter on the App Store. And that thing, I don't really want to open the app store. But apparently, I have to well, so much for that. But carnets. It's here. Oh, and it's also on Google Play. Is that the same thing? No, it's a totally different thing. But carnets, or coronae is a very cool app that lets you do something similar. There's also pythonista. Those are the two I know for iOS. Alright. So moving along. yossef. Maybe tell us a little bit about your research. And then some of them one of the libraries you've been working with here?

00:08:26 Yeah, sure. So open 3d is one of the possibilities to visualize. 3d.

00:08:31 Don't worry. Yeah, yeah, let's let's talk about sorry,

00:08:34 that's just fine. So pilots 3d is basically an option, let's say if you work with meshes, and the to mesh consists of edges and points, for example, and these edges connect all the points and what you get at the end of the mesh. So pytorch, which is for facebook, facebook, AI research, and they created this framework, so to speak, to be able to work efficiently with 3d data. So unfortunately, I'm using point cloud data. But the beautiful thing is that if you use pytorch native application, which you could use for for your 3d geometry, and it runs, I would, I wouldn't say significantly, but roughly 10 times slower than despite 3d, which is, yeah, implemented, especially for a 3d problem.

00:09:17 Wow. Okay, so what kind of problem do people solve? Like, what problem are you solving when you're working with this?

00:09:23 Yes, when in the beginning, it was like I was doing some kind of research. Unfortunately, they're coming out paper like every day, and not to like too many actually, in the field of deep learning, especially when it comes to point cloud or like geometric data. And the goal just to inform the audience a bit is my goal is basically to use deep learning and use some kind of create an assistant system for engineers and designers. That means let's say you're an engineer, and we have this CAD models. So ca D stands for computer aided design, to would create a model for example of a gear and then you would have that gear but sometimes we have this differentiation between implicit knowledge and explicit knowledge, explicit knowledge. means this is existing knowledge, which we already know about, let's say this knowledge, this knowledge can sit in a database. And sometimes we are not making use out of it. And then we have this implicit knowledge, let's say an engineer comes into the company is completely new, and he brings knowledge with him to the company. Now the problem I want to tackle is because we are having so many data and we are accumulating geometric data in a company, we have to make use of that. And my approach is hopefully, whenever the end of the thesis which is like in roughly two months, is that I have a system or web application as a front end, where the engineer or designer picks or starts to design or picks a point cloud or design. And then it would suggest the engineer or designer with a probability of what they want to model, let's say he picks a gear, or maybe you want to have like an arrangement of gears, or any specific big component, or let's say you take a wheel, okay, for example, transmission or something exactly for transmission, or they pick a wheel, and it could be a Tesla, or it could be any other car. And then it would give you a probability, okay, this wheel is maybe from a Tesla, and then it would give suggest you Tesla with a, for example, 89% probability, and then you would click on the web application, this is the idea. And then it would pop the geometry into the web browser and the front end.

00:11:12 Now that's pretty cool. So it basically it's like image recognition. But instead of for pictures, it's image recognition for 3d CAD outlines.

00:11:21 Exactly. It's so cool that you mention it. Because there's a big difference between doing a convolution neural networks or deep learning for images. Because images are 2d, it's like a 2d matrix. But if you have a point cloud, then you have a tensor of high dimensionality. And then you are kind of forced to use for example, NumPy, and all these kind of things. And if you're lucky, you could use something like pytorch peda, 3d, which you can also use CUDA on to be way more efficient.

00:11:46 Yeah. Yeah. Wow. That's really cool. So it looks like a neat thing is, you know, I haven't done any 3d work for a while. But yeah, it looks looks pretty cool. I would love to see, I don't know, some pictures and stuff. Wouldn't it be neat? But yeah,

00:11:59 that's a very good, like, if someone is interested in seeing what pytorch 3d can do. Facebook, AI research has an own YouTube channel, and they pitched patch 3d on that channel. And they really do a nice, they show you what you can do with it. So it's really interesting.

00:12:13 Yeah. Oh, awesome. Well, I guess I'd never really thought about applying, you know, ai ml stuff to 3d meshes. But it makes perfect sense. And I can see it's totally different than images. Yeah, yeah. Cool. Brian, do you guys do any? You don't do any CAD stuff with your devices? You?

00:12:27 Well, I mean, yeah, so typically. There's a lot that goes on in the basic design and stuff.

00:12:34 Yeah, I can imagine. Yeah. Cool. All right. Now, before we get to the next one, I want to get something sorted out, Brian. Okay, what do I want to talk about data dog, so they're back to support the show, thank you. Yay. And so they're really about helping you troubleshoot latency, CPU, memory bottlenecks in your apps. And if you don't know where it's coming from data dog will seamlessly correlate the logs and traces at the level of individual requests, cross systems, allowing you to quickly troubleshoot your Python app, and they have a continuous profiler that allows you to find the most resource consuming parts of your app in production just running all the time, at any scale, and it has very little overhead. So that's pretty cool. Instead of trying to debug it, and then deploy it, and hope that kind of translates to production. Just turn it on and watch it. Oh, yeah, that's cool. So be the hero that got that app back on track at your company, get started with a free trial and support the podcast at Python bytes FM slash data dog, or just click the link in your podcast player show notes. Now that that's sorted out, Brian.

00:13:35 Yeah. Yeah, so sorting. Turing's a thing. And the default Python containers are not sorted. And the and there's reasons behind that. But sometimes you need to sort stuff. So there's a there's a Python library called them or a package called sorted containers. It's a, I like it. It's a very, I mean, I like the name at least, it's a very easy to remember sort of thing. But it's, this is amazing. I looked into this. So this was recommended by Finch and bow recently for us to take a look at. And it's a pure Python based, sorted like, sorted collections library. It's as fast as other packages that are, are built using C extensions. That's the that's the impressive part. It's also fairly memory safe. But the the documentation is pretty cool. There's a whole bunch of different benchmarks. So you can take a look at how it deals with large, large things. But it's really pretty Zippy. It was pretty cool. The right on the front page, there's some there's some example we're gonna throw this in the show notes, too, of just, there's you've got it handles, a handful of different data types. It shows sorted list, sorted dictionaries, and sorted set. There's also a sorted key list. And I had to look that up to figure out what that was. So sort of the sorted function within Python allows you to pass in a key, which is the key really is a function to use to create a key for sorting. And right, because the things in there might not have a natural sort, right? Like you put a bunch of order objects in there. Well, how do you sort those? Do you sort them by price?

00:15:22 Do you sort them by date? Right, right. So you select out that element? Yeah,

00:15:26 yeah, you have to select it out. Or you can you can do something like, they might be sortable by default, but you want it to be like a reverse sword or something like that. Right? So there's some some caveats listed. So that you have to make sure that you're the key pass in follows some conventions like two identical items, should be should have the same key eggs, stuff like that. It's all reasonable things. But it's a it's a fairly easy, easy and complete package to just use, it looks, it acts just sort of like normal. The normal thing, containers, like lists and dictionaries and sets, it just it just remains sorted all the time. And this is pretty incredible. So

00:16:07 yeah, I can totally see bugs getting into your code, because you're like, well, we put stuff into this lesson. Oh, I want the latest one. So it's the last one. But maybe you forgot to sort it before you did that, or the first ones the last because you reversed it or whatever.

00:16:21 So what are the things that confused me, when I first looked at this, I was scratching my head for a second because it looks like a fairly simple set of like examples with just like a small set of elements in it. So like the first one is a list of like a B, EA, C, db, just, you know, a few characters. And it's all bunch of these examples with just a little small amounts, and it says underneath this is all all of the the demo listed above. Takes a gigabyte of memory. And then what the heck, Why is it taking so much memory?

00:16:55 It's only five things. I really like why keep Don't worry about it.

00:16:59 But there's hidden in there. There's an example of that five character list sorted list that gets multiplied by 10 10 million. So it's a 10. Like a 50 million million characters. And

00:17:16 yeah, it got sorted. Right.

00:17:17 Yeah. So and then like things like, and then all the operations like count. So you can say, count all the season there. It'll tell you how many there are. And all of a lot of these operations like counting stuff with with a sorted set, take, you know, less than linear time. So yeah, so there's, there's, there's times you need sort in this is a cool one to check out.

00:17:38 Yeah, it's cool. It's nice. That is pure Python. Super easy to install, right? It's not gonna have any like weirdness around that. Like if you say got an M one computer and thing won't compile or whatever. Now, this looks really cool. Youssef, what do you think?

00:17:52 Yeah, this looks amazing. I'm also I'm in touch with my brother on the side. And he's also watching our present moment. And he's also saying, because of the one gigabyte memory for sorting is incredible.

00:18:05 Yeah, that's, that's pretty awesome. I guess it's just showing like, you can have a ton, and it's all nice. So it's, I mean, it seems really straightforward. But having these things sorted, we just got dictionaries that would stay put. So having sort of dictionaries is also cool. Yeah. Right. It used to be that that they sort of, if they had the same keys and stuff, or they wouldn't necessarily retain their order of things, you add it, but now they do.

00:18:29 Right. So if people are confused and think, Well, our dictionaries already sorted. Now they're there. They just stay in the order that they were created.

00:18:37 Exactly. Yeah, similar, but not exactly the same thing. Yeah. All right. So I want to this next one, I want to riff a little bit on typing. And I want to do that around a tweet, which I think I've got to put into a different type of Hold on. For some reason, Twitter stopped showing me like the entire conversation of things. I don't know why, but it gets it doesn't really matter. So Lucas Langa, responded to a tweet that went out there. You know, Lucas is, obviously his core developer. He's been doing really important stuff. But one of the main focuses that he's been working on is around type hints and typing with things like my PI. He was instrumental in bringing typing to Facebook and the Instagram code bases and things like that. So there's a tweet that says controversial take types in Python code base are a net negative. That's not Lucas. This is his. He's about to have a whole long conversation about this, that what I'm going to talk about, but Brian, what do you think? He retweeted this stems

00:19:39 them's fightin words.

00:19:41 These fine words. Yeah. So what do you think?

00:19:46 I think? I think that they're good, too. Yeah, I

00:19:48 do, too. I think when I first saw them, I was a little concerned like, oh, my goodness, this is going to potentially, you know, turn Python into something like TypeScript. And while I appreciate what TypeScript does to make JavaScript much better. I almost always walk away from working with TypeScript with a feeling of like, Ah, that kind of hurt was painful. I wonder why I had to go that way. You know, because the TypeScript requires, it's like, it's like C sharp or c++, the types have to match and they have to be there. And if they don't match at all, then it just won't work. Right? It's super frustrating, oh, this thing is not defined. And you know, there's because there's libraries that might not have types. And then how do you work with them? It's just if I find it, there's always some little edge case. It's like, Oh, this is frustrating. But I never feel that way with Python. And I really have come to love pythons type hints. And obviously, Lucas starts out his conversation say, this is easily disproven, if you ever use PI charm or VS code, the code completion in there is based on type annotations. If you've ever seen your editor, highlight a function, and squigglies say this expects something else, then you get what you're giving it, you know, besides the number of variables, but like, you're giving it a string, and it wants a number or something like that. You're using type annotations, and you can enhance your code by doing that, right. So I was actually talking to Yusef about this yesterday, my philosophy or maybe my my rule of thumb is you don't have to always do it this way. But you know, if you're working in your editor, and you have to type more than, say, three characters to get some kind of symbol to come up, you're probably doing it wrong. So like, if you have email service, and you want to have email service, send account email, you should be able to say dot s, a E. SAE. Alright, send account email, and it should know the type that's been returned, what an email service is that it has this property and just write it for you. Right? So to me a lot of the typing stuff. I know, I mean, this comment is somewhat about bugs, like I never found a good bug. Because of this, to me, that's almost like a side benefit. It's about quickly generating code without stopping to go look at the code definition, without going over to the documentation to see what I could have typed over here. You know, it's, for example, AWS people, this is insanely frustrating to work with AWS, because you get these like, weird create this service, and you give it a name, and then you get an s3 service back, but it has no idea that it's an s3 service. So you get zero. Help Hon, what anything, even I think go to definition doesn't quite work. Because it's, you know, use some factory method to reach down some weird place and get the thing. So I think really driving the code generation experience without being in documentation without jumping around and reading all the source just go forward. I think it's super nice. So to me, like that is the biggest win of all of this stuff.

00:22:34 So let me give you the entire thread is very interesting. So

00:22:38 yeah, yeah, so let me touch on a couple of the points of the thread, because I can't get it to come up in the screenshare. But that's fine. I took notes, luckily. So some of the things he pointed out, he's like, here's tweet, one of 10. So number one, put enough annotations, and then the tooling will connect the dots and make plenty of errors evident as well as like, heightened this cogeneration auto magic, right? That's one of the most common types of errors, though, that will creep in is if if none is being used, where you expect a country concrete type and things like my PI will say you're using a type that is an optional of something, but you're not checking to see if it's none before you dereference it, you're probably going to end up at some point with an attribute. None type does not contain attribute whatever you tried to do, upper or whatever. Hey,

00:23:26 known as none is not scriptable or something. Yes,

00:23:29 sir. Yeah, something like that, right? Or callable, or any of the things. Also, another common bug is the return case. So if you've got a function, you can, you know, maybe check something and return one value, check something else return another value. But if you forget, at the end, you fall through and you don't put up some kind of concrete return type Python functions, just return none. Like this actually blew me away when I learned Python. And I learned about functions that they always, always always return something. There's no such thing as a void function in Python. Yeah, I think a c++ person that probably surprised you, too, right? Like with your c++ background,

00:24:07 I did a bunch of other Perl and stuff like that. So but the the, the return type is actually one of the greatest documentation features as well. Because sometimes it can, you can try to, you can kind of figure out what the parameters are gonna look think you know, you can guess. Yeah, but what's the return type? Is it going to be a list? Is it going to be a tuple? Is it going to be a single element? What if there's more than one element? Yeah. Having type hints around return types is is a great feature.

00:24:35 Yeah, absolutely. All right. Let me touch on a couple more. And I see some listener comments in the stream as well. squiggly lines in your editor anyone? Like I just got this the other day. I thought I was supposed to pass an object ID the primary key Mongo, but we overwritten it and it's actually a string and said you're passing object ID when you expect a string. I'm gonna go Yeah, I guess I am. Alright. Well change that. Right. That's really nice. Instead of that, being a runtime error. And he talks about the work with TypeScript and Anders house Berg. And what he did to help build that in TypeScript, like I said, is pretty neat. But he also points out that you know, the same company, Microsoft is developing powerful type checking and code completion for Python with VS code. And they're, you know, they have one of the Python steering council folks are working on there. And maybe that's Brett, and also possibly the Python Creator Himself. We do. So do you think those two people would be working on something that just provides the illusion of productivity? Probably not. So let's see a couple comments. Chris may Hey, Chris, happy to see you out there. He says code completion is such a confidence builder to I think it's so awesome, because for me, it's both amazing for beginners, because they can type dot and go now what in for experts, they can just blast out code so quickly, because you just type dot the few things and you know, like you said, with confidence, you just keep going. Lovely.

00:25:57 Oh, sorry, a lot of these features, um, you get them, if everybody around you writing the code that you're using is using type hints. You don't necessarily need to use type hints yourself, but then you're being a bad citizen, and not helping the people out that you're sharing code with. So if you don't share code at all, and you're only working on projects with yourself, then you know, go ahead. Don't

00:26:18 use type assets. It's up to you, right? Yeah, absolutely. Yousef, what do you think? Do you guys use type hints on your project?

00:26:25 No, not really. Like it's not something that's an our conscious mind, I would say. And I'm not sure if that's also something really, because you're an engineer. I wouldn't want to generalize. But engineers are usually bothered with the problem itself, rather than digging down on types. For example, it depends. Yeah.

00:26:40 For us, yeah. It's a bit of a computer science topic. I can see. But I just I like I said, I love how it generates the content so much easier. magazine also commented, I love, for example, pedantic but I agree with Ramallo Luciano mala, who was in this thread. Hopefully, it won't be required in Python to help people get started. Yeah. So I think the type of stuff is really interesting, like, pedantic. We've talked about a bunch. It's a super interesting example of really using typing to generate cool data, ingestion and processing. Like if you say, I've got a pedantic model, and one of its fields is a list of integers, but you give it a list. And the things in the list happen to be strings, that could be integers, it'll automatically convert it and stuff like that is really fantastic. Yeah, I think that's always going to be an add on type of thing.

00:27:29 Yeah, I'm, even though I'm a fan of iPads. I don't use them all the time. And I would be very opposed to having them be required.

00:27:37 Yes, I went to I went to I, I don't think they need to be on the whole code base. I mean, it depends if your goal is to say, I want to use them for my pie, or my pie, see, and like, completely generate stuff. But if your goal really is to get a little bit of help with editors, just having it on the boundaries, like here's the data access layer, the things that come out of their return, whatever, and they take, like, you don't have to do anything else, and the editors will pick it up and run. Yeah, yep. All right. One quick question, what is a function return? If there's no return? It returns none. It returns none. So that's why you don't have to just say whether there's a return type, it always returns an N. All right, next up, I guess we got the one I tried to open with there. Yousef is open 3d. That looks fun.

00:28:18 Yeah, this is basically a library which you could use in Jupiter, which I tried to use, but somehow they, at the moment have problems using open 3d. So what you can do is you call open 3d in your Jupyter Notebook, and then have it have the PunchOut visualized. And However, there are some ways around it. But open 3d, I think I would start all over again, I would probably use open 3d to visualize my point cloud, which I'm actually working with in my Jupyter Notebook. I'm not sure if using a Jupyter Notebook is also something you would recommend personally, maybe Brian and, Michael, if you're a fan of Jupyter notebooks, I think it depends on the application, right? Yeah,

00:28:49 I think it depends as well. And to me, it's, it really depends on what I'm trying to do. And like the kind of code Am I trying to explore data? And does it have a really strong visualization component? Or is it like a utility type thing? So for example, one of the things that I wrote recently that I would never put into a Jupyter Notebook, but I find really helpful is we've got literally 1000s of video files, mp4 wars, and whatnot for online courses. And in order to import them, one of the things I have to tell the database is how many how long in seconds is each file? And where does it live and stuff. So I've got a little script and I just say, go go to this directory and generate a little JSON output for all of the files and bytes and parse them and tell me how long they are. Like that kind of app doesn't belong there. Right? It just that's a command line type of utility type of thing. But if I want to visualize something like this, I think it may well be really good for it, actually. So I think it varies.

00:29:48 Yeah, the there's a lot of application parts of my work that I think using a Jupyter Notebook actually might be more beneficial. So I'm often taking big huge trace data is stuff for, like spectrum traces. And they're those could easily be driven from a Jupyter. notebook. And then with the visualization stuff would be good. Yeah.

00:30:10 Yeah. Cool. So this thing is a set of both c++ and Python libraries for basically working with 3d meshes, right?

00:30:20 Mostly 3d data. For example, if you use a light lighter, so when you work with a laser, and right, this looks, for example, grid, I never watched the video. But if you scan objects in your, in your surroundings, usually what you get is a point cloud, and which you can then visualize using open 3d. And the big disadvantage with point clouds is that they're kind of unstructured. So you could have one matrix representing one point cloud. And you could have the same matrix switching two points, but the matrix would be different. This is also a problem that a lot of papers are trying to tackle and make sure that you

00:30:52 get around this back. Nice there. Example, video here is using open 3d for 3d object detection, which is it's pretty wild, and nice.

00:31:03 The things people do these days.

00:31:05 I know, I think it's really interesting. All this image, image processing analysis stuff. Yeah.

00:31:10 Good question. Brian. By the way, this is what I asked myself when I listen to Python bytes. As an engineer, what are you guys doing? It's great.

00:31:19 Absolutely. Cool. All right. Well, that's it for all of our main items. Brian, you got anything extra that you want to throw out there?

00:31:26 Um, yeah, I just learned a couple things. 120 21 has been exhausting so far. Yeah, I don't know if anybody else's get the same experience. But Wow. And I also, I've got a lot of extra projects, side projects that I'm working on right now. Python bytes is one of them. But there's other stuff going on as well, trying to do more writing. And because of that testing code is has shifted to an every other week cadence. So it's not going away. I know, a lot of oddly enough, I've had a lot of feedback in the last couple months of people saying thank you for the podcast, I've learned so much. So I do not I don't want to shut it down. I want to keep it going. And there's no plans on shutting it down. It's just slowing down so that I have ruined my life for other other projects as well. So just wanted to let people know that.

00:32:12 Yeah, well, yeah, I try to talk Python, batch it up and do a whole bunch just to say this week, I'm just gonna get nothing done. But I'll do a ton of recording and then just roll them out. I had three months of stuff done in like a week and a half. I was I really needed a break after that. But then I I was good. Yeah, cool. Well, thanks for the update. Yousef, anything you want to share, on the way, way out into the show,

00:32:34 I just want to say thank you for letting me or being able to participate in this quick and brief podcast and keep doing what you do. Guys, I follow you both on Twitter and what you're sharing what you do is really amazing. So it's really inspiring for an engineer who wants to delve into the field of Python and all offensive kind of things to to listen to your podcast, taking your courses or following you on social media is really great. You learn a lot and actually have to learn more, to be honest myself.

00:32:59 Yeah, I have to learn more. Yeah. never stops. It never has. Yeah, but that's awesome. Thank you so much. Really appreciate that.

00:33:06 How about you, Michael,

00:33:07 I have one quick thing driven by yours, a comment you had last time. So Francisco Silva pointed out, we talked about some of the num, pick a pythonic, the idiomatic NumPy stuff that you might do, and how like instead of looping over stuff, you can just like add, say like two NumPy arrays, and it will add them or you can do dot product them and whatnot. Right? So one of the things you can do, I guess we also talked about like ones and zeros to generate a rebuilt list of those. So one of the things he talks about is the all close method. So if you've got floating point numbers, one of the things that's really frustrating is like are these equal? Does it mean floating point numbers equal? Right? Like they could be so nearly the same, but not the same? Right? They could be within an insane amount of closeness, right? Like 10 decimal places, and then a one, right? So all closest, like, well, if they're within, you know, one 1,000th of each other, consider them the same.

00:34:04 Well, close takes a bunch of parameters that you can you can specify the tolerance, though.

00:34:09 Yeah. Anyway, I thought that was cool.

00:34:11 Yeah. Hey, while we're on the topic, I may as well throw out. I've got I've got. So I tried to use this method of using NumPy. And I ran into a problem. So I'm hoping some data science people can help me figure out how to solve it. So my problem is just this simple thing. If I go to two arrays, I want to see if all of the elements are element wise, less than or equal to the other element in the other array. Okay, I can do that with NumPy. But what I can't, that assumes that all of the elements are the same datatype like comparable, if if there are strings thrown in there. It doesn't work. So obviously, I don't know if it's obvious, but so I got it. I had to do some cleanup at a time, but I don't know what the most The best way is.

00:34:54 Reach out to me if you got an answer. Awesome. Yeah, I don't have an answer, but I'm sure people do and Quick, quick comments. Hear this one on my show. Magnus Carlsen says tip I found out about copier an alternative to cookie cutter that can be run later as well to update the project to a newer template. That's pretty cool. I haven't heard of that. And also tamo spec has reached 1.0 parser might be added added to the standard lib. Also, I haven't covered that. But that's cool News. Thanks for sharing you guys. Yeah, and I guess, thanks for being here. Yousef, thanks for joining us. And Brian. thank you as always, man, thank you.

00:35:30 Thank you so much, guys.

00:35:31 Bye, everyone. Hi.

