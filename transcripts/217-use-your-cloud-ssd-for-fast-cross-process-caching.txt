00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 217. recorded. What is it January 19 2021. I'm Brian knockin. I'm Michael Kennedy. And I'm Omar. Welcome. Thanks for joining us.

00:00:18 Yeah, thanks for coming this first linkless. First, I'm first going to talk about caching. I got some cool stuff to talk about with caching. So I recently got a recommendation from Ian Mauer, who was talking about genetics and biology over on talk Python, I think when 154. So a while back, but he pointed out this project called Python disk cache. And it just seems like such a cool project to me. So one of the big problems are not problems when the trade offs or the mix of resources we have to work with when we're running stuff in the cloud, so often has to do with limited RAM, limited memory in that regard, and limited CPU, but usually have a ton of disk space. For example, on my server, I think I've got like using five gigs out of 25 gigs. But I've only got, you know, two or four gigs of RAM, right? But one of the things you can do to make your code incredibly fast is to cache stuff that's expensive, right? If you're going to do a complicated series of database queries, maybe just save the result and refresh it every so often, or something like that, right? Well, this library here is kind of the simplest version of one of these caches, like people often recommend memcached D, they talk about Redis, you might even store something in your database, and then pull it back out. And all those things are fine. They just have extra complexity. Now, I haven't a separate database server to talk to if I didn't have one before, I've got a Redis caching server. Now I gotta share, what if you just use that extra hard, hard disk space to make your app faster? A lot of these cloud systems like linode, for example, they have SSDs for the harddrive. So if you store something and then read it back, it's going to be blazing fast, right? So disk cache is all about allowing you to do, you know, put this thing in the cache and get it from the cache, but it actually stores it in the file system. That's pretty cool, right? Yeah, yeah. So it's super easy to use, you can just come up here and say m import disk cache, just to get an item, I just say cash, like a dictionary, basically, to put it back, same thing, you give it a key. And a value is basically like a dictionary. But it persists across runs, it's multi threaded, multi process safe, and all those kinds of things. So incredibly, incredibly cool. It's pure Python, it runs in process. So there's not like a server to manage as 100%, test coverage, hours of stress testing. It's focused on performance. And it actually Django has a built in caching API in Django, and you can plug this into Django. So when people say cache was my thing, even third party apps and stuff, it'll automatically start using this, which is pretty awesome. It has support for eviction. So last, most recently used first, and so on, you can tag things and say these can get evicted, tuner and whatnot. So really, really nice, incredibly easy to use, I definitely recommend people check it out. Because very nice, has different kinds of data structures that you can work with, like a fan out cache, Django cache, or regular cash and so on. So if you want to work with some code, and it's possibly going to run in multiple processes, or it's going to start and then restart, start and stop, and then run again, and you wanted to not have to recompute everything, this cache, I guess evictions or evictions like on hold for 2020. Yeah, well, because of COVID, you're going to need more decimate now.

00:03:27 This looks cool. So what's one of the things I was confused about is it's a key. It's called the cat disk cache. But what's the difference between that and just like a key value store database? Well, those the key value store database in practice would be no different. So but just that you have a set will be you have a separate server, like there's a server process that runs somewhere that you have to have like a connection string and stuff to that you talk to it in this way. This is like I have a file, and I use the same API to talk to you. So instead of having another server to manage another place to run it, you just say like, let me just put it on the SSD. And that's probably quite fast. Cool. And then we got a quick question here. Brandon, as we talked about any way to scale this out, say multiple servers behind a load balancer, I did not see anything, I'm pretty sure as far as I can tell that it's local, just like look, sort of a per machine type of thing. Not a, but it does go across processes, but it doesn't. I haven't seen anything talking about multiple machines. I guess you could set up a, like a micro service, but at that point, you might as well just have Redis Yeah, yeah. Um, run. This is kind of on my list of things to try here pretty soon, too. Yeah, absolutely. Um, another thing I want to check out is, is some of the while I like Tom Oh, lately. Yeah, but almost great. Almost great. I heard that it reached 1.0. Yeah. So it is it's at 1.0 now, and I think that they were kind of headed there anyway. So I was looking through the change log. Looks like they have several release candidates. And in I'm

00:05:00 Anyway, it'll talk about a little bit. So it's, it's at 1.0. Now, I mean, a lot of us don't really understand it, maybe I'm speaking for myself, I don't really get what, what, uh, what all the specification means I just use it. It just works. It's easy. And in one of the things I use it for is the pipe project tomo file. It's mostly what to use it for. But, but pipe project Tom was taking off, and this is at 1.0. So what does this mean? I'm hoping that this means that we have like a Python package built into Python that parses tomo. Yeah. Now the language is stable, right? Yeah, maybe it means I need to learn more about tommo.

00:05:38 Maybe. But I think there's talk about it, I'm not sure what the state of it is. Maybe we could get Brett or somebody to talk about it. But in the meantime, if you want to play with 1.0, he with Python, there's just I think there might be limited choices. So I went out and looked, there's a page on the project page that shows like down at the bottom, it shows the the different projects, the implement that implement the various versions of tommo. And there's one project so there's a c++ project that there handful c++ that support the 1.0 point oh, the most recent version of tahmo. And then various support levels for different for different other things. There's a there's a 1.0 point oh, release candidate, one that's supported by tomo kit. So tomo kit is a Python project that looks and I think that that might be sufficient to try out most of the features, the new features and then nice, then there's the what I would think of is just the Tamam project in Python, that one's only so it supports 0.5 point zero, so I'm not sure what's going on there. It'd be great if it would support the latest. But then I'm like, what does that mean? What is it? what's different between Oh, five Oh, and one Oh, and so I went looked at the change log, there's, there's three things that jump out that look like they're new really changes, one of them is leading zeros in exponent parts of floats are permitted to Okay, then allowing rock character tabs in basic strings and multi line basic strings. That seems reasonable. And then the difficult one might be allowing heterogeneous values in arrays, which, that's cool. Um, yeah, so apparently wasn't there before. But none of those seem like super common stuff, that's gonna be a big breaking change, like, Oh, of course, he's heterogeneous types in here. Like, we're just gonna mix it up and have random stuff in our array. Right? It seems like it's, it's probably still the built in or the pure Python is probably decent stuff. Right. And I need the, I guess, there's a whole bunch of these that are listed, as clarify, that clarifies it, but it is a specification. So clarify might be very important. But I'm not sure how important that is. It probably affects the implementation. But I'm putting this out because I'd like to hear from people that know more than I do about this and how this affects Python. And if we should care about it. Yeah, for sure. It's very cool to see it coming along. And it definitely lends some support to the whole pie project. tamo stuff that Yeah. Hey, before we move on to August 1 topic, Martin Boris asked, just wondering, is this disk cache thing I've mentioned? Is it a simple way to share data between unicorn g unicorn workers? Yes, exactly. That's exactly why it matters because it goes across the worker processes across worker process in general, across multi processors as a consequence of multiple worker processes. Because normally, you would either cash in like process memory, so you got to do like 10 times. You've got it all fanned out different processes running so this will solve that for sure. And then what free Brian from Magnus Carlsen. Yeah, does was it does PIP 621, the tama spec, whatever the pep is for that specify the version of tunnel to use? I don't know what to ask Brett about that, too. Yeah, I don't know either. Sorry. All right. Auggie? What do you got? Well, oh, I'm here. Well, thank you for inviting me again, this is actually you have two consecutive weeks of hosting mechanical engineers as your guest on the podcast.

00:09:07 So thanks for being inclusive. But I wanted to talk about pi Qt graph, which is not new, but

00:09:17 maybe you don't know. So tell them about it. Yeah, absolutely. So pi Qt graph is a plotting library. But it's a little different from the likes of matplotlib. And the variant on the variance or derivatives from that or okay.

00:09:32 paepcke graph uses the Qt framework. And it's meant for embedding interactive plots within GUI applications.

00:09:41 And as a consequence of using the is the qt you can actually get some really high performance out of it, which is which matplotlib is absolutely phenomenal for generating plots for publications or you know, for static media on websites. But the moment you try and do anything like with mouse

00:10:00 interaction, you might be in for a, you know, a bit of a tough time. Then you running on like native with cute, you're running natively on the OS, right? Absolutely, yeah, you're running. Yeah, there's no client server relationship like you would get with bouquet which you might need in some certain situations. But, and anyway, so part of the PI Qt graph library is which, you know, I guess I should

00:10:26 identify that I am a maintainer of, but is that we actually bundle an example application. So if you're ever curious about the library and its capabilities, you know, and don't feel like reading through dozens of pages of documentation, you can just run this sample app, which I have on the screen share, and it shows you the list of it. This comes with PI Qt graph, right? Yes, yeah, it's bundled in the library. So if you install pi Qt graph, you get this. And, and here's some of the basic, you know, plots. But anyway, as you can see, you get our mouse interactivity going. And you know, we can do zoom behavior. And but what's really cool about this library is that example here, basic plotting, is generating during the, with this code right here, all those plots was in this, I can't tell how many lines maybe 70 lines total. Yeah, um, but anyway, you can in within this editor here, you can change any of the code and experiment with yourself. And here on the tab, you see all these different items, you know, it does 2d, we have some 3d capability, which you need the PI OpenGL library for another. This one is just a maybe a dozen lines of code, but you have a couple plots here. And then just with the mouse interactivity, right, we can sub select or here you can get our crosshairs and get information about what's the data points underneath the mouse. So for an analysis tool, it is really, really, it's it can be incredibly powerful. And if you're generating tools for any kind of engineering, or scientific analysis, where you want like the user to be able to interact with the data in some way, you know, zoom in, zoom out, things like that, or pike up graph might be might be a really good option for you. Yeah, absolutely. Can you run that for the basic plotting thing? one real quick? Oh, yeah, of course.

00:12:09 When I was looking at this, the thing that stood out to me was, while it looks like the graphs are beautiful, and they look good, you know, the first couple that are like, I could probably do that, and beaucaire potli, or, you know, matplotlib, so something like that, right? But the nice interaction between multiple graphs, as you zoom in one, the other goes in, or that super high frequency yellow one, that's people listening, it's like refreshing, you know, many, many times a second, right? getting high frame rate out of out of those, like Jupyter Notebooks sounds tricky. Yeah. And I'm actually really glad you brought up high frame rates, I'm actually on the verge of merging pull requests to integrate coop pi support, which is the CUDA number of rays or some of the image data and on some of our benchmarks, we're showing being able to go from, you know, maybe 20 frames per second images up to over 150 frames per second, which, at that point, you know, monitors can't keep up. But you know, you lessen the CPU load substantially. Yeah, that's fantastic. We got a comment question from the Anthony Shah.

00:13:15 I use the filter built in grapher app in Mac OS. I do not know what the built in grapher app is. So I am I afraid I don't know how to answer it. You don't know if it can replace it or not? I don't know either. But yeah. But the PI Qt graph has a couple of dependencies, you need some Qt bindings. And right now we support Qt five, five dot 12. And newer. Up until very recently, pi Qt graph supported like virtually any Qt bindings you could install, like even going back a decade, which eventually had to put an X at that that was just too much work.

00:13:54 And so we support Qt 512 or newer, we don't support Qt six yet, although there is a pull request in to add support for pi site six, which was discussed on this show just two weeks ago, it just came out. Right. Right. It just came out and which I'm I'm really thankful for contributors, you know, that are submitting these pull requests. I'm often feel bad. I can't keep up with the rate that they're coming in. But but it's still appreciated. And for contributors to the project. Yeah, absolutely. And not just contributors to the code, but also people that can that are you willing to look over pull requests or willing to test out pull requests, mainly with the plotting library? Sometimes testing can be really difficult because, like, visual artifacts, like how do I test for that, right?

00:14:44 And so, sometimes a lot of a big chunk of our testing as well does this break or does this look right? And being able to, you know, having somebody else, you know, verifies that kind of stuff or isn't really big help.

00:15:00 So if you're interested in this, and feel free to reach out to me directly or take a look at our issue tracker, a pull request tracker.

00:15:12 Yeah, no. And I guess the last thing I should say is it's it's primarily used in scientific and engineering applications. It's a periodically it goes through the git log in, I look at, like, the email addresses that people are contributing to and, you know, NASA Ames Research Center and

00:15:28 a bunch of places like that, but, but they get a kick out of that. Yeah, that's super, super cool. Nice. Thanks for sharing that and good work on it. Well, I Another cool thing is linode. And they're sponsoring this episode. Thank you. linode. Simplify your infrastructure and cut your cloud bills in half with linode. Linux virtual machines, develop, deploy and scale your modern applications faster and easier. Whether you're developing a personal project or managing larger workloads, you deserve simple, affordable and accessible cloud computing solutions. As listeners of Python bytes, you get a $100 free credit. You can find all about the deep those details at Python bytes.fm slash linode. linode also has data centers around the world with this same simple and consistent pricing. regardless of location, choose the data center nearest to your users, you also receive 20 473 165 day human support with no tears or handoffs, regardless of your plan size. You can choose shared and dedicated compute instances or you can use your $100 credit on s3 compatible object storage managed Kubernetes. And more if it run on if it runs on Linux, it runs on linode. Visit Python bytes.fm linode linode and click on the Create free a free account button to get started. Awesome. Thanks for supporting the show. linode Ah, okay, Brian, I want to cover something that comes to us from to listeners. This comes from Jim crane, who pointed out some really interesting aspects how Python is being used in this whole parlor, social media kerfuffle and great article by my good friend and fellow portlander, Mark Littell. So let's go over the article first. So you guys heard there was basically an attempt to overthrow the US government. You guys hear that? That was lovely, but idiots. So a lot of the people who were there got kicked off of, you know, official social media. And they went to this site called parlor, so parlor, according to Wikipedia, as an American alt tech microblogging and social media networking service. And it has a significant user base of Donald Trump supporters, conservative conservatives, conspiracy theorists and right wing extremists. My words, that's Wikipedia. So a lot of the people who stormed the Capitol, tried to get into Congress and stop counting the votes. They they decided to live blogging on their personal accounts.

00:17:50 But a lot of them were no longer on Twitter and whatnot, although some were, do they were on parlor, and they probably came to realize, you know, it's probably not a good idea of showing me charging in to the Capitol as like hundreds of people are being arrested and charged with federal crimes, right. At the same time, parler was getting kicked off of Apple's App Store for iOS. They were getting kicked off of the Google Play Store, they were getting banned a lot of places. So there was this hackers, not the right person, this sort of data savior person, I guess you could say, who came along and realized it would be great if we could download all of that content and save it and hand it over to journalists at say like pro publica handed over to the FBI, and so on. It turns out, it wasn't very hard to do. There was a couple of things. If you look through the Ars Technica article about how the code behind parlor was a coding mess, and I've tried to figure out what technology was used to implement it. I just couldn't find that anywhere. Anyway, it says the reason this woman was so successful, so successful at grabbing all this data, when she got like 1 million videos and a whole bunch of pictures, there's a whole host of mistakes. So the public API for it used no authentication. Let me rephrase that the restate that the public API is zero authentication, no rate limiting nothing, just Yeah, sure. We'll just go ahead and there you go.

00:19:12 You have it all. Secondly, when a user deleted their pose, the site didn't remove it, it just flagged it as deleted. So it would show up in the feed, which in and of itself is not necessarily bad. But you pair that with every post was an auto incrementing ID, which meant you could just enumerate, you're like, Oh, I'm on post 500. Well, let's see what 501 is. It doesn't matter if it's deleted. Give me that. That's crazy, right? So she wrote, she wrote a script in Python to go download it and you can actually see like, here's all the videos and all the stuff and their IDs and whatnot. And in here, this is the one that Jim sent over. If you look there's a just here that shows you how do you download a video from parler? Let's go down and find it here. Now, maybe it's not there. I think it might be back. There's a part where it shows the How do you download

00:20:00 It with Python and so on to just go through and like, you know, screen scraping traditional Python right there. So apparently Python was used to free and capture all of this. Oh, another thing that they did in, in parlor that made it easy to get was when you upload videos and images to places like Twitter, they'll auto strip the Exif, like the geolocation and whatnot from the images. Now, they don't need it, just post it, right. So like geolocation, camera, name, all that kind of stuff. It's all in there. So there's just a bunch of bunch of badness. They've been since kicked off of AWS, because you know, primes. And now they're apparently trying to get hosted in a server in Russia. Is that right? Yeah, there was a actually that I think there's an article on Ars Technica that went up this morning that they're somewhat partially online on some Russian infrastructure, which, yeah, they're only partially online because I looked at it. They're like, there. It says something like, well, we're trying to come back. Here's a couple of posts. It's not, yeah, it's not all the way back, right. they're experiencing technical difficulties, as in the world hates them, and is trying to make them go away. So I'm not here to try to make this a political statement or anything like that. It's not what I covered the story I covered because I thought it's very interesting, both the security side and how people were able to leverage Python to sort of grab this stuff before it's gone. Some of the journalists were asking, like, Is there a more accessible way to get the data? Is there like, yes, we're going to build the woman who God is like, we're going to build some better way for you to get it. But right now, it's like I had to run into the burning building and grab the files. Yeah, the other thing I sort of want to point out about this story is it's not like parlor was lacking funding to develop these tools they had, from what I understand they had significant financial backing. Yeah. And whether they did not have the technical expertise, the time I don't know, but I'm really curious as more Fallout comes from this, you know?

00:21:58 Yeah, there's gonna be some good stories from a technical standpoint on here. Absolutely. Well, pretty. Pretty insane. I Brian, let's move on to something more Devery developer web dev he, well, you know, maybe if you want to scrape the web or something else. Absolutely. Yeah, we've got a suggestion from Douglas Nichols. Thanks, Douglas, best of the web development with Python. So we've seen I would put parlor not in that list.

00:22:26 So I, we've seen the best of lists like this before, I'm kind of a fan of. Yeah, but the this one of the things I liked about this is the, the icons are nice and nice. So there's a whole bunch of different icons that are used to help. You know, you can see the likes or the clothes and stuff of different projects. And then there's icons for you can search for flask projects, or things like that. And that's nice. But it's a it's a pretty big comprehensive list. We've got web frameworks, HTTP client servers, authorization tools, URL utilities, open API graph, qL, which is nice to see. There's even web testing and markdown listed how to access third party API's. But then I, near the end, I really liked seeing there's a bunch of utilities sections. So there's a flask, utilities, and fast API and pyramid and Django utilities, which are really neat. And what I really was pleased to see was that even though fast APIs was a couple years old, now, there's a whole bunch of fast API projects that are there to make best API easier, like using SQL alchemy, or, you know, coming up with the contributions thing or Yeah, fantastic, different react, how to use react with it, things like that. So yeah, nice. If you're trying to check out or look at different tools that are available for web development with Python, this might be a good place to peruse. I feel like that's one of the big challenges in general, you know, with people coming into Python or getting into new framework. It's like, there's 500 libraries to do a thing. Yes. Which one? should I use? Not? Can I find a library? But there's too many. Right? Yeah, yeah. So do you have a suggestion for that? Um, well, I think these awesome lists are super good, right? Because they're somewhat vetted, and whatnot. And I recommend so like, for instance, if I was if I was building a, well, it's harder now. But if I was building something new with a web development or web interface or something, and they didn't have like, which framework to pick is like one of the starters that I it's the people I have around me as resources. So I know that you're that you know about pyramid but you're also fairly knowledgeable about fast API and and I know some people that are Django friendly had to know quite a bit about Django. So if the if the people if you've got a couple friends that already now one of these big hitters, I would go with that so that you can ask them questions, or maybe even you don't pick the same thing, but you could ask like you chose this one. Tell me you liked it a lot. The other one to watch

00:25:00 Did you pick that? Yeah. Oh, yeah. Yeah, that's a good idea. Yeah, for sure. Like maybe fast API makes sense for me. It doesn't make sense for you. But you can then see why it made sense for me and not for your whatever. Yeah, yeah, absolutely. All right. All right. I don't know. Yeah, you're up. So um, so, Mr. Shah, being in the audience here was a bit of a surprise. But

00:25:20 one of the things I wanted to talk about is, I'm gonna butcher this up. I apologize. Python, pigeon. I think it's pigeon, pigeon.

00:25:30 Oh, my goodness. Not Okay. Yes. What a wonderful name. And

00:25:35 in, I've been fascinated by this. In. So what pigeon is, is, uh, this is feel so awkward to talk about somebody else's project, when they're in the audience here is a good extension of C Python that compiles Python code using the dotnet, five CLR. And,

00:25:55 and what I've been what's been fascinating to me about this is this is like a whole area of software that I have absolutely no experience with, like I know nothing about, but I've been following

00:26:08 what Anthony's been talking about on Twitter about it, and he's, and he's been explaining what he's doing. Explain, you know, along the way, in these quitter size increments that I feel like I'm able to follow along with the attendant. And I find, I've found that this project, absolutely fascinating. And I'm seeing like the rates of improvement over time, and I've just been absolutely blown away. And, and so I think this has been absolutely amazing. And I really hope that I'm really here. So one of the benchmarks Anthony's been using is his own Python implementation of the N body problem, which is, which is sort of funny that's come up because I've been wanting to do an edit and body blogging example in pike Ed graph. And so now, of course, this has been sort of my to do for some time. So now I'm curious if I should even attempt to, or if it's even remotely possible to try and integrate those functionalities together? Yeah. That's cool. And go ahead. No, no. Okay. Well, I'm sorry. The other things I've done, this is this. The other thing that I've recently used for some extension, or made use of but it's not particularly new is the num pies, underscore or Dunder array function functionality, which is specified in F 18. And what that allows for is using NumPy methods on non necessary, not necessarily NumPy arrays. So for example, with a coupon, you can use, like the NumPy methods that would operate on a nd array, but opera, use it on a coupon array. And in this is not limited to coupon. There's other libraries that offer this functionality too. But this makes it so much easier to integrate,

00:28:04 to integrate various libraries together with really having minimal code impact and having near identical API's. And earlier, I was talking about the pull request for giving cutie pie support into pi Qt graph and this functionality, which was implemented in coop pi, but it's made the integration so much easier. Nice, because you guys already implemented with NumPy. And it's just like, we're just gonna go to this layer, basically. Yeah, I mean, there's some other gotchas that you have to have right with Him, you know, handing stuff off to the GPU and stuff like that. But yeah, now, that's what the actual size of the death was not that big. You know? Well, and you think what it means to run on a CPU or run on a GPU, like, that's a very different

00:28:48 set of computing and assumptions and environments and right, and so on, and to make that a very small merge is crazy, right? Yeah. No, it's, it's fantastic. Yeah, it's, as I said, it's nothing new this dysfunctionality has existed is been enabled by default in NumPy, since version one dot 17, which I believe is almost coming up on two years old now. But it's, this is the first time I've, I've made use of this functionality, or I've been impacted by this functionality directly. And I'm so appreciative of it. Yeah, fantastic. And that's super cool. It's I've not really found a reason for me to work with cutie pie or anything like that, but I just really excited about the possibilities for people for whom it does matter. You know, me personally, um, yeah, I actually always every time I hear about it, I'm ready to do it. Oh, I gotta check this out. looks neat.

00:29:39 Absolutely. Well, there we go. There's our six, six items. Do you have anything extra for us Michael? This is gonna be an extra extra extra extra. You're all about it. So I'm just gonna throw a few things out really quick. One I got my new m one not long ago and actually had to sit into my old laptop. It's battery was dying. Its motherboard is dying, all sorts of

00:30:00 So I had to put it in a box and send it away. And like, I don't really want to put my data in here. So I just formatted that as well. So now I have two brand new computers. I'm trying to think like I was kind of getting bugged by how much spying, monitoring observation all these different companies are doing. So I've started running, just Firefox, but also, you know, when things a lot of times like, for example, stream yard, I can't use a green screen on Firefox after use Chrome, it says, like, I don't really want to use Chrome. But I want a green screen. So here I am. So I've started using brave whenever somebody says, I have to have Chrome, I start using brave, which is a more privacy focused browser. So I thought that was interesting. And just turning on a VPN, like all the time, just to to limit people observing, not that I really need to keep anything super secret to conferences are coming out with calls for proposals that are due quite soon. So the Python web comm is got some calls for proposal. It's the conference is actually March 24.

00:30:57 That order is not quite right. Is it? 22nd to 26th. If you if you look at their site, like the the days that it's honored, like sort of out not in order, anyway. into March, there's a cool online conference, they did this last year, six feet up did and they're doing it again this year. I'm actually speaking here. Brian, are you speaking there? The webcam? Yeah, no. Well, there's a call for paper. So you could be muted.

00:31:22 Yeah. And I think they expanded it out to be like five days or something. So there'll be a lot of content, which is very cool. So I'll be giving a talk on Python memory deep dive there, I believe. And then the big one icon, icon is virtual again this year, but the call for proposals has gone out and is there due February 12. So if you want to be part of iKON, get out there and send something in there. You can submit something, I will probably do it. Yeah. It means I got more work to do. But yeah, I think I'll do it. You got any plans? I'll probably submit some something. Maybe 3456789? Yeah, the

00:31:57 more he submit the better chance that you got Auggie.

00:32:01 There's talking amongst us Pikachu graph maintainers about doing the tutorial session at Sai pi. So I might know that's not listed here. But yeah, we're considering doing that. Which is awesome. That makes sense. Yeah, that's cool. Awesome. Then final here, here here all about extra stuff is Apple's launching a racial equity and justice initiative, which I think is pretty cool. Basically, they're setting up centers to teach programming and other entrepreneurship skills in underserved communities. Right. And I know there's again, more a lot of political stuff around all this. But to me, I would just love to be in a world where I look around the community and it it looks representative of everybody, right, like, people feel included, like tech is such a wonderful space. I think this is a cool initiative. Obviously, it could be hopefully they deliver it in the right way. It's not just like, we're gonna teach everyone how to build iPhone apps. That's what the world is right? You know, it's a more broad sort of conversation could go go any which way? And I hopefully it's just a start. If you look, they're saying they're donating $100 million to this cause, which is a lot of money, but it's also only eight hours of profit to Apple. So yeah, it's got room to grow, I suppose. Anyway, I just want to give a shout out to that as well. That seems pretty cool. Yeah. Brian, how about you more conference stuff? Well, pi cascades is? Actually I don't remember what it is. But February, possibly, February, probably. Yep. February 20. It starts and there. There is the schedules up. So I wanted to announce the schedules there so you can check it out. There's still tickets available. And you can see what's going to happen. I really had had, I had fun at the inperson by cascades and they did a good job for the online one in 2020. So and we're gonna be there. Yeah, we are. We're on a panel. Yeah. Well with Ali spittle should be fun. But there's nothing fun about podcasting. But there's like another panel about writing technical writing technical books. It looks good. Just a bunch of cool talks. I'm looking forward to seeing Yeah, me too. It looks great. Well, I love all these online conferences that it's pretty accessible to everybody. Hey, last year, if we would have announced this would be like, Oh, I'm not in Portland. So it doesn't matter to me. Yeah. Right.

00:34:09 Auggie? I know, you got some stuff to shout out real quick. But also a quick question. Follow up from

00:34:16 AV x extensions for native matrix multiplication on supported CPUs. It'd be interesting if that extension supported the same for non NumPy. Arrays. thoughts, ideas? Yeah, I the can. Yes, I'm sure you can use those extensions on. I mean, NumPy doesn't have a monopoly on abs, abs extensions. You know, it just needs the whatever library use I think you just need to or would need to be compiled with

00:34:40 the Intel Mkl Blass extension which is goes into build systems which is way over my head.

00:34:51 I mean, I used to live in the c++ world and whatnot, but I'm far from that world that you and Anthony are inhabiting disease. Right. So um

00:35:00 Yeah, I'm so yeah, short I'm not sure. But in terms of the extra is a couple things I wanted to bring attention to is I've been loving the Anthony explains video series and these are generated by I'm gonna mispronounce his last name Anthony's title. He's he's been a guest on countermark has been a guest here but I think he's been on guest on talk Python to me. He maintains pre commit, he's a PI test developer in Anthony totally, totally from gap. And, and I've been absolutely loving his Anthony explains

00:35:31 playlist series. The other resource that I've recently found myself having to make use of is learn X and Y minutes. I you know, sometimes I have to write something in a tech stack. I'm learning a language I have absolutely no familiarity with. And so that's that resource has been absolutely amazing. for, you know, the five minute overview, right on the real coefficients. And then the other one is this book I've been reading, working in public. And I think we'd have plugged it a while ago on on his Twitter feed, but it's a talk talks about maintaining open source projects, in some of the issues arising that I think it's, you know, I'm still not done with it. But I think it's both helpful for a maintainer point of view to you know, for sanity checking your experiences might not, you know, you're not might not be as isolated. And I think it's helpful for new open source contributors to see what, what things might look like from the maintainers perspective as well. Really good things. Yeah. Have you read it? Right? Um, it has an audiobook version. So I listened to it, and it You wouldn't think like a book on open source would be good audio, but it was great. Yeah, fantastic. Awesome. All right. Well, Brian's we do a joke. Yes, we should. Alright, so I put two jokes into the show notes. One of them is a rap song, which I know Brian is especially fond of. It's a rap song about working at the help desk. So if you use the help desk for your company, or I guess public support as well, it's by dual core are called here to help and man, it is so funny. It's a video, song, you know, on YouTube, so it doesn't really make sense to cover but I thought I'd throw it in there as a pre free recommendation. What I'm going to actually talk about Auggie, what do you think I see you smiling? Oh, I have to say that that song was just a gem after gem after gem it was it is.

00:37:21 I need you to click your right mouse button. I only have one mouth.

00:37:26 So here's here's the actual Python related joke for us. And it's a tech support thing. Brian, why don't you be the person that needs some help? Okay. Hi. This is a chat by the way. tech support. How may I help you? Hi, I've got a problem. Your program is telling me to get a pet snake. I don't want one. Excuse me. It's giving me a message telling me I need a snake to run it. Okay. Read the message to me, please. Python required to run the script.

00:37:55 That's terrible. And it's terrible. terribly good is what it is. Yeah.

00:38:00 Hey, I wanted to add some humor as well. I just saw I saw this on Twitter. It was a quote from from

00:38:09 I don't know how to pronounce that name Bayern brand and Bayern quote from Bayern Hobart, running a successful open source project is just goodwill hunting in reverse, where you start out as a respected genius and you end up being a janitor who gets into fights.

00:38:25 Yeah, that's awesome. And it goes right along with the book recommendation as well.

00:38:30 Well, that that's a good way to put a cap. Yep. All right. Well, thank you, Brian. Thank you Yagi. Thank you for having me by one

