00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 218. Recorded January 27 2021. I'm Michael Kennedy membrane rockin I'm Brian, we have a special guest, Jeremy Tanner. Welcome, man. Thank you. Thank you for having me. Yeah, it's really great to have you here. You know, we've got to talk a little bit at conferences and stuff. And now that we just don't seem to have conferences in the world anymore. We're gonna have to like drag you into our world to actually get to catch up. It's good. I needed I need a tiny bit of that Portland fix. I love being up there. But I mean, the entire Pacific Northwest, but Portland in particular. So yeah. So where are you in? I am in Austin, Texas. He's in the Portland over the South. But thought that was? Oh, yeah. Nice. All right. Well, maybe real quick. Tell us about yourself, Jeremy. People who don't know you? Absolutely. I like motorcycles. I like suede shoes. I like smoked meat, like Python. I'm currently working in developer advocacy at equinix metal and living in Austin, Texas, raising two awesome tiny copies of myself and trying to sort of write it out while the world is melting. I assume like everyone else's. Yeah. You know, we share a lot of interests like you and I both through motorcycle riding and just a sidebar, like the ability to just jump out on a bike, get away, cruise through the mountains, and just pull back into the garage and have you know, somewhere outside of your four walls a really cool experience. Like that's a really neat, neat thing to do when you're otherwise you're stuck at home. It's we have there's so many like technology guardrails, right, like turning your phone screen to grayscale. So it'll be less enticing turning off your notifications, whatever else. But yeah, the really nice thing about riding a motorcycle is the the guardrails aren't there, and you absolutely have to be paying full attention. So it's not Oh, I'm also thinking about something else. You're like, Well, do you not want to die? Then? Like, watch the Watch the road, be aware of everything? And so it forces everything to the background for however long you can manage it? Yeah, that's such an interesting idea of like, I'm just going to put the world out because I really have to focus on this situation on this curvy road rider. Fantastic. All right. Well, Brian, I believe you have the first item. Something is this about laundry? Or what is up here? constant folding? Of course, yeah, laundry? Well, I do like the little little animated slop holding something. That's nice. Um, no, I brought this up. Because so there's, it's an interesting article about constant folding. So constant folding is when a language replaces your constant expressions at compile time, rather than computing them at runtime. So if I say something like, you know, 24 times 60, or whatever, it'll just replace that will let me Did you just say compiling? Yeah. When I when I compile, like, what does that GC p p y JPY? Like, how do I know? I mean, this is a misconception I think a lot of people have is like languages like Python don't actually get compiled, they do. Well, there's the bytecode compiler, right.

00:03:01 And I, and that happens, I mean, for a lot of guests, if you just have a script, that's just one file. That'll happen every time you run it. So that doesn't really, there's not really a pre thing. But if you've got installed package, or, or lots of stuff that gets run for a long time, yeah, the bytecode will happen once, like code conversion cycles that compiling Yeah, I think so. Um, but he just doesn't compile to machine instructions or composite bytecode, like Java or dotnet. But then what happens is it doesn't compile it, it just interprets it from there on. Right. So yeah, I think there's, there's levels, but it's automatic and hidden, which is cool. Well, see, Python, at the very least has this notion of constant folding, where it just come, you know, comes up with your expressions and does it at at the compile time instead. And it's something that I really don't think like, I don't really think about in Python, I definitely think I know what's happening in in C and c++. We got the pre compiler going on. But the it does happen. And you can see it in action in this, this article talks about it, you can use the disassembler to disassemble a bit of Python code and see what it would look like outside of you know, after the conversion. And so something like you know, if you recommend the one of the examples was the days in seconds, is 24 times 60 times 60 in and then the bike, Python will just convert that to what is it 86 400. Now, the I'm bringing this up, like one of the things this is kind of an interesting article about really how it does it. And the rest of the article kind of goes into, you know, the the implementation on C Python of how the folding happens. And that's interesting. But mostly the reason why I brought this up is because I want people to remember that this happens. So if like For this example, it is way better to put in your code days in seconds equals 24 times 60 times 60

00:05:00 That's really clear, you don't really have to comment it much because people can just look at it. But if you were to manually replace that with 86 400, it's suddenly a magic number then and people won't, you know, in the future, you're like, where did this number come from? What happens if I change it, it's gonna muck everything up. So I think things like this are great. I use it, it talks about, it's not just math expressions, things like string expressions to so you can, you know, if you're going to do a, you know, 30 different dash marks to print across the screen, you can say, like, dash, you know, the dash character times 30. And Python will just convert that for you at bytecode. Time. This, yeah, yeah. I just checked it for strings. And yeah, it definitely says, you know, the final result of the calculation of a bunch of constants involving strings is the answer. Here, the benefit is, if it's always going to be the same outcome, why computer every time you run that function, or do an import? Yeah, and there's some size optimization that happens that Python realizes that some things are so the, in the article talks about the some of the constraints. So if you end up with like, you know, a 4000 character string after doing it, or you know, I think they found the the limit was, it'll go up to 40, days six, but if you make it 4097, it doesn't do the folding at that point. I don't think you have to memorize that it just know that Python does has some optimization, where it says, if the pre computed value is too big, then don't worry about pre compute. Do it at runtime. Yeah, that makes a lot of sense. Perfect. I like it. And you know, it's another cool chance to just play with the disassembler. And understand that a little bit better. Germany ever played disassemble things. No, but was appreciated that the it was a way to avoid a little of the magic number disaster, where head looked back and reviewed a bunch of I think, was physics code. And so often there will be like, Oh, if you're, if you're a domain expert, and you're like, and you're familiar with nuclear reactors, then yeah, you'll you'll know, you'll know why these pieces are here. I need these please name them things. Yes, exactly. Here's the the number of moles of or whatever. And chemistry, like it doesn't make any sense, right? So if you kind of do a calculation, but you don't have to pay for the calculation, that's, that's really nice. I used to do this all the time, with the days and seconds, like the seconds and days, because what I would do is I would go to like a date time, I would say date time dot total seconds divided by seconds in days, well, that's how many days it is, until Paul was on talk Python, the guy behind the daytime stuff and says, Do you know, you can go to a time delta and say it has days equal one and then divide the date time, another time delta by days equals one? And it'll tell you the same answer. Like, that's just crazy. I

00:07:46 know, how am I supposed to know I could do that? So but yeah, this is definitely a cool one. And the disassemblers need to really understand what's happening, like these little constants, you know, load const, or name, load const, just get fed straight through this huge sea of sea switch loop. And that's your program. All right, I got one of these I want to bring up is these are fun little tiny examples of using the disassembler, which is a fun thing to do. Because when you if you're trying to do a larger function, and disassemble it, it's going to be more complicated. But it's kind of fun to look at the output of disassembler. Yeah, yeah, definitely gives you that inside view. All right, I stole this from Brian. It's a good one. It's a good one. So this one is called hip review. And pay per view is really cool. I learned about this from pi coders, the newsletter and the ideas that updating all of your packages that you've got in a virtual environment is a hassle and various ways. One way is I could just not set you know, I could not pin the version numbers and just install the latest, right, but then if I tried to reinstall, it just says, you know, those are, those are up to date. Maybe I see Oh, I know that there's an update for HTTP x, I'll do a pip install dash you PIP x upgrade, and it will upgrade it, but it won't upgrade the things that PIP x installed. Even if I asked PIP X to upgrade itself, you know what I mean? So there's like this, the dependencies of the dependencies and all that become just a hassle, though, there's this thing called PIP review, which lets you smoothly see all the available updates, and then apply those This used to be part of tools, but it's now its own standalone thing that just directly uses Pip. So like all good things, you pip install PIP review, which is very meta menu after preview. And then you can just ask it to do things like just run PIP dash review on the on the command prompt terminal, and it'll tell you, you've got this version of this library, there's a new one available. And that's pretty much equivalent to doing PIP list dash outdated, but then you can also just say and fix it. So PIP dash review dash dash auto, which will just find all the things out of date and update them including the dependency of the dependency of the dependency, which is pretty awesome. It'll also let you do this in an interactive way. So you can say

00:10:00 dash dash interactive and it'll say this is out of date. Do you want to upgrade it? Yes or no? NumPy is out of date you want to update it. pandas is out of date, do you want to update it and so on, and you can selectively opt into that. And then you can even come up with constant spile that says, you know, please don't update these automatically. They're stuck in an old version for whatever reason pinned to a certain version. Do you guys think I hear NumPy and pandas and matplotlib. And it's all the flashbacks, right. I think we I think we met when, in before time when I was Anaconda. And so I mean, since this certainly looks interesting, and it's and solving and solving problems. But on my end, still very much, especially for scientific Python bits. conda loyalist, yeah, backwards, both for package management and for Environment management. Yeah, that's a whole different side of things. And you know, conda definitely managed that quite a bit, right. Like it's all about, you can open up your navigator and create your environments and interact with those in that way as well. So yeah, I think this probably applies more to if you're just doing straight PIP or maybe you're thinking, well, Pipi, and V, or whatever the other alternative would be to use something like dependency bot, where it finds those changes, you pin your version, it says there's now a new version, and then it upgrades it. But that's always going through like some external workflow. And this is just like, I don't want to go through that. I just want to right now find the new stuff and change their doubt. Yeah, I tried this out on a project of mine that uses uses, you know, flit and the pipe project, Tom wants to define the couple pinned versions of things. So I wanted to check to see if they're out of date, and I tried the PIP review auto to just auto update them. And now that that PIP has this dependency resolver, it noticed that my project had some pinned and it said, there is a new version, but there's a conflict with your your project. So just be aware. You need to figure out that conflict on your own. So Oh, interesting. Okay. Yeah, yeah, very nice. Yeah, I've recently run into some issues with the resolver. And then, yeah, we fought over that. Nice. All right. Jeremy, what's your first one? keyboards, my first one is keyboards. And so I have fallen well down the mechanical keyboard, rabbit hole

00:12:16 at the clackety clack version.

00:12:19 Just Just like such, yes. So I suppose the Python tie in is first of all, like, Yes, your your keyboard is probably the way that the bulk of the Python gets into your computer. And so as much as we would like to just plug up jack straight into the brain and think code, it doesn't work that way yet. So it makes sense. So I fall into mechanical keyboards, mostly to try and get my wrists to be less hurty. I suppose for our viewers who are watching with their ears in the future, the listeners, if this is on audio, I'm just showing you my hands, I may show you keyboards, but and I'll have to remember to describe those. That's right, have started to really love mechanical keyboards for ergonomic improvements, and ability to sort of restructure the way that they work for my, for my benefit, most of the keyboards that you'll see connected to computers or using that are like a flat bar shape. Use Qwerty which actually dates everything wrong, everything wrong that you could do. Right. Are you do you know when cordia came into came into usage? Yeah. I mean, very clackety. Right. For the the slow down the typewriter. Yeah. But in it was in 1873. And so like Civil War era, like, that's gonna back in, I mean, within 10 years of the first American Civil War, so when

00:13:39 we were still like, settling our disputes with like, swords, on horses, and so on. And just like, there's always a continues to be a better way of doing things and we keep on working towards the better way, like, the layout of keyboards is sort of a vestige of a past time with different requirements. Kinda like wearing pants now, right? Like we used to be going out and seeing people now. shorts. Yeah. Breathe. Exactly, exactly. So anyway, like with the, what what's useful on the keyboards is, in addition to getting ergonomic benefits, you can change up your keymap. Normal keyboards have maybe 100 keys on them or so. But they really have 200, maybe 300 keys, you have modifier keys, you push shift, and you're like, Okay, now all those keys are now all the letter keys are now capitals, the one is an exclamation point, and so on. And taking the key maps are the ways that you can take and change the those keys to what right put them under whatever you want to do. Yeah, if you want to say the switch to Dvorak, or something along those lines, right, I had a friend who taught himself to vorak. But seeing the QWERTY keys was so impossible for him. He shaved all the letters off of his keyboard because it was either easier to have nothing rather than have the wrong thing there. That's a that's sort of what's going on over here. This is a hollow tree is a 4444 key split. And hey, gotta describe that to people. First of all, what is that?

00:15:00 So accompany a keyboard to just keyboard IO has a mayday I think, gentlemen in the Yes, Pacific Northwest also made a hand wired version of this

00:15:12 jessika keyboard to made a mass market version that's manufactured the instead of soldering everything together and ordering the pieces, you can just get a completed keyboard, which is very nice. And so you hit for this keyboard, you're going to operate largely with layers. And so you don't see as many symbols as or numbers here. And so when you hold down, maybe super or function, it's going to change one of the sides, two arrows, change one of the sides to a number pad, change one of the other sides to the symbols exclamation point at symbol asterisk. And instead of reaching and twisting, like you might on a normal keyboard, where every time we thought of a new thing, like oh, that hash symbol that's going to go to this I need to go the other stuff. Yeah, well, you need to add it on in the keyboard keeps growing here, your your handstand about the same position. But when you put your, your ring finger down on the on the home row Z of your of your left hand, the entire right side changes to different keys. And and so the way that suppose the Python tie in there is that most of these keyboard firmwares are written in a written in C, because you have the little microcontrollers under, that's telling what keys what to be. But there are Python portions and so the the command line interface that qm k, this project on GitHub, quantum mechanical keyboard uses is, is written in is written in Python, some of the tools that you're keymaps are sort of always in flux. And so you can evaluate the ways that you're using your keyboard. So Python can help out there to help you make a heat map of Okay, which which keys Am I pressing most frequently? Let me move those to it. Let me move those to a stronger finger. And now again, because we're sort of home in quarantine pandemic time, it's fun to have this sort of escape room, don't get yourself out of it, there's a little bit of a challenge to remember where that new key is or even assembling. You've got key caps coming from one place and trying to find out what's what new features you might be able to pull down in the firmware from GitHub on another and folks are making different designs you can go with split hand boards that center that up into the interview. This is a for those who are listening, RGB KB

00:17:34 saw the like the sun don't you basically have two separate pieces. Oh, and it has LEDs beautiful. And so you have two chunks one free Tanner, you can position them. Okay, yeah. And so it can open up your open up your shoulders open up your upper body a little bit, hopefully make your wrists less hurt. He was the Yeah, well, I used to I've struggled for and I do math for 20 years, maybe 15 years with RSI issues. And it's mean it was to the point where I had surgery on my right hand for carpal tunnel stuff. And I thought man, what am I going to do I did physical therapy. It was really quite scary actually. And I just what I did two things I got a much, much better, more arrogant namakkal keyboard and only use that like I never type on my laptop because that thing is a kiss of death for my hand. And the other one is I forced my I'm right handed I forced myself to become left handed for mousing, because I use my right hand for the arrows and page down and insert and all that and my fingers already doing all that stuff. Might as well for us one of the sideways the I cannot find a good sideways left handed one. Oh, that's so super hard. It's tricky. Yes, I could either go vertical, or I could go left handed and left handed is working super well for me. But I'm using the little Microsoft ergonomic travel and I love this thing goes with me everywhere. I don't go anywhere without it. So yeah, the best way to fix important thing, you're good. The best way to fix it is to touch your computer less. But if we if that's not if that's not an option, so the I mean the other things that are have beat my hands up and I'm trying to be better about our if you hold your phone and you just scroll and you scroll some more and you scroll some more, you can do it with your left hand instead. Or you can try and not look into the look into the abyss so often. Yeah, I've used voice typing, doing a lot of less Doom scrolling now than I used to. So yeah, thanks for less crazy for your setup. You just type on your MacBook or you got some better me. Yeah. Oh, niece's. Oh my gosh. You are full on over there, dude. Yes. Okay. dishes. Yeah. So like the hollowed out like typing in a crater. Yeah, so I've been using kinesis for like 30 years. 25 years. Wow. And similar. I had problems with with my arms. And I was just like, a couple years into my career and I'm like, Oh my god, I finally get a programming job and I can't do it anymore. So but I switched

00:20:00 To the left handed mouse, and, and now you don't even think about it, some people say like, I don't like to switch the mappings, I don't switch the left to right, I just moved the mouse over and use it with my left hand, and then also the kinesis. And then when the when the whole, like, mechanical keyboard thing started, people were talking about that, like, what's all this about? And then I find out that the kinesis has been mechanical for since it started. So yeah, kinesis is definitely definitely interesting one, although I think I want to get a new one because the the the key, whatever the, whatever the mechanics behind it are,

00:20:36 or the wrong color or something, I want to get ones that I have to push down a little harder, because I find that I rest my hands on my keyboard and it'll start typing stuff. So I like to man, I'd like to be more hard to push down. I think there's probably three things that you can do, you can either crack your switches open and put in heavier springs, you can go if you can get a key switch polar and pull out the switches and plug in. depends if they're hot swappable, or if they're soldered down into the board, and so I am not certain how that one's constructed. But oftentimes when there's a if there's a greater investment in getting the board in the first place, like the Ergo DAX ones are hot swappable, so you can take it polar and I have not in front of me but over and over and have been different key switches that I've tried some that are quieter, some that are louder, some that are heavier, some some that are really light, yet eventually you figure out the soul sort of the Goldilocks situation and instead of a keyboard that's made for to sell millions and millions of units. You've got one that maybe are out of billions of people. There's maybe three like it that are just like yours.

00:21:43 Yep. Magnus Carlsen Magnus Carlsen says he has an old airgo Doc's over in the corner right on. Why is it in the corner, don't put baby in the corner desk. Love those wrists. Yeah, the one that I love. The thing I love about this one is it has such short keystrokes. Like you barely have to move your fingers, which to me a lot of these really nice ergonomic ones. I feel like you've got to move them a lot, which I don't know, it's always a balance. This one works well for me. But all of these things are super fascinating. Yeah, there's switches with their switches with adjustable travel and so over it, you can cut probably more than a millimeter out of it going from two down to either one or maybe even point eight and so well. So this is okay you can you can tune it exactly to what you're after. I tried yours, Michael the I have one of those. Whatever that you've got. Yeah, but Sculpt Ergonomic or whatever it's called. But like the it was it's a Bluetooth one and I can't do Bluetooth keyboards, the the Bluetooth two leg gets me. You'd think that I wouldn't be able to notice. But I noticed and I don't like it. Yeah, yeah. Wouldn't it be nice if you could buy keyboards, wires.

00:22:50 And then I suppose we didn't. We didn't talk about mousing either. We talked about like the actual device. But in QMK, that firmware and other keyboard firmwares. If you hold down a button, the other side of your keyboard can become a mouse. And so both any of you keyboard keys can make it travel diagonally or up and down or can be used as click and so you can replace your especially for traveling, you can replace your mouse with being able to navigate, move the mouse around with keyboard sounds awesome. If you could ever fly again, I can see sitting a little laptop on like the little fold down tray. Put that keyboard on top and you're good to actually get some stuff done. All right. Now before we get on to the next item, let me tell you all about our sponsor for this week data dog. Thank you dog for sponsoring the show. If you're having trouble visualize visualizing latency or CPU or memory bottlenecks in your apps, and you're not sure where it's coming from how to solve it, pick out data dog very seamlessly correlate logs and traces across individual requests. And you can quickly troubleshoot your Python app plus their continuous profiler allows you find the most memory and CPU consuming parts of your production code continuously. Just run it all the time. Minimum overhead, pretty awesome. You'll be the hero that got that app back on track at your company. Get started today with a free trial at Python bytes.fm slash data dog or just click the link in your podcast player show notes. Brian, let's talk about logos. Sure. Um, I tried to pull I tried to pull this up, but we're suffering some downtime. There we go. Um, so the there's a article called reinventing the Python logo. And I thought it was it. I thought it was interesting, mostly by the about the history. I guess I hadn't, I hadn't thought about it too much. So the history really is there have been only two Python logos, the original one which I'm not sure when that came into existence, but it's just sort of some It looks like a bunch of marshmallows stuck together or something. It's it's up there like marshmallows. I get like bright vibes library. Oh, yeah, yeah, you're right. Yeah. So it's like white dots and with like black dots around the outside making the Python word and they're really that's it and apparently that

00:25:00 The bet passed for a while. And then the current logo came into into play in 2006 by and it was designed by Tim Parkin and the logo that we have right now. And I was you know, I kind of got the the the Mayan vibe from the Python icon also are the two pythons. But there's a quote from Tim said the logos actually based on a Mayan representation of snakes, which is very often represented only represent only the head and perhaps a short length of tail, the structure of this snake represents the natural coiling nesting of snake, other snake as seen on the side. I don't know. But having having the symmetry also kind of reminds me of a yin yang symbol or something. Anyway, I like I like it, it's good. But the article then goes on to talk to a talk to a you, designer who came up with a possible change and proposed a change in 2020 Jessica Williamson, and it's pretty. Uh, but you know, I didn't really read the rest. I just thought it was curious to think about should we change it? And I guess I'm on the side of kind of like the way it is, but just curious what you guys thought, Jeremy good. Um, I mean, I've, I've grown I've grown so used to the grown so used to the other one, but I try not to be I try not to be a curmudgeon, and, and like new things. I know, I know, Burger King just did their rebrand and, and even though I'm not a not on the Whopper train, like you get something fresh, I suppose. Python even there's going to be more people using it in the future than I've been I've ever used it up to this point. And so you know, what the what the existing folks think is less of a concern if it if it feels newer or more welcoming. Yeah. It pulls people in, and it makes them feel like oh, this is a fresh language, right? This is like one of the most popular, fastest growing languages in the world. Of course, it has this logo. I don't dislike it, I think it's pretty nice. I like the colors. I like the flair. But I feel like those gradients, those gradients are hard to combine. Whereas like this, this sort of flat color, you can put it in with other things. But like imagine, like the thing you're trying to put the logo on also has a gradient, then you got gradients on gradients either, I just, it seems a little slightly less versatile. I like that. So what I would just like to point out, though, is there are like rules and laws about this logo in ways that are way beyond what the normal person would think. For example, I used to have a logo that looked like the main Python logo, but it had earbuds on however, it didn't have those little holes, right. So there's little holes, there's the eyes, it didn't happen to have those. Well, I happened to be on vacation at a beach with my family and got a cease and desist letter from the PSF because I was violating their trademark. Because I used a logo that wasn't an exact, it was an alteration of the Python logo, not the exact one fear. I kind of felt like, you know, it could have been a little nicer rather than a you know, full on legal like you must stop this now or else we just have a conversation instead of started that way. Well, those are one of those things where if you don't if you don't defend it, then they have you have a case that you can you can start to lose it as to where you're like well you never you never made a case of it before. And so you had you kind of have to Yeah, exactly. Don't separate the snakes don't make one snake bigger you can't write when I put my app in the app store for the training courses. I had to go back and forth and prove that my my new logo which is approved by the PSF I actually had permission to do that. And yet have you all looked at what is in the app stores I there there change of colors. They are you know, funky redesigns. They're like these weird things are slightly different shape like this one.

00:28:41 There's just a couple of pages. There's like 15 companies violating the trademark. And yet with these all presently here, I still had to fight for a week with the App Store people who allowed my approval in there. Anyway, exercises. One is that is not okay. The one of the barbell? Yeah,

00:29:00 totally not good. They're all not good. And I'll put the link in the show notes for those of you guys who can't see it. But boy, it's long story short, there's a lot around this logo stuff that is just Oh, that's cute. Right? It's quite a bit of stuff around at least. Yeah, well, in you know, they're their rules aren't really that complicated, though. They're mostly No, the logo has to appear in the same colors. And it has to it has to be visible and in its hole without something in front of it. So you can't shift that it can't be squished like mine. The perspective was slightly off for some reason. And that was also part of the M. And they're also fairly good about like, you can send stuff to him ahead of time and say, This is what I'm thinking about doing this. Okay, and you can get pre approval for stuff. But yeah, so now mine is approved, and I feel much better about it. But I had no idea that he just came out of the blue. So there it is. But if anyone wants to start forcing those, they should go have a look at the app stores. They're out of control. Alright. What's not out of control is somewhat related.

00:30:00 api.org is pretty awesome, right? So we go to pi API and our use PIP indirectly behind the scenes goes to pi API and does all of its magic. You pip install this, install that. And it would be great if we could put use that as a mechanism to communicate across teams or companies, right? I wouldn't team built some sort of API interface layer and some other part wants to consume it at your company. But you probably don't want to put that in the public repository. It might have secrets, it might just be inappropriate, all those kinds of things. So it would be nice to have your very own right. Yeah, yeah, absolutely. Yeah. So introducing AWS lambda pi API. So it takes pi pi cloud, which is a way to do self hosting pi pi, basically a private repository, but then lets you run that over AWS lambda and a serverless. way. So it's basically free unless it's being used. And there's a ton of free requests, you get an AWS lambda before you get charged, and you don't have to have servers to maintain. So you can basically set up peipsi cloud to run automatically as an AWS lambda, which then you can lock down. That's pretty awesome, right? Yeah, yeah. So yeah, so there's not a whole lot to talk about it

00:31:13 acts like like a caching server as well. So can you get, you probably could you probably could do that with ipi cloud. Okay. It's just re hosting pi bi cloud, which, Yes, it can. I don't know for certain but so you're saying like, you'd like to just set that as the global destination? All right. I want to start my rounds. Yeah, you want to pull the public stuff in plus, like sort of merge your private stuff with it? Right. Yeah, I haven't tried that. But I suspect pipey iCloud does allow that do the security wise, secure wise, it says the the session keys are auto generated and stored in a secret server configuration contains those generated on the fly, the lambda functions can be limited to access the only what it needs. And then of course, you can configure a pipeline cloud to display nothing to non authenticated users. So you basically have to log into it, and then you're good to go. So I think this is a pretty neat solution. I mean, you've been able to do stuff with pi pi cloud already. But being able to put it in the cloud for free at scale is pretty neat. Yeah. All right. Next, Next up, we have not just the basics, but beyond. Yeah, so if you've read some of L Swaggart, other Python books, there's a there's a new one, I believe, dropped January, that's the month that we're in, can can grab from no starch press, or can give a look over at the at the URL above. And so many other books and references are like, here's how to do the thing go on, here's how to do the thing go on. And when looking through beyond the basic stuff, a lot of it is a look through the Python lens, but at being a better developer, and being a I don't think he said, but for myself definitely like a less feral developer. And so, so so often

00:32:57 give us your interpretation of that that's like you're out on your own. you've figured out how to make it work. But you don't necessarily follow the game raised by agree. Yeah, raised by technical raised by technical wolves. So, so often, when you think you That's awesome. When you when you join, when you join a team that's been either working together already, or has been in industry for a while, there's those things that you don't know that you're doing that sort of make that make you look less polished, whether that's in a in a code interview. And so when I elbows over, what's what are what are reasonable variable names, what our code smells, talking about, like me the duplicating code, or what are so you can write something that works very easily. But here are things that it's so much, it's going to be so much nicer to hear from Al like, Hey, you probably don't want to do this, as opposed to hearing from a teammate and a code review. Like, what is 86,000? Like, oh, that's the number of seconds when you multiply by 60. And you do the Yeah, I guess back to the back to the magic number earlier, like, Well, why is why is that bad? I did the math already. It doesn't make sense to do the math the extra times, but you like well, someone's going to have to come behind you and read that later. And no one hates you as much as future you hate to you because it's probably going to be you who comes back to you and reads that later and doesn't remember. And so, yeah, chapter after chapter. It's just so many things that are like, oh, again, like code formatting, like if you if you haven't been using formatting and linting prior and makes it so much easier to interact with other folks and certs have sort of helps you knock those rough edges off that aren't necessarily like this is how you Python but this is how you become a good

00:34:43 open source contributors citizen or these are the things that you need to know to work but you really didn't but you didn't know you needed it. Right. Right. Even probably things like continuous integration and stuff you should probably know or get or or prs or all those if you could have been doing on your own like you can in some organizations

00:35:00 See what many people don't create prs for themselves, they just check in and carry on. Right. So to those kind of things, yeah, this is great. And you can read it online or with the link in the show notes. Or you can go by it. Um, yeah, it's on no starch. You can either get like the E book you can get printed copy, whatever your whatever you're into. Yeah, no, I think I was just looking through the code smells one even people just just review that anything else? This is some pretty good stuff. Yeah, I love the idea of code smells so much, because it's not wrong. Just kind of turns your nose. I got you. This isn't. This isn't so good. But it does work. Yeah. One of the big ones that I run into a work even as a lot is commented out code. People comment something out, and then check it in. And if it's if it's dead, delete it. Well, we might need it later. That's our version controls for we can go back and get it later. If you really, really, really don't lose it, tag it or something. Or maybe create a branch with a name, but just don't leave it in there. Come on. Yeah. Yeah. Or worse. don't comment it out. Just stop using it. But don't delete it. Either. or dead. Yeah, dead function or dead class. Oh, my God. Oh, yeah. I'll see that. Occasionally. Somebody will rename a function like, function foo old. Why did you do that? Well, we're not using it right now. There's better ways to pay for that hoarder type code.

00:36:18 I just have 23 cats. It's gonna be all good.

00:36:22 All right. Oh, awesome. Well, so let's talk about just a few extra things that he wants to throw out there, Brian, anything else? We get a feedback. I'm sorry, I can't remember the guys name. But in Episode 208, we covered PIP CIL, which is a way to list out your dependencies, but only the top level ones and, and I made a comment that be cool to have this but not have it listed chill because I only installed it for this. And so yeah, he added a no chill option. So that's nice

00:36:52 and aware PIP shell. And then just before this, I was on these Microsoft developer twitch channel. So that's a that's a fun thing. The Microsoft developer twitch TV, they do it weekly. But don't watch them because you'll collide with watching us. So you know, oh, yeah. Well, they need to move their time or something.

00:37:14 It's both recorded. It's all good. It's all good. Oh, and now Yeah, piling says he's been using crypto so cool. Yeah, I love the idea of it. But I haven't yet made it into my workflow. Jeremy got a quick extra as you went through out there you covered I think the I think the other thing was Brian's Twitter I looked at it was either today or yesterday that there was the the joke about the machine, the machine learning Twitter bots. And, and yeah, if like any of those that that can be cooked up. Always a good time. It made me think of one of the previous times I was in Portland at one of the conferences. There was both there was talks on Nate Smith had made prosaic, which is a Python, Python for doing cut and paste poetry. And so you have any corpus of information, you can take and chunk it down. And that's paired with a Twitter bot. So I went to look back because it's been a while I have a Twitter bot that's still running, just called hitch underscore Haiku on Twitter. So every hour on the 42nd minute, it takes all the all five books from the trilogy and pulls a five syllables, seven syllables, five syllables out, combines them all together. And, and puts that into the world, I think about 2524 25,000 times at this point. And the machine learning is more wisdom of crowds, like I'll get notifications like, oh, someone's put favorites on them. Maybe Maybe it happened upon a good one in the in the large pile of terrible one. Fantastic. You have to put that in the show notes. The machine learning was funny, I just found out that like there's a bot that if you say machine learning, it'll retweet you. So I tried to install machine machine learning as much as I could and have it retweet. You know, that's

00:38:52 fantastic. You're gonna be able to use the bat.

00:38:57 And then I suppose also on on the Twitter front. Yeah, we just told you not to not to scroll forever. But my, my favorite client just got a refresh. If you use iOS devices. The chat bots, folks have put out a tweet button number six yesterday. Who Nice. Yeah, that's cool. Yeah, I got to explore more Twitter clients. I'm still just a web browser kind of guy. But it works for me. It works for me. All right, I got a quick couple of releases for everyone. Django, three, two alpha one was just released. So that's pretty awesome. A bunch of cool new features coming in Django, you can check those out. My Pi Zero dot eight has just come out and that has Python three, nine support PIP 21 is out. And that drops Python two support. So that's also a good one more step away from legacy Python. And then real quickly, there's elastic, Elastic Search, they change their open source model, which is a very, I'm not gonna say is bad. I kind of support them in this path, I think but it's a very big deal. You know?

00:40:00 AWS and some of the other browser vendors are like, basically selling elastic as a service Elastic Search as a service. And they're like, wait, you just took our stuff and are selling it to other people? Where's we have a corporate sort of thing. But we have no relationship with these people. And that doesn't seem real fair. MongoDB had exactly the same problem. And so they adopted the same license the SSD, or something like this. Basically, it's still open source, unless you want to resell it as a cloud vendor, then it's not. I don't know, how do you guys feel about this? Open Source business models are hard? Yeah, yeah. And it's really hard to put the to attempt to put the genie back into the bottle after and so I think the, the part of that was unsaid was that Amazon said, Fine, take your toys and do it and sell your cellular service. But we'll just fork it and continue to do the thing that they forked Out with the old model before, you know, before it's changed, it got in there. And that was that right? And that was similar what they did with Mongo. I think they basically said, we have a thing that is API compatible at, you know, three, six, or whatever level it froze that right, and then they went on from there. Yeah, it's tricky. I think for some reason, elastic has a relationship with Google Cloud and Azure. And so they don't have that challenge with Azure, but they have no relationship with AWS. So here it is, anyway, it's don't want to go that long. I just wanted to throw that out there as something people should be paying attention to. But people that use it internally or on their own servers. There's there's no problem with, right. Yeah, yeah, that's my understanding. You guys ready for a job? Yes. Always. All right. Brian, I feel like being a manager today. Can you be the developer? This comes to us from Kate maddix. The oil, it comes to us via a guy named Wolf, send it over. Thank you for that. And it's written by Kate Maddox. So all right. You're the developer. I'll be the manager. So I have good news and bad news. Oh, what's the good news? I've discovered that the five second rule only applies to food. Fantastic. What's the bad news? I dropped our tables.

00:41:58 backups?

00:42:00 Oh, boy. Well, did you hear that, like I made I probably have this wrong. But I think that the five second rule, I thought was 10. Second Rule. Depends, varies by age. You know, if you're a little kid, and it's candy, it's probably good 32nd rule. But I think it used to be a lot longer. And I think that it came stemmed from Gaviscon, or at least like or heard this story that gangs kind of had a rule about how long he would eat, how long after how many numbers of days, he would eat meat that had been left on the floor, or left on the ground, or something like that. So you know, probably not good to eat meat that's been laying around for a few days.

00:42:39 The three day rule? Yeah, that's pretty short. Isn't your magic number for number of seconds by number of days by cleanliness of floors? Right? It's 150,000 seconds. No more than that. Come on.

00:42:51 Oh, boy. All right. Maybe somebody can correct me with the real story. So yeah, that's what happens on the show. We throw out bits of information and our listeners back us up.

00:43:01 Thanks. As always, Jeremy, it's great to catch up with you. Thanks for being here. Thanks for having me. You bet byte.

00:43:08 Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes that Python bytes is in B yt. S and get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

