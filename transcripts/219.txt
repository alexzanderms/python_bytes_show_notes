00:00:00 Hello, and welcome to Python bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 219. Recorded February 3 2021. I'm Brian Aachen. I'm Michael Kennedy. And I'm Jennifer stock via Yay. Yay. Welcome, Jennifer. So great to have you here.

00:00:19 Thank you. Yeah, it's been great. It's good to have you here. You know, we had you or I had you as a guest over on talk Python. And that was really fun talking about data science stuff over there. And now, we're happy to have you here on Python bytes as well. Yeah. So you really quickly you were just tell people about yourself before we jump into the topics? Sure. Um, yes, I'm Jennifer, I work at law Bible as a lead data engineer on a really small team of three. But we're a bigger, bigger data team for research insights, as well. And we've been spending most of our time working on engineering, meeting graduating to like, include more data science tasks. Well, they are looking forward to doing more of that. Yeah, sounds really fun. I, Brian, you want to kick us off? I mean, I heard that you're supposed to use virtual environments and not mess up what you're doing. But if you don't want to, I guess you just just don't do that. Well, I use virtual environments all the time. But there was an article, so I wanted to cover this. And there was some discussion online. An article from frost Ming titled, you don't really need a virtual environment. So what's the story there? Yeah, yeah. So the there's a little hint in the slug of the URL that the slug is introducing PDM. So it I don't know if he's really saying that you don't need it. But PDM is stands for was a stand for package. Python development Master? Well, that's cool. I think I want to put that on my business card, my Python development master. Anyway, the so let's just go back up a little bit. This, this is kind of a neat tool. It's sort of poetry like, but it says it doesn't use virtual environments. It uses the package, Dunder package directory. So what is that? So there's, we do have this problem with virtual environments? And I do, the main problem, I think, is it's hard to teach people. So if you're teaching somebody new, and you want them to install something, you kind of have to say, Okay, well type Python dash m, v, and v, or, you know, Python dash m, v and v, space V and V. And then you have to activate it. And in the Mac, people do this, the windows, people do something else. And then after you've activated it, then if we've got requirements, you need to install them or install the requirements. And, and I, you know, that's not a fun way to start teaching people how to use Python. So I think we do need to solve that, but I'm not sure this is it. But there's there well, like no, GS has a similar problem. But they don't necessarily have as much of a challenge because they have this like directory structure, which I think what Dunder pi package is trying to do, right? Like, if you have a node modules folder, some directory up and you do something with NPM, it just goes up to a finds when it's like, well, there, there's the top of the project, we're good. Yeah, so there's, that's, that's kind of what so there's a pepp 582, which will link to that, um, kind of has that has this, it's proposing to have this Dunder packages, package directory, and have that sort of thing. So if you're, if you're in a directory with one of those around, and you do a pip install, I think this is how it works either supposed to, I think it's just going to install stuff there instead of in your global one. So I actually think this would be cool. Even even if it's only used for teaching.

00:03:45 It would be a cool thing to have, because also you could you could possibly zip this whole thing up and give somebody a directory, and they'd already have all the packages and everything that'd be testing. I wonder if that's kind of similar to how conda conda works. Can I use conda ends instead? Yeah.

00:04:05 It feels easier. Yeah, you probably live way more in the conda world than the PIP world, right? Yeah, I think conda isn't sort of an intermediate. Right. So with conda, you do have to say conda? activate. Right? Yeah, manually. But yeah. You don't have to be in the right place. Like with Pip, you say, Yeah, exactly. You say I have an environment called this. Let's roll, like activate that and then go, right. Where is this is, it's like I'm in the right location. But I don't want to have to talk about environments. And it just happens to be that that environment has a directory structure that Python will know about. Mm hmm. Yeah, yeah. Yeah. So there's another another part of virtual environments. It's a little icky. Is that I guess it's time you know, maybe it's that if you if you create a virtual environment, you kind of tie it to a particular Python version. Yes. And if you update your Python version, then your not your virtual environments aren't

00:05:00 pointing to the new one. And I don't really know, I don't know how to actually I don't deal with that I just delete the virtual environment, recreate it. Maybe there's a really good at doing that. Because you every time I brew upgrade my Python four major version, it just stops working. I'm like, Oh, come on. Here we go, you know time just time to erase everything and start over. Yeah, so the pep 582 might fix that also, because you could just I don't know if it fixes that, because it's still in the directory structure. It does have Python versions in the directory naming things. So I think for minor upgrades that would work, but for major ones, like going from 392 310. I don't think it would help you there. I don't know. Anyway, I don't I don't know enough about 582 to comment on this. But I do think it's cool that PDM is around so that you can play with the Dunder packages to see what it's like. However, the workflow within PDM is way more complicated than virtual environments. So in my opinion, so I don't think that it's going to fix the newbie problem. But yeah, it's still that's that's what I feel about with all of these things is it's like it solves two problems. And it adds three years like I'll come on. Do I really want to trade those? A couple comments from the the live stream? I length as Condor rocks mostly? So really, Jennifer? Yeah. And then yeah, yeah. And then tend to the Nelly says, there was a way to set up kind of thing. So it automatically switches to the conda invite environment, see the environment yamo file? I don't know anything about this. Have you seen that Juniper? I have not used that. No. It sounds like we should check it out. Cool. Yeah. Thank you, Daniel. All right. Well, I guess we should jump over to the next one. Something else that's really helpful is cookie cutter, right? So often, we want to go and say, Well, I want to create a project. And I don't want to just start from File, New Project, I want to have a certain structure, I want to maybe have some of the files there. So for example, if I go and create a new pyramid web app, I can use a cookie cutter to generate that. And it'll say things like, what template language do you want to use? Do you want to use SQL alchemy? And you answer a couple of questions and it generates project already integrating those things with the right directory structure and the right extra dependencies or whatnot. And that's cool, right? So I think cookie cutter is really taking over as the primary way of creating projects that are structured, it's not just Python, you can even create like Atari 2600, assembly language projects, and c++, other weird stuff like that. Anything that has to do with projects, just here's a bunch of files, replace some conditional include others, and so on. That's what cookie cutter does. And so that's not what I want to talk about. What I want to talk about is this thing called hoppier. Have you guys heard a copier? I have? No, I have you? Yeah. Okay, cats have not heard of this one. Yeah, cookie cutter is cool. And it's way more popular than hoppier copiers, pretty relatively unknown. But I think it's worth checking out. I don't know that I'll replace what I'm doing with cookie cutter with copier. They're not interchangeable. They should be, that would be a great feature. But I don't think they can share each other's templates. That said, the thing that is interesting about copier it primarily is that it allows you to upgrade working with projects. So if I go and make a decision to create a some web application, or whatever else application even works for data science, like structuring notebooks and whatnot by make a decision, and then I change my mind after I've already worked on it for a while too bad. You don't get any choice like it, you throw it away. When you create another one and you kind of diff the files. Yeah, well, what's the difference over here, I should include this thing. But with copier, you can rerun it on the project and make changes and apply those changes in different choices to an existing project you're working on. That's why I think it's interesting. That's cool. Does it have like a prompt like thing? Also, because cookie cutter asks you things? I believe it does. Yeah, it will ask you questions. If you look at it, it has. Yeah, it absolutely has prompts, I can't really see a great example here. Because it's it doesn't use believe cookie cutters like native Python that you program it in the scripts are Python, and then they drive arbitrary text files and whatnot with replacement, then it's kind of like Jinja. This actually uses YAML. So if you look at an example, somewhere, I'm not sure exactly where good example is. But basically, you set up a yamo files. And the yamo files have different types of prompts and questions you can see here, I want to ask for a password and then confirm it but don't show the output. So there's a lot of configurability and interesting things like that. And then if you rerun it again, it'll say, here's the project structure that you have. Here's the project structure that we're creating. And if it runs into a file, it'll say, this one already exists. Do you want to overwrite it, use the one we're about to generate things like that. So it's pretty neat. I think that's it looks pretty cool. I definitely want to check it out. Yeah, it's, it seems a sort of a slightly different problem than cookie cutter but it's I think cookie cutter is the right conceptualization to have when you think about it. Yeah, I did start using I created my own cookie cutter system.

00:10:00 data sciences things are working on. And there's a data science because it exists already template exists. But it wasn't completely sitting money. So I made my own. And I was going to make one for projects in our team because we do some like one off data analysis project, and then discovered that GitHub now has, you can make a repo with the temp as a template and use it as a template in GitHub. And then you just clone it and name it something else. So nice. That's solved part of everything if you want something different than right. So this might be really good. But yeah, that's right. So I remember if you go to your GitHub repository under Settings, there's a checkbox that's off by default says this repository is a template. That's what you're talking about. Right? Yeah. See, if you set up like empty, you can set it to set your file structure. It's got nothing about a guest address. And I think that you're setting up in this one, I'm not what you set up in the GitHub template is just the file structure, really. And if any files, you know that you want to pre populate with any files. But yeah, see, that's what I was so lucky to get that couldn't get it would have been overkill for this. I see. Yeah, I never really thought of those two things have been the same. But you're right. They're basically the same. Because normally, when you fork a repo, it's like, well, now you can contribute back. But the templates are just now you start from here, and it's not really related back. Right. Yeah. Nice. Well, yeah, that that brings us to your first topic, right? That's about Yeah, yeah.

00:11:31 I was thinking of data science in our team, we, we had a data science project

00:11:37 that we started a couple of weeks ago, and it had a deadline. So we weren't going to make anything particularly pretty, we just wanted to get something analyzed and done. So we were using lots of tooling that we hadn't used before. Because we're using massive data set, I think it was a couple of gigs worth of text. So we had to use Google's AI platform notebook, which is just Jupyter Notebook on Google Cloud. But you can you can have different sizes of your machine, you can have as many cores as you want different types of machines if you want. And it was just one note, before you do, we thought that would solve the problem. We just have a couple of these chords in our notebook on that, and it would be magical. But it wasn't. And we're trying to apply the pandas apply to this huge data frame. It just was not was not working at all. We even had the process bar on the bottom, like enter the cell and it would take I think there's like 10 minutes to do. And it was still on 0%. Wow.

00:12:37 Okay, I have time for this. Yeah, don't have time for this. We're already on a deadline. And it's like this isn't working. And then went over to terminal and just checked, like, top to see what what processes are going on. And this was like one Python thing. I thought, Well, yeah, we could speed that up. Let's see what we can do. Even though you have a ton of cores and a lot of high end machine. It's still just single threaded, basically, right? Yes, it is. selected a few alternatives. And don't want to get too much into I think some people were suggesting some task related modules you could use like I think Presta was one. But there was it didn't work instantly for me. So I looked for something else and found

00:13:21 your 30 seconds library work for me.

00:13:26 I can't figure it out. Bennett's thought again. Find something else. Yeah, I tried.

00:13:30 Pandora low, which just paralyzes any pandas apply function. Do you can tell it, you can tell it if you how many cores you want to use, you might not want to use all of them. And it's not like a linear or exponential improvement. Is it like doubling your cores is not necessarily hard or time Yeah, there's some overhead. And you can tell it how many cores you want to use. You can also opt I think, if you scroll down, those you can also add like a progress bar to it. And the options that it's an idea got some benchmarking there as well. And it's just really easy to use. So that solved our problem again, like the whole project was just quick and dirty. But to get it done quickly. This is great. And then going over to terminal and doing top again. It's like all Python just had the bad part of it. Yeah, beautiful. And by default, if you don't, you can specify the number of workers but if you don't, it's just the number of CPU cores. Yeah, Orban. Um, so just quick question looks like this is um, it says it's mostly around the apply function, what is apply, dude, as a reminder, if you have a if you specify a function someone and then when you when you hit apply, I think it's an example it's actually a bit further down of the of the kinds of applied etc, you can have. When you'd normally apply funk, you can apply a function to that whole directory of sorry, to that whole DataFrame or to a specific column within a data frame and

00:15:00 So any function you apply will be column will be row wise in that column. Okay. So the function only has to work on a single row, essentially. So anywhere where you'd put apply, if you're using parallel, it just panned around, you just replace apply with parallel apply. And then it was nice panelizer function. It's very cool. Yeah, it looks super cool. Daniel asks, oops, not that one. This one. Yes. How does this compare to desk? No.

00:15:29 I used to ask a lot, either by think desk can be set up to run in parallel on a given machine. It can also be set up to run in a distributed cluster, basically. Yeah. My mind thinks that's it. Yeah. My first impression is probably like, this is about I've got to apply this function to every element. I want that to be fast and simple. Let's just do that. Yes, that's my first thought.

00:15:58 The other option I used or looked at for 30 seconds was to better and I think that is a task based module, I think. But I might be misremembering, and then somebody else said, that apply is like map in base Python. Yeah, absolutely. Yeah. Very cool. Brian, what else is cool? Before we get on the next thing? What is if I wanted to learn pi tests? If I was Jennifer's team, maybe I could get a book on pi test. Right? So this episode is brought to you by us? Yeah, so I highly recommend a book called Python testing with PI test. There's a small glitch with it, though it was written in 2017. So if you go to pi test, book, comm, there's a bunch of a rata that will help you. There's some just some minor changes, I forgot to pin a version of one of the libraries, stuff like that. So if you go to play test, book, calm, that page has some data that helps you through learning pi test. And with the book. There is a second edition on its way, but it is a long way out. So don't wait for it. There's a lot of work. Yeah. So I'll go over and talk by then trading, we're working on a bunch of courses. Breaking News never mentioned this before, but we may be having a dask course coming. So just just so you know. And Damon also says, probably more experienced than definitely me, or Brian, the desk has more features. It can do chunking on the DataFrame to work around the ram size limit, for example, and whatnot, which is pretty interesting. And also notice down over here, was it this option, use memory Fs, it will actually use this memory filesystem thing, which sounds like it's good for lots of data as well. Good. And I I haven't been out much I used to love to go out get a milkshake or something. But you wanted me to use ice cream instead? for Python? Yes. What's going on here? Yeah, so actually, kind of love this. There's a there's an article from Korean Tran, stop using print to debug in Python use ice cream instead. And I think we've covered a couple others like other print alternatives. But yeah, I went and tried this. And it's pretty cool. So with the with the new f print stuff, you can there's, I forget when it came in, but you can do an equal sign to to print it, it prints a nice, like variable name or whatever, whatever you want. And then the value of it next to it. So it's nice, but it's still a lot of typing. So if you want to print, print something nice, you know, type, it's it's a lot of typing. It's not tons. But when you're throwing debugging in, you're probably stressed doing it quickly is good. So ice cream is just a way to do this faster. So ice cream is a instead of typing print for your debugging output, you type IC. So it's all fewer characters. Yeah, characters, no curly brackets, you don't have to do quotes. It's just IC and then and then you give it whatever object or expression you want to print. So that's cool. That's it. So even just that, that it's worth it, it's less typing, I mean, you do have to import it. But there's that. But there's other stuff too. So you can, if you don't give it any arguments, it logs. It's kind of like easy D flow control debugging, without having a debugger. Because if it every time it hits an icy statement without without any arguments, it'll by default print, like the file and function in line number where it's at. So you can kind of trace through your stuff. So that's nice. If you want to have that tracing, be part of all of your statements, even the ones where you pass something in, there's a way to configure that to, which is very nice. Oh nice. You can custom prefix, which is kind of it's just like super powerful. I'm totally going to use it for this.

00:19:48 So the example that they have is, is instead of you can of course you can just put a string in or something but it's a callback. So you have a callback function getting called so you can use that there example is to

00:20:00 inject the date time, which is kind of neat. You can inject the date time and your print statement. But I was thinking you could use that to encode system state like which users logged in or whatever other systems that you kind of want to track while you're debugging something, this would be really cool to do since you use a callback function.

00:20:20 A couple other features with it, it doesn't go to standard out, it goes to standard error by default. So it's not cluttering up your output if you're storing output somewhere. And then, one of the other things, I'm glad they like this article list, this is a feature. It's not a print statement. So when you want to clean out all your debugging, you can just search for all of your icy lines and clean those out. You don't because you might have print statements that are supposed to be there. And you don't need to clean those out so that you could even sort of cancel it out with an import statement. just define import, define it to be a function that takes whatever and does nothing. Yeah, yeah, that's really cool. So people who are listening, you know, you say if I were to say I see of a function call, like plus five and give it the number four, the output would be IC colon, than actually plus five with the argument values, colon the return value. And so it's a really nice ways to just printing nine and 10 it prints I called plus five with four and got nine I called plus five with five and got 10. And it just it sort of summarizes the the debug information a bit better. Jennifer, I think this might make sense inside even a Jupyter Notebook. Yeah, I think it was just I was just thinking this is even less typing then if you use f string. Yeah, yeah. Yeah. A little more powerful. And like Brian says, you kind of know, it's intentionally a debug, you could even rename you know, import I see as debug just, like make it really clear if you really wanted, right. Oh, yeah. Three extra lessons type. Yeah.

00:21:51 Cuz I'm not sure if I saw I see in my code, you know, without being familiar this that I know what that's about. It's your code pun. Yeah. Are they making a pun? I see. I see my arrow. I see. Yes.

00:22:06 They may be. And piling is a fan of the name and brilliant name. It's pretty clever. All right. Good one, Brian. So the last two, by the way, the parallel panda parallel, had a great visualization. This one has some great visuals. And this next one I want to talk about, you know, I think might be what part of the reason we love these things. It's like they communicate their value. So clearly this thing called HTM x, high power tools for HTML. So Brian, I know you fall into this realm. I do some of the time as well, Jennifer, maybe not sure. If you're going to write some interactive webpages, you really want to drop in and write a ton of JavaScript and do all that interaction by hand, or would you rather just have it like magic, its way into interactivity. And so that's the right way? Yeah, who doesn't want that? Yeah.

00:22:53 So this is kind of what this is like. Normally, if you have a web page, you have two options, you can have a form and that form could like post bacc and submit some data. And then you could write some JavaScript. So if I click on some element, something happens. But what this does is it lets you to go to almost any, any element in your page, a picture, paragraph, whatever. And you can say, if you interact with this, here is a CSS transition to run. Here's a WebSocket call to do here is a Ajax JavaScript call. And then it does something in reverse. So what I could say, for example, is when somebody clicks on this picture, replace it with whatever HTML fragment I get back on the server that I told it to call. So the picture could be like, like this for this bit of data report. And then what it does is return actually the HTML for a graph. That's like a live graph with the data prefilled. And all you have to do is touch the picture and teach the server how to return the HTML. And now you have this interactive page that's like, live with animations and stuff. It's super cool. So let me show you probably the best way to see this is through an example. For example, there's a button if you just include the script, that's all you got to do. And you say button, instead of having a forum, you say h x dash post, that's the HTML x thing, you give it a URL, and when you click it, it says call slash clicked. And when it comes back, replace what button is the outer HTML like button and everything in it with whatever you got back from the server, okay? And even has a haiku in here, which is pretty cool. JavaScript fatigue, longing for a hypertext already in hand. But let's go. Let's go look at some examples. These are cool. For example, let's do lazy load if I go over to lazy load, which is a little slow, so probably, it's lazy. It's quite lazy. It is indeed.

00:24:38 Maybe, well, here we go. So we come over here. And

00:24:42 if you just scroll down, you can see like it automatically loaded in this by refreshing See, there's a little action boop, boop, and then off it goes. And all I got to do is say is this image has this indicator. Here's the image to show while you're loading. And then what you want to do is just show whatever you get from slash graph

00:25:00 That's slick. And like that's literally what you get have to write. Let me show you another one. I might do this just for the lazy loading. That's great. I know he lets go do yeah, look at the active search. So over here, I can type j, e, hey, there you go. And just as you type, all you got to do to like type in this little text box and have all these search results come up lazy is just say, here's what you call HTTP POST. And the trigger is the key change, there's even a delay. So as you type really fast, it doesn't go insane on the server like weights. Really, really cool. little indicator. And then if you notice at the bottom, there's this thing you can show. And it shows all the requests and the responses that have gone back and forth. There's like a little debug toolbar here for the whole Ajax interaction. Oh, sweet. Isn't that sweet? Yeah.

00:25:47 Gosh, I don't remember. I feel like maybe, maybe somebody, some listener told us about it. Or I just, I ran across it on Twitter or something. I feel like I found it from the community somewhere.

00:25:57 But I don't remember where but I'm, I'm excited about this included JavaScript file, but one line, and then it becomes this cool interactive thing all over the place. So yeah, definitely. Yeah, totally can use that. Yeah, for sure. Yeah, same thing might might encourage me to update my website. Exactly.

00:26:18 For interactive Look at all this, I rewrote it completely fun.

00:26:22 Cool. All right. What's next? Hi, LDA.

00:26:27 Yes, this is also part of that quick turn around data science project that my team did. A couple of weeks ago, we were looking at doing

00:26:37 some topic analysis on text. And

00:26:41 our first approach was to use leeton to reflect Jewish lay, nobody knows how to say discuss it with competence. They individually are not coming with a central

00:26:52 an asset, maybe that's being supplied that and but it's down to understand what you're looking at. You can you can have it print out what the topics are, and what was contained in that topic. And but you know, you can't, it's really hard to sort of get into the output of your model to evaluate if it's a good model or not. So what some wonderful people in the art community did was they made LDA videos, which just displays the different elements of the LDA output. And they're really, really intuitive ways if you're not too sure on the math behind LDA. And you know, what everything means what, what lambda is, and what all the different, like complex interactions are, it's quite intuitive if you if you spend a bit of time exploring the data visualization. So that was then ported into Python. And that's called, in fact, it's called pi L. Davis. But the visualization is exactly the same. So yeah, so you'd have a nice little partial screenshot of visual visualization, we have some bars, and the blue bars and the red black bars. And the blue bars are like, how, how much of the overall so you have all the words in all the topics like in all the documents, so baseball, and how have the all the words, in all the documents? How much does baseball, amateur baseball represented in all this document? And the red bar represents how much in that topic? topic number 19? And how much topic number 19 is made up of?

00:28:29 Oh, I see. So you have these different topics on the left, you can like click on them, and it'll generate the bars to explain more detail. Yes, okay, during clicking on different topics, the number of topics is determined already in the model that you've already created. And you can change that rerun the model and get that many topics out. But yes, you can make, you can click on the different topics and explore the Top Words either Top Words based on how interested they are across all the documents are within that one topic. And then there's a slider as well. And actually, there's an example if you scroll down, but there'll be a slider which goes between zero and one. And one, it's the the word order to topic words order is ordered by representation across all the documents. And if you slide the slider all the way down to zero, it's shuffled all the words to be more specific to search through the word that most are subject to that topic that are exclusive to that topic, and not in other topics. Whereas if you have it to one, it's prioritizing the words in the list of words that are like everywhere, so So yeah, that's just really isn't a nice to play around with and explore your model. It seems like such a powerful way to explore these models around NLP stuff. Yeah, I just, it's just nice. It's just well designed to make you feel happy. Same thing with it. Yeah, these pictures and live interactions are great. Yeah. And there's really good documentation as well. So they've got links to

00:29:58 easy to read documents that explain why

00:30:00 But as I did, what everything means

00:30:04 and how to interpret stuff. So definitely take a look at that. And there's some links to some YouTube videos and whatnot as well. So yeah, the docs are really nice. Next academic papers explaining what everything is and topic models and Yeah, good. Yeah. And there's some links videos there. I didn't pull them out, because I think they're probably like talks or something. But yeah, those look good as well. Yeah. Cool. Nice. So it says, This package was ported over from R. And I know there's a fair number of things in the Python data science world that's like that. Do you see that still happening a lot? Like, what's this interplay between R and Python these days? I think I've got too many not seen that in a while.

00:30:42 To me, I'm not very aware of it. But it seemed like that was really popular a couple years ago, and it's I hear less of it now. Yeah, yeah. Well, yeah, same, I think always really, because as a staff, language, so.

00:30:56 And it's been around the stats longer, I think, than Python has been, it's much more mature.

00:31:02 And I think, like, very specific statistical applications are more advanced in our just because they've been around for longer. And Python is definitely catching up, though. So you know, with something like this, I think it's nice that rather than reinventing the wheel in Python, they've just taken the Audi work, and made it work in Python and xactly. Like we like this. Yes. Do this. This is great. Yeah. So why change it? Yeah, Daniel Chen threw out there. Going back a few topics that there's conda dash, auto dash, E and V. That project, which works, I think probably like the EDM thing that you had. Brian, do you think? I think there you were talking about whether conda has this idea of automatically activating environments, Dunder pi packages, I think this project conda dash auto dash envy byjus. And apparently, there's a tie in with our studio as well. I think I agree. Did nice. I was just looking at our so ours. It looks like it was been it's been around since 93. I didn't notice that. Oh, oh, wow. Yeah. Based on s apparently.

00:32:05 An s s. Yeah.

00:32:08 Like, just one character for these characters. Oh, we need Yeah. See what the hell was up there?

00:32:14 Yeah, I was my first programming language for data analysis. So I'm really attached to that, like now that we've got tidy R, which is supposed to be like, really amazing and great.

00:32:26 I guess, makes it easier for people new to programming to get, you know, up and running quicker.

00:32:32 I know I think I don't know how that works or what that is. Since it's been out of it for too long. Because you're completely in Python now. Yes. Yeah. But I'm not like nota I don't I don't know. You see, it's I don't know people like yay, to price in a note are was very random. Yeah, I think it's just silly. Yeah, everything. The first really, really good at what they do. Yeah, if they're doing something cool like this, like LTA is Yeah, do that here as well. Yeah, um, speaking of visualization, I want to remind people that are listening to the podcast, that the we do live streaming this so that you can hop on on Wednesdays and watch with us. Or you can catch it on our YouTube channel, so that you can see the things we're looking at. We highlight, if we're looking at a webpage recall, visualization can see it. So yeah, absolutely. Is that it? Brian? I think it is, is Do you have any extra news or anything? Nothing super exciting. But I did want to tell people about the JetBrains survey. And if you've ever gone to the JetBrains site, did you know that they have a little terminal command prompt for agreeing to the cookie policy, which is kind of cool. Anyway, yeah, I love it. I hate that kind of like, I hate these cookies. But that's kind of cool. I'm going to do that. So they are launching the developer ecosystem survey for 2021. If you participate, you get some prizes. It does take a little while took me like 15 minutes. It's a non trivial amount of questions. But I'm sure that we'll cover this in three months, or whenever the report comes out. There'll be all sorts of cool stuff we can talk about. So you know, Python people get your voice heard. Nice. Yeah. Remember to take that? Yeah. How about you? Um, I got a couple exciting bits. I am going to be speaking next week at a couple places. So I'm going to be speaking at the Python user group for Aberdeen, which it's in the UK, that's about all I know.

00:34:25 It's a virtual online. Yeah. It's an online thing. And so I'm going to, I'm going to teach there's, we kind of did a survey of of the people going and there's a lot of people new to testing and new to pi test. So I'm going to do sort of an intro to pi test sort of a thing, or at least a topic around pi tests that's introductory. And then I'm going to do a similar talk but targeted a little bit closer to what they're doing to NOAA, which probably get that wrong, National Oceanic something something so I'm going to talk with

00:35:00 One of the group of those people next week, that'll be fun. And always in Scotland. Aberdeen is in Scotland. Sorry,

00:35:10 Alex. So I told my kids about both of the things. And they're like, yeah, Aberdeen, that sounds neat. But no, I really, you're going to be talking to them. So my kids are excited about that. So yeah, that's, that's super cool. Jennifer, anything you want to throw out to people listening? You run a user group, right? Um, yeah, we've got PI data, Manchester that we have going on. And our next what's on meetup, and it's obviously on YouTube. Because what else are we gonna

00:35:37 be, but annex one coming up is on agent based models. So that would be really cool. Looking forward to that one. And hopefully, I'm not going to promise too much. But we did put our own podcast on hold for a little bit. So hopefully, we will start that up again this year. And so one reason why I'm, for instance, the tools that you guys use for your podcast, because I think it makes it really interesting, engaging. Yeah, well, I think I think some of these tools like we're using, for example, stream yard for our live streams and stuff. I do you think there's a lot of, you know, a low bar to adopt those kinds of things for a lot of meetups and stuff. So yeah, that's cool. People want to know what we're doing. They can shoot us a message, and we'll let them know. Yeah, I just looked it up. Scotland is in the UK, so I wasn't completely wrong.

00:36:28 squares and rectangles Come on.

00:36:31 Good. All right. Well, with that, let's let you think we should close it out with a joke. Yes. You think Brian? Yeah. All right. So this one comes to us from Edward Oro Chyna. And send us this cool picture here. And this has to do with an engineer helping a designer fix a problem. I kind of feel like, I want to be the developer. Do you mind being the designer brain? Sure. All right. So the Brian comes to me, the designer comes and says, there's a problem with this design. So I say, Oh, no problem. No problem. We can fix this here in the terminal, and I pull up and z shell and I'm rolling along and well, you're a hacker No, no, it's just the terminal. But we're all the buttons and icons and drop down menus. Is this the matrix?

00:37:17 Haha, yes.

00:37:21 Have you ever had one of those experiences? I had one of those experiences at a coffee shop. I was doing something with a terminal and I had like three of them open. And one of them was doing like tailing a log and one was running like a pip install script with a bunch of progress bars. And people were like, Are you trying to hack us here on the wall? I'm like, No, I'm just working.

00:37:41 So I, I was on the other side of it to start with. I was a grad student, I shared a an office with a couple other people. And one of the women that shared the office with us was a vim user or vi user at the time. And I was with tags and everything. And I was I was an Emacs person at the time with menus and stuff. And so I was watching her code once and it's just jumping all over the place. Like she'll go to a very hands on the keyboard, nothing, no mouse, and the windows are popping back and forth. And she's going all over the place. I'm like, oh my god. She's like, thinking into the computer.

00:38:22 So I learned Vi Vi because of that experience. Oh, that's awesome. Yeah. When you see people using vim on any of Emacs, whatever like that, like mind blowing. I can't I still need my I like to use my mouse. I like a blended, blended experience as well. Cool. Well, thanks, everybody. Yeah, thanks, Brian. Thanks. Yeah, yeah, this is really fun. Thanks for having me. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as mb YTS. And get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian knockin, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

