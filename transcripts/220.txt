0:00 Michael Kennedy  00:00

0:00 Hello and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 220. Recorded February 10 2021. I'm Michael Kennedy.

0:00 Brian Okken  00:10

0:00 I'm Brian Aachen, and we have a special guest

0:00 Michael Kennedy  00:11

0:00 Hannah. Welcome. Hello. Anna Stepanek. Welcome to the show is so great to have you here.

0:00 Unknown Speaker  00:16

0:00 Thank you. I'm happy to be here.

0:00 Michael Kennedy  00:19

0:00 It's good to have you. It's so cool. The internet is a global place. We can have people from all over. So we've decided to make it an all Portland show this time. We could do this in person actually. Well, not really, because we can't go into it. But theoretically, geographically anyway. So all three of us are from Portland, Oregon. Very nice. Before we jump into the main topics, two quick things, one, this episode is brought to you by data dog, check them out at Python bisetta FM slash data dog. And Hannah, just want to give people a quick background on yourself.

0:00 Unknown Speaker  00:47

0:00 Yeah, so I'm Hannah. I have written a book, which is weird to say about pandas. But I also like just go around like if toxic various conferences, like on Python. So yeah. Like I gave rearchitecting legacy code base recently.

0:00 Michael Kennedy  01:05

0:00 That sounds interesting and challenging. Yeah. What was the legacy language? Was it Python or something?

0:00 Unknown Speaker  01:10

0:00 It was it was Python. Um, it was like a flask, web application. And then also, the front end of it was view like Vue js.

0:00 Michael Kennedy  01:19

0:00 Oh, yeah.

0:00 Unknown Speaker  01:20

0:00 Yeah, that's been a fun project that was through work. as developers, like you're pretty much always working with some form of legacy code just depends on how legacy It really is. Well, what

0:00 Michael Kennedy  01:31

0:00 could be cutting edge in one person's viewpoint might be to Super legacy. And another I think it's, yeah, Python three, five, you wouldn't believe it.

0:00 Unknown Speaker  01:39

0:00 Right?

0:00 Michael Kennedy  01:41

0:00 Yeah, very cool. Well, it's great to have you here. I think maybe we'll start off with our first topic, which is sort of along the lines of the data science world some times to your, your book. And of course, whenever you go to JetBrains, you've got to run your COI to accept the cookies, which is fantastic. And so this topic, this first topic I want to cover is from JetBrains. And it's entitled, we downloaded 10 million Jupyter notebooks, almost that 10 out of 10 million Jupyter Notebooks from Git GitHub. Here's what we learned. So this is an article or analysis done by Elena, who's a harina. And, yeah, pretty neat. So they went through and downloaded a whole bunch of these notebooks and just analyze them. And there's many, many of them are publicly accessible. And a couple years ago, there were 1.2 million Jupyter notebooks that were public. As of last October, it was eight times as many 9.7 million notebooks available on GitHub. That's crazy, right? Well, yeah. So this is a bunch of really nice pictures and interactive graphs and stuff. So I encourage people to go check out the webpage. So for example, one of the questions was, well, what language do you think is the most popular for data science? Just by judging on the main language of the notebook? Anyone Take a guess?

0:00 Unknown Speaker  02:55

0:00 Oh, yeah, I thought for sure. Without a doubt.

0:00 Michael Kennedy  02:59

0:00 That's for sure. The second one, I'm pretty sure no one who has not seen this, there's no way they're gonna guess it's Yeah, man. It's, uh, we have we have no idea like I like we look, we can't tell what languages is in there. But then the other contenders are are in Julia. And often people say, Oh, yeah, well, Julia, maybe I should go to Julia from Python. Maybe. But that's not where the trends are. Like, there's 60,000 versus 9 million, you know, as the ratio. I don't know what that number is, but it's a percent of a percent type of thing. Well, they also talk about the Python two versus three growth are different. So in 2008, it was about 50% was Python two, and in 2020. It's a Python two is down to 11%. And I was thinking about this 11%. Like, why do you guys think people there's still 11%? They're hanging around?

0:00 Unknown Speaker  03:47

0:00 I mean, I would guess, speaking of legacy applications, probably it just hasn't been touched. But

0:00 Michael Kennedy  03:53

0:00 yeah, yeah, those are very likely the ones that were like the original 2016 17 ones that were not quite there. They're still public, right? GitHub doesn't get rid of them. The other one is, I was thinking, you know, a lot of people do work on Mac, or maybe even on some Linux machines that just kind of came at the time with Python two. So it's like, well, I'm not going to change anything. I just, I just need to view this thing. I don't have Python. Problem solved. Right? They didn't know that there's more, more than one Python, there's a good breakdown of the different versions. Another thing that's interesting is looking at the different languages, not languages. There are libraries used during that. So like NumPy is by far the most likely used and then a ties, pandas and matplotlib, and then Sai kit learn and then OS actually for reversing stuff. And then there's a huge long tail. And they also talked about combinations like pandas and NumPy are common and then pandas, and then like seaborne, scikit, learn pandas, NumPy, matplotlib, and so on as a combo. And so that's really interesting, like what sets of tools data scientists are using? Yeah. And then another one is, they looked at deep learning libraries and pytorch seems to be crushing it in terms of growth, but not necessarily in terms of popularity. So it grew. 1.3 times or 130%, whereas TensorFlow is more popular, but only grew 30%, and so on. So there's a lot of these types of statistics in there. I think people will find interesting if they want to dive more into this ecosystem, you know, it's one thing to have survey and go fill out the survey, like ask people, what do you use, you know, what platform do you run on Vue JS or Linux? Like, okay, well, it's not really a reasonable question, but I guess Vue js, you know, like, but if you just go and look at what they're actually doing on places like GitHub, I think you can get a lot of insight.

0:00 Unknown Speaker  05:27

0:00 Yeah, sure. Yeah, I know, I use, like, I'll go to GitHub pretty frequently, like I work when I'm, you know, just like browsing. Like, I wonder how you do this thing? Or like, what's the most common way to do this? Or

0:00 Michael Kennedy  05:38

0:00 Yeah, absolutely.

0:00 Unknown Speaker  05:39

0:00 Just look up, like, what's the most popular, so it's pretty good. Sign up, a lot of people are using it,

0:00 Michael Kennedy  05:44

0:00 it is one thing I should probably make more better use of is I know, they started adding dependencies like, oh, if you go to flask, it'll show you flask is used and these other GitHub repos and stuff like you could find interesting little connections, I think, Oh, this other project uses this cool library I know nothing about but if they're using it, it's probably good.

0:00 Unknown Speaker  06:01

0:00 Yeah, for sure. Yeah. I

0:00 Brian Okken  06:02

0:00 love the dependency features of looking who's using it?

0:00 Michael Kennedy  06:05

0:00 Yeah, absolutely. So Brian, gonna cover something on testing this time. Yeah, I will actually make you.

0:00 Brian Okken  06:13

0:00 I wanted to bring up something we brought up before. So there's a project called pi test Python path, and it's just a little tiny plugin for pi test. And we did cover it briefly in way back in Episode 62. But at the time, I brought it up as So okay, so that I brought it up as a way to, to, to just shim like, be able to have your test code, see your source code. But as just like a shortcut, like a stopgap until you actually put together like proper packaging for your source code. But the more I talk to real life, people, we're testing all sorts of software, and hardware, even there's, there's that that's a simplistic view of the world. So thinking of everybody is working on on packages is not real. There's applications, for instance, that that they're never going to set up, pull their code together as a package. And that's, that's, that's legitimate. So if you have an application and your your source code is in your source directory, and your test code is in your test directory, it's just your tests are just not going to be able to see your source code right off the bat. Alright, so

0:00 Michael Kennedy  07:24

0:00 what's more tricky is, depending on how you run it, they will or they won't, yeah, right. Right. If you say run it with PI charm, and you open up the whole thing, and it can like put together the past year, all good. But if you then just go into the directory and type pi test, well, maybe not,

0:00 Brian Okken  07:38

0:00 it doesn't work. And it just confuses a lot of people. And so more and more, I'm recommending people to use this, this little plugin. And really, the the, the big benefit is it gives you there's, there's it does a few things. But the big Biggie is just you can add a Python path setting within your PI test INI file, and you stick your INI file at the top of your project. And then you just give it a relative path to where your source code is like source or SRC, or something else. And then pi test From then on, we'll be able to see your source code, it's a really simple solution is just a I. That's what I do. I don't think it's a stopgap I think it's awesome. So

0:00 Michael Kennedy  08:25

0:00 yeah, I totally agree, what I do a lot of times is certain parts of my code, I'm like, this is gonna get imported. For me, the real tricky thing is a limbic, the database database migration tool, and the tests and the web app. And usually, I can get the tests and the web app to work just fine running them directly. But for some reason, a limbic always seems to get weird, like working directories that don't line up in the same way. So it can't import stuff. So a lot of times, I'll put it at the top of some file, you know, go to the Python path and add, you know, get the directory name from Dunder file and go to the parent. Add that to the Python path. And now it's going to work from then on, basically. And this seems like a nicer one, although it doesn't help with Olympic. But still,

0:00 Brian Okken  09:08

0:00 it might you might be able to add the Olympic path right to it. So

0:00 Michael Kennedy  09:12

0:00 yeah, yeah, for sure. Very cool. So yeah, go ahead.

0:00 Unknown Speaker  09:15

0:00 Oh, I was just gonna say yeah, like it. This is something I like pretty much every time I set up a new project, like I always have to screw with the Python. I always, like run it initially. And then it's like, oh, can't find blah, blah, blah. And I'm like, Oh, here we go again.

0:00 Unknown Speaker  09:30

0:00 I usually always run my projects from Docker, though, so I just, you know, hard code that stuff like just,

0:00 Michael Kennedy  09:36

0:00 yeah, once you get it set up. That's cool. Yeah. Nice. I dream of days when I can use Docker again. And when Mac and it's in super early, early beta stages come down. Yeah, it's okay. I don't mind too much because I don't use it that much. But so cool. Brain systems about dot p th I'm guessing path files. What do you know anything about this? I have no idea what those are.

0:00 Brian Okken  09:57

0:00 Oh, p th well, so there's Yeah. There's there there a way to, I don't know a lot. I don't know the detail, the real big details, but it's, it's a way to have a, you can have a list of different paths within within that file. And if you import it, or don't import it, if you include it in your path, then Python I think includes all of the contents into Anyway, I'm actually I'm blowing smoke. I don't know the details. Okay. Sorry.

0:00 Michael Kennedy  10:26

0:00 Yeah. But apparently, you can have a little more control with eth files, whatever. Those are not very good.

0:00 Unknown Speaker  10:31

0:00 I don't know much about that either. Yeah, unfortunately.

0:00 Michael Kennedy  10:34

0:00 I mean, I've been using LS dot path. So what do I know? All right. Speaking of what do I know, I could definitely learn more about pandas. And that's one of your items here.

0:00 Unknown Speaker  10:43

0:00 Yeah. So I thought, maybe I just give like a little snippet of kind of like some of the stuff I talked about in the book.

0:00 Michael Kennedy  10:54

0:00 Fantastic.

0:00 Unknown Speaker  10:54

0:00 So yeah, here we go. So if we're looking at pandas, in terms of like the dependency hierarchy, well, and I guess I should start at the beginning. So what is pandas? If you're not familiar with it, it's a data analysis library for Python. So it's used for doing big data operations. And so like, if we look at the dependency hierarchy of pandas, it kind of goes like pandas, which is dependent on NumPy, which deep down is dependent on this thing called blas, which is basic linear algebra. So programs,

0:00 Michael Kennedy  11:28

0:00 right? There's something with blas and a Windows and a Windows update and a certain version, I think, recently, I can't remember I feel like there was some updates made that thing working. Yeah, usually a big challenge around NumPy and versioning. and stuff to make it work in this.

0:00 Unknown Speaker  11:42

0:00 Yeah, usually, the last library is built into your OS already. And it just points out that but if you're using something like Anaconda, I think by default, like it installs Intel MLK, and uses that. But yeah, if you're using like Linux, or just like out of the box, whatever's on Windows, which is what it is, if you like pip install it, then yeah, there could certainly be issues with like dependencies mismatches. Yes, so. And I've like greatly simplified this. But in terms of, kind of like the languages, and walking down that dependency hierarchy, you start out in Python with pandas, and then NumPy is partially Python and partially C. And then blas is pretty much always written in assembly. And if you don't know what assembly is, it's basically like a very, very, very, like probably the lowest level language you can program in, and it's essentially like a CPU instructions for your processor. Um, um, so I've taken this just like basic example here, and I'm going to kind of like roll with it. So if we're doing just like a basic addition, and pandas say, like, we have column A, and we want to add that with column B, and like, store it back into column C,

0:00 Michael Kennedy  13:01

0:00 like additional linear algebra, vector

0:00 Unknown Speaker  13:03

0:00 addition, traditional vector math. Um, so, pandas, like, if you, if you look at these operations, each, each of these, like Additions on a per row basis is independent, meaning like, you could conceivably run like each of those Additions for each row, like in parallel, like, there's no reason why you have to go like row by row. Right. And that's essentially like what kind of like Big Data Analysis libraries are like at their core is they they like understand this conceptually, and try to parallelize things as much as possible. And so that's kind of like the first, like, fundamental understanding that you have to have, like when working with pandas is like, you should be doing things in parallel as much as you can. Which means understanding the API and understanding like which functions in the API will let you do things in parallel. Um, so like, if we're just not using pandas at all, say, like, we're just inventing our own sort of, like, technique for this, like, you might think, well, like each of these rows could be broken up, like into a thread, right. So like, we could say, like, thread one is gonna run like the first row addition. And then like, thread two is going to run the second row, etc. Um, but you might find that we'll run into issues with this in terms of the Gil so like, the Gil is known, otherwise known as the global interpreter lock in Python, prevents us from really like running a multi threaded up operation. Like in parallel.

0:00 Michael Kennedy  14:33

0:00 Basically, Python can run the rule is it can run one Python opcode at a time. Yeah. And that's it. All right. It doesn't matter if you've got, you know, 16 cores. It's time.

0:00 Unknown Speaker  14:44

0:00 Yeah, yeah. And this like, is really terrible for Yeah, for for like, trying to do things in parallel, right. So like that, that kind of use cases out like pandas and NumPy, and all that stuff is not Going to be able to use multi threading. Um, and so, um, and like, I just want to point out like Python, like, at its core has this like fundamental problem, which is why they went with the Gil. So like Python manages memory for you. And how it does that is it keeps track of references to know when to free up memory. So like when memory can be, like, completely destroyed, and somebody else can use it, essentially. And like, that's something

0:00 Michael Kennedy  15:34

0:00 that I do stuff like Brian sometimes tries to do with C, and like, yeah, free and all those things, right?

0:00 Unknown Speaker  15:40

0:00 Yeah, exactly. Yeah, yeah. So like, see, you have to do this stuff to yourself. It's like malloc, and free and all that stuff. But with Python, it does it for you. But that comes at a cost, which means like, every single object in Python has this little like counter, which is like a reference counter. Um, and so basically, like, way back in the day, like when threading first became a thing, like, in order to kind of like avoid this threading problem, they came up with the Gil, which basically says you can only run one thread at a time for like, one opcode at a time as as attempts have been made to remove it, like Larry Hastings has been working on something called the galacta. me remove the Gil for a while. And the main problem is,

0:00 Michael Kennedy  16:24

0:00 if you take it away, the way it works now is you have to do lock on all memory access all variable accessed, which actually has a bigger hit than a lot of the benefits, you would get at least in the single threaded case. And I know, Peters said like, we really don't want to make changes to this if it's going to mean slow or single threaded Python, but probably not for a while.

0:00 Unknown Speaker  16:42

0:00 Yeah, yeah, yeah. And that that is a big problem. So like, I mean, if generally, what people use, like instead of threads in Python is they use like, multi process, and they spin up multiple Python processes, right. And like that truly kind of like achieves the parallelism. Um, but anyways, I digress. So we can't use the Gil. But what's interesting to note is when you're running NumPy, at its very low level, in C, like when you enter and look at the C files, it actually is not subject to the Gil anymore, because you're in C. And so you can potentially run, you know, multi threaded things in C and call it from Python. So But beyond that, if we look at blas blas has built in like parallelization for like hardware parallelization. And how it does that is through vector registers. So if you're not familiar with like the architecture of CPUs and stuff, like at its core, you basically only have like, only can have a certain small set maybe like three or four values in your CPU at any one time that you're running, like, adds and multiplies on. And like how that works is you load those values, like into the CPU from memory, and that load can be quite time consuming. It's really just based on like, how far away your memory is from your CPU at the end of the day, like physically on your board.

0:00 Michael Kennedy  18:18

0:00 cache, is it? No,

0:00 Unknown Speaker  18:19

0:00 yes, yeah. And that's why we have caches. So like, caches are like memory that's closer to your CPU. Consequently, it's also smaller. But that's, that's how you can kind of you might hear like people say like, oh, like so and so wrote this really performant program. And it like, utilizes, like the size of the cache or whatever. So like, basically, like if you can load all of that data, like into your cache and run the operations on it without ever like having to go back out to memory, like you can make a really fast program.

0:00 Michael Kennedy  18:49

0:00 Yeah, it could be like, 100 times faster than regular memory.

0:00 Unknown Speaker  18:51

0:00 Yeah, yeah. And so essentially, like, that's what blas is trying to do, like underneath and into NumPy is they're trying to take this giant set of data and break it into chunks, and load those chunks into your cache and operate on those chunks, and then dump them back out to memory and load the next trunk.

0:00 Michael Kennedy  19:14

0:00 Very cool. Thanks for pointing that out. I didn't realize that blas leveraged some of the OS native stuff and nor that it had, like special CPU instruction type optimizations. That's pretty cool.

0:00 Unknown Speaker  19:24

0:00 Yeah, yeah. Um, so like it has. Like on top of the registers, it also has these things called like vector registers, which actually can hold like multiple values at a time in your CPU. So like, we could take this like simple example of like the addition and we could actually what we can't run those like row per row calculations. In parallel with threads, we can with vector registers. And the limitation there is that the memory has to be sequential when you load it in.

0:00 Michael Kennedy  19:58

0:00 This is definitely at a level lower than that. Are you still working out?

0:00 Unknown Speaker  20:03

0:00 But yeah, so um, anyways, this is just like kind of the stuff that I talked about in my book. It's not necessarily about like how to use pandas. But it's about like, kind of like what's going on underneath pandas. And then like, once you kind of like build that foundation of understanding, like you can understand, like, better how pandas is working, and like, how to use it correctly, and why all the various functions are doing

0:00 Michael Kennedy  20:26

0:00 fantastic. Yeah, so people can check out your book, got a link to it in the show notes. So very nice. Talk for me, the European, the Euro price, which is fine. I don't mind so.

0:00 Unknown Speaker  20:35

0:00 Yeah, so like, I mean, it's on Amazon, too. It's on a lot of different platforms. But I figured I just point you're actually to the publishers.

0:00 Michael Kennedy  20:44

0:00 Yeah. Now that's perfect. Perfect. quick comment. A Roy Larson says NumPy and Intel Mkl. cause issues sometimes because they're on a Windows if something else in the system uses Intel? Mkl

0:00 Unknown Speaker  20:56

0:00 Ah, okay. Yeah.

0:00 Michael Kennedy  20:58

0:00 Interesting. I have no experience with that. But I can believe it until there's a lot of interesting stuff. They even have a special Python compiled version, I think for Intel CPUs, potentially. I'm not sure they have some high performance version.

0:00 Unknown Speaker  21:08

0:00 Yeah. Yeah. Yeah, they do. Yeah.

0:00 Michael Kennedy  21:11

0:00 Also in Portland, don't keep it in Portland. There we go. Now, before we move on to the next item, let me tell you about our sponsor today. Thank you to data dog. So they're sponsoring data dog. And if you're having trouble visualizing latency, CPU, memory bottlenecks, things like that in your app, and you don't know why you don't know where it's coming from, or how to solve it. You can use data dog to correlate logs and traces at the level of individual requests, allowing you to quickly troubleshoot your Python app. Plus, they have a continuous profiler that allows you to find the most resource consuming parts of your production code all the time at any scale with minimal overhead. So you should point out your production server, run it, which is not normally something to do with diagnostic tools, but you can with their continuous profiler, which is pretty awesome. You'll be the hero that got that app back on track at your company, get started with a free trial at Python bytes that have him slash data dog, or just click the link in your podcast show notes. Now, I'm sure you all have heard that working with pickle has all sorts of issues, right? So the pickle is a way to say take my Python thing, make a binary version of bits that looks like that Python thing so I can go do stuff with it. Right? It's generally got issues, not the least of which actually are around the security stuff. So like to unpickable something dude, D serialize. It back is actually potentially running arbitrary code so people could send you a pickle virus. I don't know what that is like a bad rotten pickle or whatever. That wouldn't be good. So there's a library I came across that solves a lot of the pickle problems. It's supposed to be faster than pickle. And it was cleverly named quickl. Either, have you heard of this thing?

0:00 Unknown Speaker  22:46

0:00 No.

0:00 Michael Kennedy  22:47

0:00 Yeah, it's cool, right? So here's the deal. It's a fast serialization format. For a subset of Python types. You can't pickle everything. But you can pickle like way more say, than JSON. And the reasons they give to use it are, it's fast. If you check out the benchmarks, I'll pull those up in a second. It's one of the fastest ways to serialize things in Python, it's safe, which is important. Unlike pickle d serializing. A user provided message does not allow arbitrary code execution. Hooray. That seems like a minimum bar, like, Oh, I got stuff off the internet. Let's try to execute that. What's that going to do? Oh, look, it's reading all my files. That's nice. But also, it's a flexible because it supports more types. And we'll also learn about a bunch of other libraries. While we're at it here, which is kind of cool a bunch of things I heard of like MSG pack, horrible JSON, you may have heard of that. And the other main problem you get with some of these binary formats is you can end up where a situation where you can't read something if you make a change your code like so imagine I've got a user object, and I've pickled them and put them into a Redis Cache, we upgrade our web app, which adds a new field to the user object, that stuff is still in cache, after we restart, we try to read it, oh, that stuff isn't there anymore. You can't use your cache anymore. Everything's broken cetera, et cetera. So it has a concept of schema evolution having different versions of history. So there's ways that older messages can be read without errors, which is pretty cool.

0:00 Unknown Speaker  24:11

0:00 Yeah, that's nice.

0:00 Michael Kennedy  24:12

0:00 And you know, pull up the benchmarks. There's actually a pretty cool little site here shows you some examples on how to use it. I mean, it's incredibly simple. It's like dump this as a string, read this, you know, deserialize, this. It's real simple. So but there's quite an interesting analysis of live analysis where you can click around and you can actually look at like load speed versus read, externalize versus decertify speed, how much memory is used and things like that. And it compares against pickled tuples protobuf, pickle itself, or JSON MSG pack wico and quickl strux. Cool. There's a lot of things. I mean, I knew about two of those. I think that's cool. But these are all different ways. And you can see, like in all these pictures, generally, at least the top one more time, shorter is better, right? So you can see if you go with their like quickl strux. It's quick rule of thumb. Maybe four or five times faster than pickle, which I presume is way faster than JSON, for example. You'll also see the memory size, which actually varies by about 50%. across the different things, also speed of loading a whole bunch of different objects, and so on. So yeah, you can come check out these analysis here. Let's see all the different libraries that we had, I guess, read them all off, basically there. But yeah, there's a bunch of different ways which are not pickle itself to do this kind of binary serialization, which is pretty interesting. I think

0:00 Brian Okken  25:28

0:00 it does protobuf. That's pretty cool. Actually, I want to try this out.

0:00 Michael Kennedy  25:33

0:00 Yeah, yeah, that's really right.

0:00 Brian Okken  25:35

0:00 And one of the things I was just looking at the source code, I love that they use PI tests to test this, of course, you should use PI test. But the I can't believe I'm saying this, but this would be the perfect package to test with a gherkin syntax, don't you think? Is it's pickle? Oh, my gosh,

0:00 Michael Kennedy  25:53

0:00 you got to use the gherkin syntax. So yeah, you definitely should. And Roy threw out another one, like you queue Foundation, deal package deals with many same issues. But because it's binary, it has all the same sort of versioning challenges you might run into as well.

0:00 Brian Okken  26:10

0:00 Till the build package. That's funny.

0:00 Michael Kennedy  26:13

0:00 Yeah, pretty good. Pretty good. Alright, so anyway, like, you know, I'm kind of a fan of JSON these days, I've had enough XML with custom namespaces in my life, that I really don't want to go down that path XSLT and all that. But, you know, I've really shied away from these binary formats, or a lot of these reasons here. But this might make me interested if I was gonna say, throw something into a cache. The whole point is put it in the cache, get it back really fast. This might be a decent,

0:00 Unknown Speaker  26:38

0:00 yeah, yeah, it definitely seems to address a lot of the concerns I have with Google for sure.

0:00 Michael Kennedy  26:44

0:00 Yeah. And I don't I talk about the types. Somewhere in here. We have thought yeah, here's, there's quite a list of types. You want really nice date time? Can't do that with JSON? Why is it in the world doesn't JSON support that sort of time information? Oh, but you've got most of the fundamental types that you might run into. Alright, so pretty cool. Give it a quick look. All right, Brian, what you got here?

0:00 Brian Okken  27:06

0:00 Um, well, I was actually reading a different article. But the it came up, we I think we've talked about friendly traceback. It's a package that just sort of tries to make your tracebacks nicer. But But what I didn't realize it had a console built in. So I was pretty blown away by this. So there's a, it's a, you know, it's not trivial to get set up. It's not that terrible, but you, you have to start your own console, start the repple, import friendly, trace back and then do friendly trace back start console. But at that point, you have just like the normal console, but you have better trace backs. And then also, you have all these different cool functions, you can call, like, what, what, where, why, and explain and more. In basically, if something goes wrong, while you're playing with Python, you can interrogate it and ask, like For more information, and that's just pretty cool. The Why is really great. So if you have the one of the examples I saw before, and I'm thinking I might start using this, when teaching people is we often have like exceptions, like you assigned a nun or you signed to something that can't be assigned or you, you, you didn't match up the bracket in the parentheses or something like that correctly. And you'll get like, just syntax error, and it'll point to the syntax error, but you might not know more, so you can just type Why. Why with parentheses? Because it's, yeah, because it's a function. And it'll tell you why. Why, where it's

0:00 Michael Kennedy  28:43

0:00 like, the great storytelling, right? The five why's of a bug? Yeah.

0:00 Brian Okken  28:49

0:00 So then you might have a bug. Yep, you can, you can say what like to repeat what the error was, Why it will tell you why that was an error. And then specifically what you did wrong, and then where it will show you if you if you been asking all sorts of questions, and you lost where the actual trace back was, you can say where and it will point directly to it. And I think this is going to be cool. I think I'll use this when trying to teach especially kids, but really just people new to Python tracebacks can

0:00 Unknown Speaker  29:17

0:00 be very, really helpful for them. Like even I know, like, I sometimes have to look up like certain error messages that I'm like, not familiar with. So Alright, yeah, that would be super helpful.

0:00 Michael Kennedy  29:28

0:00 Yeah, I totally agree. You, you're gonna have to help me find a W that goes with this. But I want B what would be effectively Google open close parentheses? Yeah, because so often you get this huge trace back and you've got these errors. And if you go through and you select it, like for example, the areas here on the screen and unbound local error, local variable greetings in quotes, reference before assignment. Well, the quotes means often time is searched like it must have the word greeting and that's the one thing that is not relevant to the googling Right. So if I'm a beginner and I even try to Google that, I might get a really wrong message. If you could say, Google this in a way that is most likely going to find the error, but without carrying through like variable details, filename details, but just the essence of the error, that would be fantastic. Now, how do we say that? Would

0:00 Unknown Speaker  30:21

0:00 you just say, Whoa?

0:00 Brian Okken  30:24

0:00 Or maybe www

0:00 Michael Kennedy  30:28

0:00 WTF. I mean, come on. There's WTF. Great. And so that's also part of this package DC, at their main site, where you've got these really cool, like visualized stuff, right, where it is sort of more tried to tell you the problem of the error with the help text and whatnot. Yeah, yeah, this is cool. also uses rich, which is a cool library, we talked about Oh, as well.

0:00 Brian Okken  30:50

0:00 I love rich, I include rich and everything now even just just to print out simple, better tables. It's great.

0:00 Michael Kennedy  30:56

0:00 Yeah, for sure. And, uh, do you see yourself using this? Or is it? Are you more more in notebooks?

0:00 Unknown Speaker  31:02

0:00 Oh, no. I

0:00 Unknown Speaker  31:02

0:00 mean, I usually use like the PDB debugger. So yeah, I mean, I'm not sure if really, as it is, would be, like a problem. I it would depend on how much information it has about like, obscure errors from dependent libraries, which is usually what I end up looking at these days. But yeah, I mean, conceivably, like, yeah, that could be helpful.

0:00 Michael Kennedy  31:25

0:00 Yeah, if we get that feature added, then,

0:00 Unknown Speaker  31:27

0:00 yeah. Oh, yeah, for sure. Gosh.

0:00 Michael Kennedy  31:31

0:00 errors. Let's cover your last time last time in the show.

0:00 Unknown Speaker  31:35

0:00 Yes, so, um, I at work, work in the security org. And I write like automation tools for them, which means sometimes the repos that we work on, they get to be like test subjects, for new like requirements and such. And so recently, artwork was exploring, like static code analysis, looking for like security vulnerabilities in the code. And so I ran across bandit and I integrated bandit into,

0:00 Michael Kennedy  32:10

0:00 we don't have time to go through these old legacy code and fix these problems. Oh, wait, this is what it means. Oh, sorry. Yes, we can do that right now. For you gave you got from bandit.

0:00 Unknown Speaker  32:22

0:00 Yeah, exactly.

0:00 Unknown Speaker  32:25

0:00 Yeah, we integrated bandit into our legacy code base. And we actually, it's funny, you say that because I the bug that I found using bandit was actually like, from the legacy code.

0:00 Michael Kennedy  32:36

0:00 That does not surprise me.

0:00 Unknown Speaker  32:37

0:00 Yeah. So it was it was a pretty stupid, like, error. Like, it was pretty obvious. Like if you were doing code review, but because it was legacy code, and it was like already there. I just like never noticed. But it was basically like issuing like a request with like, no, verify. So it was like an unverified, like HTTP request. embed. It was like, No,

0:00 Michael Kennedy  33:01

0:00 this, this this broken SSL certificate keeps breaking it. I just totally ignore it. Oh, yeah.

0:00 Unknown Speaker  33:06

0:00 Yeah. Well, and I honestly, like, I think that might have been why it was there in the first place. Because I know, like, the Oh, like, several years ago, like had some certificate issues. So yeah, that might be and it was, it was like an internal talking to an internal. So it was

0:00 Michael Kennedy  33:22

0:00 like, maybe even a self signed certificate that nothing trusted, but I get it. Yes,

0:00 Unknown Speaker  33:26

0:00 there. Yeah, it was like that, we'll just do that. Um, but yeah, so bandit is basically like, like a linter. But it looks for security issues. So you can just like pip install it, and then just like, run it on your code, and it will find a bunch of different potential security issues. Like just by like, statically, analyzing your code. Um, and I've pretty much like come to the opinion that, like, why haven't I done this on all of my other projects? Like, I should be doing this on every single project? Like, cuz, you know, like, as, like a developer, I always run like, lint, and black and stuff like that. Um, so I figured, you know, I should probably be running bandit to Yeah, cool.

0:00 Michael Kennedy  34:10

0:00 Yeah. Well, very nice. It's a good recommendation for people as well. And it's got a lot of cool, you go and actually see the list of the things that it tests for, and even has test plugins as well, which is pretty cool.

0:00 Unknown Speaker  34:21

0:00 Yeah, yeah. So you can like make your make your own if you want. Um, and it has like, all the common linter sort of like functionality, like ignore these files, or like ignore these rules, or even, like, ignore this rule on this particular line, stuff like that. Which is pretty sweet.

0:00 Brian Okken  34:36

0:00 I love that things like banded around because, thankfully, developing web stuff is becoming easier and easier, but it's then now the barrier to entry is lower. You still have to have all the security concerns that you had before that normal. I mean, that usually people were just had more experience, but they would make mistakes anyway, but now, I think This is one of the reasons why I love this is because people new to it might be terrified about the security part but having banded on they're looking over their shoulders. Great. Yeah.

0:00 Michael Kennedy  35:09

0:00 Yeah. Like don't publish with the debug setting on and Django or anything like

0:00 Unknown Speaker  35:14

0:00 this simple obvious stuff and like honestly, like having worked in the security org for about a year now like I've come to the understanding that a lot of security issues stem from just like basic like duh, sort of misconfigurations. So like something like this is perfect.

0:00 Brian Okken  35:33

0:00 I really, really liked that you added, you wrote in the shownotes. Some pre commit, how to hook this up with pre commit because I think having an in pre commit or in ci pipeline is important because like you guys were joking about often security problems come in because somebody's just trying to fix something that broke. Yeah, but they don't really realize how many other things it affects. So

0:00 Unknown Speaker  35:58

0:00 yeah, yeah.

0:00 Michael Kennedy  36:00

0:00 We got to make it work quick. Just Just turn on the debug thing. We'll just look real quick. And then you forget to turn it off or whatever. Yeah,

0:00 Unknown Speaker  36:05

0:00 for sure. Yeah, yeah. just stupid human errors.

0:00 Michael Kennedy  36:09

0:00 Nice. All right. I want to go back real quick, Brian, cuz you're mentioned a friendly traceback. Got a lot of stuff. Let me just do a quick audience reaction. Robert says it is cool. Brian, john Sheehan says, I was just thinking of something the same would be cool. As a great teaching concept. Anthony says super useful. JOHN says, I've been doing more demo code in the console rather than ID this looks like what help you how to fix it. W Wow, how w i love it, Robert. Very good. Zach says, What is this magic? This looks amazing. And so on. All right. Well, thanks, everyone. I'm glad you're like that. So that's it for our main items. You know, Brian, you got an extra you want to throw out there. You were doing some of the climate change or what are you doing this week? Yeah,

0:00 Brian Okken  36:58

0:00 I'm sharing the room with some people just sec. The I did do two meetups with with Noah and then with the Aberdeen Python me that way I

0:00 Michael Kennedy  37:09

0:00 got I got to interrupt you real quick. did all that talk that Hannah did about bandit viruses get you?

0:00 Michael Kennedy  37:20

0:00 I'm sorry. Sorry about that. Carry on.

0:00 Brian Okken  37:22

0:00 Well, I missed

0:00 Michael Kennedy  37:24

0:00 all this talk with Hannah that Hannah had about viruses and in hacking and stuff with bandit. Did it make you nervous? And you had to put on your mask?

0:00 Brian Okken  37:32

0:00 No, just a group meeting in their group room and somebody came in, but

0:00 Michael Kennedy  37:36

0:00 it's okay. I'm just teasing.

0:00 Brian Okken  37:38

0:00 Carry on. Do the That's funny. I also wanted to look like a bandit. Yeah, exactly. But I was thrilled that Noah asked me to speak to them. That was neat. And then the Python Aberdeen people and also like, but they mentioned that Ian from the Python Aberdeen group said that he had an arrangement with you that when you Michael that when the pandemic is over, you're going to go over and they're gonna you're gonna do like a whiskey tour or something like that.

0:00 Michael Kennedy  38:05

0:00 So I'm I don't know the details, but it sounds good to me already. Anyway,

0:00 Brian Okken  38:09

0:00 if that happens, I want to go along.

0:00 Michael Kennedy  38:11

0:00 It's a Python bytes. Audience do it.

0:00 Brian Okken  38:13

0:00 And then we have there are PBX West meetup tomorrow, you're going to speak that's kind of exciting.

0:00 Michael Kennedy  38:20

0:00 Yeah, it's gonna be fine. And people as virtual so people can attend. However,

0:00 Brian Okken  38:24

0:00 I'm also I've got feedback from both you and and Matt Harrison gave me some feedback. So I'm updating my training page on testing code. So because I really like working with teams. So if anybody else wants to give me feedback on my training page, maybe I'd love to hear it. So

0:00 Michael Kennedy  38:42

0:00 yeah. Or maybe they even want to have some high test training for their team. Yeah, I

0:00 Brian Okken  38:46

0:00 mean, testing is something that I think teaching a team at a time is a great thing, because people can can really go, I know that we can talk about their particular problems, not general problems. It's good. Yeah, for sure.

0:00 Michael Kennedy  38:58

0:00 Well, you also need more of a team buy in on testing, right? Because like if one person writes code and won't write the test, and other person is like really concerned about making the test pass, it's super frustrating. Yeah, the person who doesn't want to run the test gives a breaking the build, but like that, you know, anyway, it's a team sort of sport in that regard. Yep. Yeah. All right. Awesome. So I got a couple of quick things. Pep 634 structural pattern matching in Python has been accepted for Python. 310. That's like, imagine a switch case that has about 100 different options. That's what it is. Yeah, with like, regex Not quite, but sort of like style. Like you can have like these patterns and stuff that happened in the cases. I don't know how to feel about this. Like if let me put a perspective I get the walrus operator was controversial. Like this is this is like a way bigger change to the language. So I don't know. It's both awesome and terrifying. Yes, exactly. Yeah.

0:00 Unknown Speaker  39:50

0:00 kind of surprised.

0:00 Michael Kennedy  39:51

0:00 Yeah. Yeah. So my hands like this got accepted. It seemed to be sort of counter to the simplicity of Python like I did not at all against having a simple switch statement. Does certain things but that seems like a lot. I may come to love it. One thing that maybe would help me come to a better understanding and acceptance was if the pet page had at least one example of it in use, like the whole page that talks about all the details says, I don't believe there's a single code sample

0:00 Brian Okken  40:14

0:00 ever. Well, there's a tutorial page as well.

0:00 Michael Kennedy  40:17

0:00 So Oh, is there there's the tutorial page. Okay, maybe that's why should we go and check it out? Yeah. But

0:00 Brian Okken  40:21

0:00 it's still sort of feels like a five barrel foot gun.

0:00 Michael Kennedy  40:24

0:00 Yeah, it does. Well, but the page that I'm looking like the PIP thing that I'm listening to the official Pep, I don't think it has to have a tour. Yeah, no, you're right. It does. It does. Somewhere down.

0:00 Brian Okken  40:35

0:00 Yeah. Pep 636. Yeah,

0:00 Michael Kennedy  40:37

0:00 it's a different Pep. That is the tutorial for the pep interesting. I didn't realize that it's kind of meta, honestly. Anyway, to me, I'm a little surprised, as accepted by I know, people worked really hard on it. And congratulations, a lot of people really want it comes from Haskell. So Haskell had this, like pattern matching, like, alternate struck thing. I don't know, I just feel like Haskell and Python are far away from each other. So that's, that's my first impression, I will probably come to love it. At some point. Pi Khan Registration is open. So if you want to go to pi con you want to attend and be more part of it. And just like watching the live stream on YouTube, be part of that I think I'm going to try to make a conscious effort to attend the virtual conference, not just catch some videos. So you can do that.

0:00 Unknown Speaker  41:13

0:00 Python is awesome. Like, just I, my first conference was pi con. And then I went to other conferences, and I was like, What are wrong with these conferences? Like, yeah, did

0:00 Unknown Speaker  41:23

0:00 I so

0:00 Michael Kennedy  41:26

0:00 I feel the same way. It's, it's really, really special. I'm sure the virtual one will be good. I can't wait for the in person stuff to come back. Because it really for sure.

0:00 Unknown Speaker  41:35

0:00 Yeah, it's a whole nother experience. And

0:00 Michael Kennedy  41:37

0:00 I consider it basically my geek holiday where I get get away and like just get a hang of my geek friends having to learn stuff on there. Totally. And then Python web comm is coming up. And that's Registration is open for that as well. And I suppose probably pi cascades which Brian and I are on a panel out there as well. I put I put a link into an hour of code for Minecraft, which has to do with programming Minecraft with Python if people are looking to teach kids stuff that looks pretty neat. So my daughter's super into Minecraft I don't do anything with it. But if you are and you want to make it part of your curriculum, that's pretty cool. And anything you want to throw out there before we break out the joke

0:00 Unknown Speaker  42:13

0:00 No.

0:00 Michael Kennedy  42:15

0:00 Awesome,

0:00 Unknown Speaker  42:15

0:00 let's do it. All right.

0:00 Michael Kennedy  42:17

0:00 All right. So this one we have something a little more interactive for everyone we've got a a song about Pep eight about writing clean code this is written and produced sung by Leon santoy because by lemon and him and his team over at Python discord he runs Python discord and apparently it was a team effort creating this and the reason I'm covering a bunch of people send it over so Michael Rogers Valley center overseas should cover this dam better said check this out. Allen McIlroy said, Hey, check out this thing. So Alright, I actually spoke to lemon and said, Hey, do you mind if we place he said, No, that'd be awesome. Give us a shout out of course. So we're gonna actually play the song as part of this the live stream, you get the video on audio, you get well, audio. So I kick this off, and we'll come back and I I'd love to hear Brian and his thoughts. Here we go.

0:00 Unknown Speaker  43:14

0:00 You don't need any curly braces, just for space, just for space. wildcard imports should be avoided. In most cases, in most case, try to make sure there's no trailing whitespace it's confusing. It's confusing. Trailing commas. Go behind list items get tight and get blamed. And Commons are important, as long as they're maintained. When Commons are misleading, it will drive people insane. Just try to be empathic. Just try to be a friend. It's really not that hard just here to

0:00 Unknown Speaker  44:32

0:00 constants should be named all capital letters and live for live and camel cases not for pi. Never. Never, never use exception. These best fake B's. No one likes the horizontal scroll bar. Keep beds, saying keep saying. And comments are important. As long as they're maintained. When comments are misleading, it will drive people insane. Just trying to be empathic. Just try to be a friend. It's really not that hard just here to

0:00 Unknown Speaker  46:08

0:00 that was amazing. I like it can sympathize with, like so many, so much of what he's saying. Like, I'm just like having flashbacks to like a discussion I had with my teammate about like comments.

0:00 Unknown Speaker  46:22

0:00 being like, no, this

0:00 Unknown Speaker  46:24

0:00 comment doesn't actually describe what it is.

0:00 Unknown Speaker  46:28

0:00 It's worse than having no comment. It really is.

0:00 Unknown Speaker  46:30

0:00 It really is. Yeah. Or like, if it describes like, literally what the code is doing and not like, you know, kind of like highlight or

0:00 Michael Kennedy  46:38

0:00 background or anything other than

0:00 Unknown Speaker  46:40

0:00 the why the Why is important. Oh,

0:00 Michael Kennedy  46:43

0:00 I love it. So do things lemon and team balls on on the song and man, you got a great voice. That's actually it was beautiful and funny.

0:00 Unknown Speaker  46:51

0:00 Yeah.

0:00 Michael Kennedy  46:52

0:00 All right. Well, Brian, we probably should wrap it up. Hannah, thanks so much for being here. It's good to have you on the show. And Brian. Thanks as always everyone. Thanks for

0:00 Unknown Speaker  47:03

0:00 listening. Thanks.

0:00 Michael Kennedy  47:05

0:00 file. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes events, Python bytes as in VYT s and get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by setup and send it our way. We're always on the lookout for sharing something cool on behalf of myself and Brian knockin. This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

