00:00:00 Hello and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 225. Recorded March March 17. I'm Brian knockin Michael Kennedy. And I'm Sebastian beat offski Hey, we have a special guest. Yay. Welcome, Sebastian. Thanks. I'm excited to be here. Huge fan of the show. Thank you. Thanks so much. Should we kick it off? Yeah, yeah. I also want to say thanks to linode for sponsoring this episode. And, Brian, I've heard of people getting like smaller computers, Raspberry Pi's, and things like that. But you've got you're taking it to some crazy extreme here. Is that what's happening? Yeah. What is this thing? The Pico So actually, this, when I saw this announcement on Twitter, it's been it's actually came out in January, but we haven't covered it yet. It's kind of exciting. The Pico is four bucks for, and I know they have, they have a $5 little chip also, or a little controller. But this is really like in microcontroller land, which is, it's a, it's really pretty cool.

00:00:57 doesn't have a lot, like there's no Wi Fi on it. There's not a lot on it. But there's also not a lot on it. So it's very low powered. So really microcontroller size. One of the exciting things about this is this is I think this is the first the first Raspberry Pi with a chip designed by raspberry pi. So that was a custom Raspberry Pi chip. And what do they call it a

00:01:22 I carry Rp 2040 is the chip that goes in means anything to anybody. But but the the low power thing is what I think is fascinating and AI is because there's some there's some things that you can even you can power like LED lights and stuff with it even. And there's there is enough power to do quite a bit with peripherals. But you also can since it's so low power, this will be good for things like you know, temperature sensors and other sensors that you leave alone someplace and a microcontroller that you can like leave somewhere and then come pick up later. This is this is some and that you can control with Python is something new. And that's pretty exciting. Yeah, that's super cool. And apparently it's coming coming soon also is the Arduino Nano Connect, which comes with a nine axis IMU and a microphone and microphone, a powerful Wi Fi and Bluetooth module and crypto chip and stuff like that. So that'd be kind of cool as well, right? Like, put this thing on Wi Fi and whatnot. Yeah, and one of the other things I forgot to mention this is, um, this is the first Raspberry Pi product that has an ADC on it. So with that you can do it isn't just like you, you can add analog input, so you can you know, more accurately hook up a temperature sensor or something. Oh, right. So if you're working with like, this is your IoT thing. And you want to just work with like, plug in a voltage meter or whatever, right? Yeah. Okay, so yeah, so that's pretty exciting. And anything that drives people working with the combination of hardware and hardware and software together in a nice language like Python, very much appreciated. This is an exciting part of the Python world. I also want to mention the editor mu, that can be found at code with mu. And I don't have this up here. But they they released, they're working on the 1.1 version, and the beta two is out. And one of the things that supports is this pika board, along with some of the Lego spike products and a whole bunch of new fixes. So Oh, wow. Especially when we're working with microcontrollers. And students. That's a nice thing to have. Did you mention the price? That is $4? Yeah. Yeah. That's amazing. That is so awesome. Right. So yeah, that the later under this, the announcement, they've got like this picture of them, like wrapped up like a whole, like a reel of these. I think they're trying to encourage people to buy like a whole bunch of them at a time. It's like a candy wrapper, but you get a computer instead. Yeah. It's pretty great. Really good. I love it. That's as good as our jokes. What do you think of this thing, um, I never actually got into Raspberry Pi and all this hardware programming hardware. I actually bought the Raspberry Pi like years ago, and it was in my drawer until one day I decided to put piehole on it to get rid of the ads. And it's been working flawlessly since then. So I have Raspberry Pi somewhere there. But I'm impressed to see how they are dropping the price like $4 it's like extremely affordable. Yeah, that's really really wild. That thing pretty awesome. Also, Brian a comment. Paul Sanders in the live stream says can you use a boon to on Pico, like a regular regular Raspberry Pi? Or is it like its own thing? I'm pretty sure it's its own thing. I don't think it has a full operating system on it. Yeah, it describes itself as a micro controller right? Yeah. So it's, it's like more like micro Python Adafruit, Ada circuit Python, so on. Yeah, it would be cool, but yeah, I don't know. It's pretty small for dollars. Yeah, I think it is running microphone.

00:05:00 But I'm not sure. Yeah, yeah. Very cool. All right. Well, I want to talk about something brand new for the next item here. And that is beanie. So I came across this yesterday. And actually, I had some other thing I was going to cover like, No, no, no beanies. Cool. I want to talk about beanie. I'm pretty excited about it. Because I was recently talking with a friend of mine about Oh, what would you use with fast API and MongoDB? Well, the traditional ORM odms. They don't call them ORM in Mongo, because they don't map relations. They map documents. So they call them ODM object document. mappers. But same idea, I was talking with him saying, you know, it's like, well, what would you use with fast API, because you really want to leverage the async and await nature of the views, which is so easy to do there and whatnot. But I started looking at all the old standbys that I like Mongo engine, and some of the others, they the ORM, ODM side don't seem to be really supporting the async and await world, you start looking around? Well, there's motor, which is the official async library from MongoDB, the company that organization to support this, but the way you program there is I run a query, as you know, sort of almost like SQL syntax, and I get back a Python dictionary, which is okay, but I don't I don't really like that style, really like getting a class back, be able to do queries with the class, have the class have like types and constraints and whatnot. Because if you just working with dictionaries, it's so easy to like, forget to set it. I know, a field you didn't remember existed or something weird like that and get inconsistent data. So I ran across this thing called beanie, which is an async. Friendly, ODM for MongoDB. And we've talked a lot about pedantic ID index. Awesome, right? Yeah, yeah. So with beanie, it basically takes and uses pedantic models as the classes that map to the database. And I think that's just super cool. Very cool. Yeah. So let me see if I can pull up some examples here. So the idea is that with, you know, the document databases, you can embed stuff, so I might have one class that's containing a list of other classes I define. And that just is a record in the database. So the way it works with beanie is you create a anything that derives from base model, that means it's a pedantic model with all the validation and loading and stuff that you get from that world. And then you have a top level document that derives from this Bini dot document, which is really just a specialization of a pedantic model. So everything you do with pedantic happens here, and then you actually just work with the motor async driver, which is the official in quotes way to talk to MongoDB, asynchronously from Python. And then you can create a class embed your objects hit save, you can go and just go to your your document, just say insert one as a class insert many you can do filters, you want to do like get by ID or you can say do a find query or something like that. So yeah, I think it's pretty neat that it allows you to take this sort of blended, it's like half RM, ODM and half sort of just working directly with the MongoDB API. And yeah, it's pretty neat. One of the big notable things that I feel like it's kind of missing is it doesn't support creating and managing indexes through this object model. But I was talking to the guy who created it Roman, right on GitHub. He's like, Yeah, that's a good idea. It's like one of the next things I'm thinking about. So pretty cool. If you're doing stuff with MongoDB. And you're looking and you like, pedantic. Here's an exciting new project that people can check out. And even leverage even has capabilities for the aggregation model, which is like MapReduce plus sort of that that kind of processing, which often doesn't show up in these ODM, so people can check it out. It's it's growing, and it was almost brand new yesterday, and now it's up to 25 star. So it's not super, super popular, but it's like 25 times more popular than it was yesterday. So that's pretty cool. It's on a good track. I got a question about indexes. So if you even if it didn't support it, could you go around? And just yeah, them anyway. Yeah, no problem. You could go to like motor and do it in Python, say create index at this, you know, like, it's not created insure index, like creative does not exist index at during app startup, or you just literally could go to the database and actually use some management tool and create the indexes there. So it's not like you can't use indexes. It's just like, if you're defining the whole model, it would be cool if it could just happen as part of the class definition. As many things do. Like, sequel alchemy does that Mongo engine does that right? It's a pretty standard paradigm here. So I don't know progressing. I kind of really like the idea of having an ODM be, like this hybrid model of like, it's not really taking over hiding Mongo because one was actually not that hard to deal with. Anyway, it's adding some of these class wrappers and giving you a lot of the power of Mongo at the same time. Yeah, for sure. And you can see like, actually, the document started the blog post that analysis. This rather than the GitHub repo has a few examples. And they're all fast API. Like you have an asynchronous API endpoint and then you await note dot create, which saves it or you can await like a query. Let me see if Yeah, anyway, you can await queries and things like

00:10:00 That, which is the really cool thing. So pedantic plus async and await pretty neat. Yeah, looks pretty cool. Especially the least of features that you show. It's pretty impressive for such a new project. Yeah, this this guy, Roman, apparently, the comments in here, like, this is something I've been using for myself for a while. And it's really awesome. So now I'm just sort of putting it out there. Hopefully it grows from that. So that's pretty cool. So you work with a sink a sink more than I have? Is, is this something that could if you want, like to start playing with it? Would you have to jump into the async? world? Or could you use beanie without async? stuff? You know, I hadn't really thought about it. Looking at it, it looks like it just looks like it has to be async. Okay, right. Because the queries like the Find one create and so on. They all are wadeable. They're all being awaited. Okay. And I would I don't see away just quickly glancing at it to say, Don't be that you know what I mean? Like, I don't see how it's both at the same time. And if it is, you'd probably have to use it. So I'm guessing actually, you do have to use it as an async. But I don't know for sure. I haven't tried it. Okay. Well enough. It's a good question. All right. Well, speaking of good stuff, something I've talked about on Python, but not on Python bites. So Sebastian is going to tell you guys about something over there, right? Over there. Yeah. So I wanted to talk about a tool that I have been using for a long time. And I know that you Michael are familiar with it. Because you are a huge fan of like code quality refactoring, all that kind of stuff, like having your editor tell you like this could be better press this button to make it happen. Yeah, exactly. That's why I absolutely love the store. Because it's like one level above of, let's say, linters. Because you're when you're using pi lindorff. Like a Do you get like some warning, saying like, Look, this is wrong. And then there is sorcery that tries to kind of make your code better, it gives you like refactoring tooltips adjust as you type. So for example, if you scroll a bit down there, there is some gifts showing what they can do. And for example, if you have like an if statement, and both branches have the same statement, you will get a pop up saying that look, this can be moved outside, or for example, when you have like a follow up, you will get recommendations saying, hey, this can be turned into a list comprehension. So I really like it. And it integrates I think, with Python and VS code. So I don't know about vim. I don't think there is any support right now for stuff like that. And it's super easy to use, because you just got the pop up, and you can click Yes, I want to have this refactoring, you actually can you can see the diff of how it will look after the refactoring. And yeah, it's also it's free to use, at least in the code editor. I think they have like they have the Pricing tab. But I think you can pay to have like, analytics for your project and set it up with like continuous integration servers and stuff like that. But for like VS code in Python, it's free to use. Yeah, it looks like you get a couple of extra refactorings and whole project analysis for money. Yeah. But like the basic refactorings that can already help you a lot. They are there for free. And at least for me, I just keep getting constant pop up saying like this code can be refactored. So Well, I mean, that's pretty cool. Maybe I'm a terrible programmer. But sometimes I'm like, tired, and I don't see something. So it's nice to just click one thing and have like three lines of code turned into one line. That's pretty awesome. I don't know. Yeah. Brian, have you used it? Because I know that Michael have. I haven't used it yet. But I'm pretty excited. It looks pretty fun. Yeah, it looks really neat. And like I said, I did interview the guys over there on the show about what they're doing. And I believe that all the like one of the things that some people have worried about these kinds of tools, sometimes, you know, especially the ones that try to use like AI ml to help you. I don't think that this is one of those. they'll end up sending your code over. I think this is all just local stuff, which is nice. Yeah, I guess. Yeah. I often run, you know, I often do a lot of coding on my laptop with it with no Wi Fi connection or anything. Can I can I use? Does this help at all? I'm pretty sure. I don't think it makes any I don't think it uses the internet to do its magic. So I think it's all just in the editor and pie chart. Yeah. Yeah, I'm pretty sure that's the case. But the one thing so I use this for a while and I liked it. The one thing that drove me crazy, and possibly it's been fixed is there's one or two recommendations, like a lot of the recommendations it makes are great. But there's one or two that I really didn't like, I think for example, I was using a guarding clause. So I would say coming in method, the very first thing is like if something's wrong, returning there's an error, and then go do the thing I was really wanting to do so it's not indented, because I really liked that style. And it was suggesting that I like include, like I reversed that. If so I don't have as many as much cycle, not cycling as many decision points, right. There's not as many branches as going on there. And that's fine. I just don't have to accept that it doesn't automatically do it. But it constantly was highlighting that with like squiggles as if something was wrong in my editor and other tools like Python do that. You could just say you know what, for this thing, please don't tell me that. This is the fix because

00:15:00 I really want this to be here for a reason X, Y and Z. I couldn't find a way to do that in sorcery, and it was driving me crazy. I'm like, No, this is not wrong. Please, like, stop telling me is wrong. So I really hope you know if they're listening, maybe you could hint and add like a hash ignore sorcery line type of thing, like all the other editors have. But yeah, no, I do think it's a cool tool. And people should check it out. If it sounds interesting. Yeah, it'd be nice to have this configurable, stop complaining about this refactoring, right? Or either I would even be happy to just say, Please don't tell me about because it was like, very specific, like one very small suggestion. Like, just don't suggest that to me ever. Like, I don't ever want that. But everything else you do. I love you. Thank you.

00:15:44 Nice. Yeah. JOHN Sheehan has a comment. Some code efficiency improvements could end up obfuscating intent. Absolutely. For sure. They definitely could I feel like a lot of what it's suggesting actually is a clarifying change is like, Look, you're duplicating this code, or this is overly indented. Here's how you change it. So it's not so I feel like on that regard, sorcery is really good. Yeah, same. I have the same feeling like it doesn't try to give you like very quirky refactorings it's actually tried tries to make your code easier by like, removing redundant lines and stuff like that. Yeah, yeah. Very good point. But a tool like this that could make it more obvious. cated now there's some there's job security right there. But yeah, yeah, man. I'll tell reformat for.

00:16:32 I know, we can work on this project, but so and so quickly, reformat it to viewable work on it and re encode it. Perfect. Yeah. That'd be cool. Yeah.

00:16:41 Something else that's awesome, is linode linode. Thank you for sponsoring the episode. Simplify your infrastructure and cut your cloud bills in half with little nodes. Linux virtual machines, develop, deploy and scale your modern applications faster and easier. Whether you're developing a personal project or managing larger workloads, you deserve simple, affordable and accessible cloud computing solutions. As a listener of Python bytes, you'll get a $100 free credit, you can find all the details at Python bytes.fm slash linode. linode has data centers around the world with the same simple and consistent pricing regardless of location, that's cool. Choose the data center nearest to your users, you also receive 20 473 65 human support with no tears or handoffs, regardless of your plan size, you can choose shared or dedicated compute instances. Or you can use your $100 credit on an s3, compatible object storage, managed Kubernetes. And more to run on. If it runs on Linux, it runs on linode, visit Python by Sun FM slash linode. And click on the Create free account button to get started. So you know what I like about linode. It's like straightforward and simple. I go to places like AWS and like, What is all this stuff? And what why am I like so deep in the permissions of aim is in order to send an email over here, just connect like, it's just I like, I just want to create a server, make it go, let's do that. Nice.

00:18:00 Are we there? Were there were there? Were there? Okay, we're on to your next item, I believe. Wait, no, we're not we're I'm jumping ahead. We're on to my next item. So I'm going to go back that so I'm on a database kick for some reason this week. I mean, I love databases, which is weird, because when I first learned them, they seem so challenging and odd. And I struggled with them. But I did I just really enjoy thinking about databases, because they're like the magic of your application, right? I really slow, clunky database will just like bring it down. But a really nice polished one is like how is that so fast and smooth. Like I really like working on this site. So one that I haven't spoken much about and honestly don't have a ton of experience with but I do think is an interesting consideration is a another branch of the no SQL world and graph databases. So instead of modeling columns, you're really modeling entities, and then their relationships, like the relationship thing is first class thing. You can query by relationships, instead of querying by data, and then like joining, and so on. So a popular one for this is Neo for J. And there's some nice ways to talk to it from Python. And there's this, I don't even know what to call it. Oh, GM, I guess, right? And so I said, odium for object document mapper. So in the graph world, it's GM for object graph map. So there's an object graph mapper called Neo model, and I ran across this, I'm like, Oh, this is super cool. So the idea is that you can basically create these classes. And if you look at how you do it, it's if you've ever used Django ORM, or Mongo engine, or something like that, it's literally the same thing. So if you know, if you know Django ORM, you basically can do this, which is powerful, because it gives you a whole different way to work with data and a whole different option without rethinking the world. So I could create say, for example, a country which is derived from structured node and it just like Django, you would say code equals instead of string column, you would say string property, and it has a an index, the index is uniqueness the field is required, boom, that's it, like one line field is defined in a person, person might have a relationship back to a country and so on, and really, really

00:20:00 By the way, just sort of define this. And then you can do interesting queries on it, you can ask, like, give me the nodes? Where are the person nodes where the name is Jim. And that's pretty simple. Or you can say, give me the nodes where the age is greater than three or whatever. But also you can ask things like, give me the country. Alright, so go gym country, is that connected to Germany? Yes, or no? If it is, then Jim is from Germany. Or you can go to Germany and say, give me all the inhabitants. And it'll tell you all the people in there. And you can even say things like, I would like all the people in Germany, whose name is Jim. So Germany dot inhabitant that search name equals gym, like an incredibly simple programming model to work with these graph databases. So if you've got like really structured related data, and you want to, like follow those relationships around, you know, maybe Postgres is not the best option for that kind of data, and this would be a good one. Cool, huh. takes a bit of a mind bending, getting used to it, but pretty neat. Yeah. Have you ever had to do anything with graph databases? No. But when I was looking at your code examples, I was thinking why there is Django code? And then you start saying, Yeah, it looks similar to Django. And I was like, Okay, yeah, exactly why they're Django coded and like, into my graph database. But I think that's a huge benefit for the Python world, right? Like a lot of people know that the Django ORM model, or it's also the same as Mongo engine, which obviously, is also inspired by Django ORM. And so a really straightforward way. Like, I think you could get up to speed in an hour. If you knew Django working with this thing. It seems really straightforward. So it might be kind of cool to see. Like somebody do an example where they did the toy example in in a graph databases, relationship, relational, and the document to see Yes, what this trade offs and benefits and things, right, we've had, we've got that like, silly to do app that everyone has used for JavaScript front end frameworks to show like, here's how you build to do in Vue. js. Here's how you build it in react, I think having like this canonical database represented like side by side, like, here's the Postgres version, here's the Neo for j version, all in Python, that would be an awesome article, somebody had a bunch of time and desire. Yeah, yeah, pretty cool. Pretty cool. Now, now you can talk about your item, I didn't mean to shoot you too far ahead. There. No, so I

00:22:18 lost my window. There is. So I, I was I've been thinking about, I don't mock much, I, I, when I test, I try to test everything whenever I can, but I've been learning about mocks a little bit and mocking just because in some cases, you kind of want to so as I got into it, I didn't get very far before I realized that specking was like, like something that people found out about later, but sounds sort of magical. And I wanted to know more. And I and so I asked the twitterverse whoever follows me and stuff. If backing is something that you should do always or avoided is there downsides. And in then one of the things that I got back was star girl flowers article called my Python, my Python testing Style Guide, which includes this incredible section on mocking in, in her section is, the section is called a mock must always have a spec. And, um, and it's, it's just a really, if you've ever wondered about this, it's a, it's a really good discussion about mocking, because it's not, it's not their evil, and it's also not go run out and use them. The recommendations really are, use real objects for collaborators, whenever possible. But if you must mock, always use auto spec. And so the idea around specking, or not specking is if I, if I create a mock object, it can be anything I can, I can ask it for the date, I can ask it for the temperature of my coffee, I can ask it for anything, or I can pass it anything and it'll accept it. That's kind of what mocks do. But if you say auto spec, you say, I want this thing to mock this other class and have auto spec be true, it means I can't do anything to that class, that marked class that I couldn't do to the real thing. So all the interfaces identical, you can't do you can't do functions that aren't there. And that's where I thought, Well, that seems like a good thing. And apparently, I it is, I think it's a good thing, because you would like your test to at least require the thing behaves like the real thing, right? It might not give the real data back, but you shouldn't be able to call functions that don't exist or access fields that don't exist, and so on. And more importantly, one of the things that's that's highlighted in this article is, even if you could manually get it just right later, you might change the interface, you might change the API call, add a function or add a parameter that's required or remove a parameter that's not needed anymore. And your tests that use the mock that are custom built, are still passing, but they shouldn't be. And with us with auto spec, you will, your tests will fail at that point when the interface is

00:25:00 break break happens. So you run your tests more than once.

00:25:05 No, of course, obviously, this is this is why you know that one of the main values is this thing is locked down, I want to be able to make dramatic changes to it and see that it hangs together. And if things like rename a function has no effect on the test passing that that's not so good. Yeah. And then there's a whole bunch of other great advice that she gives up around mocking talks about consider using stubs and fakes. And even gives an example of what those are. And basically, it's like writing your own little tiny thing to substitute for the real thing. And spies, which are cool spies are like a mock wrapper around a real object. So it behaves the same as it always did. But you can interrogate like how it was called, that's kind of a neat thing. And some advice I hadn't really considered before is to the code, test code is way cleaner. If you don't give the mocks special names, like a lot of people, if I wanted to mock foo, I might kind of title it mock foo. And she says, Don't do that. Just name it foo, then your code looks a lot cleaner. And I tried it out. It does really great. Thanks. Let's help out. Any great advice on mocking. So if you're considering mocking go read that. If you're doing unit testing, and you want to not test all of your dependencies, basically, if you don't want to do integration tests, you probably should be doing something like this. Yeah. I mean, I hardly ever use them. I do things like rerouting my code through, like any kind of designed it into my code. If I have a chance I like for instance, if I if I need to have a

00:26:32 I know anything with a database, I know, I'm going to have to redirect the database during testing. So that's just built into the design of the system to be able to reroute that somewhere. Yeah, Sebastian, what do you think? Yeah, that's a bunch of good advice. So that's, that's a very good article. And I kind of agree with you. Like, I also prefer to kind of like mock a specific method of a real object not to create a mock and then add stuff around. Although I think it's a different world for mocking a method. It's a stub or one of those words, I could never remember which one is which. Yeah, for sure. And then Robert robertson is getting philosophical here, says a mock must always have a spec. Well, they add that to the Zen of Python. I don't know the item in Python. 4.0. Yeah, exactly. These are two things that are very unlikely, but

00:27:20 not extensible. Yeah, possibly. Oh, also, Dean was asking if the episode started the livestream started early today. Hey, Dean, daylight savings mismatch by a few weeks with the rest of the world, at least with Europe? Yeah, exactly. That's that's the story. All right. Speaking of time zones, and stuff that's challenging, you know, speaking at conferences can be tricky. Because it's virtual. You're not actually there. So when does it really start? But maybe least we can know which ones are out there. And when the call for proposals are done? Hi, Sebastian. Yeah. So yeah, as you said, since the Python, call for proposal accepted acceptance, emails will be sent this week, I was thinking about conferences. And since it's 2021, most conferences are moving online, which is really cool, because well, they are cheaper, because you Well, first of all, tickets are cheaper, a lot of them are free, then you don't have to pay for the accommodation, you don't have to pay for the ticket. You don't have to fly. So you don't have to take holidays. So a lot of benefits. And I was wondering, like, how do you find conferences to attend, like, there is this list@python.org that leads some conferences, but it doesn't have the smaller local events. And you also don't have dates. So you only have links to all the global countrywide conferences, but you don't know when they are starting. So I found this tool called conference Raider. And it's pi pi package that you can install. And then you get a command line tool that you can run to get a list of upcoming conferences, which is pretty cool, especially that you can have some parameters, like you can ask when you can get a list of conferences that have opened the call for proposals. So you can if you want to submit a talk, you can see which conferences are accepting those. And I really like it that you get this nice ASCII table in the terminal. Since I love ci tools. This is really cool for me to use. Yeah, yeah. I think these integrate some rich get it even like fancier tables. But yeah, it's really nice. Yeah. But the downside is that they don't have that many conferences because it's it's using only a few data sources. So when I was running it today, I couldn't find that many conferences and actually, there was no call for proposal open like no, no date was there. So I hope it will improve. But so far, this is my best tool to like find the upcoming conferences. Yeah. So if people are out there listening, they have a conference. They want to get the word out about it, you know, might as well go add, add it to the data source that these things Yeah, Yeah, that'd be awesome. Yeah, this thing's cool. I checked it out. one bit of confusion for me is if you look at the description, it says installation, you can simply use PIP to install Conrad for conference radar, so you can use PIP to install

00:30:00 Conrad, but you cannot pip install Conrad. That will not work. It may work if it does, you should maybe be concerned because someone heard the show and put something you have to pip install conference stash radar. So I don't know. Maybe just a little clarification for people wanting to check this out. But the command the COI is Conrad, show, Conrad, refresh. conradh call for proposals, things like that. You can even set reminders, right, it'll like remind you when the call for proposals closing. Oh, cool. I didn't see that. That's nice. I think I think there's a reminder feature in here. I can't remember exactly how it works. But yeah, yeah, pretty cool. I'm glad that you mentioned that because I just tried to pip install Conrad. And I'm like, it didn't work man

00:30:39 was broken. What is this thing? Yeah, I just think the documentation is like little unclear because the COI in the package name are not the same. At least you didn't get some malicious package. Exactly. Mining bitcoins right now. Exactly. Why spicy?

00:30:51 Hot. That's weird. Oh.

00:30:54 Suddenly, my camera turned on. Oh, no, we're doing live stream. That's why Yep. Yep. Oh, and also, Dean has a quick comment for you there especially Oh, this is perfect. And I think I maintain a Google calendar for conferences. Oh, cool. Yeah. I that's a good idea. Yeah, I was looking for different sources where to get the conference information. And so far, the most reliable one is my friend Mira on Twitter, who is submitting and speaking at a lot of conferences with him and he's always speaking, he's always tweeting. So that's my best bet so far. I met him at pi con Slovakia. So yeah, I know he's at a conference as often. Yeah. Awesome. Brian. Is that it? That's it for me. Do you have any anything you want to share? Oh, yeah, I almost have an extra extra extra extra here all about it section to share, but not quite. So I'll keep it keep a little bit quick. Here. We'll go through some things. First of all quick announcements. Sebastian and I have been working for as he hinted at, I don't know if this is on the recording before we started, but for like six months on a project called modern Python projects, which is a follow on sort, of course version of the modern developed Python developers toolkit thing we did over at talk Python, Episode 279, I think so we've got this awesome course out at talk python.fm slash modern dash Python dash projects, or just click the link in the show notes. And you can check it out. That's been out for an hour and 10 minutes. So that's really cool. Yeah, a lot of neat stuff that Sebastian, this is all Sebastian's work that he put into it here. So it's really cool, as well. Thanks. What would you like to see? Maybe? What do you think, quick thing to share? tell people about this course that you built? Um, yeah. So basically, my idea was to give you an overview of everything you need to know, even if you don't have Python installed on your computer, all the way up to actually building and publishing your project. So basically, we start by installing Python, I show you how to manage dependencies, we also show you how to set up VS code for programming with Python. Then we add a test and we add tools like linters, formatters, some static code analysis, then we add test documentation. Obviously, when we talk about continuous integration, there are like three sections with where we build different projects. And actually, each of them is done in a different manner. So for one, I use PI three for the other one, I don't use PI three. So we have a comparison. And all the way up to deploying where I show you how to deploy, for example, to Heroku, and how to create a Docker image. And yeah, yeah, whole spectrum. That's cool. I definitely like it. So people can check that out. That's a quick item there that just that we launched that recently. And also, Brian, our Python bytes out of em looks very bright right now. What do you think? Yeah, neat. So one thing I wanted to do, you know, people have been contacting us and saying, Hey, I heard you mentioned, like, Oh, we just mentioned Dean's name on the live stream, what is this live stream? When is it? How do I find it? So what I've done is I've updated the Python bytes website and talk Python for its live stream. But for Python bytes, if you go to Python, bisetta FM, if we're live streaming at that very moment, there's like a big red banner across the top, like we're live streaming right now come be part of the show. And then there's also a live stream menu item that will take you over and show you like the live stuff that's happening. And it'll basically show you the live playing stream. You can open that up on YouTube to be part of the live chat and so on. So live stream now on the podcast page, podcast site, if you visit it, and it's called bright You know, when you got a moment, go check out the live stream. Yeah. And then also,

00:34:14 if if Michaels up to date on it, which he does all the work on this, I appreciate that.

00:34:21 We announced when the next one is going to be so if you're not sure, you can just check it out anyway. And there should be a link there to say when Yeah, that's right. So normally what I tried to do schedule the next one, when we're done with this one, so people go there, they'll see the bike. Here's the next live streaming in YouTube as a button to say set a reminder to me and it's happening last time I think I said is Python on Mars question mark because that F plane f that that flight overview system, it was using Python to train the models, but I think it's using c++ to fly little helicopter thing. And I just mentioned, if anybody knows pythons on Mars, that would be awesome because this this is really cool and related, but it's not the same as Python on Mars. So

00:35:00 bojack nor sim I Norsemen us tweet over said hey by them by you guys asked for confirmation Linux unplugged. The Linux podcast has an interview with Tim, Tim Ken Ham at JPL, where he talks about running various machines and mentions Python. So the thing that he talks about his remember when the thing was landing and there was the sky crane that like lowered perseverance and there are all these different camera views you can see the bottom flying away you could see it like shooting up dust and coming down to all these views like these onboard cameras. Apparently all those were controlled and collected and like processed with Python on Mars. So yes, Python is a Mars suite.

00:35:38 Following up on your item, Sebastian, Guido van Rossum has sent out said that signups for the Python language summit at Python online only are now open if you represent a third party package and want to have a say in pythons feature, please sign up. So if you have a third party packages, you want to be part of this. Please sign up. I'll put the link in the show notes. Oh, wait, this is cool. There's a single developer package qualifies a third party package. Do you do you want to have a say in pythons future? They might not listen to you there. Well, I'm going to talk to the guys who do flask and Django you can go get a seat in the corner. I think people should listen to me sir.

00:36:14 Robert Robertson has a very nice meme. The snake has landed said the eagle. Right? The snake is landed beautiful for the vital thing. Alright, Sebastian, anything else you wanna throw out there real quick? Yeah, I have a kind of a curiosity. Because I started using VS code in a browser. Recently, I started a new project and everyone on the team is using VS code in the browser. And it's, it's working surprisingly well. I would never try to use a code editor in the browser, like out of myself, and never because I need to have everything installed locally. But now I don't have to use it. I'm like, super impressed. Everything works mostly. And my experience is amazing. So um, it made me think like, well, is this the future of programming, it's definitely nice to have everything on the same page, because it's like super easy to set up the same plugins, the same configuration for the whole team. People don't have to install anything. So yeah, I'm wondering to see in which direction it will go. Yeah, it's super interesting. You know, I haven't done a lot of it. But it's probably using that thing where they said, Well, this is an electron app. Let's take the UI bit and just move the backend farther away and put that in a Docker container or something. I'm guessing that's how it ran. Right? It wasn't pure. All JavaScript. Yeah, I think so. But I was expecting some latency and nothing like that. I mean, my only concern is that the browser is interrupting some keyboard shortcuts. So whenever I want to close a tab in the VS code, I'm closing the browser window, because that's the same combination that drives me crazy about about the browser editors, like I'm editing, I'm editing, I want to make this tab go away. Oh, why is the whole thing gone? Again? Ah, yeah, I didn't know what to do about that. Yeah, I know that. That's really cool. And you know, it's really applicable for like, if you got a class full of students, and they have Chromebooks, they can't install Python and VS code on their Chromebook, but they have Chrome. They're good. They're good to go. Right? or things like that, or an iPad that doesn't allow it. So yeah, we need option. possibilities there. Exactly. We have some custom libraries, and they are already available on those virtual machines with VS code. So that's, that's super easy to use. Yep, absolutely. So Brian, I put together job force, we'll have to clean it up just a little bit for the air. Okay, I'm not writing it. I'll read it already already. So I'll put it up here. So it's a it's a picture of some birds on a power line. Right. And, you know, they sort of often sit together in little groups, like, I don't know why there's hanging out on the power line. They've got like incredible balances. They're all just sitting there. And there's one bird that's like outside of the power line. It's like where the powerline stops and goes down. The birds just sitting there floating in mid air, and the other birds are looking into like, how is he just his wings aren't flapping. I was just sitting there in midair. And they Oh, he has Wi Fi.

00:38:46 And the bird comes crashing down. And he goes the falling bird screen. Oh, darn router.

00:38:52 I love I thought it was good. It might not be totally safe for it. But it's good. Yeah, there's a lot of routers that aren't properly tested with Wordsworth's equipment. Yeah, yeah. I mean, if you were floating, suspended in midair by your Wi Fi, then it stops. That's a little risky.

00:39:07 That's good. Well, thanks, Sebastian for stopping by and doing the show with us. Thank you for having me. We're fun. Yeah, most fun. Thanks. Thanks for coming. Thanks, Brian. Thanks for being there. Thank you. Bye, everyone. Thanks.

