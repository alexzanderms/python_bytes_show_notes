00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 126. Recorded March 24 2021. I'm Michael Kennedy. And I'm Brian. Okay.

00:00:11 And I'm Kelly Schuster. paraders.

00:00:13 And I'm Sean Tiber Kelly. And

00:00:15 john, welcome. It's great to have you both here. Super, super excited to have some teachers in the house.

00:00:21 Super excited to be here.

00:00:22 So yeah, hello, no killing Sean are hosts of teaching Python. Is that right? For the podcast?

00:00:28 That's right. So Kelly is the teacher that codes and I am thanks for new merchandise, the coder that teaches so

00:00:37 that's fantastic. Yeah, so you guys both run together co host a great podcast. And what's the general focus? Like if I was in the general teaching space? And I wanted to learn how to bring like Python and technology into my classroom? That's the main audience, what would you say?

00:00:52 The main audience at well has grown. It originally was designed just for teachers. And I think we thought that they would be k 12, or maybe college teachers, but it has developed and to teachers in the developer world and businesses. And we kind of bounce off each other's ideas. I am a love life or teacher. And Shawn is a geek.

00:01:17 Together, you have this superpower. Fantastic. Yes,

00:01:20 absolutely.

00:01:21 Yeah. So we've been learning a lot from each other over the last couple years and having great conversations about what it means to be teaching code and why it's important and why it matters. You know, this is such a huge part of everyone's lives now. And the earlier that we can start with students and helping them learn about coding. It really helps them in so many other areas of their lives. So Kelly, and I just started recording it, we one day started pressing record on it publishing the podcast, and I think we're a couple 100,000 downloads later, still going strong.

00:01:50 That's fantastic. You know, I one of my passions is that I think people really, we don't need a million more CS students, what we need is a million people who have programming fluency and are passionate about something else and can combine those two things. So

00:02:03 yeah, I get a lot out of the podcast, just as somebody that I don't I'm not a teacher, but I teach people. So there's a lot of stuff around that, too. So I like the podcast.

00:02:13 Thank you. You like

00:02:15 data classes?

00:02:16 I really like data classes a lot. Yeah. It's kind of why I'm covering this. So there's a there's an article called the called by person, Jackson, who wrote data classes versus named tuple versus object I Battle of performance. And it's, you know, it's a, I was interested in this because I kind of thought that the the data I was I really like data classes, but I thought I heard from somewhere that like, they were slower than other stuff. I had used. Basically, I used to use named tuples a lot. But I really liked the data class abstraction and in the features that it has, and I was slightly concerned, I mean, not very, very much because they weren't fast enough for me, but I was interested, I am interested in whether or not I am intentionally putting something in the code that I might have to refactor later. But so this this article, he he does a, a test example, or and times it for using exit Waze, let me read this, he does the size and speed of creating reading and executing functions with objects named tuples. And data classes. And the result is kind of they're they're really comparable. There is differences, but they're really close. So I think I think, for me, the outcome of this is, is that there, Mister, if I can grab this table, that it's about a wash, they're all kind of similar. So whatever works for your code, I say go with it. But I'd like to hear from other people. I'd like to I'd like to know if there's other studies out there that compare these in either validate the same thing or find some different results. I'd love to hear from from people.

00:04:00 Yeah, a lot of these are measured in microseconds. And that's kind of beyond human comprehension, unless you do a whole bunch of Yeah, that add those up. So for me, I think one of the real valuable things is, you know, like the data classes, they can specify types, like this thing is an integer. And that thing is a date time. And that's a string. That's an optional string. And I think that communicates a whole lot. And then sort of follow on, like, you can easily extend that to things like pedantic for validation and conversion. And, you know, unless they're really far off, I think that this extra information that communicates is, is highly valuable. Yeah, I was gonna ask Kelly and Shawn, like, do you even talk about types, data types? And how do you cover that with the generation

00:04:42 I was actually just teaching that about an hour ago to students, we cover that in the very first week about how objects have types and what you can do with different types of information and it's a really basic thing that I think they need to know from the beginning. because later on, it just gets really confusing if you don't have it. This concept of of typing, we do try to, you know, using type hints here and there. And I find that sometimes with teaching, it's helpful because they have that visual reference, like, oh, if I'm designing a function, or I'm making a method in as part of a class, I can hint at what the types are. And the students can see that as we're coding together. And it makes it much clearer for them what the arguments are going to be or what the return values are going to look like,

00:05:23 I was actually looking at this article from a whole I do this, you know, 360, kind of look, I was reading this article, and I was like, Oh, my gosh, I love this, because now I have an entryway and to telling the kids about the finance. And I was telling Sean, I was like, do you know that Limbo is the mo was coded in Python. And I do this all the time. So this whole FinTech data classes, kind of push for the kids. And then I started searching real Python, as I always do. And they have a great article about how they use data classes with the cards playing cards. So it's something that we don't really do the data classes part, but I do talk about a lot of data types.

00:06:03 Okay, yeah, that's pretty neat that you will actually do cover I mean, you're going to run into problems. If you try to concatenate an integer with a string, it's going to crash. And so you kind of got to say the numbers and numbers can go together strings and strings and go together. You don't have to go too deep in that theory, though.

00:06:17 Oh, my sixth graders, sixth graders can regurgitate it, they can't stop.

00:06:23 One of the things I love about data classes is the that you can specify the default values for all the fields. And you can do that with named tuples. But it's weird. It's a weird add on that you have to do. Yeah, I've always found named tuples to be a little bit confusing to explain to other people. Like once you get it, you know it, but then you're trying to teach it to someone else. Right. Okay. It has this weird construct that doesn't, yeah, doesn't follow a lot of the other stuff. But I do like the data classes, because it seems to follow along with a string of really nice language features, like with F strings and data classes where you know, whether you want to use them or not the they're well optimized and efficient compared to other options. You know, f strings can be faster in a lot of cases than previous formatting. Looks like data classes are continuing that trend in a really nice way.

00:07:06 Yeah. Cool. All right, this next one I want to cover but before I show on the screen, to ask you to guess, do you do stuff with any like micro micro things like Raspberry Pi, or any Adafruit stuff? Now?

00:07:19 Throw them at me?

00:07:22 It's not, it's not a ninja star. It's what is expressed Express boards. Yeah.

00:07:29 Yeah, we have a ton of them in the classroom. Kelly has a love, hate mostly hate relationship with hardware. But we have a lot of hardware that we use for coding and Python and making things happen. Nice. Alright, so

00:07:41 let me let me put this one here on the screen. And let me take take apart the title, because there's a lot going on here. So this person, I'm not sure the name of the person who actually runs this blog, but it's the DIY life about like little micro things, and oh, no, it's by micro climates, right there. And the title is, Can my water cooled Raspberry Pi, cluster, B, my MacBook. So this guy built a water cooler, has a water cooled Raspberry Pi a little pieces, and then got a cluster of eight of them all running together? And he said, Well, this is pretty amazing. You see if I can get this video to like, sort of move up. So y'all can see in the section here where we're there. This is a crazy looking device here. Once we get rid of all that. It's like what it sounds like a cluster of eight Raspberry Pi's all working together. And they're literally water cooled, so they don't overheat. And the question was, well, let's like, throw some Python math at it, and see if there's like a good thing for say, like data science, or you know, maybe you got kids, you wanna read stuff on it, or whatever, and you know how to go. So there's a lot of interesting things. And I guess, you know, one of the first takeaways is just wait, there's Raspberry Pi clusters, and they're water cooled. What is this? This is crazy. This applies, you

00:08:55 know, so I had seen this before, I think I've actually seen one of these in person. And they have people have been building cases for these, it'll hold 812 16 of these stacked up. And I always thought of it as a way to inexpensively learn about parallelizing, you know, clusters of machines, right? Like you can buy or build a cluster for a few 100 bucks instead of 1000s of dollars. So they're great for learning. But I never thought anybody would try to like watercool it and make a performance out of it.

00:09:24 Exactly, exactly. It's really wild. It's really wild. So the other thing that I think is an interesting takeaway, that I'm not going to cover it because there's just too many little details. And they rip by really fast in this presentation that I'm linking to. But there's all these rules for running Python code distributed across just multiple nodes of things that run Python. So the way they set it up over SSH to make them communicate and do message sharing so they can parallelize the computation is pretty neat. And I think it applies beyond the PI's. It's just anything you can SSH to more or less. So that's pretty interesting. So for some numbers, there's some numbers in here. I No, he's got some graphs. But I don't know the put the numbers. I think the numbers are just in the video. Oh, wait, here we go. So I'll just read them off this give you some real quick numbers. So he has this, like wimpy Core i five HP laptops as well what am I going to compute the number, find all the primes up to a number 10,000 100,000 200,000 for the HP is like one and a half seconds, 74 seconds, and then almost five minutes, 267 seconds. So let me grab my MacBook Air older one, not the m one and says okay that things a lot quicker, actually, surprisingly. So point eight seconds in 83 seconds actually a little slower. And then as it gets longer, I think because it doesn't have the right cooling. The longer it takes, the more it slows down. And then he says let me run it on one note on the cluster, which is 1.5 seconds, which is actually faster than the HP but not quite as fast as the MacBook Air and then runs it on the grid and gets it down to instead of 355 seconds to 85 seconds for 200,000 of them. So it's pretty fast, right? I mean, compared to these old, slower computers, that that's kind of chugging along.

00:11:03 Yep. Yeah, these new Raspberry Pi fours that are out the the latest version. I mean, they're really fast and really powerful. Like people are using them to transcode. You know, video streams for Plex servers and Plex devices and things like that. You can run your whole house on it with home automation, like there's a lot of power. And it's still just like 35 bucks.

00:11:23 Yeah, that's crazy. And people are running using like ad blocking DNS things for their local networks, all sorts of interesting things. So well, I couldn't resist running this on my two things that I have, see what I would get. So I am an M one Mac Mini, which is quite fast. Those those m one chips are really crazy. And so instead of having 355 seconds on the MacBook Air, or 85 seconds on the eight core watercooled cluster mines 91 seconds on my Mac Mini and it doesn't make a sound or get warm, which is crazy. That's single threaded, and then I ran it multi threaded and got it down to 26 seconds, which was pretty interesting. Yeah, and if you look at the actual, this is the CPU load over time. And it turns out the way that algorithm they're using to break it down as the longer ones are much longer and so the early ones finish, it's not an even distribution. So actually there's some room for improvements or whatever there. But the other one I want to just show you all because this is kind of crazy. I have a an Alienware simracing setup that I have. And it actually just blew is Oh, it did 200,000 in 10 seconds. But there's a price one that it's expensive. I mean, that's like a straight price. But there's also a price and sound like I actually recorded it because it was so loud. Let me just play it back. Here it is just sitting there nice and quiet. Starting to make some noise. I'll just keep talking normal so you can compare. But it's really kicking in right now. I'll move over close to it in a minute.

00:13:13 How about that? That thing is screaming like you could barely talk over it if you're in the same room. But 10 seconds, it is pretty fast.

00:13:20 I think I have a robot vacuum that's quieter than when it's running.

00:13:24 I think you need to correct that open and water cool it.

00:13:28 Actually this is the highest performance when you could buy from Dell from Alienware, that's not water cooled. I'm like I don't really want to have to maintain my computer so I'm not getting a water cooled one. I don't want to like take it in for oil change oil or whatever, you

00:13:41 know, takes in the original discussion in the video. There is a disk it's a it's single threaded for all the computers and then parallel on the on the mini or the not the minis the pies pies. Yeah, yeah. But But then in the comments. Some people said Well, what about that and so there's there's an update with all the data with it parallel to and it's still really fast on the parallel but it I think it's interesting to have the the the speed comparison, but I think one of the things that's important that Sean points out is you get like two or three of these and you can start to explore parallel computing and distributed computing with under $100. So that's don't

00:14:24 give please don't give him any more ideas. We have things all over the classroom. I don't need any more like I think Kelly is there

00:14:32 something you can water cool maybe like set up a water cooler?

00:14:36 No, but I am going to get the water gun and start squirting him over if he keeps a brings it.

00:14:42 But like a comparison that would be like trying to get what six Mac minis together. And that's that's expensive, right?

00:14:49 Right a lot. Right. And

00:14:50 a lot of classrooms might have some of these laying around from other projects that you've done or a class set and if you wanted to have a student do an individual project with it, you just start putting it together and you can make it work. It doesn't have to be water cooled in order to be a good learning experience.

00:15:05 So what is it? What that is he's overclocking it is that the reason why it needs to be cool? Yeah,

00:15:10 yeah, you can, you can push them pretty hard and they heat up, there's just a small chip on it. And most of them will, you'll see people put fans and things like that on it. But the water cooling is the next level of I'm trying to push up pi. Really, really far.

00:15:25 I will point out in the the in the video, they linked to a multi threaded thing, script and I ran the multi threaded script. And it gave me the same times in the C it only seemed to be using one CPU, it ran a bunch of stuff, but then I'll put all the work on the one of the cores. So in the show notes, I wrote my own version that's truly multi threaded, and it's up there. So also Sam Morley out of the chat out of the live stream says piehole is great. Yeah, this I've been thinking about setting on these up to sounds fun. But Kelly, I think you're up next with this one, right?

00:15:54 Yeah, so it kind of segues Well, you have the Raspberry Pi, that's something easy for a lot of students to get into it's cost worthy and stuff. I'm gonna throw this out there. It's the app for that this is programs. And I'm sure everyone has heard of this website. It's a platform, it's got 50 million people on it. But what's really cool for me is that I'm always looking for something to do on the go. And I download this program as and it's on iOS now, which is great. It launched in iOS last year. And the thing that I love about this over all the other apps out there is it's got a really great ID interactive shell, it's beautiful. I don't know if you've ever gone to the website or program is our program is I don't know how you pronounce it. And it's very clean. So you'll see the same sort of website design on their app, everything's interactive, they have challenges and programs. But putting that aside, the whole reason why I put this out there is we just had so many kids online from COVID-19. And the digital divide and the kids not being able to access, I went and I looked in UNESCO and I was trying to find out how many kids were actually trying to learn online last year, and they estimated about 826 million learners. And like, out of all those learners, 50% of those people did not have a household computer. So these guys who are out in Nepal have brought Python where you can code and learn and program within this tiny little app. And it's just easy to go and learn in bite sized chunks out how to throw it out there for you guys.

00:17:31 Yeah, that's, that's really neat. What have you all done for remote stuff has it how much has been remote and how much has been in person.

00:17:39 So we went back to school in August, and it's hybrid half and half. And our kids are lucky because they all have computers and most of them have pretty stable Wi Fi. But I know a lot of the other public school systems they've had trouble kids have had to go to like other people's houses, they've had to borrow some computers they tried to deploy. I know England deployed, one of my former schools deployed all these laptops out to all a lot of their free schools or their public schools. So it's been hard for a lot of learners and just to be able to keep up learning on a phone, because almost everyone has a phone. Yeah. So

00:18:15 yeah, that and Google Docs and zoom, and you can kind of piece it together to be able to do multiple things there. Yeah, that's great. It's a good recommendation, does it cost any money.

00:18:23 So that's the great part. So there is a free version, because there are some really good apps out there that are paid. So there's a free version, and they do have the advertising but the advertising is after that chunk of information. So you get this great chunk. You know, you're learning about functions. And then there's a quick advert and you can x out. But if you don't want any of the adverts you pay for I think it's like 2429 a month, but super, super super. It goes all the way up to decorators. So nice. But that was pretty cool.

00:18:52 Yeah, this is really neat. And seems like a nice little environments, gotten syntax highlighting and all that.

00:18:57 Yeah, it's fun, though. Yeah, no,

00:19:00 that's a great recommendation. Brian, what's your what's your next one

00:19:03 here? What is my next one? Oh, um, this is gonna need the the New York University so right. Yeah. So there's an announcement that NYU has secured funding in the order of $800,000 over two years to to go towards packaging and the packaging improvement and what else integrating for PIP and downloads and all that sort of stuff. Improving the resolver This is kind of exciting. This is a this is a lot of money. Yeah, that's

00:19:35 a really big deal. Yeah,

00:19:36 this is awesome. The so it actually had to look some stuff up. So there is some interesting information there is like why New York University? So they've been there's been some researchers that have been working on it for a while. There's a couple of the things I had to look up. So the specifically, well let's just say specifically what they're doing the What this money is going towards, it's to further assess and improve pips, dependency resolver. And then following the work done in 2020. And make also make the resolve lib more usable by other tools in the packaging ecology. And then in the pipe API to user pipeline, we've been talking about security problems, some on the show and read about others, they're going to try to integrate the tough support for signed packages through pi clients. And they're targeting conda, Pip and bandersnatch. So there's a lot there had to look up one, the resolve lib, so that is a there is a third party is a separate package. But it is related to PIP because it's vendored into Pip. So resolve lib is vendored into PIP and I think they'd like to it to be something that's usable by other other tool chains, as well. And so there's improvement needed there. Never heard of bandersnatch before, or if I have I forgotten, it's a pie mirror client. So and I think it is, is needing some support. So that's good. And then tough when that gets tough. So TF is the update framework. And it supposedly helps, according to the website, helps developers maintain the security of software update systems, providing protection against even against attackers that compromise the repository, or signing keys. So this this notion of, we're building up our company, even based on collection of open source packages, that needs to be like solid, right. And it's more than just signing or pinning your requirements, diversion numbers, we want to make sure that the sources are there. And I'm sure there's a lot of details in there that I don't understand fully. But this is a good thing that we work on this more.

00:21:48 Yeah, I totally agree. I mean, we're, we start to teach our students about, you know, installing packages and how you can use other people's code. And what I'm really hopeful for here with this is that if we can protect this kind of critical infrastructure of Python packaging, and at the same time, keep it really simple for people who are entering into Python and learning about this, as well as other aspects of the community, we still want it to be as simple as pip install this or add it to the requirements file. But to have that level of trust that what I'm installing is not going to break my, my code or my machine and put other people at risk. And it's really valuable to have that level of trust in the system.

00:22:26 Yeah, I think it's This is amazing. You know, the biggest surprise for me is that so much of this National Science Foundation type of stuff really has to do with the around the whole side pie side of things. So it's been more focused on your NumPy, pandas. conda. And the fact that this is just on hip, and the native IPA stuff is pretty interesting. I think it's also this a lot of money. Yeah.

00:22:52 I mean, I think once you pair this with some of the other investments that we're seeing with, like, you know, Google investing in, you know, with the PSF, at a high level, you know, everyone is recognizing this as something that we need to go go work on and make sure it's right. Yeah,

00:23:06 yeah. So how much do you to talk about extra libraries with the kids?

00:23:11 Um, we talked about it a lot. I think it's definitely we started off in the with the sixth grade, obviously, importing turtle and stuff. And I always like to say to them, like, this is where the smart guys coded everything. But, you know, I was corrected A long time ago and just said, some really good coders coded this. Everyone can be smart at one time. Actually, we had a kid come in today and ask how he could package his little program. And Shawn was looking for that. And I was like, is it pie pie pie, pal? And he's like, No, not that Kelly. I'm like, Okay.

00:23:44 Yeah, we do. We do a lot with external libraries and packages, because that's, you know, really the strength of Python as an ecosystem and other languages is that it's not just, you know, using the code that you can come up with out of your own head, but being able to leverage the amazing tools that other people have built and shared in the world as well. So we'll go through things like matplotlib will do. One of my students found the we finance package and was able to get historical Yahoo Finance data out of it and was having a lot of fun with it. So they love learning about all these little packages that they can install and start working with.

00:24:18 They like the ones that do like the crazy stuff, like hide their passwords.

00:24:23 I bet I can imagine that, you know, it's part of the magic is instead of saying you have to do all this work, you just install this, you run these two lines, and then there's something's really cool.

00:24:31 Yeah, what pi pi jokes package is good.

00:24:36 But I think that there's I mean, jump right up to the question of how do I package my own code to share it? And there's, there's like tons of different levels of that that are good to, I guess, cover, probably relatively early. You don't have to push it to pipe it to be able to make a package and email it to somebody or something. Yeah,

00:24:53 yeah. Hey, before we jump on to my next item, I just want to pull out a quick little band shout out for Kelly and Sean Robert says big fan of your podcast I'm regularly bringing some of your thoughts and suggestions to our science staff here at the Science Center.

00:25:07 Very cool. Very cool. Thank you.

00:25:10 Alright, so Brian, I've been known to do an extra extra extra hear all about it type of thing. Yeah, cuz I just got too much. Well, this one goes beyond that. Because this is eight extras off fit into one. Oh, my God, this can't go at the bottom. This is just too much. So I'm going to go to try to share this. They won't see they're seeing a blank screen. That's that's not so good. Let me see if I can remove it add back real quick. And then we'll carry on. We'll have to just roll with it. Alright, but extra number one, we are on Audible. Brian, and we are on amazon music. Yay. Yeah, this is brand new. I have no idea if anybody's listened to it or anything over here. But there they are. And also I know teaching Python is at least on one of these. I'm not sure if it's on both.

00:25:54 Yeah, we're on both of those. In fact, my five year old sometimes at bedtime, he has a little Amazon echo.in his room. So he'll be like Alexa, play teaching Python podcast and it'll come up and start playing. So it's probably on Alexa. Also, if you ask for Python bites, it'll start playing the latest episode.

00:26:09 Yeah. I can't say that in here. Otherwise, she starts talking so.

00:26:16 Exactly. Exactly. You just set off of that. 100,010,000 Alexis. Alright, so that's really cool that it's on there. They reached out to us and invited us to be part of it. I'm like, Yeah, that'd be great. They don't like re encode or re host or anything our stuff. They just share it, which is great. Also, last time I covered no Sebastian Ramirez covered sorcery. And I said, I love sorcery as a place thing to add into VS code and pi charm that will automatically recommend refactorings like, Oh, you should rewrite your code in this cleaner way. But there are certain recommendations I didn't like and they drove me crazy. And that couldn't turn them off. Well, apparently since September, you can turn them off. They've told me. Hi. So a couple of listeners as well. Let's see, a couple of listeners sent out a message and said, Oh, you can do that. And then also, the folks over at sorcery said, Hey, you know what, that's actually a thing, a lot of complaints and so on. So Brian actually refactored and cleaned up all the Python bytes code, which is like 5000 lines of Python and refactor to almost with all of the recommendations and yeah, there's a bunch of stuff. It's really nice now.

00:27:15 Okay, well, I definitely get to check it out. If you're if you're saying that they're good.

00:27:19 Yeah, it's pretty neat now, so there's like a commit for the Python bytes website that's you know, like 47 files changed or something like that I had to go through a whole bunch anyway that's all good so I can recommend that fully now. Dustin in Graham by way of Matthew feickert has been a guest on the show here as a bunch of Lh see stuff and certain stuff pointed out that you know, Dustin Ingram said I didn't know I could become a PSF member until I realized that just contributing five hours a month boards budget is all you got to do and then you can self certify yourself and he's got a link to go find out how to become a PSF member if you'd like nice yeah. Little follow up by Brandon brainer. Using tertiary notice prodrome seemed to slow down a lot hang on centerset I you know I can't speak to that on my I haven't noticed any difference but you know it's my M one version that so it seems alright, but you could

00:28:11 powerful a computer I don't see it

00:28:15 joining on the pie or whatever you

00:28:18 know, where I definitely wouldn't see whatever here it it works on my machine. It's fine.

00:28:24 More follow up. I mean, this is just going on here. beanie, the new ODM, the async ODM object document mapper for talking to MongoDB asynchronously, I said, Hey, it should have indexes. They agreed it should have indexes. So they added a whole mechanism to add indexes to MongoDB through that, which is pretty awesome. power, the power of the power. Power, I recommend it.

00:28:47 I was silently hoping that it was going to be a package for like baby Beanie Babies that can float across. But we should get Anthony Shah to like do something like that.

00:28:56 Maybe a little animated emojis in the terminal for the perfect, perfect.

00:29:01 Well, you know the power of suggestion on Python bites like now next week, we'll be able to cover the new Beanie Babies module and beanie.

00:29:08 Exactly. If it's all Beanie Babies. They're collectible. And you can even get non fungible tokens for certain ones. Okay, so the next one is projector that we talked about remote code execution connecting VS code through like a remote interpreter or Python. Apparently, there's this thing called projector at JetBrains that will allow you to install the entire UI of something like IntelliJ or pi charm or something like that, and then access it over your web browser, but have the entire thing running somewhere else. So you could be a good if you have like an environment like an iPad or something where you couldn't, you know, install Python but now you've got all full on pi charm for across the web. So I'll link to that. Another follow up brain. We talked about using SQL lite as a single file format. So instead of making up your own file format, just put stuff in SQL lite is just a file. It has easy ways to talk to it. audacity of all things, the audio editing software has been completely rewritten for version three. And guess what? It has a single file format. That's sequel Lite. That's cool, right? I used to use it se. Alright, that was the last time we also talked about Neo model, which is a way to build Python classes that do graph databases. Super fun. Pricing, Daniel said, Hey, I came up with this really cool example where you can do things like explore. Let's see, if I go over here we could explore things like here's a person like Tom Hanks, what movies did they act and what were they directed by? And then you could just traverse these relationships things explore, like follow the chain of like, well, Tom Hanks, Tom Hanks acted in Castaway, which was directed by Robert so and so and then who else starred in there and like a really interesting way to like explore this kind of things.

00:30:46 I'm surprised I didn't use Kevin Bacon as the example. It would have crashed.

00:30:49 It would have crashed Michaels on one.

00:30:53 My, sorry, my teaching side of me really loves that little graphic organizer.

00:31:00 I really, yeah, it's really great, isn't it? Alright, and the very last one else Sergio Sanchez just wanted us to give a shout out that a call for proposals for Python, Latin Latin America just went live so people are in Latin America or I guess you know, things are remote really could be anywhere at this point, probably. So if you want to be part of a conference and speak, go do that.

00:31:20 I'm going to nudge Kelly for this one because she actually speak Spanish is taught in Peru. Like so I think she'd be a natural fit.

00:31:27 Though. The good thing about everything in pythons in English, so we're good, right.

00:31:33 I suspect a lot of those talks are actually in English as well.

00:31:36 I did attend a Charla at the pike on a couple years. Oh,

00:31:39 yeah. Okay, cool. That's a Spanish language track. Yeah. That's very cool. That's very cool. All right. There's a lot of follow up. A lot of comments here in the chat. Really quick before we move on Brenda says m one power. Robert says a couple of sent Anthony a few tweets to get this going. But he's so far he's not made the Beanie Baby thing Dean's excited about I'm sorry. There were so many things that are urgent one. Robert asked if I've tried the projector? No, I haven't. But apparently our studios had this as well, which is pretty cool. And Sam Morley says I still want the walrus operator sticker that Emily Morehouse made for Python a couple years ago. Yeah, that's cool. I have no idea how to get it though. So and then Dean is excited about the web UI for pi charm. All good stuff. Alright, john, I think you got the final item right here, right? Yeah, yeah, this

00:32:27 is an article I found because we're starting a new quarter in our classrooms. So we teach middle school students, 6/7, and eighth graders that are 11 to 13 years old. And one of the things that I've found from other teachers and instructors, regardless of age level is those first few classes of a new course, are usually filled with the same thing, which is everyone downloading Python. Now we all have the right version of Python. Okay, now, what editor Are we going to use, we have all the same editor version. Now we start to get into dependencies and requirements. And no matter what you're teaching, just those first few classes all seem to be filled with just setting things up, right. And that's not fun for anyone.

00:33:05 They're excited to get started. And by the time you get to like I'm not excited anymore,

00:33:09 right? And then, and then someone by the end, like, you know, two weeks in, it's like, well, why isn't this working? It's Oh, because two weeks ago, when we set this up, you got version 1.04. And we needed 1.07. And that's why it's not working. It's just a pain to manage all this stuff, right. So I didn't think about using them this way. But there's a whole guide from Bridgette Murtaugh at Viet from VS code about making development containers for education. So you can Docker eyes, a development environment and distribute that to students so that each student can just open up a Docker container with all of the right versions, all the right requirements, everything pre installed, right down to environment variables and starter source code for them to work with. And it's pretty neat. You need VS code and Docker desktop to do it the way that they're talking about, but I think you could probably generalize it to a bunch of other things. And in VS code, you can deploy right from a Docker repo, or a GitHub repo. So you give it a repo URL, it'll pull down the the Docker file, create the Docker container and spin it up for the student and they can start coding right there in VS code using everything already set up and ready to go. I think the only other requirements they have to have Docker desktop installed on their computer. So you know, the one thing that I thought about like maybe there's a way to tinker with us is could we spin up a Docker container on a remote host, and then even remove the requirement for Docker desktop on the students local machine?

00:34:33 You might be able to install something like just the Docker command line tools without full on Docker desktop, which might be something you could do just copy them over something I'm not entirely sure.

00:34:42 Yeah, but there's so many cool things that you could do here. And, you know, since you can actually run VS code in a Docker container, you can potentially get to a full Docker package that has VS code, the Python environment that you want and all the source code ready to go. And they're even using it for you individual assignments. So once you've got them set up, tell like, Hey, here's your next assignment,

00:35:03 here's the container to use, and it gives them everything ready to get started. It's really neat. And you both talked about having these cool packages around that, you know, it's really great to just import this thing and do the amazing thing. You could have the Docker container come pre configured with every package. So you don't even have to talk about virtual environments, or PIP or anything to the end, when you're like, oh, by the way, here's how you get this, but it's just gonna work right out of the box, which is cool.

00:35:30 Good, good, cool, I

00:35:30 was just, I was gonna make a joke. Again, that would have saved me because I got lost in my, my virtual environment a couple years ago, and I haven't been able to find my way out. Sorry, go ahead shot.

00:35:42 The other thing that I thought about too, though, is that there's definitely value in still giving the student the manual setup instructions, right. So if we, you know, give them here's the container version. And then also, if you want to set up your own local version, here's how you would do it. That way students have a chance to differentiate, you know, if they want to just press the button and go with a container they can do that. I think Dean in the comments is saying, you know, we could just package the whole student's whole computer inside a Docker container that might work two

00:36:10 containers all the way down.

00:36:12 Yeah. Yep. But there's definitely a lot of really cool stuff here. And I'm, I'm definitely interested in trying this out. Because not just Python, you could do this with a whole ton of different things. Like if you wanted to have a full stack course, you could have a container for the front end the container for the back end. Yeah. And let them develop separately.

00:36:29 You don't have to worry about how do you set up the database and just do put this line in there. And you'll have a database?

00:36:34 I mean, that's what for me, I think that's like a huge win for a lot of people who are getting into code. Just being able to say, Shawn, give me that package. Let me click on it, open it up and ready to go. That would help a lot of people stay into at least get hooked into coding, because messing with terminal doing all the folders in the system. It's it's a brutal ride for newbies.

00:36:57 I agree this Yeah. And Robert definitely likes it. Great find.

00:37:01 Yeah, nothing. Nothing else for me on that one. I'm

00:37:03 just gonna replace those first two days with getting everybody on the correct version of Docker. That's right. That's right. We've just

00:37:09 swapped one thing for another.

00:37:12 Exactly, exactly. All right. Well, that's it for our six items. Brian, anything you want to share? anything extra?

00:37:20 No. Um, yeah, just. Yeah. Cool. I

00:37:23 absolutely over I blew it out earlier. So we're all good on that. Let's see. Kelly. Yes. Today, the training summit.

00:37:32 Oh, yeah. No, sorry, the educational summit. So yeah, this year, they are doing both the educational summit and the training summit separately, which I thought was really cool. And a lot of the topics that they're looking for is how did we survive with this online virtual environment? How did trainers do it? Not necessarily us in education? But how did the trainers survive with getting through the training? And just they're looking to promote it, I guess, and the fact that you can attend both I know, when we went to pi con, we had to choose between the educational summit and the training summit. So we weren't, we're able to do both. And now you can attend everything. So it's pretty cool. Yeah,

00:38:15 that's a real bummer that these conferences aren't in person, right. Like the last time, we got to hang out Kelly and Shawn, we had breakfast in Florida was great. We just happen to be in a more general area. That was such a weird happenstance. That's not gonna happen right now. But the flip side is people can come from all over and attend these conferences, no matter what now, you don't have to actually go there.

00:38:35 Yeah, that's great. Shawn. And I were in Monterey like two weeks ago, Mexico.

00:38:41 Berkeley, it was the same temperature.

00:38:45 Nice. Alright. And then some other ones. These are your Sean.

00:38:50 Yeah. So this one I thought was pretty cool. We use repple it a lot in the classroom. So it's, you know, online coding environments that you can spin up and start coding and, and, and share. And they have really cool features like multiplayer mode, where people can be pair programming together in a shared space. But one thing that they did, speaking of Python packaging is they had their own package cache that they created four replicas. So for a lot of the common third party libraries that they are using and a lot of rebels, they will, they'll cache it now. And they're getting like a 40% speed improvement on spinning up a new replica instance when they need it. And then you also just they're not hitting the peipsi index all the time for all that data. It's right there local with them. So they don't have that same sort of load on the caching servers from pi pi.

00:39:37 Yeah, that's great. Well done to them for the next one. Like it makes it better for all their users. But the bandwidth costs if it had to be paid of pi pi is like $40,000 a month. It's a lot so but let's train on that system. Yeah, thing. Yeah.

00:39:51 Yeah, I thought that one was really good. The other one, and this is this is a project. I'm a huge fan of the home assistant project, which runs Python three, and you can run it on a raspberry Pi is has just the company that runs a lot of that or has a lot of the core developers for that project has acquired the ESP home project. ESP home is a little side project that lets you take tiny little microcontrollers that cost five or 10 bucks and make your own DIY Internet of Things devices. So this is really a kind of a cool way you configure it with a yamo file, and you can push the yamo file over to the microcontroller. And you can make your own little devices. So I made a pool heater controller for my swimming pool here in Florida. an ESP home microcontroller. So they have all these great examples. People have done things like NFC sensors, so you can tap tags and play music, Roomba components, washing machine phases, you can tell when your washing machines on and off, they have basically all this great stuff there. And Naboo casa, the company that has all these core developers just bought it and is bringing it under the homens home assistant umbrella.

00:41:00 Oh, that's cool. Almost since then we'll just get better at home assistant is in Python as well, which is neat.

00:41:04 Yeah, they're running. They're running three, nine. I think on it. They're really keeping up with the latest versions of everything

00:41:10 to this last I don't want to show I can only show you half a screen. Oh, wait, no, that goes up. Now. They were angry at me because my ad blocker and Firefox apparently, which is just bear Firefox, who would let me show the homepage Anyway, here we go. So get a vaccine appointment, you got to do some web scraping.

00:41:23 Right. So it helps to know Python programmer and this was on NBC News. So I thought it was kind of kind of neat that it made it to this mainstream have an outlet, but they were saying that basically Python programmers have been web scraping to find vaccine appointments. And they go into the ethics of that, like, Is it okay to web scrape and basically get yourself to the front of the line. But a lot of folks have been making this information available via Twitter bots as well. So if you're trying to wait and get a vaccine appointment, maybe you'll look and see if there's a Twitter account near you that showing you what spaces are available. How interesting. Yeah, this

00:41:56 is a pretty good use of it. You know, when I went to college, we didn't really have the internet. I guess when I first started came on, like two or three years later, we had I mean, the internet, but not the web. And we had to register by phone to a call and it would be busy. And he would call back and we're busy. And you have to do it for four or five hours. And we just took our modems and we just were dialed the registration number one one summit, like we had really bad classes, you know, early morning on a Monday or whatever. And then we decided on we're breaking out the modem or just gonna go dial hang up, dial, hang up, dial hang up until it answers. We had the perfect schedule my brother and I that. So this is like the modern equivalent of that.

00:42:33 Yeah, yeah. And they were nobody was breaking any rules or anything other than the web scraping part. It was all, you know, my seven year old grandmother needs to get a vaccine appointment. And so spending six hours hitting refresh on the web page. I'm going to automate that.

00:42:46 Yeah. It's it's a perfect example of automation that that helps. Yeah, very cool. I don't really see anything wrong with it until maybe you take down the server, but so many people are hitting it. But as long as it's doesn't do something like that, I think I think as humans are fully capable of taking down the vaccine appointment web servers on her own. Hitting the refresh button. All right, fantastic. Well, Brian, I think that's it for all of our items. Do we have a joke? You think? I think we might have a joke. Yeah,

00:43:11 I like this joke.

00:43:12 Yeah. Let's see, is this this is Oh, no, that's not it. Let me let me I got a copy. The site's gonna work. I don't think I've got to give you a quick screenshot to pick it up from the screenshare. Sorry, it's not logged on that computer. Okay. So here comes the joke. And this one I put out there because I thought it was a good one for teachers. And it talks about basic math. Really, right. So this is a let me put it back on my screen. This one is about counting just one to 10 and a famous person in computers, Bill Gates. And I think this is like, Hey, I'm coming to visit the school. I work in computers. I'll help you learn how to count it says Hi, my name is Bill gate and today I'll teach you how to count to 10 123 9598 nT 2000 xp VISTA seven 810. What do you guys think?

00:43:59 I mean, I find it I find it interesting that me is not in this list, which just goes to prove that even 21 years later, there is nothing funny about Windows ME.

00:44:10 That might be the only windows I've ever had.

00:44:13 You're lucky

00:44:15 I keep thinking I keep thinking about this silly joke with my seven year old. What happened to nine because 789

00:44:23 Yes, perfectly right. And the reason that night they there's not a Windows nine is even weirder. I wish it was the joke. But people because there was a 95 and a 98 people were doing substring matches to see if it was windows 95 raise it like if the string of Windows nine appears in the just in the version number Well, it must be 95 or 98. So the windows nine would have the same problem but

00:44:47 oh, I read that it was because a rumor had it that Japanese in Japan they skipped it because it was like a mean to bad thing or something. Oh, it's like 13 and I guess a microphone Yeah, Microsoft in Japan had a lot going on

00:45:03 so interesting. You know I am I've stayed on the 14th floor before where it goes 1214 I'm like, I know.

00:45:10 You're not fooling anyone.

00:45:12 Anyone. I'm okay. Nothing happened on the trip. But I'm on the 13th floor. I know it. Yeah, very interesting trip that one, but at the same time for some beers and we can all get together at an actual conference again.

00:45:24 Yeah, we're looking forward to it.

00:45:25 Absolutely. Well, Shannon Kelly, thank you both for being on the show. It's been great to have you here.

00:45:29 Thanks for having us. We we missing you guys. Oh, yeah,

00:45:33 this is a lot of fun. Yeah, for sure. Brian. Good to see you. As always, man. Good to see you. Yep. Bye, everyone.

00:45:37 Bye bye.

00:45:39 Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in V YT. S and get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python bisetta fm and send it our way we're always on the lookout for sharing something cool. On behalf of myself and Brian rockin. This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

