00:00:00 Hello, and welcome to Python bytes where we delivered news and headlines directly to your earbuds. This is Episode 229, recorded April 14 2021. And I am Brian aka.

00:00:10 I'm Michael Kennedy. Hi,

00:00:11 I'm going Faraday

00:00:13 bigwin. Great to have you here. Thanks for coming.

00:00:15 Yeah. Thanks for having me.

00:00:16 We invite you because you're doing really cool stuff with Python. And you're doing some neat things on YouTube. And some are you doing live streaming as well, or just videos? And maybe tell people real quick about yourself before we get into our topics?

00:00:28 Yeah, sure. So I'm, I work as a senior software developer at a consulting company, we do almost entirely Django projects there. And I've really loved getting to use Django for the past couple of years. On the side, I also teach at a coding school where we do full stack JavaScript, but most of our back end and computer science curriculum is actually Python. And then we also use Django for the final portion of the curriculum, as well as the final project. And then on the side, as Michael mentioned, I really like to make videos and content, and things like that. So I've done a mixture of JavaScript, and Python content under the name Faraday Academy. And I also have twitch live streams. So most recently for Python, I've been kind of diving into fast API life and trying to learn async Python, since I haven't really done much with async. Python in the Django world. Nice.

00:01:29 Yeah, super fun. Fast. API's. Great. Yeah. Awesome technology to work with. So you sound like you're busy. But yeah, anyway,

00:01:36 but I love I love programming. So it's like my passion. It's not burden. So my guess

00:01:41 yeah, it didn't kind of work. That's great. Brian, you want to kick us off? Yeah, the

00:01:45 first story I want to cover is about coverage can help the bad bun. So Ned batchelder, put a post out just the other day. There's a beta out for coverage. It's a 5.6 beta one. And it's kind of a big revamp? Well, I don't know how much code changed, but he says it's a big deal. So the thing that's exciting about this is, it's supposed to exclude third party packages. This is actually amazing. Because in the workflow, one of the problems I've had before, is, I'm just like, I've just got some just starting out with a project, say, and I got some code in a directory, I've got my virtual environment, there. Also, same directory, throw some test code in there. And no, I want to tell, you gotta have to tell coverage. If you don't give it any flags. It just measures everything. But now it doesn't. Now if you if you say like coverage, run pi test or coverage run, you're like, whatever your module is, because there's you can run coverage without tests, too. That's the thing. It just, it just grabs everything and reports everything. And that's hardly ever what you want. So the change in 5.6 beta one is to to knock out the third party packages and, and not collect those. And I tried it out on a couple projects, I want to try it out on more. But like for instance, if you do it on your current direct, even if you say give it just your current directory, it's going to include all your virtual environment there if it's there, also, and you know what that, so this is a really cool thing. And he's also its beta, because you'd like to hear from people to find out if there's problems. So go out and test it out. I haven't tried it on pi test plugins yet. And that's what I'd like to do next.

00:03:37 But what's cool, yeah, that's really nice. Because obviously, you want to have code coverage of your code. But you absolutely have no interest in testing other people's projects. Right. There are packages that you're using or whatnot. So yeah, that's perfect. Do you have to do anything to make this turn on?

00:03:52 Well, yes, you have to right now because it's in beta. You have to initially, you have to install coverage equals equals, we've got we've got it in our show notes. But coverage equals equals 5.6. b one. It's also in the blog post that we link to, but right, and it works with so I tried it also with the PI test dash Cove plugin. And if you install pi test Cove and then stole this other version of coverage, they'll work together and you can work use them together to

00:04:21 so yeah, very nice. Green. What's the coverage story for you all? You do? unit testing, code coverage, analysis, things like that.

00:04:30 So as far as for Python and Django projects, you do some testing, I would say not enough testing. So just like most companies I've worked at, we always have the discussion, we should do more testing. And sometimes we do more testing and sometimes we don't so our development team has been talking about it. So actually this package code coverage that pi I've never used before but I was reading about it in the show notes and looking it up before this episode. So I was like oh That's a really nice tool, I think I'm gonna use it. But mostly we do unit testing on like really complicated areas that you think might break or might have edge cases or something like that.

00:05:11 That's actually a great use for coverage. Because you can, like, if you specify the source, like which source to cover, you can zoom in and say, I just have this little directory or this, these few modules of code, you can say, just cover those in. And you can check the coverage on that.

00:05:29 That's interesting. So you could generate reports on different areas even.

00:05:36 Yeah, like, I only care about this part. So just tell me about this part. Yeah, that's perfect. Yeah. All right. Well, this next one that I want to cover has to do with platform as a service. So we often hear about Azure, AWS, and in the Python world. Heroku is very popular. But these platforms and service places you want to get push your code, and then it makes servers go and new versions get deployed. And who knows how that happens. That's all well and good if you want to run in the public cloud, but what if you want to run this on your own servers? So Ian Mauer sent over this thing called pq. So pq is the tiniest pass Platform as a Service you've ever seen, that allows you to do a git push deployment to your own servers. And that cool? Yeah, so the idea is, you basically set this up on your server, and then you connect it, basically directly through GitHub. And then whenever you do a git push, that automatically kicks off a new server creation, I think it probably is running on Docker or something like that, but not 100%. Sure, I haven't dug into the internal tout runs. But so here you can even see on on the right of the home page, which is an animated GIF, you can go and check that out. But you just use for to see what it does. It says, As soon as you do a git push, it'll come along and says, your remote create, as opposed to just you know, writing objects, you know, push done, it, like continues on its head remote, creating an app, deploy an app, your branch is up to date, now your app is detected, creating virtual environment. And you can basically tell it, what your requirements files is, what the execute file just like karoku, you give it a like a proc file, or some it's called something like that, where it just basically says, when you run this project, what command Do you give it, and then it just runs. And that's, that's pretty cool. So it's really meant to be especially useful for low end devices. So I think this originates actually from working on raspberry pi. So like, get pushed deploy to raspberry pi, which is a Raspberry Pi clusters, which is awesome. So that one of its, you know, some of its core ideas are supposed to run on low end devices. It's supposed to be accessible for hobbyists and you know, lower school like K through 12, school grade students. The whole platform as a service is about 1000 lines of code of Python, I think, and quite functional, it adheres to the 12 factor app of like separation of concerns and separation of configuration and login and so on. Yeah, it's, it's pretty neat, pretty simple to use. And then you just install the client, and then you just do your, your get pushes with this thing. So if you've got a bunch of Raspberry Pi's or other devices you want to use as a platform as a service. Here's a pretty interesting option. If you just have also plain Linux x86 machines, and you want to make them be, you know, something like Heroku. And I went through a lot of work over at talk Python training so we can get push to production branch. And that automatically kicks off this whole workflow that not just updates the requirements and installs the new ones and restarted but a little bit more than that. It was a lot of work. This thing sounds really handy if you've got a pretty straightforward case, but you kind of want that same workflow

00:08:46 to do you know, it doesn't just work with get hammer. Can I use it with other things, too?

00:08:51 I think it just works with Git. I don't think it has anything to do with GitHub itself. Okay. Yeah. Yeah, yeah, that's pretty cool, too. If you go and you watch, if you watch the gifts, that animated GIF, and you click on it, it becomes like a little movie type thing. You can see they start from an empty directory with the code that they create, or the code is already there. But it's not in source control. And they get in it the local repository, then they add a remote, which is not GitHub, and then soon as they push to it, it kicks off the creation and running of this thing.

00:09:21 I think we're using this because for just for like internal servers, so I've got an internal projects

00:09:27 that we can't can't host them on Heroku or something like that. That just ain't gonna work. Yeah, but but we could, you know, update the website and stuff and push to get in habit, pull it into the server automatically. Yeah, there's all these little internal web apps that people run at companies that wouldn't make sense necessarily to run on a public cloud, because maybe they need to talk to local infrastructure. And you guys even have hardware devices where you're working that you actually talk to. So yeah, here's a way to get a better deployment story without making it your next project to keep maintaining Nice.

00:10:02 Yeah, I was, I was looking at this and I have a somewhat clunky setup for personal projects where I have different Docker containers and watching and watchmen Docker container running on our servers. So I was looking at this, I was like, it's so easy. Why don't I just have this?

00:10:19 Exactly, yeah, I don't know how flexible it is and how much of a general solution it is. Because like I said, I already have a solution that is like this. But I'm super glad to be able to just get, you know, get pushed to a certain branch. And that means in 30 seconds, it'll be deployed in a consistent, reliable way that I want to think about it. It just makes it so easy to go, Oh, this, this part of the code is ready for production, get push, as opposed to all the steps that a lot of people go through manually to do various things. So yeah, cool. Definitely neat. All right, when you got the next one, something kind of in the news these days? Yes.

00:10:56 This kind of fit in with everything that's going on on Reddit and the news and everything. So blockchains, I think most of you have heard of blockchains, Bitcoin and Ethereum. And there are ways to basically build applications for the blockchain using Python. So for example, web three.pi is a popular library where you can interact with the Ethereum blockchain via a Python API. So it's basically a wrapper that it gives you. And there's also a similar language to Python that was built for the Ethereum blockchain. It's called Viper. So it's kind of a Python, get it Python and bibrave of snakes. But it's basically a pythonic language. So you can actually write these smart contracts or applications for the blockchain, in that language or in solidity or you know, some other language. Yeah. And you can deploy your applications to the blockchain. And then you can interact with them or interact with any general blockchain information using Python with web three.pi. So it's a really robust library and solution, and especially with, you know, NF Ts or non fungible tokens and things like that being so big right now, you know, using web three.pi. You can also interact with those types of contracts that you deploy to the blockchain and build applications for people as well. And for users.

00:12:38 Oh, this is really cool. You know, I haven't done nothing with a blockchain and nothing with cryptocurrency. So aetherium is this more? This is more a blockchain thing, not a cryptocurrency thing. What's the distinction that or is it not?

00:12:52 So, um, cryptocurrencies? Basically, they're built on the blockchain, right? or some other type of post blockchain technology which evolved from blockchain. So you can use this to interact with cryptocurrencies. I think people have built trading bots and different things with these. But you can also build really any type of application on the blockchain and use web three.pi to interact with it. Whether it's a voting application or some kind of exchange, or whatever you want to do on the blockchain, you will have the API interface with web three.pi. That just bring up non fungible tokens because of all the artwork and you know, the hype around. I was at Dogecoin.

00:13:44 Yeah. I've taken a screenshot of Brian and we can make it a non fungible token and sell them. What do you think we could get from Ryan?

00:13:54 You take multiple screenshots and just, you know, sound like hundreds of them.

00:13:58 Yes, exactly. Some different. Yeah. I think the non fungible token stuff is it's really interesting. It's really far out there. But the blockchain seems to be the most concrete, practical, you know, you could build stuff like you mentioned voting other stuff. I could certainly see if the world could ever get it together some kind of voting online voting system based on the blockchain.

00:14:19 Yeah. And some places some organizations and also, I believe some countries and localities are already using the blockchain for things like that. Nice. I think it's even being talked about in our own government. They have some committees, they're talking about using blockchain in different ways, of course, with securities and how it's going to fix securities, but also, with other possible future use cases, like things like voting.

00:14:47 Awesome. Yeah, I'm gonna have a woman from the FEC Federal Election Commission on POC Python to talk about using Python for the FEC, and I feel like we definitely got to That's interesting. Yeah, no, you're fine. Man, you

00:15:02 get you get some cool hosts, or guests on your show. That's right. Thanks.

00:15:07 Thanks. Yeah. So I'm, I'm really excited with where blockchain is going, you know, being used in supply chain in refugee camps in pretty much every major bank. Now, every country is looking into blockchain. So I think it's a really good thing to get on board with. And Python is a really easy entry way to really to prototype anything in Python. So you see, a lot of people want to find out about blockchain. They have like their own test blockchain in Python to understand it. But there are also libraries where you can interact with real blockchains, like hyper ledger, SDKs, and Python. So you can use different kinds of popular blockchains or the most popular blockchain now, which is a theory. So you could interact with that via web three.pi.

00:15:55 Yeah. Okay. Cool. If people want to check it out. This is a great recommendation. Quick question or comment from the live show? Tune army captain says At what point does this become about monetizing work? Or crisis? Brian, help me out here?

00:16:13 I think so. Yeah. It's gotten there today.

00:16:17 Absolutely. All right. Well, very cool. Very cool. recommendation. What's the next one that you got here? Brian, I checked this out. I'm super excited about this. This is this is a great idea.

00:16:26 Yeah. So this was so we in this was a recommendation from Johannes Lippmann. In the mid he mentioned in Episode 227. We talked about Snake Snake sny Kay.

00:16:41 Sneaky package advisor.

00:16:44 Yeah, it tells you how it gives you the health recommendation, or health score on a any package by them package. Well, this, this is a similar Well, it's not really similar. It's it gets in the same category. So dead dependency. So da, de pendency. So this is a, this is a tool that's got there's a paid version, but it's a free for open source projects. And yeah, it's a GitHub thing or GitHub application that you get Yeah, GitHub

00:17:14 app. Yeah.

00:17:15 And, but what it does is it looks at your dependencies. And so if you, and it looks, it looks at the, it looks at a lot of stuff. And it looks like so let's, I'm just going to bring up an example somebody wants to add some functionality to your service, and they are your project, they change it to it adds a dependency. One of the things you'll see in the pull request, if use, if you use this is dead pennants, he will go out and look to see how healthy that dependency is to get a new one in there. And it's got a whole bunch of good configuring configurable options that I really think are pretty cool. checks for things like how recent was wanted to make sure that there's recent recent releases recent commits, and they're pretty broad. The defaults are like, has there been a commit in the last 12 months?

00:18:10 Can you scroll down just like one page to the jQuery example?

00:18:13 Yeah.

00:18:14 Okay. That's a great example. Right there.

00:18:16 Yeah. So the one of this example is you got a jQuery UI, that's added. And what it does is, it doesn't just check for one thing, it looks for all your dependencies. And it shows that, you know, a couple of like, jQuery UI hasn't been released for over 12 months. And then a package called Nom, nom, that's no commits for the last nine months. And it's been deprecated in the package registry. So it checks for deprecations. And, and, and also things like, yeah, if it's been deprecated, or if there's just it's gone down to a single author, maybe that might be at risk for some projects. So but all of its configurable. So this is pretty neat. Yeah,

00:18:58 I love the idea. And it works not just for Python, or JavaScript, as you mentioned, but also rust, Ruby, C sharp kotlin, a bunch of stuff.

00:19:07 Yep. There are some I tried it out. And I couldn't get it to work. But I know why I couldn't get it doing it. I'm using flit now. So I'm using pipe Project automall for my dependencies and stuff in my projects. And this doesn't support it yet. It supports requirements dot txt and PIP file. And last night, I was playing with it. And I sent him an email and said, it'd be really great if it would support setup.pi and pi Project automall. And, gosh, within an hour, I got a response back and said, Yeah, you're right, we should do a project that tunnel. It's a simple format, and we'll try to support it. But setup.pi a little more difficult, because as we know, setup.pi has no real restrictions on its formatting. So there's a lot of crazy stuff out there for that. So

00:19:54 yeah, for sure. Great. What do you think?

00:19:57 Yeah, I was just gonna say I was I was good. Gonna try this out on a project, but I also use poetry. So these pipe project comm offer the dependencies, but like you said, it's an easy format. So maybe if they support it soon they'll try this out. It seems like a really good idea.

00:20:15 Yeah, it's fairly new to I was, it looks really slick. Their website is all nice and great. Oh, my God, they must have been up for a while. As far as I can tell, it looks like at least their defect tracker. And they've got a GitHub defect draft defect tracker that's only been alive since last September. So and they already support a whole bunch of stuff. So hopefully, we'll get some new features here soon.

00:20:37 Yeah, fantastic. And I just came up with a new idea for a GitHub bot. So you have a GitHub bot, that if you put a pipe project, or a pip file, it'll automatically create the others and keep them in sync. So if you check in your pipe project terminal, it'll automatically generate a requirements. txt that's in sync. And if you make changes, it'll update it. And if so, you just you can work with whatever tools you want. That's my new, my new idea.

00:21:01 Is everything switching over to project out tamo mountain?

00:21:06 Well, for packages, it's not everything is a setup, by setup is going to be supported for a long time. But you can use setup tools with my project tunnel. So there's a there is a lot of people converting, but that's for like packages and stuff and libraries. A lot of applications don't use anything like that. They just use a requirements file. So

00:21:27 yeah, I used to use a requirements file. And then I switched to using poetry like a year ago, I was like, What have I been doing all this time? So much nicer? Yeah,

00:21:35 poetry is nice. Okay, cool. Yeah. Speaking of switching to new things, I wanted to talk about all the important changes and features in python 310.

00:21:45 So excited.

00:21:46 So exciting. Yeah. So this is a blog post by Martin Heinz, apparently, blog post number 47. Look at the URL here, which is interesting. And basically, what it does is just walks you through, like all the stuff coming in python 310. So Python 310 has been in alpha for a little while, that means features changing, but now it's about to go beta. So it's about to stabilize. And it's it's time to start thinking about what features are coming because they're most likely going to be fixed as they are. First thing it talks about is how to go through installing the alpha or the beta, whatever the latest version is, it's pretty simple. So you just do the, you know, download and install from source except for it has this, this comment to say make install, you're welcome to run make install, but that will make your Python three and your system be the alpha Python 310, which you might not want to do. I mean, you may be you might not, if you say make alt lt install, Alt install is one word, then it'll just install it. So you can refer to it as Python three dot 10. But it won't replace your system Python, which I would recommend. So there's some interesting improvements for type checking. One of the things that's really nice about Python is you have this optional type hint type checking type hints of annotation stuff, but it can get kind of crazy with the generics. Like if I have a generator that returns a list of integer, I mean, just like the way you express that, and kind of almost like generic syntax, like generic from c++ style, it gets a little wild. So one of the improvements is around union, because you can say, well, this will either take an int, or a float, and I can just deal with it as basically a number. So you used to have to say, from typing import union, and then you would say union bracket, int, comma float bracket. And that was the thing. So now you can just use the pipe or the or the bitwise OR operator so and or vertical pipe float, and that tells you it's a int or a float. What do you think of this? You'll like it? I think it's nice. That seems cleaner to me. Yeah, I didn't really wonky.

00:23:50 Yeah, I didn't like the union before. I mean, I was glad it was there, because we needed it. But the order makes it nice and clean.

00:23:57 Yeah, I almost never used the union because it was just, it was just messy. Anyway, this is pretty nice. There's also some stuff about his instincts and his instance. So you can you know, that exists already. But you can pass this int or string into pipe string in and it'll tell you if it's either an end or a string as an instance, which is kind of a cool thing as well. Oh, wow. Yeah, you can also create type aliases. And you could do that previously. So if I have a thing I want to call a file name. And right now it's a string, but maybe it becomes a class later, because we're going to upgrade it. And I just want to refer to it as this right now is a file name, right? So used to say file name equals stir str. And there's no real way to understand that I'm just trying to create a type definition. But in fact, it just tells me Well, there's this other name for the string class. Right. And that worked, but there was no way for the tools to know what your intention was. So now there's going to be a file name, colon type alias equals string, and that will tell you file name is an actual alias for the class string. Not just It happens to be a thing that looks a whole lot like it. So that's kind of cool. There's some stuff about knowing on integers to figure out how many bits are involved. That's not super applicable or usable. Just the tools. I mean, you may want to know, but it's like not, I doubt it's a big question. People want to know, often, dist. utils are being deprecated, they've pretty much been deprecated for a while. And you should be using setup tools, and packaging. But you know, they were officially deprecated in 310, and will be gone in 312. Just so y'all know, this next one I'm excited about quite a bit, it's super common to want to have more than one thing that is tied to a context block, like a width statement. So if I'm going to open two files, and I want to make sure I close them both, even if there's an error, it would make a lot of sense to say with file one with file two. And so what what are your options, you can have one with block and then indent another one just to have the second file, which is weird. You could create the file separately, the file object separately and say with file one, comma file two, and then use them that actually worked. But what if file two crashed when you tried to create it, then file one would leak and there's just like all these weird situations. So now, with blocks support multiple lines with parentheses, but I can say with parenthese, being one that has to be managed in the context thing to that has to be managed in the context and so on, and then work with them. And they're treated as a block, which I think is sweet.

00:26:26 That's going to be very useful, because who had times where we've had two or three levels all the time. So

00:26:32 yeah, yeah, so you're usually juggling some edge case, that might not quite work, but usually works. And this is just make it part of the language, make sure it always works. I love it also performance. So it brings some performance improvements, or constructors, like strings, bytes, byte arrays, and so on. And then also feeding, working with functions that have type annotations, I think, or something like two times faster figure now, the type annotations are evaluated at compilation time, the evaluated at runtime, which would slow them down. So that's nice. And then the big one is the switch statement, which we're not calling switch statement. It's pattern matching. We actually talked a lot with Brett cannon about that. And I think people appreciated that episode where we got to dig into that, right? Yeah, yeah, that was fun. So there's some nice examples of what you can do. Like, basically how it works, you know, match on day case, Monday case, Friday, case, Saturday, or Sunday, and so on. And then some more interesting ones about matching objects, like classes, where you're looking at multiple fields. So you can match on age, and you could match on gender. This is like a person example name, age, gender, and you could match on different things. And depending on how it matches, you kind of fall into these case statements. So we've gone over that a lot of them are gonna dive into it too much, but pretty neat to see these examples here. So that's, I would say, that's the big change that's coming.

00:27:57 Do you think these are case statements fall through like JavaScript?

00:28:01 There is a fall through? It's not in these examples, but there is a follow through mechanism.

00:28:06 But not by default?

00:28:08 That's not called default. But I think there's I can't remember the syntax.

00:28:12 I mean, like, so from the first case. Oh, right. Yeah.

00:28:17 Yeah. You don't have to say break. I don't think that's true. Yeah. Yeah, yeah. Cuz in c++, if you don't say break, you're going to print all he's gonna run every case top to bottom right. Well, depending where imagine from where it matches onward, basically. Yeah. Now, I don't think it falls through in that sense. But enterprise, right. There's a there's a default. Yeah.

00:28:36 But the the fall through mechanism in c++ and C and Java, or other type language c like languages, it's caused me more problems than it ever solved. I mean, I've actually wanted that to fall through I'd rather have a fall through keyword, then have it be have to put a break everywhere. Yeah. Okay. Yeah,

00:28:56 I just use my go to statements and we're good. So Dean out there in the live stream says can't wait for 310. Now with a double context, or multi line context, I agree that the those are quite, quite awesome. I think that's a really good feature. And it's super simple. So I like that a lot.

00:29:12 I wanted to add a couple things. There's, I just found out today that one of the things that's going in 310 is some some better error. syntax, error messages. If you use like an attribute error, if you try to access like a like from from name tuple import something else. And you know, if you get something wrong, it tries to give you a suggestion for what the right thing is. And that will be really cool. Especially for working on the repple and stuff. And I also wanted to point out that I don't think I would build Python, I would just download it. You if you google Python 310 download, you can get it just from python.org you can download it there without

00:30:00 compiling it.

00:30:00 Yeah, it's just the installer. I'll put a link in the show notes. Yeah.

00:30:04 high end.

00:30:06 Right. Yeah. You can just fire off. Yeah, sure. Cool. All right. Well, that brings us to the next item, but I don't have the link to it. And that's yours going. So you want to tell us about it. I think I can just Google it. I'm not going to Google. I'm a duck duck go up, but carry on.

00:30:20 Good. I inspect. Okay. So yeah, I wanted to give a shout out to free code camps Python curriculum. So last year, they launched a Python curriculum with I think it's almost 1000 hours of curriculum material between challenges, lessons. And, of course, projects and certifications as well, on topics from Python basic basics, to data science, machine learning algorithms, all sorts of things. And that's in addition to the 1000s of hours, they already had learning JavaScript and basic programming skills and algorithms and other types of things. So that Python curriculum was in the works for a few years. I've been a top contributor with Free Code Camp for a couple years. So I got to go to their summit before the whole COVID thing hits. And I remember everyone getting together kind of talking excitedly several years ago about Python coming out. So it was definitely in the works for a long time. And a lot of people put a lot of effort into it. So I think it's a really good curriculum. And Free Code Camp has also done a really good job of putting out a lot of supplementary material in Python and data science. So you can see on their YouTube channel, I believe they have over 100 hours of Python content, including this 112 hour, Python data science crash course on their YouTube channel. And they also have one of the most popular developer blogs on the internet. I'm also a writer for them. So recently, I wrote one Django article, and I have a whole bunch more Django articles that I'm planning to write when I get around to it. So as far as Python education, I think this is a really good option that's free, accessible to anybody, even on mobile devices. And one that stayed true to its mission, it didn't just build to kind of sell out to another company. But you know, since I believe the end of 2014, when it's launched, it's kept this mission of making coding education accessible to everyone. So I think they've done a really good comprehensive job of now adding Python onto that. Oh, and they're also adding on right now they're working on an even bigger, expanded curriculum for that data science and machine learning that they have right now in Python. It's gonna include all the different math and a lot more elements of machine learning than it currently covers. So yeah, I'm excited for that. They've they were raising money for it this year. And they've been working on it since last year. So I'm hoping we'll see at least the initial stages of that soon.

00:33:11 Yeah, very cool. I put my I worked with him to put my free MongoDB course up there, which is a Python course. Oh, awesome. A little bit up there.

00:33:20 What were you using with MongoDB?

00:33:24 It was just some it wasn't even a real web framework. It was something that kind of was just a simple COI app that talked to it to keep it not complex. Okay. Yeah.

00:33:34 Everyone using Django, or Django and MongoDB.

00:33:38 Okay, that's cool.

00:33:40 It actually works pretty well, except the migrations are a little bit funky. Okay, it's not, it's not easy to rollback the migrations like it is abuse Postgres, but overall, it works really well. And you can use the same over and use in Django.

00:33:56 Oh, that's fantastic. I use Mongo engine for my main stuff, which is very much modeled on Django, but it's not, you know, not Django itself. Nice. Let's see it really quick. A couple of callbacks. Robert Robertson says they should create an error message package that breaks down your error into plain English. Cool. Yeah, that's a great idea. And then Dean says, There There are third party packages of the jet nicely. Brian, do you remember if we've covered any, I don't mean, Dean. If you got some ideas, throw them out there.

00:34:22 We do. But I think we did cover him, but I don't remember him. So I know,

00:34:26 we've covered stuff that do things like pretty print the message or highlight certain parts, so it's clear, but I feel like it would be cool if it would just print like the staff, the first Stack Overflow response, accepted response, like underneath the crash, that would be fantastic.

00:34:43 And we talked about possibly just for formatting your error message nicely, so that you could Google it to the org or DuckDuckGo it of like, how to search for this on the internet. So, like escaping quotes and things like that.

00:34:57 Exactly.

00:34:58 That'd be cool. Somebody else see piling mentioned. I think this is right. That the fall through on on the the pattern matching is the underscore, I think,

00:35:09 is that the default? I think that's a default case, not the fall through

00:35:12 that. Right. Right. Right. Not the fall through the default case. Yeah. So I don't think there is a way to, I don't know, there might be a way to fall through. There's like always, I don't know. I haven't played with it yet.

00:35:24 Yeah. Dean points out that we covered the one that has, you can ask why. Remember, you'd ask like, Why, what there's, there's a bunch of W's. And we're kind of coming up with the name of like, Maine for that veteran name or for another way? Yes. Like, WTF or something like that. I don't remember what that's called, though. Sadly. The fun one.

00:35:43 Oh, that'd be a great package name Python. WTF.

00:35:47 I Brian said four main topics. Yeah. Yeah. All right. You got any extras? You want to cover? Yeah, I do, as always, but yeah, how about you?

00:35:55 Well, um, I don't know when it'll get released, but it just recorded it. But a few episodes ago, we talked about Python adventure. So an adventure game, a text based adventure in Python. But yeah, I got to get to talk to the creator on testing code. So there'll be a upcoming testing code on B go in depth into that. So that'll be good.

00:36:17 Yeah, very fun. How about you? Ah, let's see, I got a couple things. Let's see. This one. We talked about the Supreme Court ruling on Java, the Google vs. Oracle, maybe for the Oracle versus Google maybe how it should be said. But I think it's just in passing interesting that Microsoft has now unveiled its own Java distribution, the Microsoft version of open JDK to compete with Oracle in the Java distribution space. I know that we're not really a Java podcast, for sure. And I don't do any Java, but I think it's an interesting open source. Follow on to covering that last time. What do you think? That's, I

00:36:54 think there's this gonna be big. A lot of people already have Microsoft distributions all over their workplace. So

00:37:01 yeah, Glenn?

00:37:02 Yes. Any comments?

00:37:04 Any thoughts?

00:37:05 Or comments on Java?

00:37:07 Yeah, are the same now. Okay, I got a couple more. And then I know you have some things to throw out there as well. Pi charm. One t 21.1 is out. It has a very colorful splash screen, which is always fun. But its main thing is it has much better support for Windows subsystem for Linux, it has better indexing so much faster indexing, it does cool things. Like if you need to type, let's say you have requests installed, but you haven't imported it into the file. If you type r g, it very likely may propose to you request dot get as an autocomplete option. If you choose it, it'll write import requests. And then autocomplete requests get all like in one tab completion. So they've like done some really cool stuff with the autocomplete to like, kind of ramp that up. And there's a few other things as well. But yeah, anyway, if people are into that, check that out. We covered beanie a couple times, we covered beanie, the first time introducing which is an ODM for MongoDB based on pedantic which is super cool. by Roman, right. And then I said, I reached out to him and said, Oh, that's great, but you shouldn't have a way to add indexes. So he did, which was really cool. And Gwen just mentioned migrations. So he just added migrations, or beanie as well. And there's some really interesting ways to, like, write your migrations and convert from one schema to another. So basically, you say, here's the old model, here's the new model, fix it. Okay. is more or less the way that you say that? So, yeah, that's pretty cool. We already covered it. But definitely, just anything to see that there that he's adding it. So congrats on that, seeing that thing grow. Going, I know you got a couple of things, you want to talk about meme dot Dev. That's, that's a really cool thing. I didn't know about this before, but I checked it out when you put in the show notes.

00:38:55 Yeah, it's basically a Spaced Repetition learning system, but built specifically for developers. So a lot of people use Anki, which is its own algorithm. I also use Anki synced across my desktop and mobile phone and everything to learn different concepts, mostly programming, computer science, all that stuff. But one thing I like about also using meme dot dev is that there's a browser plugin, and I can directly copy snippets from places like Stack Overflow. In all those coding boxes, it will have like a meme that depth icon in the corner of any coding box. And I can just copy the snippet to make into a card later on meme dot Dev. Another really cool feature is it lets you practice keyboard shortcuts now. So okay, to get faster and better. As a developer, it's really good to practice different kinds of keyboard shortcuts. Also, I found it helpful because things like Django have a massive API and as a consultant I feel like I'm being pulled in so many directions, it's really hard for me to, to keep up with everything I'm doing and still feel like I'm really good at the technologies I'm using. So that's why I'm, I'm using supplementary resources, like the Spaced Repetition learning system. So I don't forget different parts of the API, even if I haven't used it a couple months, because I have to recall that for a future project or something like that,

00:40:26 yeah. So I looked at this and you, you can go to places and sort of save these web snippets, and then turn them into stuff you want to remember in practice almost like flashcards. So one example is if I'm on StackOverflow, and I see some code, I can go to that code thing and say, make this a snippet. And then I can even upgrade that to this like repetition practice. Yeah, that's pretty neat.

00:40:46 Yeah. Cool.

00:40:48 And then what about graphene? Jingo.

00:40:52 Yeah, so this probably isn't a secret to anybody. So it's basically the kind of the standard package to be able to use graph qL with Django, but as I've been using it more and more, because I use mostly Django rest framework. But now that I'm using graphene, Django, it's like, Oh, this is so nice. You know, I don't have to update and manage all of these different endpoints, I just have one endpoint. And then I'm managing, you know, how my data gets sent back from my different schemas and stuff. I feel like, as your application grows, it's much more easy to manage and maintain with graph qL, than with a standard REST interface. So that's something that I've been playing around with a lot. I want to before I use it in a professional project, I want to kind of get better with using authentication with it. So there is kind of a standard library for graphing Django. I think it's called graphene Django off, and it uses JW t token. So I'm going to play around with that a little bit soon.

00:42:03 Yeah. Very cool. So it's, it's a Django enhancement built upon graphene itself. Yes. Okay, cool. And Brian, out in the live stream, was it they told us, it was dean, Dean told us that we did, in fact, cover friendly, the friendly library, which allows you to ask, you know, it gives you when it crashes you get, like, what's it like a little repple type thing that you can go ask questions about?

00:42:31 Yeah, that's one really good. You can ask who what why Where? Exactly. Yeah. I guess maybe not. Who? But yeah. Perfect.

00:42:39 That's it for this one.

00:42:41 Well, thanks a lot for joining us, Quinn.

00:42:44 Yeah, Grant. It's great to have you here. Thanks so much for being here and keep up the good work on YouTube and everywhere else.

00:42:50 Yeah. Thanks, Michael. Thanks, Brian.

00:42:52 You bet. All right. Bye, everyone.

