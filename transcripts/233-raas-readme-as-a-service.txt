00:00:00 Hello, and welcome to Python bytes where we deliver news and headlines directly to your earbuds. This is Episode 233, recorded may 12 2021. And I'm Brian Michael Kennedy. And I'm moderating mengalami. Well, welcome Merlene. For people who don't know you, can you introduce who you are. So I am a Python Isa, of course. And I am based in Harare, Zimbabwe, I am also really involved with the Python community. So I'm currently the vice chair of the PSF board of directors of board, I think for about like, coming up on four years now. Which is really exciting. And it's been really like a very cool experience for me. I'm also a software engineer, I work right now with the rapids team at Nvidia and have just been doing software engineering with them. I will talk about a bit about that later.

00:00:57 Yeah, I kind of think what else I'm also a very avid reader, and just like doing other things besides software. So yeah, that's pretty much me. That's awesome. You're doing a bunch of cool stuff. So I think rapids seems like a really neat project to work on as well. Of course, the Python community side is great. So super happy to have you here. Brian, you know, having a good README is really important to a project, wouldn't you say? Yeah, definitely. Um, and I, for some reason, I don't know rubies are not difficult to write, but I freeze up. It's a blank page syndrome, I think often I've gone through and just like copied from some other projects, or whatever. But what's what's in there read me. But I don't think that that's like the best way to go about it really, because sometimes you forget stuff. So this was a, we have a recommendation from Johnny Metz. It's a tool called readme.so. And this is like, totally fun.

00:01:56 It's just this interactive thing where you get to, you get to add stuff. So we've got the title, you can, there's on the left hand side, there's a bunch of sections where you can select what, what you want to go into the readme. And then, uh, and then it shows a preview on the right, but you can also see the raw markdown. And then in the middle, there's an editor, so you can actually just edit the whole thing here. But really, I don't know, if I really would

00:02:22 project project title, what I'd probably do is go through in, you know, pick out to look at what, what sort of things I'd want. So I probably maybe some acknowledgments if I took the I got some help from somebody,

00:02:35 maybe an API reference, if it's gonna if it's a library,

00:02:39 how to contribute, oh, badges definitely want badges. Yeah. And then, you know, maybe like how to run tests, if you want to contribute.

00:02:50 If there's other cool projects using it and want to use by all these sorts of things, and then you can, the the editor only selects, it only shows you the ones the one at a time, which is nice. But then you've got this, this whole generated really nice looking README, with tables and everything, like built in, and you can either just copy it, or download it and just run with it.

00:03:13 I think this is really great. I'll probably use this in the future. I really love this. And I'm surprised about the psychological benefit of just showing the little section with the one heading. So for like example, acknowledgments, you just have hashtag acknowledgments and that the few things even though you're editing the whole README, it seems so much more like oh, I'm gonna just work on that section. It's really cool. Marlene, what do you think? That's really, really cool. I like it. I think I'm gonna try it out. I have put no effort at all.

00:03:43 In,

00:03:45 in this. So I think it's, it's something I need to put more effort into. And this looks like a really good way to do that. So yeah.

00:03:53 It also be great to just like, if you have an existing README and you want to add some new sections, you're not quite sure how it should look, using this as a jumping point of just the grab sections of a readme to add to an existing one to be great. Yeah, this is really, really cool. How do you how do you? Can you start with a new one? Like, can I Well, sorry, let me take it back. Can I start with an existing one? Can I somehow upload an existing one? I don't see. So wait, I can go to raw Hold on. Oh, you can probably just drop it into Ruby. Yes, you can drop it into the raw. That's it. Okay, perfect. You go to raw, which it doesn't hide the sections. It's just pure markdown, and then you just throw it in there. Okay. So

00:04:34 no, no, but you can flip it back. I think probably once you edit it there. I don't think you can edit so you can only edit in the editor part. So, yeah, it still looks really really cool. I've, I've heard of platform as a service. I've heard of infrastructure of a service. I've heard of Database as a Service, but I guess now we have read me as a service. I don't know.

00:04:56 Yeah, I'm I'm pretty excited about it. Actually. I might

00:05:00 I might play around with this. For my next project, I've got some stuff that may end up on pi soon, and it'd be cool to do it. Alright, so I've got the next item. And it's a bit of a skateboarding dog type of thing. It's not something I think a lot of us will take advantage of. But it's something that is pretty interesting as we kind of look at how Python is finding its way into the larger computing space. Yeah. And oh, Sam Morley out there, and the livestream before we move on. So it'd be really cool if you could point this at a GitHub repo and edit your repo directly. The README directly on your repo? Yes, absolutely. That's fantastic.

00:05:37 Yeah, that's a really good idea. Really good idea. All right, back to my skateboarding dog. So there's a company called Sara bras. And this was sent over to to us by Galen swint, who is a PhD researcher who does high performance computing and stuff. So in that world, I think this, this may be a real thing. You look through the article here that talks about this announcement. And it's like, well, there's like these 12 customers, or 15 customers of this, this chip. But for those of you watching, there's already check out the article, there's a woman holding a chip. And normally we think of computer chips is a little tiny, tiny things, this is a 12 inch by 12 inch computer chip, or you want to go metric 30 centimeters by 30 centimeters, it is a big, big computer chip. And the ideas, we've had small little chips come along to do special types of processing. We've had GPUs come along and do be adapted, I guess for things like machine learning, training, machine learning models, and so on. This thing just takes that idea to an entire new level. So for example, I'm always going on and on and raving about my Mac Mini, my M one where it's a cheap little computer, relative to Apple stuff, I guess. But it's it's super fast. But it has four performance cores and four efficiency cores. That's it. Your GPU, if you've got a really high end, one might have 4000 cores. This insane little chip here has 850,000 ai cores on one chip is insane. What do you what do you think? I'm curious how they I mean, this is this some of major advances in wafer technology, because how do you get that big of a chip with no defects? Yeah, and they have apparently 100% efficiency? Well, first of all, one of the ways you do it is you use the tsmc foundry, who seems to be taking over all these small high efficiency type of things. And so they had a previous one that they've more than doubled the core count for. And another way to kind of appreciate like, how much is going on in this chip, I, you know, go back to my my M one, it has 001 6 billion transistors, this has 2.6 trillion, or is that another way 2000 600 billion, a billion transistors versus 1.6 billion, like, it's 2000 times more on this chip. So super, super cool. And now you may be wondering, alright, all this is interesting. And chips are neat. What is the Python angle? Like? Why would I bother putting this on here? Because you know, we don't really talk about chips that much, except for when I go on and on about my M one. Here's the deal. If we scroll down in this article a little bit, you'll see user program this insane machine transparently in machine learning frameworks, such as specifically TensorFlow and pytorch. Sweet. Isn't that crazy? That's really interesting, isn't it? Yeah. I was just thinking about you as I'm going through this, because you're working on the rapids project, which is, it's not the same thing, obviously. But it's kind of in that space. Right. Yeah, it is. Have you heard of this before? No, I haven't heard of this. This is Yeah, this is really big. And I have not heard of it. I was

00:08:47 reading a bit more about it. Yeah. Yeah, for sure. So there's a lot of interesting things. And one of the I can't remember where exactly, they spoke about it. But they basically say, what you do is you program in TensorFlow and pytorch as normal. And then they have this custom compiler that, that rewrites, that extracts this execution graph to actually scale out to the 850,000 cores. So the developers don't have to think about how they program against something like this. I don't wanna spend too much time on this, because there's something my next item is super amazing. And I want to take the time to dive into it. Here's another thing that's really interesting, just as you look at it, like, this thing takes an insane amount of power, like oh, for this one chip, you're going to need a four kilowatt power supply with up to a peak power of 23 kilowatts.

00:09:41 When, when you plug in an electric car at one of the high speed home chargers, that's seven kilowatts, just to give you a sense, this is like insane amounts for one chip, right? You could think of as a supercomputer like it's one chip. So anyway, yeah, our entire entire lab doesn't doesn't grow that much. So So I call

00:10:00 The reason I said it's a skateboarding doc thing is I don't think most of us will be able to ever even interact with one of these modules by one. The they're going to be shipping in the later part of this year. And the price is something like 3 million US dollars plus, so this is certainly supercomputer level. But I do think it, like opens the door for really interesting stuff going on in the high performance Python space. So yeah, glad that Galan sent it over. Well, I'm totally gonna put 25 bucks into Dogecoin. So that I can afford this.

00:10:30 Oh, yeah. Speaking of which,

00:10:32 exactly. What about I think maybe you get this in you create an AI that can more intelligently mine Dogecoin. And then you take over the world, just an investment.

00:10:44 Alright, so speaking of large scale, high performance computing, Marlene, take it away. Sure. I have the next item, which is rapid. And I wanted to speak about this because I'm working on it. And it's been what I've been working on for, I think, Yeah, wow. It's been about a year since I have been with Nvidia. I'm working as a software engineer there and working specifically on the rapids project. And so rapids I think, is really interesting, because the goal of rapids similarly, like, the last thing Michael just showed us, is to speed up data science, but this is what GPUs So, um, I think it's really, it's been really cool to work on the rabbits project. And I think it's really interesting as well, because it's open source. It's also there's a lot of Python involved. So it's not, it's not entirely it's not mostly Python. Actually, there's a lot of c++ and code in there as well. But I am not, you know, personally, I'm not, I'm not, my aim is not to learn CUDA, it's to try and avoid that as much as possible. And also avoid as much c++ as possible, though, that's a bit more reasonable. And but one of the goals of the rapid project is to allow people who are Python these days, to work primarily with GPUs, and to get those speed ups without having to know any CUDA code or to know in

00:12:21 c++. And so I have been working primarily on the Python side of things and have really been enjoying it, I work specifically on with the Korea data frame library. And TDF is basically a

00:12:38 it mirrors its its GPU data frame library, that mirrors pandas. So if you have a data set, and you'd like to do computations on your data set, or do different operations on your data set,

00:12:52 if you can do that with pandas, you should be able, hopefully, to do the same thing with PDF. But the good thing is that it will be it will, it will probably be faster, I actually can't definitively say that it will be faster, because

00:13:08 I remember when I first joined the project, as well, I was I really, I'm very enthusiastic, and I really enjoy sort of sharing when I'm learning something new. And I remember I was like going around and speaking and saying that, you know, PDF is so much better than pandas, because it's just so much faster. And then my manager was just like, you need to stop saying that, because it's not true all of the time. It's true, mostly some of the time. So for smaller data sets. It's probably better to stick with pandas. Um, because the, yeah, there's all this overhead, right? Like, as you scale things out and stuff, there's probably like, Well, how do we convert this over and get it onto the GPU? And if if that process takes less time of what just doing the computation, you might as well just do the computation? right? Exactly. Like if you're ready, if you're mainly doing right, I agree. Like if you're working with smaller data sets, and you are fine with that, and that works for you. And your time is not like being wasted a lot, then I would say, please go ahead and stick with pandas. But if you have if you are working on like larger data sets, and the larger your data sets get, the more the difference is going to be in terms of your speed up. So when very large data sets qdf is gonna take a much shorter time to do computations and things like that. Yeah, you actually put a really interesting example in the show notes here, right showing how many zeros then

00:14:42 100 million items or something like that. Yeah, it's 100 million. I just kind of like randomly chose a number to try and make it like I didn't also want to take a number that was too big because I didn't want to spend like a long time. I'm doing it and I know like for a lot of data scientists

00:15:00 sick. I think increasingly, people are working with larger and larger datasets, just depending on which field you're in. For the example, I put it on the show notes, and it's on the screen right now. But if you take pandas sort of data frame and try and calculate the Mew, and you take the same PDF data set and try and calculate the mean, it will take I think, I'm trying to look at the notes. It's 105 milliseconds for pandas. And it's like 1.83 milliseconds for PDF, which is just,

00:15:33 again, that's like a smaller scale, I would say data data sets compared to some people.

00:15:39 Just 100 million. It's just 100 million. So it's not a lot. I mean, it depends. But yeah, I think it's definitely significant. Once you get to a certain threshold, sprinkle. Yeah. Over on the rapid site. It's a rapidset. Ai, it says, It scales out on multiple GPUs. So seamlessly scale from a GPU workstation to multi GPU servers and multi node clusters, working with dask as well. So that's, you know, dask is also kind of about scaling pandas and combining those. That's, that's pretty awesome. So I actually saw that you have a dusk was out. Like I recently thought, yes, definitely gonna take that. Because I've been yeah, check it out. That was diamond two days later. Awesome. Yeah, yeah, we put that together with Matthew Rocklin. And team over at coiled. Yeah. And that's actually free so people can just drop in and take that course, I think maybe I can put it in the show notes at the end, I think is just just announced. Let's see. Very cool. No, that was that was last week. But yeah, this is super cool. And this one is certainly within a normal person's reach. You get a GPU? and you're good to go, right. Yeah, I think yeah, I mean, I'm just using it on my laptop with the GPU. You can also use it like online. So there's also colabello colab. notebook. On the rapid side, I think that you can click and then you can like kind of experiment, if you just wanted to do it online, or I think you can use any sort of online GPU that you have access to. So it's very, I think it's it's trying to make it more accessible.

00:17:13 Which is great. Yeah, that's, that's super cool. Yeah, very neat. Well, like I said, I think this is a cool project to be working on. So thanks for sharing it with us.

00:17:22 Ryan, is it time for the next one? Is it time for the next one.

00:17:27 This was a recommended by a listener, Ira horeca. I think so mentioned, this is kind of a rabbit hole, I spent a whole bunch of time playing with all this stuff. Last night, he recommended date Finder. So this is a Python utility. And it kind of is amazing. So it's a combination of a couple things. But so he pointed us to a comp code, video, which, you know, I'm totally a fan of the comp code stuff, because they, they kind of go through some of the Python libraries and some of the other lot of other things, but just have kind of a quick demo of what it does. And I really appreciate that. It actually the demo here is better than the readme in the date finder, README. So maybe I guess a pull request is necessary. But anyway, so what does what day fighter does is it takes I'm going to scroll down a little bit. So date finder, takes,

00:18:21 parses dates and finds them. So if you give it a string, or a bunch of lists of strings or something, then it can find find where the dates are in there. So if you've got, if you've got a sentence or a paragraph, or an entire page that has a whole bunch of dates in it, it'll find all of them, and then return you a list of dates that it found. It actually does a whole bunch of things. But that's the default. Or the the the one that we're talking about find dates, there's a bunch of other Leslie less documented features of day Finder. But this, this is the one that is demonstrated here. And it's pretty cool. So what it does is it finds those dates, and then you can, and then it converts them to date types. So find dates will find them and convert them to date times. And it does that by passing them off to the date util library. So this is just kind of a really cool demo the list, the little videos a good demo of showing

00:19:18 how to do this, I also really kind of liked this way to play. So the video shows this way to play with things of it just had a list of strings, and then used a comprehension to convert that to call a function on a whole bunch of strings. And I thought this was just kind of a clever way to just play with a function that translates things this is a neat thing to do. I would usually so hard Yeah, it's super hard. But normally because it's so picky, right? You've got to go to the the date time parsing language, almost lookups. So if I put percent D, D, D, D, that might mean the year but if it's capital D, it might mean something different to you might say month, day, comma year but like there's an example

00:20:00 We're here with month day year without the commas like March 12 2010. But if they forget the comma, what pars and like all those things are really annoying about working with reading converting strings to dates. And this looks like it just it doesn't care. It's nice. Yeah. And then it also, it's kind of a clean, nice clean interface to it as well. The and unlimited documentation is just a focus tool, which is nice. And it's interesting that this is just a focus tool that'll apparently a lot of people need because according to GitHub, there's 662 projects using this. So it's used kind of all over the place. The behind the scenes, though, it's taking the word the dates that it found the strings, and passing those to date util. So if you want to avoid the finding part, this actually is also a good library to look at for the usage of how to use date util to easily convert, convert dates, and day utils. Kind of an amazing tool as well. And it gives you thank you till

00:20:59 I told you this was a rabbit hole. One of the cool things about it is you didn't just purse dates, but you can do relative dates. So you can say, like today plus three weeks or something and it'll figure that out.

00:21:11 And then you could or you can take two days, two dates and do date math with it really well. And also date util has an amazing timezone support probably the best in Python. So this is pretty, pretty cool. Also, I think I was looking through the test code, the test code for date. util has isn't is kind of a neat mix of unit tests and pi tests. Both of them are good examples of how to do both. And I like some of the newer stuff is using pi test with parameterization. But it's good. Yeah, I like this a lot. Marlene, what do you think? Yeah, I like it. I think it's I'm not actually working with dates quite often. So I'm, I'm trying to think of use cases for myself. Other than like, maybe converting timezones, which is like a nightmare. And so maybe, oh, you can say that again? Oh, my God.

00:22:02 Maybe said that, but it looks like it would be really useful for people that are Yeah.

00:22:09 Yeah. I'm showing up some of the some of the examples from detail of how to use it in its base. I imagine this is one of the reasons why Dave find her so used because this is non trivial. You're leaving to use details.

00:22:24 Yeah, that's cool. Oh, cool. All right. Well, I got the next one. And this one doesn't exactly come to us from Anthony Shah. But I was talking to Anthony about something else. And he's like, oh, have you heard of this? Have you heard of Cinder? And Cinder is pretty awesome. So Anthony's doing interesting work around Python and performance at the C Python level, especially now that he's given a talk on pigeon or piston piston, I believe it is. I'm not 100% sure, I might be remembering which one's wrong I Python, which is you know, we're going to talk more about that in just a second as well. But Cinder is a really interesting fork of C Python from Instagram. So it's under the Facebook incubator project. And I think we've mentioned it before, I definitely have talked about it before other presentations that Instagram has done really interesting things like disable the garbage collector, just turn it off 100%. And they got less memory usage, not more memory usage by just allowing the cycles to leak, which is insane. But this is like speaking of insane, this takes it to a whole nother level. So this is that they've been doing all these low level things inside of C, Python is based on three, eight. Hopefully, some of these ideas can be brought forward and shared with everyone, because there's a lot going on. So let me just cruise down here. I'll just read the little intro part because it's jam packed. And I'll go into some of the details. So it says this is the internal performance oriented production version of C, Python three, eight. And it contains a number of performance optimizations, I feel like performance is some sort of theme of this, this episode. It includes bytecode, inline caching, eager evaluations of CO routines, a JIT, just in time compiler, and experimental bytecode compiler that uses type annotations in some incredibly interesting ways. Do inner to emit type specialized byte code that performs better. So just to give you an example, one of the reasons that math in the pure Python layer is slower than say c++, or C sharp is c++ and C sharp work with just the value. So if you have the value seven, you might have two or four bytes that represent the value seven. In Python, you have a PI object pointer, which is like 28 bytes, pointing out to a thing on the heap that represents the number seven. And it's a whole lot more work to interact with that and set the reference count on that. And so honestly, you're just working with the value seven, right? So one of the things they do is they actually have typed the they use Python type annotations to understand Oh, this is an integer, this is a long and so on type of thing. And actually can

00:25:00 convert those to them machine oriented numbers, right, so just the value for instead of a pointer, and then it will use what's called boxing. If something else that's outside of this world needs it, it'll uplevel that to like a pylon object pointer type thing, and hand it off. So there's there's all sorts of stuff like that going on. Interestingly, the first question is, is this supported? No.

00:25:26 But there's some interesting things going on here. And all of this has to be taken within with an understanding that it's in a very specific context. And that may or may not be useful for you know, Brian had pointed out some articles and ideas around that you're not Instagram, you're not Facebook, you're not Netflix, and so on. Most of the time, people are building much smaller software with different constraints. So they start out by saying, look, Instagram uses a multiprocessor web server architecture, where the parent process starts performance initialization, and then forks, 10, worker processes to handle requests. This is super common. Like, for example, talk, Python training literally does exactly this, it, it uses micro whiskey, it starts up and it creates 10 worker processes to handle like people want to take courses. So it's not uncommon in the web. But it's not how all Python code runs. And so the first optimization they did is they created what are called immortal instances, the reason they were so focused on the garbage collector, and all those sorts of things was, when you fork these processes initially, there's a bunch of memory that can be shared. And that helps with cache locality that helps with overall memory usage, all sorts of things. But as soon as something has changed about one of those items, it has to copy a whole page of memory. And they realize that when an object's reference count is modified in one of the processes, it has to copy a replicate and sort of fork off a bunch of the memory that used to be shared across all those processes. So they created what they call immortal instances that cannot be that don't participate in reference counting or garbage collection. And that prohibits their reference count number to change so they can be shared. So they can mark like a whole bunch of the startup stuff as like, just don't even look at this or change it and don't do reference counting on. So in their world, they got things faster, but it doesn't always they said it's something a little bit slower in straight line code. But in this sort of fork world is better. The next one is shadow bytecode, which is an inline caching implementation. And it goes through applies in certain optimization cases for generic python opcodes. And it'll observe those for functions that take a lot of time and dynamically replace those with specialized opcodes that it thinks are going to be better. Another thing it does is pretty interesting is it will eagerly evaluate co routines. So if I say this is an async method, and then in that method, I call await some function call normal Python is going to create a ko routine, it's going to schedule it on the async IO event loop and it's going to get to it and that's a lot of overhead. But maybe that function says inside the first thing is if this case, just return the cached answer, otherwise, go to the database, await the response and so on. And what they realized is, if it's going to go through that first case, it's not actually awaiting something. So they'll actually execute the awaited thing up until it actually needs to become async. So it'll like look through effectively look inside the function and say, is the path we're going on this time going to be asynchronous? And if the answer's no, it will run it without async, which means it skips all that context switching and all that stuff, which is pretty crazy. It also has the vendor jet, which is a method in time JIT compiler think C sharp, Java, maybe even JavaScript, VA. So it's enabled for every function that is called.

00:28:53 Actually, it's not sorry, if it is it'll make it slow. So you can basically say which functions should be optimized, but they say, it supports almost everything that Python can do. And it has a 1.5 to four times speed up of the Python benchmarks, which is pretty interesting.

00:29:10 They also have this thing called strict modules, which is actually a static analyzer capable of validating top level code to see if a module has side effects and can treat it differently. If it doesn't, you can have an immutable strict module type that is sort of a replacement for pythons regular module that behaves and loads differently, and so on. And then the thing I talked about the numbers more broadly is under this category of static Python. It's an experimental bytecode compiler that makes use of type annotations to emit better things and check this out. It can deliver performance similar to my pi c or cython. And it this thing will go up to seven times faster than regular Python for the Richards benchmarks. And I don't know if the 4x improvement before is like in addition to this, so you get 28

00:30:00 He just gets seven. I don't really know. But there's a lot of things going on here and a lot of different ideas about how this works. So I'm just scratching the surface on the details, but I feel like I've gone on and on about it. That's really interesting. I saw, I think, is there talk about it at Python? Python?

00:30:19 is coming up. Yes. They're going to give a talk on this apart. Yeah, I was one of the talks I was looking forward to listening to. Um, yeah, just because I think it's super interesting to be able to kind of play around with

00:30:34 that they were able to kind of make their own version of Python. And it might, I don't know, like, I think that there's, like you mentioned, Anthony. And I also know, Victor. I think in someone else, we're also working on like sub interpreters and different things to make pasta. So I'm really curious to see if like, the core devs, or people will also be like listening to this talk and maybe take some, some ideas from it. It would be really cool to kind of see, and I mean, it's always good to get speed ups, even if they I don't know, I don't know if the if it will help like general like normal Python users. But I think it's always good to.

00:31:18 Yeah, yeah, I agree. I think some things here are absolutely convert transferable to regular general purpose C, Python. And some of them might not be, for example, though, I'm immortal, the immortal instances, that might be a thing that just they do that and it makes sense for their large scale farm of servers. But the the JIT that takes the type information and does math many, many times faster, that everybody would want that, like we all work with numbers at some level or another. Right? Well, one of the things I love about the, I mean, this kind of applies to all of these sorts of speedup projects, one of the things I love about Python is the just the general pneus of it, you can, you can throw data structures can hold anything. So. So it's, but there are times where you're, you really are using a huge array of floats, or a huge array of integers, or a huge array of like a fixed data size. those are those are times where you don't need it to be generic. I just needed I needed to be fast. So having having something that's the part where I think it'd be be interesting to pull into regular Python, but I don't we get that with like, some of the data science stuff anyway.

00:32:32 Number like, with like, NumPy and stuff? Yeah, you do. But you can't do generic programming with it, right? You do like sort of matrix math type of things in this one, like the answer used to be okay, well, this function is slow. This serialization D serialization section might be slow. So rewrite that in scythe on for example. And what's really cool about this, is you can write regular Python, and just put type annotations on it. And then it goes as fast as scythe on. And you don't even have to do like a separate compiler, I believe in this world, right? Because they have the JIT just knows that and then will, like, as you run it, it'll just compile and run it. So which is I think it just sort of makes some of those ideas closer and more automatic. For most people. I kind of think a perceived future where we have sort of some types that affect runtime, there's, there's like this tension in the that I sense in the Python, core people of whether or not types should be just an afterthought, or whether they should be really part of the runtime. And, and I think there are some cases where having them be part of the runtime might be a good thing. Yeah, this, this is interesting, because what they do is they, they, they define these static modules, and then in there, they can treat them differently. Like I always see on Twitter, people kind of like ranting about how they don't like that correction that Python is going on, like the idea of putting in like annotations and things like that. I think some people are not super big fans of that. I'm not really sure why. I generally would like to understand, like, I think most people are not most people. But I think some people I would prefer to maybe remain as it is, do you think that is like just having it be in a couple of cases would be would be helpful. So I don't know, I don't know if it's in that direction.

00:34:28 I'm with you. And one of the things they point out in this read me announcing the project is that you can still do gradual typing. So you can in some places have no types, in some places have some types, and the thing can convert and just deal with that automatically. And I think that's the reason that the types are really welcome in Python is because you can use them if you want, but you don't have to, as opposed to places like TypeScript, which said, well, JavaScript doesn't have type. So we're going to add this this very strict type system and if you don't fit it exactly, we're going to not compile and complain and it's going to be really not good.

00:35:00 This This feels like it continues that forgiving nature of Python to let you opt into it. But if you do, it can go faster. That's the direction I'd like to see. I'd like to see. I personally would like to see, types be really a full fledged feature of Python.

00:35:18 I love them. They're optional, but if they're there, let's see how much we can do with them right on.

00:35:25 Yeah. All right. Marlene, you got the last one. I got it on screen for you. Okay, yes. The last one for today is pike on us, which I'm very excited about. It started today, which is really great. How are both you attending? I don't know if you're attending. Um, but yes, absolutely. Okay.

00:35:47 Brian? Yay. Um, yeah, I think it's such a great event in terms of the fact that I know it's like on us, but it is. At the moment. It's the largest pipe, Python gathering, or largest Python on Earth, I think.

00:36:03 Which is very cool. Because it means that you can meet people from all around the worlds like I remember, I'm really sad that it's not in prison. Because like last year, like I've met, not last year, but the year before that. That's where I actually met you, Michael, for the first time, I think we were literally, I think we were like at a table with like you and Anthony Shaw and like Lucas lunga. And it was like, and I was just randomly there.

00:36:30 But it was such a cool discussion. And I really love the idea of being able to be in a room with people that are like contributing to Python. So very, that's my favorite part of iKON. So nice to meet you as well. And that that is actually my favorite part of iKON. Just you happen to end up at a table or out for a beer or a coffee with this group of people, you're like, wow, I I got these connections and this experience that just wouldn't. So I'm very much looking forward to coming back in person. But there's a bunch of great talks coming up exactly. So this year, it's also really it without, although it's online, the online platform is very cool. And there are still lots of great tools to watch. In the shownotes. I put down like a list of the tools that I'm excited to watch. But I also wanted to just put in a word for the things that I will be doing at pike on us this year. And the first thing I'm going to be doing is I'm going to be hosting the diversity and inclusion workgroup discussion, along with four other really amazing women that are part of the diversity and inclusion workgroup. I do want to comment here. Because I thought like we got some comments about it. Some feedback, I posted a picture of like a group that's going to be having this discussion or hosting this panel, and it's all women. And no one was this, like, why is it all women? How is this diversity? So I do want to throw it out there. I just want to throw it out there that we did try, like the workgroup itself has a lot of it has a good balance of men and women in it. But then when I asked people, if they want to come on the panel, it was only like women that that volunteered. So it's all my whole team. And I am aware of that. I that's just a general, or that's just general feedback there.

00:38:19 But I think the password, the panel will be really exciting. It's gonna be on Saturday, on the mainstage at 12pm. Is yesterday, I think you're going to be there I really would encourage you to attend, there's going to be question and answer. And I just think it's such an important thing. I know that sometimes diversity can seem like a really tiring thing to talk about, especially like recently, I feel like sometimes people use it as like this buzzword and it can end people gonna be like, Oh my gosh, and just turn off when I hear hear the word diversity. But I really do think it's important. And particularly now as Python is growing in popularity, I think a few years ago, it was okay for the nucleus of Python to be based in the United States or based in Europe. But it's growing so quickly, like Python for I don't know how many years now has been has been the most popular language in the world. And I know even for me, I'm in Zimbabwe right now. And it's one of the most popular languages here, what I where I live. And so just providing the group they call main purpose is to figure out how we can just how we can support the PSF to try and serve pythonista is from around the world better and to connect the community better and have better representation and different things like that. So very excited about that one. That's awesome. And thanks. Thanks for your work here. I definitely agree that we're stronger together, right. And one thing I would really like to see and I think we're getting there is when people look at Python and programming in general, both generally the Python space we have initially

00:40:00 went over that, when people look at that world, I would like them to say, I can see myself being part of that I can see that I could belong there. Right? And if that's not the case, then how do we make that the case? Exactly? Absolutely. I think exactly that. And I would love to see that happening in the next few years, I would love to see, you know, one of my things is, I'd love to see more like women, core developers, and more like global coin developers as well. And also people on the board and different things. And those are all goals that we're working towards. And obviously, we don't know, like the perfect way to achieve something or the perfect way to do things. But it's something that I think is really great and exciting to work on. So please attend if you are listening to

00:40:46 us, let me know if you're, like came from this podcast, that would be fantastic to see you there. Maybe just comment. Fantastic. Um, and then Oh, another thing that I am doing for pike on this year as well is I will be fun, I will be in that. So there's like a lounge area? Well, there's like a PSF. Booth. And if you would like to just if you're going to be there in the morning on Saturday or Friday, I will be hanging out and the PSF group. And so yeah, if you just want to talk about Python, or the PSF, or anything, I will be there. And I will also be hosting the imia meeting. So if you're in Europe, the Middle East, or Africa, there's a members meeting on Saturday, I think it's that in am Central African time, not sure what time that is in other places. But I know what that time am, it's on the schedule right now this

00:41:41 time thing that I don't know.

00:41:45 Pull up the repple throw it into daytime, exactly. Please do that.

00:41:50 So I will be posting that. And that's going to be in the morning. And if you would like even if you're not a member, you can watch it on the PSF YouTube channel, it's going to be streaming there. Or you could join, there's a meetup link that I put in the show notes so people could join that way as well. So yeah, Python is gonna be really exciting. And I'm really looking forward to it. So just encouraging people to come along, for sure. Yeah, it should be fun. And even though it's, it is super sad that it's not in person. And it's not in Pittsburgh this year. I think in some ways, it's more accessible to people around the world, right? They don't have to travel there. They can just log in and attended. And that's so much less expensive than I flew to the US and I paid $1,000 for a hotel. So there's a little silver lining, you know, out there in the livestream samourai. It really says I really wish I could go to pi con in person. Adam Parkin there says Me too, maybe in 2020? I think so. Finally, Sam is also thinks it's great that we're having this diversity, conversation and paying attention to it. One of the things I've noticed in in 2020 is all the other and regional, especially last year also though, but the the 2020 and 2021. We've got all these ERP icons going on all over the world. I used to think of like, icon us as the HP icon and everything else is regional. Now I

00:43:14 think of icon us as a regional conference. Also, it's the regional one that's close to the people that are in the US. It isn't necessarily better. It's

00:43:25 I love it. It's great. Anybody from the toasting it? Yes, it's better, but no.

00:43:32 I, I like all of them. And I'm as excited to get to participate and watch videos from all over the world this year. That was pretty neat. But yeah, I'm on board with you. I want to get back to regional stuff. I'd like to see people in person can't wait. Yeah, I will say for sure. Like, even if people aren't feeling adventurous. There is a regional conference. I didn't mention it before that I am also part of the organizing team for which is pike on Africa. So if you would like to travel to another HP icon, in a different part of the world, when we are able to travel and the world gets back to some form of of free travel.

00:44:15 Definitely recommend also hopping over to Python, Africa, I think, like you said, I think Python us is fantastic. And one of the nice things about that is that it's just it's it's it's a conference that has been there for so long. So a lot of people are going to be there. But there are 100% are a lot of great conferences like Python, Africa, which you should attend, if you can. I think they're really just as exciting. And there's so many cool things that you get to experience like, I think for me, it's like whenever I go to the US like last year, I never been to Ohio before and like I had no like I would never like in my I would never have a reason that I would think to myself, let me go

00:45:00 to America to go to Ohio. But I feel like it was such a good experience for me. And I really liked it. And I was really surprised by that. And so I think it's the same way like pythons A great way as well to like experience new places. So yeah, definitely digging in that

00:45:19 wraps up our six.

00:45:21 Anybody got any extra information to share nothing else for me other than the fact that if you do want to reach out to me, you can reach out to me on Twitter. I'm Marlene underscore z w air I was in Medina underscore z w on on GitHub, I think. And on my website, my website is Marlin mengalami.com. So if you would like to reach out to me here, feel free to, I'm always happy to chat about Python. Nice, good. So I got a couple one made me really excited this tweet from GitHub, this is your fork behind, you can now sync your parent repo with just a single click. So check this out. If you go to your fork canal next to contribute for your prs. and stuff, there is now a fetch upstream button and all you have to do is click it and then automatically your fork will become in sync with whatever you forked it from used to have to go and go check it out at an upstream origin and then pull from that and then merge that wherever you want it to go to over here, you just click this button, and boom, it's good to go. So I think this will just lower the bar for people forking something, they want to get the current one and then make a change to see if they could contribute back. Here's one fewer steps in that process. Any idea if it stays in sync? Or if it's you have to know it's a one time type of thing I believe it says there's this many changes will pull over and it basically just automatically does the process at that time. But still pretty nice. Up here, flask to Dotto is out. And that one was sent into us from Adam Adam Parkin that hey, heads up this is now actually live. So very cool. Actually, everything from palettes has been updated. So yeah, I happen to have spoken, done a podcast recording with David Lord who runs pallets and Phil Jones, who does core and contributes back to pallets as well, about the all the stuff coming in flass 2.0, all the exciting stuff and their future plans as well. So yeah, you can watch the livestream of that, or wait a day or two until the episode is out and just listen at talk Python as well. But yeah, very, very cool. Yeah. And then Adam also had the live stream again, because the supersweet always find it a headache to sync with upstream. Yeah, about the GitHub thing. That's, that's cool. Cool. Close it out with a joke. Well, we've got a couple things I wanted to mention. Go for it. Sorry.

00:47:44 I had bright, bright Canada on last week on testing code and huge feedback from everybody that it was a great episode, we talked about packaging. I'll have Ryan Howard, on this week talking about play, right. So that that'll be fun. And I wanted to mention, thank you to the 71 patron patrons that we have on Patreon. So thank you for supporting the show. Thanks. Yeah, everyone. How about a joke? joke? Yes. Sorry for almost skipping over your extras.

00:48:12 Here. No worries. You ready? Yeah. So this one, we talked, I talked about that crazy, giant chip thing. And we've got Marlene doing rapid, so I thought maybe some kind of machine learning joke.

00:48:26 Here's a bunch of robots in school. And they go like little Android looking thing. Small ones, because they're students. They're kids. And they're in machine learning class. And there's a big box of dirty data.

00:48:40 Like a bunch of bits that are like kind of gray, and they're just have dirt on them. And the teacher says, Robbie, stop misbehaving, or I will send you back to data.

00:48:51 Oh,

00:48:53 yeah. That's where they're spending half the day anyway. Yeah, they actually spend most their time.

00:48:59 I don't know who is going there. Like one of the robots is looking the wrong way. I think why is it like that?

00:49:08 Hey, a more concrete really quick close out question. I see in the live stream. Here's Atmos. Is there a difference between

00:49:15 f and pandas in terms of utilization?

00:49:20 Like in terms of how you actually use them? Um, well, I don't think so. For the most part, if, when you're using PDF, the way it's built is to mirror pandas. So the API's are, are really similar. So ideally, the methods that you would use when you're using pandas are exactly the same methods that you would use when you're using PDF. The only difference is like when you're creating a panda's data frame, for example, you would use PD dot data frame for example, but then with PDFs, you'd say create a data frame maker that can tell variables or something like that. Then the methods that you're going to plug in

00:50:00 Probably identical, it's really easy to. Yeah, that's Yeah, that's awesome. Yeah. dask has similar stuff as well, right? You create a das data frame instead of a panda's data frame. But the API looks quite similar. They're not always 100% compatible, but most of the mainstream things right. Definitely. So yeah, it's built definitely to make it as easy as possible. To switch between the two says very similar. Yeah. Thanks a lot, everybody for showing up. Yeah. Thanks.

00:50:28 Thank you, Marlene. It's really great to have you here. No problem. Thanks for having me. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes events Python bytes as in VYT s and get the full show notes at Python bytes dot f m. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

