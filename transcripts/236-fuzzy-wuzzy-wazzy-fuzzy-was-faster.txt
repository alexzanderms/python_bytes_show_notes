00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 236. Recorded June 2 2021. I'm Michael Kennedy. And I'm Brian knockin Anastasia. Anastasia, so great to have you here. Nice to have you on the show. Thank you for inviting. Yeah, absolutely. Why don't you tell people a little bit about yourself before we get into the topics. So I'm joining from Germany, Berlin remotely right now. And I have a little one baby dog joining as well. You might hear him on the street. I am originally from Ukraine. I'm not German. I moved to Germany around five years ago, maybe five and a half. And my question is Biden, I used to be a c++ developer, game developer and so many more languages. But the best one, I think, for me is Python. So I decided to stick with it for around eight years now. And I started out doing my professional programming in c++. And I don't know Brian still touches a little bit of C and c++ in his world. So that's cool. Yeah. half my life. Yep. So nice. And what kind of games? Well, they were adapted first. for iPad. There were like two and a half D games. And then later on, it was mostly 3d games with Unreal Engine. Yeah. Cool. Yeah, that. That's awesome. All right. Well, once again, welcome. Welcome. So glad to have you here. Brian, do I have the first item this time around? No, you do? Go for it. Okay.

00:01:30 Um, well, accessibility isn't really some, I probably should think about accessibility more, but I don't really, but I probably should. So I was excited to see there was a tweet recently by Matthew feickert. That said, I need to give some serious praise to a fellow psychic hip dev hands. Them Minsky is excellent monolines tool for interactive simulations of colorblindness. So I check this out. So monolines is this is a Python package, and you can pip install it. And as Matthew said, you can PIP x install it. So you just always have it around, which is nice. And

00:02:10 it just pops up this to this, this really cool window. And you can just, you can just drag it around. And it makes the whatever the windows have over all over your desktop, it just makes it black and white instead of color. So you can see what it looks like in grayscale. So

00:02:32 I one of the things I really liked about this is, is the the example of showing it with with matplotlib. And plots, because plots are really where you're using color to distinguish between the two different sets of data. So you really kind of want that data to look different even if people don't see color. So that's that's an important thing. So that was neat. And then somebody that replied to that and said hey,

00:03:02 I always try to use Si, si masher, smasher. I'm not sure

00:03:07 it is a to make sure they're colorblind friendly. So I'm like, I've never heard of this. So when I checked out smashers in what it what it is, is it's a bunch of color maps. So you don't really have to think about it. So you. So there's all these great named color maps. And they're, they're actually fairly attractive color changes. But the, it shows you what they look like in black and white also. So they this isn't, it's kind of a little demo at the top that we're looking at on the stream. But the code that you have to you just, it's just kind of built into matplotlib already, like it's an extent it's also kind of an extension to matplotlib and other things that use color maps. So you can just say when you're plotting, you can just specify a color map like rain forest or something. And it it automatically is a colorblind

00:04:01 friendly color map. So you can do your plots and have it still look nice everywhere. Oh, yeah, this is really cool. And Matthew, friend of the show, thanks for sending that in.

00:04:12 I never really thought about this and I should have you know, I mean, like maybe I should go over my website and go to they look terrible for people who have, you know, color vision impairments and whatnot. Yeah. So really cool. And it looks like it's this independent thing that we'll just go over. You just move your mouse around and work on anything it doesn't necessarily have to do with Jupiter or matplotlib or something like that. Right? Great. So the mana lens is just a it's just something that works on anything you drag it over even my desktop my background, it showed the showed the picture in black and white so it is cool thing is wait. There's color maps, I can just add to matplotlib that's cool, like race and stuff I don't need. I didn't know you could just do that. So that's a it's kind of a neat

00:05:00 And then you can like for instance, the one of the examples that they have on the C masher README is just just sort of a simple plot and when you're in matplotlib, kind of just picks colors for you unless you specify colors for different plot lines. But you can just you can give it a color map instead of a specific list for each item. So, and that's just kind of nice. That's why I'm doing it. Yeah, why not? Do Anastasia What do you think? Oh, it looks amazing. Really? It's super helpful. Yeah, we have a video game app by be great to use that as well. For sure. When you're doing games. Did you have to think about this kind of stuff? No, actually, we're not that far. At that time. It was around seven years ago. Eight. Yeah. So yeah. The on the on the monolines site, or the examples they show is using. Having one of the plots use some sort of pattern underneath and not just color. And that's, that's I'm not sure how to do that. So people that are great about plotly probably know how to do that really right away. But that's kind of a neat idea. Also to have like one of the one of the graphs has hashes versus stars or slant lines or something like that. Oh, yeah. I have it like some sort of ASCII differentiator. Yeah. Yeah. They're nice. Yeah. This is super helpful. And Matthew, again, thanks for sending in. And joy. Yeah. Welcome to the live stream. Thanks for being here and for the recording. So the next one I want to talk about is something called rapid fuzz.

00:06:37 Yeah, so last time I talked, when we had vincit. On I saw the fuzzy wuzzy fuzzy text matching for that, that chatbot that he was showing off. I thought, oh, Fuzzy Wuzzy is cool. So Miko, honkala, sent in rapid fuzz. And it's very much like Fuzzy Wuzzy. But it turns out to be a whole lot faster. And it uses some of the same ideas. But you know, coming back to the some of the things we were talking about, it is basically written in c++ using the levenstein distance algorithm for words, similarities, but obviously has a Python API that we all work with. And so yeah, it's pretty neat. It's really easy to work with you just again, pip install it. And then you can come out here and do things like buzz dot ratio, and you can give it two sentences. This is a test, or this is a test exclamation mark, and it says that's 96.5%, the same or you have Fuzzy Wuzzy was a bear. I guess these are Fuzzy Wuzzy was a bear guesses are the same. Now, was he fuzzy? Was he fuzzy? Yeah, got it. Gotta be better. Was he fuzzy was a bear versus Fuzzy Wuzzy was a bear. Oh, my goodness, that's 90% the same. Given a bunch of phrases, you can sort them by similarity, you can say, going to use selection, like, you know, to call in, or to call center type of automation, given three choices. And then given some text, you can say find which one you like Atlanta, Falcons, New York Jets, New York, giants and so on. Somebody says, you know, lowercase New York Jets instead of uppercase, it'll say, Well, here's the likelihood that that's a match. But here's another possible match. That's you know, and it gives you the ratios of how good of a match it is, though, if you've got a select set of choices, and you're asking for input on it. You can just say, well give me the closest match. And if it's anywhere close, you can just run with that. So yeah, pretty neat. Right? That's pretty cool. Yeah. And the other thing that's interesting is the performance. And before people tell me that all all benchmarks are broken, and they don't work, you know, sometimes at least they give you a sense. So here's some of the things that they've got in terms of performance, say versus Fuzzy Wuzzy. And the numbers are like 10, or 20 times faster, definitely broken.

00:08:51 It's definitely broken. I think it's a good that's written in c++ instead of Python. At most of its core, you know, probably. But anyway, if you're looking for fuzzy text, matching Fuzzy Wuzzy is a good option. And apparently, thanks to Mikko rapid fuzz is as well. So yeah, pretty neat. We probably should do a segment on benchmarks at some point. No, no, no.

00:09:14 No, we shouldn't do it. But I've written blog posts and stuff on it. And it's just an endless Battle of you're doing it wrong. Your situation is not my situation. And in my situation, it's not as good or it's worse or it's better or you're Yeah, no, I hear you. It would be interesting, but at the same time, yeah. Okay, there we go. We just had a section on bench work. Yeah. I've already just explained like the emotional trauma that I'll go through from receiving all the feedback now.

00:09:39 Anastasia, what do you think about this?

00:09:42 fuzzy text matching? Oh, maybe next time we can organize a butthole between them?

00:09:47 That's right. Yeah. We'll bring some in. Yeah, sure. Do you have any use for this fuzzy text matching string matching stuff? Well, actually, yes, it's work. We have lots of matching algorithms, but we're using

00:10:00 different tools. And I'm not a data scientist person, but I would love to try that actually. looks super cool. Yeah, we use some c++ libraries.

00:10:10 Yeah. Yeah. Robert, out there in the live stream says that we would have to benchmark the episode. If we had episode about benchmarking. You see, it's like recursion. Save that thought for the end of the show. All right, Anastasia, you, you're up next. Struggling login. Tell us about it. Well, a few years ago, I went to meet up and I heard a talk from Marcus halterman, about stripe blog. That's the first time when I heard about this, and I decided to give it a try. And actually, I fell in love with it. And I'm using it since at least two and a half years, maybe you

00:10:45 it's awesome way to bring a bit of structure to your logs to make them more visible and more usable. Because usually how we like it's like just one huge sentence which is readable by humans, but it's not machine readable. And the idea is here, to bring our structure to build some dashboards based on different keys and then values and then see what's actually happening was the system without touching the logs without scrolling through the whole log, and then just reading all bunch of things. And I already used it in production looks pretty well, if you try using JSON format is just fantastic. Oh, how cool. Yeah, you can pass it all these, like processors and type stuff. So you can say render out the print, the stack info, the log level, all those kinds of things. That's neat. We added a bunch of processors like custom made, which were specifically designed for our applications, which made a life of our DevOps, parsing the logs way easier, because they didn't have to write them by hand. And if you use structured logs for all applications, not just one, but for example, microservices, and you pass

00:12:09 the key ID or like trace ID or something that will identify the path which

00:12:16 the lock goes through, then you might see what happened before the bug happened. Or maybe because because if you want to see how the system is working, you also need to be either one of the detectives of the system, or is stripe log. Yeah. It's interesting. When you log out stuff, it looks like you can just do key keyword arguments. And those will add to the log really nicely. So you don't have to create a message that you're going to send that embeds you know, the value equal, you know, variable equals valuable variables value, we just pass them to the log message, and they become part of the message like, that's cool. Yeah. And you can also use the initial message, which is an event like greeted here as some kind of key, which would give more clues where this message is coming from and what type of event happened instead of usual message. Yeah, nice. Very cool. The other thing it says is, if you have color Rama installed, it will automatically render in nice colors. And that's very neat. I love color Rama and I love having colors in, in the code that we look at, it really makes a nice difference. So yeah, you get things like a colored whether it's an info message or an error, and whatnot. Yeah, very neat. I like it. I keep meaning to us this morning. No, I'm glad you brought it up, because I definitely want to try this. Definitely try this. Yeah, yeah, this is a really good one. This is new to me, but uh, quite neat. Alright, not new to me, but also quite neat. Is our sponsor for this episode. So this episode is brought to you by century. Oh, how would you like to remove a little stress from your life? Do you worry that users may be having difficulties and encountering errors with your app right now? Would you even know until they send that support? Email? I mean, yes, maybe using struck log. But are you watching the struggle log? Now? You don't know. Right? So how much you would? How much better would it be if you had that error or performance details immediately sent to you with the call stack and local variables and active user and all that stuff. And with century it's not just possible. It's easy. We use century on all of our web apps, Python, bisetta, fam talk, Python training, all those kinds of things. And we know if there's some kind of problem, unfortunate if someone has a problem, but it's better to know and be able to fix it right away. In fact, one time somebody ran into a problem over a talk Python training, getting a course and I got the message. I could see who was logged in when they had the problem. And I actually fixed the bug and was about to push out the changes and I got an email Hey, I'm having a problem with your your site and like yeah, I know I just fixed it. Try again, please. And they were quite a surprise. So surprise and delight your users today. Create your century account by them by set FM slash century. And please when you're signing up, click that got a promo code redeem

00:15:00 option and enter Python bytes. It's not automatic. So make sure that you enter Python bytes as the promo code Otherwise, they won't rose from us, you'll get a bunch of cool stuff, two free months of the team plan with many more errors and events and other features as well. So check them out at Python bisetta FM slash century. That's pretty awesome. Brian, I guess you should probably also test your code. Maybe before? Yeah, with errors. What do you think? Definitely. And actually, before we go on it, I think I've mentioned this before, but the graphic on that is on the sentry pages. So cool. I don't know I really like it too. Like I love the upset console terminal reading a paper. Yeah. So this is, this is kind of like inside baseball, maybe. But I don't know, maybe three people might care about this. But anyway, I'm one of them. So

00:15:46 x fail now works with bitez sub tests. So that's, it's neat. But I got to explain it a little bit. So some tests are kind of this weird feature of unit tests that came along in Python three, four. And it's a way it's a context manager so that you can have possibly several places where your test might fail. But continue, it doesn't stop. If it fails. And that's a that was within unit test. Pi test had, well, pi test that pi test check the plugin that I wrote, that allows something similar context manager, but then pi test sub tests came out, which was a plug in, in about 2019, that started that, that allowed you to run the unit test sub tests within from pi test. But there's also a PI test style of doing sub tests. Also, they're a bit quirky. So I'm going to we I'm linking to,

00:16:45 to to resources, an article by Paul Ganzel, and episode of testing code where he and I talked about sub tests. And so they're little before you jump in and use them right away, you should know some of the quirks about it. But there's still cool if they work for you. But one of the quirks that was around for a long time was the x fail didn't work. And x fails a way to say, I know my test is gonna fail.

00:17:09 But, you know, and then you get to decide whether or not you want to make market as an X pass or market as a fail if it fails.

00:17:17 And the

00:17:20 this anyway, x field didn't work with sub tests, but it does now as of like, the start of the month. So somebody named maybe sibor, on GitHub,

00:17:31 maybe

00:17:33 merged a fix or submitted a fix as a pull request, and they got merged in it's now in version 050. So x fail if you wanted to use sub tests, fail, no works with them. So that's the good news. Yeah, yeah, that's actually interesting. So the basic ideas, I want to loop over a bunch of scenarios, or whatever it may be, test them all, and then have the test fail, if any of them did, but actually just go through them all before. Yeah. So like, in on the on the sub tests. site, there's a little example. So like, let's say you're looping through a range and you want to, you want to run all of them. Within not not a parameter is just within the test, you're doing, like several things. And you can Yeah, and if something fails, you want to actually report all of the failures. And this is, this is, you know, sort of helpful with loops. But you know, why not just use parameterization. But the the one part where it does really help is if you really are checking, like four or five different things, and you really want to know, like, let's say, you're measuring something, or you're checking

00:18:36 several dimensions of something. And in having all of the failures together, would help you determine what the real problem is. So

00:18:46 it's when you have to have all the information. This is a good idea. Okay, cool. Anastasia, what's the testing story in your world? I would use mostly parameterize testing, because we don't have the sub test need. We don't need to test it multiple times. Maybe in the future? Yeah. When we use parameters works, I'd stick with it.

00:19:08 Yeah, it's definitely good. Alright. Another thing that I think is really neat to talk about, but I feel like it's almost down to the benchmark type of situation is, what do you do with the secrets in your application, there's to get as SSH get, which is always terrifying. If you go here, you can see Oh, here's all the code that we found in this branch of this GitHub repository. For example, here's your, you know, database connection string with username and password right there. Right? So you can see all kinds of issues. If you go over here, like even a live stream. If it doesn't feel bad enough, you'll like watch the live stream. Of all the things that are coming in, like right now, apparently, there's some username and password and a URL and some kind of private key and whatnot. So you don't want that. So what do you do? Well, there's all kinds of things you can do. Do you encrypt?

00:20:00 Those secrets and put them in source code. Well, then where do you store the encryption key? There's some kind of certain types of vaults you can install on your server, kind of like one password. But for servers, you could do that kind of thing. There's just leave it in there and hoping for the best. There's put in an environment environment variables. That's a very, very common one, right? But still, no matter what you pick, you kind of got to get that data back and deal with it. So I want to introduce you to pedantic, Brian, you've heard of identic, right? Yeah. In fact, I didn't know this has anything to do with secrets? Yeah. If you go to identic, right here at the top, I believe there might be

00:20:42 some nice little comment here. Oh, yeah. I thought I thought you were in here. But apparently, I'm in here right now. I think it toggles between us anyway. Yeah, so we've known we, the point is, we really talked about a pedantic a lot, it's a really cool way to create these classes that are kind of like data classes, point them at some data source, and then they validate it and adapt it, right. So if I've got like a JSON document that has a field in it, and that field is a list of something, I could say in my model, this thing has a list of integers. And if it happens to be, quote, a string is a number that has quotes on it, it'll just, you know, automatically do the in pars type of thing to get it fixed. Or it'll tell us that it couldn't figure out what to do with a third value, something like that. It's really fantastic. But what I also didn't know was that it has a built in support for working with these user secrets. So Dennis Roy pointed this out to me. And there's all kinds of things, you can have the dot E and V file, you can have Docker secrets, you can have environment variables, and all of these things as your secrets. And if you just derived from instead of base model you derive from base Settings, then this will automatically determine the any of the fields that are not passed to it from the environment, or from dot CSV files. What do you think? Well, that's cool. Where did the dot E and V files go? and not get up? Okay.

00:22:05 You know, you store them somewhere else, right? You probably what ideally I think you do is you would store like an N v template file that has, you know, put this value and then the real value here, this value, the real value there. And then you of course, ignore Git ignore the other one, the real one, right. So you at least have a structure. But so the idea is you come down here and say, I've got these settings. And we've got like an API key and auth key, we've got a Redis, connection, all those kinds of things. And you can even say, I'm going to put a prefix on it. So in your environment variables is fine if you've got one app and one server, but if you've got 10 apps running, or 10 API's running on your server, what is the API key refer to what is the database connection string with the database name in it refer to which one of those 10 apps, right, so you can put a prefix so you could have like, login app API key, or, you know, logging app API key, you put that in there, and it automatically will just let you access it as if it's API key. So you can sort of configure an environment a little bit better. there's just lots of really neat things that you can do in here to make that work. You can say whether it's case sensitive, let's see, let me pull up, I had to take know some other things I thought were super cool. So it's a regular pedantic model, which means it will do all the conversions and the validation. So if something is missing, that's required from your environment, it'll let you know exactly what's missing. It'll do those conversions. Yeah, all sorts of stuff. It has support for raw sequence files as well, which is like a slightly different way to do it. You can have different Li named E and V files, like a product envy versus una de Nv or whatever, all sorts of settings. So I've always thought pedantic is amazing. And I had no idea it had this built in support for working with this. The other thing that's really cool about this is, if you go back to the top where it describes it, it says it will try to get these values from the environment if you don't pass them over. So if you're in, say, a testing environment, and you want to actually pass values that would control it, you could just explicitly pass them along, instead of, you know, having them come from the environment. So it's really easy to test, you know, set the test values instead of trying to configure a test environment. Nice. We do use it, by the way, based settings, but we didn't use prefixes. Yes. Yeah. Which is a good idea. Yeah, the prefixes are cool. If you have a bunch of apps if you just have one. Like it doesn't really matter, right? Yeah, of course. Cool. You like this? It's working well for you. Yeah, it's working perfectly well. And we are committed on the development version with some damages just to have them around. course, of course. Oh, wow. How neat. Okay, cool. Cool. Well, that's neat. That username. Brian, you got the next one. All right. You've already done No, but I just wanted to mention the wait.

00:24:56 Nevermind, the wrong thing. Oh, oh, here we go.

00:25:00 The quote I think you were looking for was from fast API was not Yes. Yes, of course. Of course. Yeah, it is. I'm over the moon. Yeah. Super excited about Yeah, fast. Thanks. Yeah, we use it.

00:25:14 I love fast API as well. And to me, like pedantic and fast API, they go together, because I learned about them at the same time. I know, they're different people in different projects. But you know, it works like magic. Yeah, absolutely. It is. Yeah. And if it's not magic, maybe you should document it. Or maybe it is magic, you should document it. Definitely. Definitely. Make sure I'm the one who is usually bringing this topic to the team, how to write documentation. And first The question is why to recommendation. Everyone knows that we need documentation. But it's hard. It's time consuming, it's annoying, and how it usually happens, someone leaves the team. And then the last days are about finding our everything. And Gosh, I remember I've had this experience twice at least, right? It's like, Oh, you you said where you said you're going to, you've given me your two weeks. So your next two weeks, your two weeks notice that you're going to leave your next two weeks will be to start writing documentation for everything you've ever worked on. And anything that people might need to do. So your next two weeks are to begin writing documentation that you should have been doing the whole time, in German, you will have in the notice period of three months. So like it's a lot of documentation.

00:26:31 Just kidding. But normally, even if you leave the team like you, for example, move from one team to another, it doesn't mean that you have to leave the company. Still, you have to hand over everything that he worked for, let's say in a year or even the half of the year. And, for example, in my experience, when I started with Python, I didn't know any Python, I had to learn it. And of course, I didn't know about Sphinx or read the Docs or any kind of documentation for Python. And what did I do nothing. I didn't write it. And half a year later, I was wondering who wrote this code. So I did get blame. And of course, it was me. And I was like, what this person.

00:27:11 So yeah, and I suggest to start writing documentation. Now, even if you're not leaving the team. The reason why I'm bringing out the Sphinx and with the docs is that it will allow to have continuous recommendation. And with Sphinx, you can easily

00:27:30 write just some doc strings, which will explain what the function does what the class is doing. Add some input output parameters, and then you will automatically generate it. So there is no need to write it somewhere on conference or any other source. Because if there are too many sources, that's where the recommendation will die, because no one will go and check it. And during the handover. Usually it happens like that you write the condition somewhere where nobody knows where and nobody reads it. Yeah, you pointed out that you've got it in JIRA, and you've got it and get her Yeah, you've got it in all different places. So go dogs, yes, yeah. Yeah. Especially Google dogs. Oh, yes.

00:28:12 And then you share like 10, Google dogs, with different people, and then they lose the links. And people are leaving. It's nice when people are leaving the team. But it's not nice to the people who are leaving the team to another team, because they are getting all the questions for a year

00:28:30 or two find this, how can I get this function? How to get this data? Yeah, yeah, very good advice. You know, for a long time, Sphinx was like synonymous with restructured text. But now we've also got the marks that markdown with the mist parser there. So that's very cool, as well. And also markdown ahead instead. Yeah. And also it supports the Sphinx itself. It's a personal friend. Types of conventions. For example, you can write code reference, then you can go through all the code. And then you can also write extra documentation, like markdown, even README can be included into documentation. And you can also style it. Oh, nice. Yeah. Very cool. Yeah, that's a great themes to do now, it really looks attractive. Yeah, you did recently cover that. Right. Brian, this thing's themes. Yeah. And I'm actually is when the markdown the support came on. And that's when I went back and started looking at Sphinx. So the a lot some of our documentation is done is fix him because because it does markup and you can even make it do it's there's it's not built in, but you can make it read doc strings and and interpret doc strings as markdown. Yeah, very cool. Very cool. Robert, out in the live stream has an interesting addition to continuous integration and continuous delivery. So can we deploy yet only if the documentation is complete? Definitely.

00:29:55 Very cool. All right. Well, that's it for our main topics, Brian, you guys

00:30:00 Anything you want to share any extra stuff you want to throw out there? Mostly I'm, I'm, I'm curious about pi test users. So I'll drop a link in the show notes. But basically, I've got a pinned tweet on my Twitter, or my Twitter. And I'd like to have people tell me where they see

00:30:17 where they they're using pi test. So I've got some examples. And then I kind of went I my first question was people projects that have switched. But I was looking at just the just the guts of how Python works. And there's some amazing projects that use PI test, like wheel Pip, set up tools, warehouse, let's all use PI test. That's pretty cool. Wow. How interesting. Yeah. And they're sort of almost inside of Python, which is interesting. Because Yeah, using unit tests, right. Yeah. So and then I just learned about recently, even if it's proprietary, that'd be interesting. I just learned that stripe and Lyft went through a PI test conversion recently. So that's gonna be Oh, that's cool. Yeah, very cool. Anastasia, anything else you want to throw out there? Let people know about while we're here. Oh, yeah. Maybe using exceptions? Don't use base exception. Yeah, create custom exceptions for your app? Or I'm certainly absolutely I definitely sick.

00:31:14 All right, this, Brian, this was in danger of almost being an extra extra extra, extra extra here all about it. So I'll just go quick.

00:31:23 to Matthew fica is getting a couple of shout outs on the show. So he also pointed out that Whoa, super cool PIP x, which we've talked about on the show before, it lets you install Python tools kind of like homebrew or apt. They're not part of a project. But you want to have them managed and installed in their own isolated environment. So you PIP x instead of pip install the thing, which is great. That is now officially part of pi pi, the Python packaging authority there. So yeah, pretty cool. So PIP x is now sort of officially part of Python, not Python distribution, but the group, you know, Next, I will be presenting ish. It's recorded, but then there's like a live q&a afterwards, like Manning is having a conference on developer productivity? I don't honestly remember what my top talk is going to be about? Oh, yes, here it is. It's 10 tips and tools you can adopt in 15 minutes or less to level up your developer productivity. So I'm gonna be speaking on that. All sorts of fun things. So if you want to check that out, it's free to register for it. Later this month, I guess. Here's just a thought I would throw out there for you. I don't expect an answer. But Yikes, cloud bills can pile up. Alex Chan, who is teaching? I guess I don't I couldn't figure out exactly the context of this. But he put out a tweet that said, I have a panicked student in my DMS who accidentally racked up an $8,000. AWS bill. My suggestion I've talked to support is no good. Apparently, they won't issue a billion adjustment. Anyone got ideas out there? How

00:32:51 could you imagine as a student I mean, as a professional, it's still a lot of money. But as a student $8,000 is like a ton of money.

00:33:00 Yeah, it's like a term of bills. It's been depends on Yes, exactly. Yeah, like a semester of studies or something. So maybe other students and basically all people out there, put up billing alerts on, on whatever cloud thing you're doing. on whatever, whatever places I have, including AWS, I get periodically, I get an announcements like your bill is now at $50. Your bill is at $100. Your bill is now at $500. Your bill is now $1,000. And if it goes beyond that, I'm gonna have to start paying a lot of attention to what's going on with my AWS account. So just you know, put these alerts on there, it's usually easy with whatever platform you're on. Anyway, don't be that poor student. Alright, what's next? Ah, Brian skin, shout it out, hey, this might not be a total new item, but maybe we can mention it. Maybe it's interesting. developed a flare mentioned a flake a didn't develop it. unbeliev, a flake eight plugin for fast API. So if you're doing fast API, there's different ways to do things like routes and whatnot. And there's like the natural way, and there's sort of a clumsy way. And so here's a flake eight thing to make sure you're doing fast API. Nice. Interesting. Yep. And I think, yeah, and I think this is my last one. It is my last one here. So, uh, Sal, Shannon Brooke, tweeted, duper lab three will have localization. So localization means like the menus and the help text, and the button hover tips and all that kind of stuff are localized for different languages. So Jupiter, lab three will have localization making it more approachable for people who don't want to work in an English UI. And they're crowdsourcing translations. So if you wanted to contribute to Jupiter, and you were good at programming, and in a language that's not English, because it's already done in English. You know, go check that out. That would be kind of cool. But if anybody just messes with people and like, does wrong translations, just for fun? I'm so afraid of that. Yeah. I think they do. They do. I bet they do. And maybe not really obvious. Maybe in real

00:35:00 Not always. Yeah, yeah. Yeah. Nevermind. Don't don't don't.

00:35:05 Don't give people ideas is not.

00:35:07 That's a good one.

00:35:10 All right, well, that's all the extra bits as well. So how about a joke? Yeah. Okay. So imagine you're learning programming, you're learning Python, take one of these computer science courses where they talk about weird things like recursion. So recursion is idea that the function calls itself with different parameters, right? Like a really common example would be factorial. So if I'm going to calculate a factorial, it's just n times n minus one times n minus two. So that's just n times factorial of the smaller number, you can just like work your way back, right? But there should be an exit condition. Like if n equals one return, don't keep recursing. So here's a nice little graphic. under the banner of only programmers would understand and it's got the Foursquare's is kind of like screen sharing, we got that infinite view, says learn to program and one corner, next quarter make recursive function. Third quarter, no exit condition. And then it just repeats and repeats and repeats down to smaller, smaller, smaller. I love it.

00:36:08 This is bad.

00:36:10 This is good. That's how you learn. That's right. No, yeah, exactly. It's like when you share your screen in zoom, or, or maybe Google me, but you stick out the window up or something like that. But it's about recursion. It's beautiful. And then you silence base exceptions, and you cannot exit the program. Yes, that's right. Do you know if? Yeah, he knows Python has a tail recursion optimization. thinking I'm thinking No, like, so the whole point is here, Brian, that we would run out of a call stack space really quickly. And that's usually the error Stack Overflow error if you recurse too deep type of thing. But with tail recursion, you basically becomes an infinite loop. So you've run out of time instead of memory. Okay. So by doing so, that would be the advantage of tail recursion. I have no idea if it is it or not. Yeah, I mean, there's some languages that do the optimization. So they don't they don't generate a new cluster, because there's nothing to save. So yeah. Yeah, I don't know. I'm sure we will find out before next week. Yeah. One of the reasons why I like asking open ended questions on the podcast. Yeah, that's awesome. Yep. Well, Brian, thank you is always an Anastasia. Thank you for being here. It was great to have you as a guest. Thank you for inviting Thank you. Yep. Bye

