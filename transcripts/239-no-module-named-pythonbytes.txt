00:00:00 Hello and welcome to Python bytes where we deliver news and headlines directly to your earbuds. This is Episode 239, recorded June 23, almost into June 2021. I am Brian knockin.

00:00:13 I'm Michael Kennedy. And I am Nick Moore.

00:00:16 Welcome, Nick. Thanks for joining the show before we jump in, but tell me a little bit about yourself.

00:00:21 Yeah, sure. So as I said, Nick Moore, I'm based out of Ohio. And I work as a data engineer. Trimble transportation is a software company, I mean, to like revolution, analyze the way we supply the world and like simplify and connect like the world's supply chain. Like it tries to make it easier to move goods and freight all around the world. I'm also the CO organizer of the of three pi, which is Cleveland's Python Meetup group. Thank you, Michael, for showing up on the screen. So yeah, that's a bit about me. Nice.

00:00:55 I enjoy Cleveland. Were there for pike on? Yeah, I think I'll meet you guys there. Cool. Thank you guys. JetBrains. That's right.

00:01:03 We were I was really great to be in Cleveland for a couple years. And I guess we just completely missed Pittsburgh, but they're going to get another another round out here is a redo, which is cool. From COVID. I got a chance to speak at the Cleveland Python meetup. And I talked about talking about memory. Was that right? Yeah. Talk about how Python manages memory was a really cool deep dive into. Yeah, thanks. That was super fun for having me now. It's good to have you on our show. Yeah.

00:01:30 So it was on purpose. Did you make a joke that you couldn't remember what the talk was about?

00:01:34 No, I I know how my brain might store the memory of what I spoke about. But I just, it could have been that or a second. I wasn't 100% sure which one it was. did talk about hissing to them? Yeah, for sure. Speaking of async brain subbasins tells us about it.

00:01:53 Well, this is an object relational mappers also. So we have arrow or Mar, which is a, a, an async mini or M for Python, which supports Postgres, MySQL, and SQL Lite. This was a suggestion sent a suggestion sent to us by john Hagen's. So thanks, john, for sending this in. I actually I haven't played with this a lot I was looking around, it looks pretty neat. But I'm going to quote john here, he says, it's a really cool form that combines identic models in SQL models into a single definition. What is great about this is it can be used to reduce the repetitive duplication between the models for an arm and the identic models for fat that fast API needs to describe serialization. So I guess you do have to specify that twice normally.

00:02:43 Yeah, normally, what you do is you would have the the data model the classes that do the exchange on the API level. So those are probably pedantic. But maybe then you have a something like a sequel alchemy model. And then somewhere in the middle, you've got a copy of the sequel alchemy data over to the identic model, send out over fast API, and you get it back that you've got a copy that from fast API and pedantic back into SQL alchemy. And because SQL alchemy types are not really meant to be transferred on the wire, you don't get the open API documentation that you get from pedantic integration, and all those sorts of things. So that's normally what happens. But if your database model can also be a pedantic model, then you don't do that back and forth.

00:03:24 Yeah. And anytime you've got duplication, it's like that dry issue of just you're gonna mess it up sometime, it's gonna be wrong.

00:03:31 And I think that's why like, so cool. Um, sequel alchemy, I think in version 1.4, they will be doing pain around with a lot of ideas on how to integrate, like data, not pedantic, but data classes and like the, or M style base models for different like propositions and how that should be gone. But it's not yet perfect. I think that's something that this looks like they could learn from or hear.

00:03:58 Or at least, it's good to have these sort of experiments going on for everybody to look around and see how do we how do we move forward so that we can do this cleanly?

00:04:07 Yeah, one thing I will say is that with all of these forums, I don't know why they never they never give some love to SQL Server. I always see Postgres MySQL is like, but like, SQL Server is pretty cool to where does where is the support for that?

00:04:23 What's what SQL Server? So that's like Microsoft's You know what?

00:04:30 I think it's, it really matters what audience you're addressing. Nick. Right. So if you're talking startups and a lot of the open source crowd, yeah, it's all Postgres or, you know, if you're talking to Michael, it's on MongoDB. Right. Right. If you're talking to enterprises, boy, oh, boy, do a big bunch of those enterprises run on the Microsoft stack. Yeah, Windows, Windows servers, Microsoft SQL Server. And that's a non trivial amount. of the the use cases for these things. So I agree that it should get some attention, even if it's not necessarily the one that the maintainers or many people are most keen to use.

00:05:10 Yeah, and I, I agree it was a joke, but it's one of the things I wanted to john mentioned is that the one of the benefits of armar is, there's a quickstart, specifically for fast API. So you can look at the documentation, and there's a fast API quickstart on how to get this running with fast API.

00:05:31 What an interesting combination of descriptors from the ORM, class side, and pedantic models you get here. So for for this, we have like the pedantic model base type of thing, we've got the columns specified with type information that pedantic would use but then you set them to things like an integer column, that's a primary key or a string that has a maximum length setting and things like that.

00:05:57 Yeah, it's like the worst of every world. But it's better than repeating stuff. Right? So yeah. Interesting. Yeah. Yeah, I

00:06:05 think it's pretty good. And, Nick, you mentioned sequel, alchemy, and data classes. pedantic also has some integration for working with data classes as well. So maybe there's a way to bridge those things across or like fast API in similar situations as well. I haven't tried that. But it's possible. Yeah. Let's see out there in the live stream. We've got Sam Morley. Hey, Sam says this looks a lot like a Django ORM Yeah, absolutely. It. It really does. And then Dean is hoping that we'll get some support for a very important database access DB that and oh, gosh, what was it DB two and a couple of dollars? Yeah, there's some really important ones that we're forgetting, but I think it's gonna be okay. Oh, my access, that gives me PTSD from college. Imagine, I can't imagine. Alright, well, speaking of people who might be getting some trauma, let's talk about no module named no module named.com. In fact, is it's now its own website. It used to think it is like an error. And now it's actually a service. So error explanations of a service, I guess, is what you would call it. Alright. So Gareth doon pointed out that there's this website called no module named, and it looks super plain. And I went to what is this? It has 3626 packages, and oh, my goodness, like 2 million modules or something like that. And it has 151,000 package install guidelines. So for example, what if I'm working with HTTPS, and I get the message that says, Python error, no module named HTTP x, right? This is what you would have if you wrote import HTTP x. And you went and tried to run it. But you were new. And you didn't realize there were external dependencies, or that HTTP x wasn't built into the standard library, you would get that error, right? Yeah. So this tells you how to fix it. It says, Oh, this is probably because you don't have the package HTTPS. Let's see if I can go something like fast API responses. Is that a thing? And what will it tell me if I tried? No, such a module? Yeah, but so NumPy, for example, it will give you a lot of these. And it'll tell you, this is probably because you don't have the package NumPy or NumPy, MIPS 64. installed. So that's what I was looking for is if it would sort of show like, well, the package name is not exactly what you're looking for. So maybe ps4 right? Sometimes these modules that. Yeah. So for example, if I say ps4, it'll say Oh, it's because you don't have if you have the error, no module named ps4, it's because you don't have beautifulsoup or installed. Right. So it's more than just like, pip install the thing that there's no module of it tries to help a little bit more with understanding that and it tells you how to get the latest version, it tells you how to install it. So yeah, and there's even a related article,

00:08:51 extremely beautiful, like SEO on that with, with, with people just googling error messages as well.

00:08:57 Yeah, so pretty, pretty interesting. Garrett done. Thank you so much for sending that in. It's simple, but you know, these kinds of things can help people who are new and are getting in and I think one of the powers of Python is we have people coming from all these different backgrounds and experiences and they are not all computer science people that know about package managers and like love that they're just like, Oh, I know that I can do cool I can like load this file and make a picture out of it that I need to work on. But I get this stupid no module named this What is this? right and then they can this you know, these kinds of things can help.

00:09:29 Yeah, I'm trying to teach my 11 year old son programming and we started with packaging. Yeah, we didn't.

00:09:37 I know you started the virtual environments and then packaging.

00:09:41 But Brian, and I thought you would have started with testing first. The always test first. I think this is like a really this is like a really cool project. I find it super useful when working on projects related to gooeys like cute or or Phoenix No, no Ws Python because like those packages come with so many underlying dependencies. And sometimes you might miss one, or might miss something that like is an OS dependency that you don't know. I feel like this could help you out. I know I've run through this a few times where like, I'm using, like a package is built on top of cute, but then it tells me you don't have pack gt gt pack 85. Right.

00:10:25 Well, I like that. I think you probably already mentioned this, but the the the error message, is the module not found. That's often not the same. It's not the same name is the thing you happen to stop. So

00:10:39 yeah, like one that drives me crazy is date utils. I love date util. I think it's like magic for the pain of parsing dates. But that's not what you install. You install Python underscore date util, right. And so there's just it's those situations where like, why is there no date? utils pip install date until and then it's not even the right thing? Or, you know, it's, it's just, uh, yeah, I think it's helpful to sort of put those things together for people aren't Yeah,

00:11:01 yeah. And for people doing new packages, don't do this. If you can, even if you have the perfect name for your package, and B come up with something else that you can actually, it's available on pi pi.

00:11:12 Yeah, yeah, for sure. Alright, Nick, you got the next one, right.

00:11:15 Yep. I've got the next one. So I was looking through Jupiter. So I'm, again, as I said, as a data engineer, I often use Jupiter for like, data wrangling and just trying out how to like, clean up some kind of data before I actually do the actual cleaning in our data pipeline. So I stumbled I got a new iPad, I was I went, I went to like tinkering around with Python code. And I was like researching into how to do that. And I stumbled across Jupiter light. And they have a cool Jupiter lab. But sometimes I'm not going to is always going to be connected to internet using my iPod. And then I look deeper into it. And it's a Jupiter distribution that runs entirely in the browser, and is like built from the ground up using Jupiter lab components on extensions. And on the on the kernels that are available are like in the browser. So like, there's a Python kernel that is like, in the browser. It's built using pi iodide. That was like really cool to see. And there's also like a, I think there is a or is it the user guide. There are other kernels such as JavaScript, and p five j s, which thinks like a graphics library to build like things on canvas. But it was really cool to see like, it's supports Python three, eight, and you get like start session, you can run Python code. Python completion, which is really cool. It's interesting to call the the colonel Pio lights.

00:12:54 I would like based on pi iodide. Yeah.

00:12:58 And this is I pulled it off. This is what it looks like. And it looks pretty cool. So it also supports right, I think, for now it supports Altair, and again,

00:13:09 matplotlib as well, I think, yeah,

00:13:10 my old MacBook live. And so like open up this Altair notebook. It even has something called micro Pip, which is like, I don't know what this means. But it I think it means that it's out. ico is a package manager, but for the browser for Python, which is interesting. And it's it's asynchronous, because it's JavaScript basically. Right?

00:13:37 So it's a weight micro pip install, like Jinja, two or Altair or something like that, how interesting.

00:13:42 That's very cool. I think it also everything that you download, and everything that all the data that you like, load up, it's being stored in the browser's like local storage or some other index dB. So it's like self contained. The only thing I noticed is that right now it's not. It's not always the word here. pw A. So yes, I was just thinking it would be fantastic

00:14:13 if that was a progressive web app, and they just have it. Yeah, mostly offline mode. Yeah,

00:14:19 edge does a great job with pw A's and every time it detects like a manifest JSON, it will show you even install this. And I would just love to have like this click Install and then have Jupiter light wherever I go, although the top on my iPad and then disconnect and still be tinkering around with what I want. This is all browser based. So that's really cool. I'm gonna run any of these but I encourage anybody to check this out. It's pretty cool.

00:14:44 Yeah, this is really cool. I do the same thing with I use brave so I have like a YouTube app installed on my Mac and I've got a Twitter app installed at all is progressive web app so you can just launch them I do wish Firefox support that Firefox people. If you're listening Bring back the progressive web app. We all need this. Yep. Yeah, that's cool. What are some of the other notebooks in there that look cool? Um, we see these like demo ones or did you?

00:15:09 The demo one. So there are the this as a p five j. s one. There's the alternative one. I don't know what for you is. There's an interactive widgets, which is cool. So you can still use as Jupiter's I ipython ipython. notebook widgets. matplotlib plotly as well. I feel I'm partly cool. And so this is the de facto like pilight one. So it supports bah, bah, bah, pandas as cool as that, like, apart from attack as well. Yeah. So like, as I was saying, before, Pio died is a What is it is a like implementation of Python. On the browser, actually implemented on Python. It's under computing stuff on the browser. So I think things like pandas, NumPy, sci fi, psychic learn, are already like, available. It's within the PI ecosystem. So you have to

00:16:05 I had the guys behind it, you know, Firefox, and Mozilla was behind it, originally, at least, and had them on talk Python, I believe it's webassembly. based, I think what they did is they took all these major visualization libraries and things like pandas and NumPy, and compiled them all into a Python plus those webassembly thing that runs in the browser instead of a JavaScript version, which is pretty awesome. Yeah, the symbolic output like the got this the math symbol integral of the square root of one over x dx. Yeah. I wonder if you get Hancock's on it. Oh, awesome. Cool. All right. Well, that's a really good one. I love it. All the data scientists out there, I can definitely enjoy that. Yeah. Cool.

00:16:50 We're gonna mix by the year up next. Right. Okay. So next, we've got plotting, maybe, yeah, more plotting. So this is, um, this is a long title. Basically, it's lots of plots. There. There's eight popular graphs made with pandas matplotlib, Seaborn in plotly. Express. And I one of the things I've seen a lot of like articles and stuff, talking about how to do different plots in one or one or more of these, in a lot of them are a lot of articles, and rightly so are focused on something cool you can do with one library that you can't do with others. And, and like I've seen seaborne ones like that, and that's great. What I like about this article is it's, it's like, well, let's just take these these, these different pandas, plotting and matplotlib, Seabourn plotly, express, and do the same plot. Let's do that. Let's do something they can all do. And so that's what this article does. It does a whole list, you got line, normal line charts, grouped bar charts, stacked bars, pies, a whole bunch of things, and histograms. And then you can just compare to see what it looks like before you try. And, you know, for one, it's got like, you know, the output, what are the what are the graphs look like, which is important. But also, it's just it's a fairly simple article is talking about what the plots look like, but also, how do you make them what's the it's a, it's in a notebook viewer, Jupyter Notebook viewer, and it shows you, you know, what's the code look like to get these plots set up? And that's a I think that's a big part of choosing your plotting libraries, looking at the API to see what kind of API looks comfortable to you. So

00:18:30 yeah, I've got to write this code, will I be able to remember this? Yeah. Or will it be like regular expressions that I learned that every time I use it?

00:18:37 Yeah, where if you get stuck with one and you want to switch to other to sort of look at what the deltas are, I like these side by side, apples to apples comparison sort of articles. So I think this is good for choosing the simple parts of planning. But some of the comparisons are sort of funny, because like the bar charts, just kind of all looks the same. But

00:18:58 that one's orange versus orange and blue versus green. And blue is not all the same.

00:19:03 Yeah, but you get down to some of the fancy ones in the in the Yeah, they do look great. Some of the white area charts. Yeah, that one looks great. Was that partly Express area charts look awesome. Yeah, that area charts look good. And donut chart was a donut chart with a hole in it. Yep. What do people use that what's

00:19:25 I think it's because of like, the pie chart. The sectors are kind of it's kind of kind of sometimes it can be hard to see. Like how much with not like the the circumference of like this sector. So we don't know Charlie kind of makes it easier to see like okay, this takes like all of this is just a visual thing to be honest. Okay,

00:19:47 good. Make this your world. What do you think?

00:19:49 I think this is really cool. But to be honest, all of these API's don't compare to the grammar of graphics from our and so I usually use I you If I am going to do graphics in Python, I would prefer to use something that like, conforms to the grammar of graphics because to me, that's kind of, you know how like Python has the, the import this and it's all philosophy of how we write Python. The grammar of graphics like has that so he has like, gives you these like sentences, so to speak to build graphics, and I like that makes so much sense in my head. So like for graphic for a graphing library, it's it's either Altair or GG plot. And there is like a Python port of GG part of GG plot that is pretty good. But I think Altair is like byteball, Nick de facto version that I've used, that's really nice. And all the other ones that make me have to do like, like, like, do these method calls on objects? Just I can't, I can't remember it. I'll have to come back to something like this. So how do you get any matter? Are you using seaborne? I really like if I get like seaborne has a lot of one liners to like do simple charting one line, which is great on like we do grammar graphics, right still makes you have to build everything out. But if I'm building something really customer, or I am just building something that I have complete control over the grammar of graphics, this gives me a better way of like remembering what to do compared to having to remember this AP or this API, or this method API calls. Well, I

00:21:27 mean, the the author Dylan Castillo says, Let me know what you think. So maybe why don't we give him some feedback to add Altair and in couple others? Oh, yeah, that'd be cool.

00:21:38 Dean also has some thoughts out there, right?

00:21:41 Oh, seaborne and pandas use matplotlib in the back end, so you can do everything they can do with matplotlib. Okay, they'd be harder but not impossible. And also, that's probably why they look all the

00:21:54 same, it's turtles all the way down. He also says remember, kids, almost every command in matplotlib returns the object it charts as the start of Opie object oriented plotting. Alright,

00:22:05 oop, and it'd be two piece.

00:22:12 Alright, well, you, Brian, you got to talk about databases. So I'm going to talk about databases too. But my databases are going to be smaller and in memory and embedded, but also about MongoDB. So there's this really cool one created by David, a lot we called Monte dB. So it's a multi Mongo MongoDB, tiny ified. So it's MongoDB implemented in Python, and you can have it in process, kind of like sequel, I believe, we've covered a couple of these libraries that are starting to show up that let you do sort of embedded MongoDB, which I think is really neat. So it's inspired by tiny dB. And it's extension, tiny Mongo. So the way you work with it, it's super simple, you just import the multiclient. And if you wanted to go crazy, you could say as a Mongo client, and make up basically the same, and then you can give it connection strings like colon memory, colon, that should look familiar from something like SQL Lite. And then you can insert data to it, do all sorts of things, and do queries against it, run, like the MongoDB query syntax against it. And you get the responses back, which I think is pretty cool. It certainly interesting for testing, if you told it to use a file storage, it could be an interesting little embedded database and things like that. So pretty cool. It supports many of the MongoDB versions, up to four, two, and four, four on the way with wave emoji. I'm not really sure about that. But also, what's that? I think it's sweat like, oh, gotcha, like the work has been done. Gotcha. So you can pip install Monte dB. And it will work in sort of its way, if you want to use the actual serialization library from MongoDB itself, you can say install Monti DB bracket base on to install that as well. It also has a lightning memory map db lmdb. Library, it can use that as the storage engine as well. So you can pip install, you know, add that on as well go for the storage, you've got in memory, you've got a flat file, it'll actually use SQL lite as a backing store, which is pretty cool. And then that lmdb lightly lightning memory mapped dB. So this looks pretty neat to me, if you're going to do some kind of embedded thing, or you're going to do some testing and you want something lightweight, that's not a separate server, you've got to set up and run and all those kinds of things. This is a cool thing. Awesome. Can you make this a PI test fixture? Brian that just gives you like preset sets up your database and gives you access to the connection or some.

00:24:42 Yeah, I mean, I actually I don't I'm not really a fan of people switching their databases too much for testing, because most most modern databases have in memory options, or smaller version options. But I mean, we use SQL lite for tons of stuff. That's not just for testing. And if you've got SQL at the back end, there's no reason All right, this couldn't be a production thing then. So

00:25:03 yeah, absolutely.

00:25:04 Yeah, this is really cool. This is gonna be really useful for like ci apps that need to store your

00:25:10 essence, exactly, you want to have a little thing, but you don't want to say Yo, you want to run my little utility, I packaged up with PI to AB, or pay to EMC or something, you're going to need to install MongoDB and become an admin of that. No, you just, you just use like a sequel lite file as the backing store, the LM DB version. Another thing that's common from the MongoDB world is there's a set of COI tools that allows you to manage it so I can connect to it. I can import a bunch of export files from some other backup files from some other MongoDB instance and import that into my current server or whatever or create those exports, right? There's actually a bunch of utilities called Monte import, Monte, export Monte, restore Monte dump. All of these are the parallels of Mongo, Mongo, dump, Mongo, restore, and so on. Alright. So if you were used to working with MongoDB, it's not just explicitly that there's some API to talk to some file. There's also like the tools that are there as well. Yeah. Yeah, I think it's like it could be a cool project. So why don't make this mostly for just been in practice, but also needed to run in this limited environments for like render farms in the film industry. So that's pretty.

00:26:29 It's a side project also with render firms.

00:26:33 It's a side project for my supercomputer. Yes. I love the name of the way Monty Monty Python. Hello. Yeah. I mean, yeah, it really brings the MongoDB wordplay in with Monty Python, Python. org origin. Yeah, pretty cool. All right, Nick, you got the last one,

00:26:49 awesome. exhausted, Mills checking with my by. So essentially, what exhaustiveness checking is, is a is a feature of like, a lot of type checkers where they guarantee that the programmer has covered all their cases. And so with my PI, you could essentially check things like whether you've covered all the all at all, like you have written on the if statements you're supposed to write at compile time, rather than figuring that out at runtime. And I like I really got into using my PI and try to like, have it saved my saved my butt a lot. The way I think about code by embracing types, so I stumbled across this, which was like really interesting where this article written by hockey Benita went into a how, like, I was actually gonna chicken actually works. So, they start out with IEM that has for their status. And you have a function because that is called handle order that takes a status which is instance, we should be an instance of order status. And so in his function, he has this like, if status is already you do something, if such as his order shipped you do something, but then he gave this like, I did this, like new calm like scenario, where what if you want to check the status of something scheduled? And so it stretches on my priority and complain about it? So like, Okay, cool.

00:28:25 Yeah, because one of the things that's very common is if you have something like a set of cases, in this case, it's put together in an enumeration. You have more cases over time, but all these if, else if else, if else, if statements all over your code. Have you exhaustively gone through and added that case? Check for all of them? Probably not? Yeah, probably a really good test. Yeah.

00:28:48 Okay. And so he proposed like, one quick way of checking that you've handled all cases is by adding this assert false comma, on handles state status, the passenger status using f strings. And so then when you try to pass a state that you have not actually handled before, you actually get assertion error, right? Which is, alright, but if you use my pie, there's this clever trick here. Where you create a function called assert, never, that takes a value called no return and returns no return. And in it, it has the assert false on handle value. So then when you use that function in your handle order function, you or the NPC have this else asserts never and you pass in the status now we check with my by Michael No Hey, argument, want to assert their house incompatible type literal, or they're set to schedule expected normally?

00:29:51 How interesting. Yeah, and this is a composite. And you can actually get this Yeah, that's I think that's the important thing because I was looking at going oh, I could just add the L statement, and put the US there and have nothing to do with my pie. And I would catch that error. But that catches that error when that code runs. Like I said before, you know, hopefully there's tests, but oftentimes there's not tests for everything. Yeah. And so especially it's there might not be a test for the new thing you've added. And so this is cool in that it, it checks all the possible types that could go in. That's cool.

00:30:20 Yeah. And it's the part that really got me was that it integrates with your ID. So pi charm vs. Code, or any, any editor that implements a language server can then like look at this and say, Hey, you haven't handled all your cases, right? And you get that immediate feedback, rather than having to run your code and then find out Oh, dang it.

00:30:44 I missed this case. Right. Yeah. So people who are not looking at the live stream YouTube stream, which is almost all the people listening, Nick is showing on the screen, this assert function that's checking the the enumeration, and there's just a red squiggly line that says literally says a certain ever has incompatible order status scheduled, that's the missed enumeration case. I think that's incredible that actually finds this

00:31:10 Yeah, I need to work because I'm more my bi uses this technique called type type narrowing. And essentially, what that means is that it's would given a variable as it goes through like a control flow, like if statements, switch statements while loop my PI will like kind of confine or, in other words, narrowed down the types as it goes through those control for plumbers. And so it works with enumeration types, unions, literals. So you have in the article, there are examples of how you could pass in a union of different types strings float, and you could still use this technique, I need to tell you a missed case. Or you could do this with literals. So you have like RGB. And then I only implemented the union check for like two cases which are RNG. And they tell you hey, you did not handle the B case. So yeah, and so like the article goes further into different ways in which you could set this up I have my check all of the different cases for you. Which is really cool. Even got like

00:32:24 the very sweet for card like diamonds hearts.

00:32:29 I know. It's interesting that like to my by when it season in enum that has like clubs, diamonds, hearts, and spades. All it sees is like a union of literals, which are sweet cards, sweet club sweetheart, which is actually interesting. That's how my bike season. Yeah,

00:32:46 that's very interesting. I mean, basically, emojis.

00:32:50 emojis, right. I'm the one other thing I wanted to mention here is that this specific p Oh, yeah, this feature is actually something that Guido actually thought was pretty cool. And so I think it's part of Step six due to structural pattern matching already. So if you are matching against in either with default, or something that has, like multiple different like, states, it those matching, hopefully, Python 310 will give you a nice error saying, hey, you missed a particular case. And this could really an if you're a general developer, or you just use Django or even Yeah, you just use it and you RM and the hour provides something like choices were like, yes, no, or, or dollar euro, like these kinds of choices in the field. This works pretty well. And so in your Django code, you could actually have my PI telling you, hey, you missed handling a particular case.

00:33:53 Crazy. That's awesome. We should really cool. Yeah, see, I'm on the live stream was sort of on to the same thoughts you were talking about with you there. Wonder if one could hack on the match mechanism to deliver this function on a runtime using all the by use using by somehow getting all the variants of the innum and checking the branches, the ASD or something? Yeah,

00:34:13 that's interesting, because I know that part of the structural pattern matching come like any object can implement the magic method, match. And maybe that is your gait like, that's your entry point into providing that kind of checking at the wrong time. Of course, with Python, anything that come that goes around runtime checking, there's like performance cost with that, so be careful.

00:34:40 Yeah, but yeah, having this built into my PI already would be good.

00:34:45 And your Juergen is talking about the licenses. I wonder whether you could rewrite the code to not use if statements at all, but be more polymorphic which I agree. That's a really interesting idea, with method overloading and stuff. Reminds me back a couple of weeks ago, Brian talked about function overloading with single dispatch and multiple dispatch. And yeah, you could have more or less make that happen there. So yeah, pretty neat. Although it still may miss a case. I'm not totally sure. At least in the enumeration, but that won't help you, right? Because the innum will still be the same type. It'll just just have more values. Yep. Awesome. Good one, Nick. Brian, what else we got?

00:35:23 Um, well, I've got a couple things. One of the things I wanted to note was that this is the second week in a row we've featured in our article by hockey and hockey, and the third and this year, so we should probably try to get him on the show or something. So yeah.

00:35:40 Sounds good.

00:35:41 He's doing some good writing. So thanks. Um, the other thing I wanted to mention is, is I've got Oh, yeah, by the way, my book is this is the Book Two. Yeah, Second Edition pi test is available for beta. So people can tell me everything that I already got. Somebody said they have got an issue. The minor issue with the already so thanks. But it's just been me and my editor so far, working through it. So having more people arise, before we go to go to shipping the physical book could be great. So of course, this is through pregnant pragmatic, but if you go to pytest, book calm, it'll take you there. So that was my extra.

00:36:24 Right on. Cool. I was well, yeah, I got some neat ones here. So how often do you maybe have like a blueprint floor plan? Maybe you're looking at a house and you're trying to decide whether you want to buy it? What would it be like to actually live there, maybe you're trying to figure out, well, I'm planning out this apartment, or I have this place, I want to remodel it, like, IKEA it all out or something along those lines, I ran across this thing that uses some interesting models called plan to scene to the ideas, it'll take what is literally a floor plan, like blueprint floor plan that shows like swinging doors in bits, and then you tell it what kind of room it is, it's like a bedroom or a bathroom or whatever. And it will generate a 3d world that has things like sinks, and toilets, and couches that are three dimensional and not just somehow projected in there. So there's all of these interesting things you can see there's like, if you pull up the side, there's all these like spinning worlds. And you can see that they've created these little environments, just from floor plans, which I think is pretty insane. Anyway, you can go ahead, Nick.

00:37:30 No, that's really cool. I think I wonder if like, because like Trimble we, we own like, SketchUp I wonder if they do this kind of stuff. They take four times, and then they make it 3d. That's really cool.

00:37:44 Yeah, it's, there's a whole bunch of comparisons of how it used to be done, how you can pick like different, you know, different flooring and walls and source codes available on GitHub. People can run with that. So that's pretty cool. It's called playing the scene. And then just a quick shout out to this T cast podcast, I happened to be a guest of recently, and we got to talk about Python and data science and how Python and data are sort of changing the world and stuff is really fun. So people can check that out. Yeah. And that's it for the things I got, Nick, anything else you want to throw out there?

00:38:14 Yeah, just a shameless plug, as I said earlier, on the live stream by co hosts the CLI phi, which is Cleveland's area, Python Meetup group. And so we have meetups every second Monday of the month. And one of the reasons why I would encourage anybody across the world or us or everywhere to still come and present this, because oftentimes, meetups are a great place to present talks that you are planning on giving an maybe like, continent continental AI conferences, or like other larger conferences, you know, smaller crowd, and, you know, we're, we show you guys a good time, right? So it's a great place to come give your talk, get feedback from that, and then you know, take on the improve on it. So that's one. And then the other. Shameless plug is that pi Ohio, is has its own conference coming up on July 31. registrations are open, how pretty cool t shirts. So yeah, register.

00:39:24 Is that live or have a streaming? Yes, that is about being streamed. About your meetups are those being streamed?

00:39:32 Those are virtual, we we love them, like in person. And that's really that's when like, academically messed things up because you have stuff like pizza over and those have a good time to come up Python. But no, the virtual setting has given a lot more people access. No Ray wants more people on so.

00:39:52 Yeah, that's fantastic. And pi Ohio is definitely one of those big regional conferences a lot of people pay attention to even if they're not in Ohio. Are you going to go back to in person only? Are you going to do like a hybrid stream and in person? Or is it going to be? What's your plans for when the world returns to normal?

00:40:10 That's if you'd ever think we're changed forever. But to answer your question, I think I korganizer. And I been thinking about, we don't run all the assets yet, like we see the benefits of the virtual, but you will also see the benefits of the live. Hey, there are things have changed so much. We don't even know whether the live person is still available, but not something we're thinking about. So yeah, cool. Well,

00:40:36 it's a challenge. I think all the meetups and other events are, especially these smaller, like monthly bi weekly sort of things. You know, it's one thing to say that there's gonna be a big conference, and we'll all go to it or not, but you're doing it every couple of weeks. And it's mostly local, but not 100%. Local. Yeah, it's a challenge. Yeah. Fantastic. All right. Brian, are you ready for a joke?

00:40:57 Definitely.

00:40:58 Okay, so I've got one and then Nick has one. So this one, the title of the joke is root beer float. Okay, so a programmer walks into a bar, he orders 1.000000119 root beers. The bartender says, I'm gonna have to charge you extra. That's a root beer float. on that case, make it a double. Bad, right? That's, that's bad. Yeah. And, Nick, you've got one as well. You want to do this one for us? Yeah. Do you want something like, you want to be a want to be the bearded person? He

00:41:32 already has something going on there. And you? Alright, so. So refactoring the code improve the loading time? Not really late, improve the security then? No. So it's for browser compatibility?

00:41:45 Yeah, no, not really. No.

00:41:47 So tell me why is it always the same old story with you guys wanting to refactor everything I need to know.

00:41:55 Because as those if we know, excuse me, we know we've left behind some messy code. We can't stop thinking about it. We wake up in the morning at lunchtime in the evening when we go home. And when we're trying to go to sleep. It haunts us.

00:42:09 You know it. I love it. And it's true to totally true. It's totally true. All right. I have one more joke for you guys. Oh, yeah. All right. How much does a chimney cost? No idea. Nothing. It's on the house. Very good. That's, I have a friend that is so so into that jokes. Which is weird because it's only 22. She's been practicing. Practicing. Yeah.

00:42:43 I don't think dads can be blamed for all bad. Yeah, I want to highlight Juergen says that they cost 2500 euros. It's expensive. Well, thanks a lot for joining us today. Just a lot of fun. And thanks, everybody in the stream for showing up and we'll talk to everybody.

00:43:07 Thanks, everyone. Bye

