00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 243, recorded July 21 2021. And I am Brian Aachen.

00:00:12 And I'm Michael Kennedy. And I'm Simon Wesson. Welcome, Simon,

00:00:14 thanks for agreeing to show up today. No problem at all. I've been looking forward to this. Um, if anybody doesn't know you are, can we do it like, quick? Who's Simon?

00:00:23 Sure. Um, my name is Simon Willison. I've been doing Python bits and pieces for about 20 years now. So I'm a co creator of the Django web framework from many, many years ago. I think Django is definitely celebrated its 15th birthday now. But more recently, I've been working on a set of open source tools. around the site. This project I have called data set, which is a web application for exploring a relational database, a sequel lite database. But it also has tools for publishing those databases online, building those databases out of lots of different sources of data. I'm trying to bootstrap an entire ecosystem of data and analytics tooling around sequel light, because it turns out, everyone in the world has sequel, I didn't know that, even though they don't necessarily know that they have it. And there's some really cool stuff to do with that.

00:01:08 Yeah, that's a really cool project.

00:01:09 Yeah, if you want to create your own personal search engine that would let you just go and see search, your Gmail, your Twitter, your Instagram, and your file system all at once. Yep, that's right,

00:01:20 as part of the tool, and yeah, there's a whole side of it, which is some which are called dog sheep for ridiculous reasons. But the dog sheep project is about personal analytics is about getting your personal tweets and messages and all of the personal data about yourself into one place. So you've got essentially a little mini data warehouse on your laptop that you can use to query aspects of your own life. And that's been a really fun way of driving features in the software, which can then be applied to like company databases and so forth as well.

00:01:49 Yeah, cool. Super cool. Well, if I didn't want to do SQL lite, I might want to use Mongo. But I think

00:01:55 you may want to. And so there's some big news around MongoDB MongoDB. Five is out, which you know, I'm all about MongoDB, which makes me super excited, probably won't switch right right away, because I don't actually need the features that are there. But I'm super excited to see things going strong. So some of the things that are relevant. And I think they're really relevant to Python people, especially the data science side. So basically, there's there's two important things one has to do with working with time series. And the other has to do with stability of the app that you don't want to keep changing so that you can upgrade your database, right. Like if the database API slightly changes, you don't want to have to deal with those incompatibilities until you're ready to take advantage of the benefits of making those changes. So one of the things that comes with is in the database that are native time series schemas and collection types. That's incredible. Yeah. So you can do really interesting things like a moving average as a query across like data and store data in a format that's meant to make that incredibly fast and low latency. But you can also do like, I would like the, the numerical derivative over time, as a moving average as a query, or the integral of this collection has that so you can do like math as part of your query, and get it to calculate those things in really interesting ways to have the time series has things like clustered indexes, and window functions and all sorts of interesting things. So that's one, it automatically optimizes your schema for high efficient storage, which is pretty cool. That's think independent of the time series, but not 100%. Sure. It has the other big thing is the version two API for future proof apps. So suppose you build against version, I guess, five is the one that has it, do you build against version five of MongoDB. And then eventually, some point like version seven comes along, it's like, oh, you can do this new way of querying, but it's gonna break some stuff. So if you want to use it, you got to fix your app, you can just say, I want the database to look like version five for ever. And no matter what version is in production, it'll it'll behave the right way, according to what you said, you wanted it to behave, right. So you can say I want version seven to be like five for me, but it can be version seven for someone else, that kind of thing. Yeah, the other thing, the way that you talk to it, the way that you interact with it is through just a terminal app, you fired up or a command prompt app, and you talk to it. And traditionally this thing has been gross. It's been like, it's fine, but it has zero syntax highlighting it has zero autocomplete those types of things. Right? Do they're introducing a new shell. So traditionally, you would have typed Mongo inter connected. Now you type Mongo sh, because the old one is still there for compatibility reasons, but that one now has syntax highlighting better error checking, pretty printing, autocomplete, things like that. So if you're going to do stuff on the shell, then you really should just run the new one.

00:04:49 That's pretty cool. I'm gonna go with mon Gosh, is the MA, mon. Gosh,

00:04:53 online. Gosh, what are you doing now running the show the new one. I know. That's pretty awesome. And then I'll They, they're talking about having serverless serverless instances, so like lambda lambda type functions, where you don't actually have to manage the database or things like that. So I didn't know a lot about it. You could also watch the keynote and actually the whole conference, but the keynote is probably most relevant here. Turns out that it's more of like a billion dollar company or whatever they're worth. It's incredibly amort. amateurish and, and like, more like a talent fair of like a high school or something like that. But whatever. You're still learning. I mean, it's like you'll you'll see, it's it's like super after check it out now. Yeah, it's like worth watching for the like, the blush worthy, like, Oh, you Oh, come on. Okay. Well, let's just move on now, please. But nonetheless, you do, they do. Demo some interesting things and whatnot. So that's probably enough on that. But if you're into MongoDB, MongoDB, five has a lot of cool things to talk about there.

00:05:54 You know, what else is cool? And coming up? python 311. We don't even have Python 310 yet. So Well, I do. The beta is available for 310. You can run it, but the alpha is around four 311, which is nice. Nice. And what I wanted to highlight here was a highlight was enhanced error locations in trace backs. I'm so excited about this. This is so cool. So um, I mean, pythons not been that bad. For trace backs. I've I've dealt with worst trace backs. But the it points out what line is going on. But sometimes there's like weird stuff like none not be referenceable or something and you don't know what's going on. But now, in 311, it will point to exactly what part of the line has the error with little little carrots underneath pointing exactly where it's at.

00:06:48 That is actually super cool. So like the example you got on the screen here on the announcement, you've got multiple objects being have accessing their fields, like point one dot x point two dot x, and the error is none type object has no attribute x, which is probably the most common error that you'll ever find. But what I like about it that you're pointing out here is like the second object is the one that is none. And it actually highlights No, no, not the first one, the second one because there's nothing about the error message that would tell you which of these two things was the problem? Yeah, that's awesome.

00:07:23 Yeah, and it's, um, it's deep into the so if you have a deep stack trace, it'll show you exactly where into it. And even like, there's another example where it shows like a deep, deep dictionary dereference, or some right, it points out exactly which index is the one that's messing up. So that's pretty amazing. Also, even math, arithmetic expressions have like a division by zero, you've got multiple divisions. So which one is the problem? And it'll show you exactly which one is,

00:07:56 the thing I love about this changes. This is one of those things, this is absurdly difficult, like this is like acres of computer science and a bunch of people working together on this, for I couldn't even imagine how long it took them to, to make something which is just a beautiful, little incremental improvement to our lives as Python developers. But then if you if you think the release notes actually talk about some of the internal changes, they had to make that to get this to work. This is like really deep stuff. And it's totally worth it to what you get out of it. But it's, I think it's easy to look at this thing. Okay, that's a reasonably sensible small change. And this was not a small change at all.

00:08:29 And I think it's going to dramatically increase the on ramping of new people into Python, because I'm being able to like figure out what's wrong with your code. That's, you know, basics. I mean, some of us old Hatters are used to digging into, like confusing trace backs, but some new people are not. So if we can make them less confusing, that'll be great,

00:08:51 right? When I work with new programmers, it's so common, you get it, I get a trace back, and they freeze, because this utter, utter meaningless junk is just showing up on their screen. And what are they supposed to do with that? And here, it feels like this is just such a huge improvement because at least it's pointing to the bit in the giant blob of tax that they should be paying attention to.

00:09:08 Yeah, lovely. Yeah. 310, though,

00:09:11 but we have to wait till three levels. From futures import, nice stack trace, or trace back. Yeah, very cool. All right. So Simon, you got the third one. Tell us all about it.

00:09:22 Okay, so fly.io are a hosting provider who I've been thought they launched about a year ago. I've been following along because they're doing some really interesting stuff around hosting Docker containers. No, my stuff is in Docker containers. So I'm always looking for things where you can throw a docking docking thing or the host online, they have secret sauce is that they do geographic hosting. So you can ask them to run your container in like Tokyo and San Francisco and London. And they will do that. And they will direct traffic to the closest version of that app. So it's this thing I worked at Eventbrite for many years. And one of the things I was always trying to figure out was, okay, could we run event bright, low, close to our users could we have like European database in Europe in a database in New York and give people a faster experience that way, incredibly difficult to do, right?

00:10:07 people do is they do see the end, so the static content, but then there is one server somewhere, that's really the

00:10:14 one. It's the database. It's the application code. And that's the database server especially. And so what flight delay are doing is making it so much easier to do this, that you could start a project and have it geographically distributed from day one, without having to think particularly hard about it. So I like that about them. And they wrote this, this, this article came out within last week, I think, and it talks about their plan for multi region databases. Now in that case, they're talking about postgrads. And this desire to have Postgres data to have like Postgres database distributed around the world. And so when you're doing that, splitting up, you're having rights to multiple places remains incredibly difficult. But a very common pattern is you say, okay, we're going to have the leads database is in either no New York and that all of the rights go to that. And then in the the reads get spread out to a replica database that's running in different places around the world. And that's still a really difficult thing to set up with the geographic load balancing. So what they propose is basically run your application all the way around the world, and set it up so that if anyone tries to write to the database, and they're not talking to the leads database server, the error gets caught. And the application server replies to fly CDN and say, says, Hey, we run this request against the leader database in New York. So the user doesn't see anything at all, the user attempts to do something, and it works. And what actually happened is they tried to do a write against Tokyo. Tokyo said, Oh, we can't handle rights fly invisibly, sort of internally redirected to New York, the write happened against New York, and the result came back. And so this takes geographic geographically distributing your database weeds, which used to be I mean, I was thinking it was going to be a team of engineers for six months to get this working. And it's just baked into their platform. It's this incredibly elegant piece of sort of systems engineering design they've done. And I was fascinated, you know, I've banged my head against this problem for so long. And they just solved it, you know, they just said, Hey, here's a way that'll work. we've shipped it, try it out. I say something of architecture, this really fascinated me.

00:12:16 This is fascinating. Yeah, I can see just, you know, we've got like the retry decorators and stuff for various Python functions, I could see almost a you know, like, retry the right decorator, they put on them. It catches here, and it just goes, nope, we're gonna send everywhere it goes. And then then return the result, right? Like, yeah, and decorators anywhere, you're gonna ever do a right and you're good to go.

00:12:40 Exactly. And in fact, they, they've even got an example code from Ruby on Rails, we don't even have to do that. They kept the database error that says, you know, you tried to do a write it in a read only transaction, and they turn that into an HTTP header that replays it against the lead, Legion. And that's it. It's like this. It's in. On the one hand, it's kind of an awful kludgy hack. But it's also genius like this is taking six months of engineering work and turning it into add these five lines of code. Now your application works all the way around the world. fascinates me.

00:13:10 Yeah. This is pretty interesting. Yeah,

00:13:13 hey, also, I've got this one other link in the show notes. There's a second article they put out a few days ago, which is just doing something. It's, it's more about using Redis as a cache in your geographical data centers. So you can have a local Redis. Like, because I mean, their argument is, people in London tend to be interested in other things that people in London are interested, ditto for Tokyo. So actually, distributing your cache by city normally gives you really good cache hit rates. But they also pointed out that I didn't know that Redis could do this Redis can be set up to allow writes to supposedly read only replicas. So you can have a local cache that you're writing to reading from, but still have that leader Redis in your main dented data center that can send writes out to all of those replicas. So that gives you cache invalidation from a central point, you can in your sort of lead Redis, you can say, Okay, everyone, delete the cache entry for whatever this thing is. And all of those replicas around the world will then delete that cache entry, even though normally they're acting independently. And yeah, it's, again, this is for if your systems architecture design nerd, that the stuff that they're doing is so interesting.

00:14:20 I think it's interesting. I'm not one of those, but maybe you are, and he didn't realize

00:14:26 he will be next year, you will be next year. Fantastic. Yeah, this is super cool, as well. And it seems really useful. You know, it's perfectly in line with like, let's take our app and put the logic in multiple places. Because that person is unlikely to move from Tokyo to Virginia, during a session. Right, once they start in one place, they're gonna stay in that place. And so the cash would would reasonably just have like, their local data on that one instance, right? Yeah. Yeah. Cool, but maybe your CDN are nice. To get your your CMS is like generated a page and everybody needs that always to be in sync, right? There's, there's like global data as well. Yeah. So very cool. I like this. Checkmate, II indeed.

00:15:09 Well, let's talk about unicorns.

00:15:11 I love unicorns. So unicorns, the magical creature. And Simon, I'm so glad that you're here because we can get your thoughts on this, even if you maybe haven't been like deep down in it. So not too long ago, we talked about HTML, which I'm still a big fan of HTML. It's a cool, like sprinkling of magic onto JavaScript, the stuff onto your page to make it more interactive. But if you're doing Django, he makes it very relevant. But there's also this thing called Django unicorn at Django dash unicorn calm, it's a magical full stack framework for Django. So the idea is that you can create these templates, these interactive templates without going and rewriting everything in like some front end framework, like react or something like that, you can skip the JavaScript build tools, because you know, you got a lot less of that. And you can skip a bunch of serializers. And just use Django for like, the API bit, though, you install unicorn, you create a component, and then at the top of your template, you put load percent load unicorn, and then you could just give it a one of these names. So for example, here's a little task, ask one is tell people about unicorn, I can add that, as too many will tell people about unicorn. And you can see like, this cool little thing is interacting. And it's not refreshing the page, right? It's like a front end framework type of thing. But the way that you write it is you just put some extra template pieces on there, like unicorn colon, prevent, submit, prevent, and you're going to do this add function instead. And if somebody hits the Escape key, we're going to change the value. And that's not JavaScript. Those are just HTML attributes. But they turn into JavaScript, right, which is very cool. So and then you just put your regular Django template business down and and off it goes. And it turns it into basically something that's way more front end framework friendly.

00:17:02 Simon, what do you think? So as far as I can tell, the the real magic here is that they're using, they're doing the trick where you render the HTML on the server, in this case, you were using your Django template, and then the the job, they send back JSON with a blob of HTML in which you then essentially write into an inner HTML to update the page. And I love this pattern. Like, this is sort of fun. I've always been a big fan of the progressive enhancement method of writing JavaScript, where you get the stuff to more or less work without any JavaScript at all. And then if there's JavaScript, then you get in PAGE PAGE updates, and all of that kind of thing. But there's also one of the problems I've seen with all sorts of lots of engineering shops that try and do that is that you end up writing your templates twice, you have the Django templates that know how to do something. And then you have front end templates using react or handlebars, or whatever that know how to do something. And you have to keep those in sync, which is an enormous waste of time for everyone involved. So what they're doing here then is they're handling that they're cleaning up that inconsistency for you, you write as you write a Django template, they can then when that they can use that template in Python code to generate just that fragment of HTML, send that back and have that displayed on the page. See, I think this is really interesting perch, I've not spent much time with Django unicorn itself. But it also reminds me a bit of the thing, it's called hot, hot, hot wire, the Ruby on Rails on the icy belt, this is very exciting. framework, again, against these kinds of principles, just shipping blobs of HTML, back and forth. I feel like it's something like the mad rush towards single page applications of the past 10 years, has mostly results in applications that slowed slower and take take take longer for people to build and

00:18:43 consistent and they make me so crazy. For example, I'll go to like a bank or something. And I'll say, All right, I'm gonna run my one password prefilled page, and you'll see it fill out the page, and then you try to submit it, it goes, please fill out this field. And there's clearly like an email address or something there. What do you got to do? Go put a space, delete the space? So the JavaScript event triggers? Because they're like, not really, really all that junk? And it's just like, yeah, you know, and it says,

00:19:13 what people actually want is they don't want a full page reload, like anyone who's getting into single page apps. And so really, they just don't want that flicker when the browser reloads everything. So using this trick where if JavaScript is available, you update a section of the page using stuff that came back from an Ajax API totally works. And that that that first like the model here, and also the hotline model from Wales, exactly, yeah.

00:19:34 So the HD Max, the hotwire and this, it's all about, let's not write new stuff. Let's just take the views and the templates are already doing their magic. And let's just you put the little pieces in there to make them dynamic, which I'm all about this. This is great.

00:19:48 What I've missed is why is this a Django thing? Is it? Is it because it uses the Django templates or is that it

00:19:55 looks like it. Yeah, it looks like that. The Magic here is that it's using Django templates. So it is a view. It provides its own views too, because it needs to provide views that have provided a JSON API where you can send it data from a form, it then renders that Django template in Python code and then sends you back the stuff. So there's two sides to this, right as the Python, Django view functions I've written, but they've also written a sort of eight kilobytes, I think of JavaScript that that hooks it up on the front end. Cool. Nice. Yeah. Yeah.

00:20:25 Very neat. So not very much code at all to get your Django to become more dynamic, which is great.

00:20:31 Yeah. So our, I don't think unicorns are blue.

00:20:36 I'm not really sure what color unicorns I feel like they can be any color like they might be rainbow. But But this that, actually, that's not a rainbow.

00:20:43 It's not a rainbow. unicorn blue. And I'm, I'm think I'm thinking I'm ready to have tomatoes thrown at me or something for bringing this up. But so blow is is an alternative to black. Anyway, so I love black, I think blacks awesome. But there are times where you can't use it. And in the, for specific reasons. And I'm thinking here, Macey, basically about the decision that black made to default to not a default, but enforce double quotes on strings, instead of single quotes. There are some code bases where there's already a standard to use single quotes. And then there's also code bases where there's so many strings that actually have mixed quotes. So you've got single quotes, and then double quotes inside. And,

00:21:40 you know, might end up mixed sometimes because if I want to put quote something in the actual string, I'll use single quotes on the outside. But if I'm going to say it's a good idea, I'll put double quotes on the outside. So I don't have to escape the single quote, you know, like, if, if you're going to have one of the quotes in the string, then just go with the other one is often something I'll end up doing.

00:22:00 Oh, actually, I blank does that for you, if you've got a string with a single quote, in a string with the double question, that's the one time the black will use single quotes, which is kind of neat. Okay,

00:22:08 okay, that's good. Yeah,

00:22:10 I do like that. But okay, so if this is this, the sticking point is really just the quotes, then maybe try blue. So blue is, is actually, I was worried it was gonna be a fork of black, it's not a fork, it's, um, it's sort of in includes black. And it like, overrides some of the functionality, specifically, just a few things. So the differences are the defaults to single code strings. Except for except for things with places where we love double quotes, like doc strings in triple quoted strings. For some reason, those look weird with single quotes. So I'm on board with that. It defaults, the line length to 79. And I don't really care, because I always override that to like, 120, or something like that. And I like black, that black allows that overriding. And then the other thing that I didn't even think about, which is kind of nice, is one of the things black does is takes the hash, like the of hash comments on the, on your right side of your code, if you've got like a block of them, like, like, maybe you're talking about an entire block of code. So you have a block of comments, black, like remove the whitespace in front of the hash, or is blue, we'll leave those alone. So you can have block comments on the side. That's really it. That's the only difference. And I I think having this around is a neat thing. interesting quote from the doc is that they actually don't want to keep keep this project alive for anyone that really like these just be options in black. Yeah.

00:23:43 But I don't think that's gonna happen. I think black is pretty hardcore guarantee. Like they're very into not adding configuration where they can all avoid it.

00:23:54 Yeah. in researching this, one of the things I somehow missed about black, maybe I haven't read the documentation in a long time, but a couple years ago, it added the ability to have format off and format on so one of the things for instance, occasionally not very often, occasionally, I've got a large chunk of data set up in a in like a list or, or a dictionary, something that I have called the I haven't aligned with comma alignment, like an old style CSV table. And black totally learn it. ADC programmer. Yeah, sure. But black totally tears that apart. But for that you can you can turn formatting off and that's, that's cool. That's a good feature. See, it does have a little bit of little bit to give. But

00:24:47 yeah, yeah, that's cool. Yeah, very good. One figured one

00:24:50 to get next. Oh, okay. Um, so this is there's a link in the show notes. This is an article that somebody wrote about using tests. Ranked OCR to build yourself a searchable index of your screenshots. And I got really excited about this because Tesseract is like test. It's been around since 1995. I think it's a huge started off at Hewlett Packard. And it's pretty much still the leading light of OCR in the open source space. But I've never managed to get to work. And I've always wanted OCR that I can just run. And thanks for this article. I can actually use Tesseract now. So I've got a couple of demos here. Can we see this? Yeah. So I grabbed a screenshot just of the random slide from our conversation earlier. And I can run that say, I think it's Tesseract screenshot dot png, I'll put it in a file called screenshot bash, you have to tell it the language that you're using, because that affects how it does these things. And it's what's like 70 of languages, I think. And I'm going to say I want that as a txt file, and you run it. And now if I can't screenshot dot txt, this is the launch today MongoDB MongoDB 5.0. This is the screenshot I took of our conversation earlier. a better example even would be the I took a screenshot of Python documentation just now. So I can run that same command except I'll do it against Python docs dot png, hyphen docs dot png, I'll call it P screenshot. There we go. Okay, and now if I can't, this, this is pretty decent OCR against a screenshot of a pile of documentation. The really fun thing, though, is that you can say you want as a PDF file. And if you do that, it will give you a PDF, which is visually identical to the screenshot but has selectable text on it. So you can copy and paste out of that PDF. So the chap whose article is linked in the in the notes. His trick is, he has a folder on his computer that he saved screenshots to. And he has a automated script that then turns those screenshots into these annotated PDFs, which means that spotlights on his Mac can now search them. So anything that he drops into that folder, a few seconds later becomes available to global search on his computer. I think that's a really neat track.

00:27:01 That's great

00:27:02 than the so yet, there's so much stuff I want to do with this. Yes, Alex alexandrou nettle Sue, I don't know if I'm pronouncing that correctly and wrote all of this up. But yeah, it's it's an you can install it with homebrew it's brew install Tesseract, there's actually a Python library called pi. I think it's called pi Tesseract, which I thought was doing complicated things with C modules. Actually, if you read the source, it's just shelling out to this command. So that apparently that's the state of the art in, in Python, and OCR is shell out to the test route command line tool, which I'm perfectly happy to do, you know,

00:27:38 I really like this, you know, it's, if you've got a bunch of image data, and you want to be able to do interesting things with it. Like, here's a really quick and easy way to do it. Right.

00:27:48 Right. Super simple. The, um, this article. Also, I didn't know that you could use the Mac, launch D, I think you can use, you can add a launch agent, which automatically runs a script when a file is saved in a certain folder. So in this case, he's got a launch script that runs the the Tesseract, OCR stuff. But this is great, right now I can automate any folder on my Mac to do basically anything using the system that's built into the operating system. But I didn't know how to use.

00:28:14 I didn't know you could do that, either. That's great. That's Yeah,

00:28:17 that's awesome. I feel like this is right up your alley, Simon, you know, with the data, set the dog sheep, and like, oh, here's this data we got from this, this automation. And yet, I just can't dig into it. And now you can.

00:28:29 I'm really excited about this, although I'm so Apple photos, the next version of Mac OS, Apple photos is going to do OCR and all of your photographs for you. So you can search for text in pictures that you've taken. And if it's anything like the current version of OSX, photos, all of that data is going to be stored in SQL lite databases on your computer. Like I've been having a huge amount of fun building things against my apple photos library, because they already run machine learning labeling against your photos. They know when you take a photo of a dog, and they tag it with Dog. And the word dog is in a sequel lite database on your computer. So once you've figured that out, you can run SQL queries against photos. You've taken a sachet, say, Show me every photo I've taken of a dog that was in San Francisco on like in the month of May, and you get results back, which is crazy. Interesting.

00:29:20 Yeah. That's pretty cool. Yeah, that's super cool. I love the stuff that you're doing with that.

00:29:25 Is it just local or is there they caching that in their own databases as well? Oh, well,

00:29:31 so they synchronize it all. So if you're using iCloud, your photos are synchronized up to their servers that you take photos on your phone, it shows up on your computer automatically. But all of its the actual local data storage is all SQL lite database files Apple a really big into SQL Lite. So yeah, they're just these files, littering your computer with your address book in there and all of your I messages and all of your photo metadata. It's just sat there waiting for you to dig in and play with it

00:29:56 knows what this is. Probably. Right.

00:29:59 Yeah. I am I've, I've got a script call, I'll add it to the show notes. I've got a script called dog sheep photos, which uploads your photos to your own s3 buckets so that you can actually link to them, embed them on web pages. And it extracts all of that sequel lite data into it into more usable format. So yeah, I've got a online database of all of my photographs that I update every now and then with the script. And it works. It's phenomenal what you can do with it.

00:30:26 Out in the live scene, Brandon, hey, Brandon says this is fantastic. definitely excited. And also taking a step back two years, Brian, David Coleman, hey, David says I'm using double quotes now in black, but my typing has not evolved yet. double quotes. So you just pass it through the single quotes a double quote compiler process called Black and then you got to always after That's nice.

00:30:49 I've saved some, like Black has given me back, I estimate 5% of my program, typing time used to be worrying about indentation and such like, and I got all of that back, like thanks to blank, I never even think about how I indent or style my code at all. I just say, I literally write horrible run on lines that go on for ages, and then run blank. And it formats it nicely. And I forgot about it. It's wonderful. It's fantastic.

00:31:14 That's good.

00:31:15 Yeah, great. I'm getting the extras first, Michael, you know, I do. Unless I have an extra extra extra. You're all about it, then I guess I still do. So we talked about strong typing last time, which lets you do cool stuff, like go and put a decorator on to a function and say, Well, this way, you know, if it has type annotations or type information, like Python itself just does if you put add match typing the decorator on there, it'll verify at runtime that you said it took an integer and you actually pass in an integer knotted list or whatever to that parameter, right. Felix, who maintains this project with jazz today, that actually does a whole lot more that you should check some other things out, I just wanted to highlight a couple things. He pointed out one, if we, you know, we're all familiar with the named tuple. And you say the type name and a quote, and then you say, the fields or the elements, attributes in a list, either space or comma separated, like spell manna, backed, and so on. So this one has a typed named tuple, where you can put the type information in very similar ways to what Python would have like colon, spherical, and list and so on. And then you get actual type runtime validation that your data going into your named tuple is actually the type of data you expect in your name. tuple. Oh, nice. Yeah, yeah. So there's that. And then also, I love this about our show, it's kind of blows my mind that this, this is how the world works. And I really appreciate this. Everyone who plays along, will say things like, Oh, I wish we could specify indexes in beanie. And then like the next episode, we're like, hey, look, Roman added a way to do indexes, and beanie. And I said, this is awesome that it applies to functions. But Why couldn't it apply to classes? It's basically the same thing. And so now, six days ago, we have a new feature. You can also apply strong typing to classes, as well, or something like that. So well done. Well, that.

00:33:14 Is it. Because you asked for it. Because I mean, I asked for single quotes and back and I get that, but Well, I mean,

00:33:22 also, it may depend on the size of the project. The more input they get, the less influence any individual statement they have on it, right. Anyway, feel like things. We're working on that and the extra information there. Yeah, anything. I actually one other thing? Yes, I have. Finally I've been working to make sure that we don't have to have one of these completely useless, dreadful box on technology. Our site uses cookies. Here's our cookie policy. Do you accept our cookie policy? Or do not accept our cookie policy? aka, would you like our website to work? Or would you like to go away? Like that's kind of what the button so often means, right? And so I thought, I removed all the analytics, I removed anything else that we might do in third party doing third party, we're good. And I went to Python bytes. And I'm like, wait, there's there's double click. There's Facebook. There's Google. There's like, What is all this stuff? And we started including the live stream YouTube embed. And it started bringing back I'm like, why would Google we put it in Facebook? That sucks. And there was also the discus conversation, stuff that people haven't really stopped using. They all just go and chat on the YouTube streams now, if they want to have a live comment type of thing. So I'm like, well, I'll just take that out that got rid of the Facebook one. And then but what do you do about that? So instead of embedding the YouTube player, I said, I'm gonna figure out a way to get the picture automatically from YouTube, the poster, and then when you hover over it, it just has a play icon. It says play on YouTube, and it opens up a new window. And I thought I was all clever by just putting the image there, but serving from Google. No, there's now like, the YouTube is Image servers putting tracking cookies on our site. I'm like, come on, why is this so hard? So now, on the server, we use requests, we download the image anytime it has to be shown on a page, put it in MongoDB. And then if you pull it, we serve it back out. So we can like strip the cookies. The tracking cookies out nice Now, now, when you look at the tracking content none detected on the site. But why why world? Does it have to be so hard? I just

00:35:26 amazing how Yeah, it used to be YouTube embeds were the absolute gold standard for embedding video on a web page like that, why would you do anything else? And now actually, I'm beginning to think you know what host the video the.mp dot MOV file or whatever, yourself and stick on an html5 video embed. And that's probably a better experience for your users as well. Because you know, when they click the video on their mobile phone, it'll play full screen and they won't have to hop through to the YouTube app and all of that kind of thing.

00:35:52 Yeah, absolutely. Yeah. So anyway, just quick shout out like this has taken several passes. But I think it's finally 100%. No tracking. I mean, we weren't put in there before, but like it was seeping in from just like what we might include on the page as content. Right. So anyway, there you have it, Brian. That was my weekend.

00:36:10 I was nice. Well, thanks. I appreciate you doing all that work for us. Yeah.

00:36:16 David Coles has the washed hands emoji. There we go. We're all

00:36:19 better. Um, well, I've got no extras. Simon, do you have anything extra you want to share?

00:36:24 I've got one. So textual is the, um, well, mcgugan, who's working on which has been building texture, which I know you've talked about on the podcast before, what I would encourage people to do is pay close attention, because I've never seen a piece of open source software develop this quickly. Like, every day, he's posting this video where he's like, oh, and here's the new feature where today, he posted a video of it doing full like tree view on a file system, which you could interact with with your mouse in the terminal. And when you clicked on a file, it would open it in a separate panel with like with, with syntax highlighting, it's it's absolutely astonishing. It's turning into one of the better ways of building a GUI application is running in text and the terminal.

00:37:07 We can almost have just a section of the show called what's what's well up to really good.

00:37:13 Absolutely. Yeah, he's he's reimplemented CSS Grid, the CSS Grid mechanism for terminal applications. It's brilliant. And yeah, I'm just having such a great time watching him do all of this stuff.

00:37:26 Live streaming it? I don't think so. But he posts like little five minute videos on Twitter every day,

00:37:32 that he's dying, but I feel inadequate watching him work this fast. But just saying it's such a delight.

00:37:39 It's like he was he was born to build this piece of software. And now he's building it and we will get to watch him do it. Yeah.

00:37:45 That's great. That's good. Yeah. Henry Shriner. Hey, out in the live stream says textual is amazing. Indeed. It's quite, quite something.

00:37:53 Yeah. And I know I remember when he was trying to name it, and textual didn't even come up on my radar is something that might be possible. But it's it's so obvious now. Like, graphical and textual. Yeah, makes sense. It's cool. Think about a joke. Maybe? Oh, man,

00:38:08 I got some jokes for us. Two jokes. The one I'm not really sure how to convey about I guess I'll do my best. I want you saying No, man, this is you. All right. So first one here is I could definitely do this one. This one is from john on Twitter, but pointed out to us by Nick Moore, who was previously on the show not too long ago. Thanks, Nick. And this one poses. I think also, this is perfect for when Simon is on the show, says What do you get when you select star from goblins? dragons? elves, comma unicorns? a query tale? fairy tale a query tale bad or

00:38:48 bad? Oh, wow. Well, I wanted to share one that people can actually share with their this isn't in the list, but one that people I just read recently, people might be able to share with their kids. In the Northwest, we've got Sasquatch, right? So yeah. What are they called Bigfoot in Europe? Big meter. Oh.

00:39:15 Quick Tip. If you're ever near Santa Cruz and California, there is a Bigfoot Museum in a log cabin in the woods outside of Santa Cruz called the Bigfoot discovery experience. And it is not a joke. It is very serious. And there was a man there who will take you through all of his evidence for big Bigfoot. And it takes about an hour. He's got maps and plaster casts of feet footprints and a man with fins on it. And it's fascinating. I could not recommend it more. Yeah.

00:39:42 I wonder if the COVID endemic has affected the Bigfoot population. Oh,

00:39:47 you should Well, I guess you can call him up and ask him while I was talking to him. He got a phone call to answer questions about Bigfoot. So he will. He will answer your calls. Yeah.

00:39:57 All right. Hey, Brian. Your joke gotta grow. All the way from Australia. Was it mine? I'm not sure it could have been either, honestly. Yeah, I think I'm gonna go with the Mito one.

00:40:10 They're both pretty bad. Okay,

00:40:12 I'll see what I can do this with this next one here. So if you're getting the 90s I guess it's probably the time there's pinky in the brain. And apparently, on one of the 10 places, I have to write your name. I typed it too quickly and wrote brain

00:40:31 and bright cannon caught it. And

00:40:34 so he did a take on pinky in the brain. And it starts out what do you want to do today? Brian?

00:40:41 Do everything with every Wednesday, Michael helped Python take over the world.

00:40:46 It's Michael in the brain. Yes. Michael in the brain. ones in the testing others into gooeys they're both in the making Python seem sane there, Michael. There Michael. And the brain brain. Yeah. Yeah. Fantastic. Thank you.

00:41:02 We need to have somebody that's got like musical talent to actually put this together as something.

00:41:07 Anyway, yes. Someone who is not me because it won't come out. Well.

00:41:11 So putting this with the lyrics in the show notes. I think we should leave them there so that we are accepting

00:41:16 submissions. Yes. And if they are, if they pass, we may actually play them on one of the next episodes.

00:41:23 Oh, love. It.

00:41:24 Could be the new theme song Brian. Donovan era.

00:41:28 I'm getting tired of the old theme song.

00:41:30 Yeah, exactly. Which is no theme song.

00:41:35 Alright, well, thanks. Thanks a lot for showing up Michael. And thanks, Simon. Thanks for having me. Yep,

00:41:41 you bet. Bye, everyone. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. At Python bytes as in BYT s. Get the full show notes over at Python by sarafem. If you have a news item we should cover just visit by them by sarafem and click Submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian rockin This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

