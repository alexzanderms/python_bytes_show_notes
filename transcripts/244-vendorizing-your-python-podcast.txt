00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 244. Recorded July 30 2021. I'm Michael Kennedy. And I'm Brian. Okay. And I'm Brandon brainer. Hey, Brandon, welcome to the podcast. Thanks for being here. Thank you for having me. It's really good to have you here. You're one of the first volunteers, I'll put it as when I said, Hey, we're looking for some folks to come by me on the show. And, you know, throw your name in the hat. And here you are happy to. Right. It's very exciting. Very, very exciting. Yeah, absolutely. So before we jump into the topics, just tell us a quick bit about yourself. Yeah, so but in software development for 10 years, half of it management after that as a individual contributor, about seven years of it with Python. You know, it's funny, when I first started programming, I lived in a Raspberry Pi. I thought Python is so confusing with not having brackets and all these spaces. And so I don't understand it. And no, I can't go back. It's so much easier. Yeah, yeah, I had a similar experience coming from C sharp and c++ and stuff with all the symbols. And I thought, in my mind, I thought those are necessary for programming. Like you have to have the semi colons, you have to have the curly braces and the extra parentheses, because how else was a parser and everything like that's how you express stuff in programming. And then when I got into Python, I felt a little bit weird with missing. But then when I went back, I felt even weirder. Like, why are all these symbols here? I just learned that they're not necessary. Why are they doing this? The last 10 years of my life, what is wrong with me? Exactly. It was a really interesting experience. Yeah. Speaking of interesting, Brian, all the stuff on PIP quite interesting. Yeah, um, so I, I don't know, wait, we're doing this on Friday. Because Because I was I was here on Wednesday, I was in Florida. And so is your jet setter. Basically, you just

00:01:49 travel traveled in, like two years? for business or weird? Yeah, it was.

00:01:54 No, it was like wearing a mask all the way there. I kind of got used to no masks here in Oregon. But then now, I guess they're changing a lot again, and we're bringing them back. But you know, on what's old is new again. But one of the things I tried to do is I tried to work on the plane. And in Python, of course. So the problem with Snakes on a Plane

00:02:13 is there's no internet. So I had this issue I had.

00:02:18 And I have already put it up on the screen the solution. But the so my issue was I had a bunch of I had a project I wanted to work on. It's got talk setup. And when you run talks, talks, creates for environment in virtual environments, and then fills those up with all your dependencies in your code using Pip pip goes out to pi pi to get that stuff. I mean, you can cache it. And that does help and you do that locally on your machine. But it still looks out at the Internet. And this won't work on a plane. So I reached out to to the twitterverse. And, and I thought I found a solution. But I'm not even gonna say the wrong solution. Paul Ganzel pointed me in the direction of environmental variables in Pip, you can just set find links to a local directory, and then set with PIP find links, and then PIP no index, so that the PIP doesn't even look out there. It looks at a local directory. So So what I did is I'm going to, I'm going to guess we'll look at I was always go back, I got a quick question before we go on. Okay. So it will look in that local directory for the packages, the wheels and whatnot. Yeah, how do you get them there in the first place? Okay, so I got some pre work that I did. So I'm like, Okay, how do I get those. And normally, when I, when I want to put something in a local directory or something, it'll just use a pip download, you can do that. But he that's a lot of work to try to figure out what he did. So what I did is I just before I got on the plane, I'm using the the airport, internet, I, which everybody can harass me later about how that's not secure, it's fine. But I ran talks, you do it at home, then if you want to run talks with an internet connection, and what it's going to do is you're going to have a whole bunch of your environments, within talks, you're gonna have all your all your Python seven, Python eight, whatever you got in there, or not 83837 310 whenever you want in the future, just go through all of them just do a search and grab all of the order, we got the site packages, directories, grab everything out of all of those and copy them to like a local wields directory or something, something something outside of your work environment, I just stuck it at the top level you'd like users awk and there's something as second up there, and then and then you can then that's everything because you know you ran it and then go ahead and set up these environment variables. I actually just stuck the environment variables in my in my my just in a little script to set them while I'm while I'm developing. Yeah, you know what I learned that was pretty interesting that the Activate script or a virtual environment, you can put environment variables in there. So you could have like a offline virtual

00:05:00 In an online virtual environment, and those could toggle different environment and just which when you activate, we'll just make this happen. Yeah, yeah. So this is one of those like, it's all virtual environments all the way down in the environment or the virtual, these environment variables have to be set in the environment that you're running it in. So they can be set in the virtual environment that you were using to run talks, even though talkshoe generate others. It just it works, right. I don't know how it works, but it works. Anyway, the super helped me out. And then when I went to, yeah, so then come grab all those, throw them in there and then use the find links and no index and it'll it'll just work great. The thing that the reason why I think I didn't find it at first is the the note within the PIP documentation just says everything that's a flag within PIP is also an environmental variable, it just so if you searched for it, you probably won't find it. It just has this comment that says all command line options can be set as environmental variables using all upper scores under uppercase, and then underscores instead of dashes. So I legislative, yeah, okay. Yeah. Brandon, what do you think? Yeah, at first, I was confused a little bit about why he wouldn't just pip install before we got on the plane. But I've never actually used talks to do any testing. So it sounds like that installs in a different directory. So when you do your, your Doc's runs, that needs to reinstall them, creates a new version, where you can tell it, you can run it ahead of time, you can tell it to not install those, but I was messing with my talk my environments, so I really wanted to make sure I could clean them out. So you can I think this is, I mean, yeah, there's probably other cool solutions. But this what I used is interesting, though, it creates all the virtual environments. So each each different, like 37339, through 10. They'll all be different virtual environments that it runs your tests. It's always one of those things that we depend so much on the internet to do our job that we don't have it. Like, what do I do? So that's, it's interesting. Yeah. And that's like, you know, 20 hours of work, I would have lost.

00:07:02 Anyway, yeah, this is this is a very cool, nice, nice tip, especially the environment variables just for Pip. Like, you can change the verbosity or the mirrors or all sorts of stuff, right? Yeah. All right. So this time, I have an extra extra, how many extra? Let's see I've eight extras extra extra six times extra here all about it. But I'll be kind of quick. But they're all kind of interesting. Like, I just want to give a quick shout out to V. Brown Bag.

00:07:27 did a talk over there on pedantic so a 45 minute presentation on pedantic and how you can do all sorts of cool stuff with that we've already talked about why pedantic is excellent. So very, very neat. Check that out. And also want to give a shout out to an episode that I did, I think is on talk Python that I think is going to be really useful for people. It's about building little automation tools. Like instead of trying to build big apps, like maybe a little app with rumps that runs up in your menu or a little app that you can do a bunch of stuff and it'll generate like a query for some other platform. That's not like sequel but you know, sort of think sequel like type of things, and so on. So I had a bunch of cool guests. I rescued Gregory Kim benwick kj Miller, and actually rivers Cuomo from Weezer, on the show. He's doing amazing stuff. So people should check that out. If that sounds interesting, and inspiring. That sounds so cool. I can't wait to watch this. Yeah, this is gonna be one of my favorite talk Python episodes in the near term. I'm pretty sure. Okay, enough of my stuff on the other six other things that we haven't done. Remember, we had Sherry spns on the show a while back? Yeah, it was that was really fun. She talked about a bunch of great things. But she also did a day in the code. I thought, like story book for kids. So her story book for kids, which I know you and I both got a copy right brain? Yeah. It's actually pretty cool. Yeah, like it. Yeah, it's cool. So think like a big large picture book that tells a story, but about programming for kids, rather than I don't know, like a day in the park or whatever. So that books actually out, I just want to Oh, that'll be a link in the show notes. If you've heard that episode, you want to check it out. You could actually get the book now. But we talked about GitHub, co pilot and some other things like that. I want to give a shout out to another bull that's kind of like this, but way more tamed down. And it plugs into all sorts of different IDs called tab nine, we talk about tab nine. I don't think I I don't think I have either. But it's actually really well developed. It's got a ton of different platforms. For example, if you go over here and check it out, it's like well, where you want VS code you want pi charm you want WebStorm? You want Adam, you want Emacs? You want Ruby? mind? You want a builder straight? Straight vim. Yeah. And so this is a tool that you plug into your editor for Python that's offensive to have JavaScript.

00:09:41 So you can come down here and it will help basically look at your code, look at the keyword arguments. And instead of just giving you autocomplete for the symbols, like functions and fields and stuff, it tries to kind of bring it together. It's not GitHub copilot in the sense that it's trying to pull other people's code and inject a bar. It's not like stuff.

00:10:00 Back overflow, copy and paste with a tab type of thing. It's he's looking at what's on your screen and trying to pull it together to like complete a little bit more. So if you have like a username equals quote, Brian, and then you call a function that takes a username, it'll suggest you pass in that variable value on what you think. Actually, I definitely want to try this. I think this having a smarter code complete. That sounds just like about the right level that I want to try first. So yeah, Brandon. Yeah, yeah, I actually had this and GitHub co pilot on at the same time. Oh, my gosh, what happened? Is that disaster.

00:10:34 But yeah, I like this. Because as much as I like VS code of, I'm a huge JetBrains fan, and the fact that you can't use it in your pie charm or anything else like that. It's very disappointing. So yeah, I agree with that. Yeah. Well, I think I want to get like five AI coding systems together, and they can just mob program by themselves.

00:10:53 Exactly. When I look at this stuff, one of the first things I think, okay, it's using AI it's taking, it's like I said, it's taking the stuff out of my code, and then applying the AI to that, does that mean my code is being passed to somewhere that I don't want my code to be at? So somewhere? Yeah, here you go. It says your code is yours. And yours alone. It runs locally, without sending any source code anywhere even work on a plain brain now, anyway, I ran across this. I was talking to the folks from there. And I thought this is pretty cool. I'll give a quick shout out to that. Because it's the AI coding assistance are all the rage right now. Is this paid thing or free thing? Yeah, it costs money. But there is a free version. So you get like what they call basic, compassionate suggestions for free. Yeah, exactly. Like every 10th is a bug. But the other nine are really good. I'm just joking about that. I don't know. But yeah, there's a free one. And then you can pay for more branded? Did you do the paid one? Do you know the difference? I usually use the free one. I assume that there's probably like I said, better models. And I think there's like a limit to the amount you can do with the free one. So it just stops working. They actually have to do the work yourself. Yeah. But to me, that doesn't look expensive. So no, no, it's reasonably price. Yeah. It's 12 bucks a month for the paid version. I always feel like people are like, Oh, well, I'm not going to pay, you know, $10 for this thing. It's like this is your job all day. How much do you actually make from this job? Like if this could, you know, save you an hour ish earlier. Anyway, that's a different discussion. Speaking of discussions, following up on one of our episodes with Simon Wilson, who talked about Apple photos, and sequel lite, and using dog sheep and data set to analyze it, Rhett Turnbull pointed out a project that he created that will says Mac OS photo pack, or the OS X photos Python package exposes all of your data to your Python apps in the next release will provide the OCR stuff out of Apple's vision framework. So people have been tracking that there's some really exciting stuff coming to the Apple photo, iOS, etc. Where if you take a picture of something didn't automatically do OCR, and you can actually select and copy the text out of say, a sign in a picture and paste that somewhere. So that'll be stored in the database. And apparently, this thing will give you access to that text on be cool. Okay, after the right car so that I can just have somebody else reading science for me. Let me sweet. Sunday, perhaps Alright, so read. Thank you for that. Okay, last three things really quickly, I released three packages to pi last week, do more related. They're around taking HTML and templates, either Jinja or chameleon, one package for each language and trying to reuse them in like really clean simple ways. So if you've got like some fragment, say, like the example I have on the site is a video app. And it's got like a thumbnail of a YouTube video, then the title, the author, and then the number of views. And if you want to show that all over the place, you can either copy that code and replicate it or with this inside your template, you just say render template or render partial and you point at some HTML fragment bit and then it'll apply your model to that sub thing allows you to basically create functions that return HTML inside of your templates. This is a Yeah, so it's super, super simple. So like for the videos, you have like literally this little render partial, quote, shared video square, and you pass the video over. Really, really nice. So there's a Jinja partials for flask people. And there's a chameleon partials that does exactly the same thing for a pyramid. And then last thing, adding the chameleon template language to fast API, so you can build proper web apps. I published that it's been around for a little while, but I finally published it to pi pi. So you just put a little decorator onto a fast API function and becomes a HTML endpoint rather than a API endpoint. Have you just have you been using chameleon longer? Is that where you're more comfortable with it? I know, I probably have been doing more chameleon than Jinja. But I do a lot. But the thing that I really, really like about chameleon, let's see if I can find it An example would probably be good enough. But what I really like about chameleon is that it is valid HTML as it is. Whereas with Jinja and the Django framework and a bunch of other frameworks Maiko, and

00:15:00 Do you go into other areas like Razer in ASP. NET? All of these aren't are nice, but they all have HTML, HTML blocks of code blocks of code, HTML block of code HTML, right? This is all driven through attributes, views, like views. So like here, if I want something that's a loop, I can just say talco and repeat as an attribute. Or if I want, yeah, things like that, right? Or you do conditioning, say talco. Unconditional, and you put it in there. So this is actually 100%. still valid HTML just attributes that don't make sense. So to me, it just feels cleaner. That's why I like it better. Okay, yeah. Do I kind of tore through all those that without giving you a lot of chance to talk about it? But anyway, that's, that's my extra time. Thanks. All right. Brandon, you up next? Yeah. So this is something I came across on Twitter, and I signed up to do it. So it's cables, 30 days of machine learning. Basically, what it is, I guess, if you don't know what kaggle is, it's a place for data scientists to find the public datasets. They have online Jupyter notebooks that allow you access to a free GPUs and things like that, to run your machine learning models on, you collaborate with other data scientists and things like that. And, you know, machine learning is one of those things I've always kind of wanted to get into. But I've always been a little scared, I'm not sure on percent of resources to go to. So I saw this 30 days machine learning. And what's nice is they give you a you know, an introduction into Python, the things you need to learn from learn from Python to know how to do machine learning. They show you how to you don't build models, you and there are Jupyter notebooks. And yeah, so you go through that you learn some basic and intermediate, intermediate machine learning concepts. You get some certificates. So if you want to pose like a new resume or something like that, you can say, Hey, I did get some learning with Cagle. And the cool. I haven't done any this, but I suspect that if you ranked pretty highly on kaggle. And then you put that on your LinkedIn profile. Yeah, trying to get a job that I mean, that speaks pretty well. Yeah, I would think so. And I think the cool thing is like, at the end of it, there's a competition that they have with their sec teams up to three. And it's like, only people that ran through the course. So you're not competing against people have been doing machine learning for years, and kind of give you a little bit of a taste into what you know, machine learning competitions are like so I think it'll be interesting. It'll be fun. Are you gonna do it? Yeah. Yeah, nice. What I think is valuable here is the constraints. Right? You know, you have here's your data that you're going to be working from here is the type of problem you're solving. And so often when you're in a beginner, whether it's machine learning, or web development, or whatever, it's really hard to know, what is the right sized problem to attack? Yeah, it's so easy to go, Well, that's too small. That's not interesting. Or I'll wait all the sudden, I tried to build Instagram and I got stuck, or whatever, you know, yeah. And it'll I think it's nice to know if they give you the data like, yeah, I think a lot of kinds of bigger, you know, the biggest part of machine learning data science is cleaning the data and making sure you have the right data and the right attributes to look at. Hopefully, they walk you through how to, you know, they should walk you through how to do that and kind of give you a taste of how to do that. So nobody good learning experience. I suspect this is free. Is that true? Yeah, that's true. It's free. Yeah. All you need is a cake lookout. Yeah. And it starts August 2, which like four days away. So don't hesitate, get in there, if you're going to be part of this sounds neat. And actually, there's there's this but even if somebody doesn't want to do this kaggle has a lot of learning opportunities for people that want to sort of learn and learn the tools. It's it's an interesting resource for learning how to do this. Yeah, absolutely. Cool. Well, that's a great pick. Brian, you're next. Right? All right. Yeah. Um, so I've been testing a lot

00:18:21 more testing. So I want one of the things I had a project that was, um, that was set up to use talks, but I also, early on when GitHub actions came about, I put it up on GitHub actions, too, but I was, I was trying to, you know, try and understand the workflow of more. At first, there were a lot of resources. And then I came across this recently, just this weekend, this week, last week, building and testing Python, it's part of the GitHub actions, guides. And it's, um, it's actually pretty great. And it goes through a whole bunch of stuff. I mean, it's around a set of docks that talks about, you know, Python, Ruby, Java, or whatever other things, but within the Python space, it really is a full setup of how to run this. yourself. I, the reason why I brought this up is I wanted to, hopefully people using talks I love talks, the one of the reasons why I like it is because you can, it's kind of like a CI system. But locally, you can sort of run through making sure your installs work, your builds work, and all your extra tools that you've got hooked up and having problems you just got your Python, whatever version 393 whatever installed, and you run your test runs on that. But you want to kind of exhaustively go, I want to test on all the versions, right? In theory theory support every year, or you might have an error in your pipe project Tamil file or your setup.pi. And you're not seeing that because you're not you're not completely you're not rebuilding it. Talks we'll do that. But so we'll see AI systems but it's kind of nice to have it set up both but in the directions here at us.

00:20:00 More, it starts with directions on how to run, you know, pi test and to install dependencies and build and lint in run pi test on your project. But if you already have TOC setup, this is sort of a duplicate effort. But if you, I think IANA jumped down to the talk section of this document, because it shows you just how to run talks directly. And it's a it's a smaller setup. And essentially what gam actually is doing is setting up a Python or Python environment. And then installing talks and running your talks environments. And so you're you're having that same code from your talks, any file running within hit m actions, it's likely because it's going to try to do the same thing locally as it will in ci. Yeah, though, the one change I want to mention to flag out and I've got, we'll have this in the show notes, as I've modified this example, because hopefully, I didn't, it didn't make sense to me at first, this the example this show is on push. So when you push to a branch, it'll run these actions. But you also want to set up a port on pull requests. So just add poll underscore request right next to push. And then so when people do pull requests to your project, you'll it'll run your talks also. And then also, if you want to try to run 310, and hopefully you are right now because because 310s, just around the corner, add 310 dash dev into the Python list. Oh, yes, Dev interesting that around the RC ha, yeah. Well, I don't I don't know if it's the RC or that I think you can do our C's also. But dev is I think, close enough and you muck with it all the time. So is that like the latest build three tenders? I think so I think it's just the latest 310 mil. And then at the bottom, there's like this thing that talks a dash pi. And that Dashie usually means Run, run, run the environment, run a specific one, but I didn't set up, I don't set up the one that just says pi i usually say pi 372 pi, three, eight, but I got some help. I'm also on Twitter to understand this. What that does is it just will pick the one that's valid, and I tried it out and it works. Um, if you do this, this code, it'll it'll run the correct one. So very nice. Very nice. Out in the live stream. We have Felix Hey, Felix says I love talks to using it for my strong typing package. And it's awesome. And welcome, Felix. Yeah, we covered your strong typing package a few weeks ago. That's really good. Yeah. Oh, and then Ollie says the machine machine language or sounds good. So thanks. Oh, yeah, absolutely. Yeah, absolutely. Yeah. All right. Well, Brian, you spoke about the stuff on the plane, and I've got an alternative solution for you. Okay, this is really interesting. This one comes from Patrick Park, this recommendation, and it's called Python dash bend, Arise, do vendoring a dependency in Python means instead of linking to the package you get from Pip, you just go I'm gonna find that code and just jam it into my project and just copy it over, right, which is a bit of a hassle because then you've got to like keep sinking it and stuff. But for small things like, you know, six unsink, you know, like things that are one file, or they're just pure Python, and they don't have many dependencies in what's it might just make sense. If there were an easy way to just make that like a subdirectory sub module of your package, then when somebody runs your code, they don't have to pip install anything, no virtual environments, nothing, right. And so with this Python vendor eyes, that's what you can do for pure Python packages. So the idea is, if you've got some code that has lightweight dependencies, I don't know if I do this with something like flask that depends on Vic's org. That depends on who knows what right click and so on. Like you don't, I wouldn't necessarily go too deep. But for things that are smallish, what you can do is you can set up a vendor's dot Tama file. And then in here, just list the packages and you give it a location. You say I wanted to go from my project into underscore vendor in this example, but that could be whatever. And then you just run vendor eyes, Python dash vendor eyes, in the working directory, where that that tamo file is. And what it'll do is it will actually copy the the package details over for that project. And then in your code, you just say from underscore vendor import package name, fix requests, whatever. Interesting. That's interesting, right? Yeah. Yeah. So then you've got a program or a package really, that has effectively zero dependencies, even though you're still using some of these third party libraries. Do you know if it'll re download if you run this again? Will it redownload them or? Yeah, I would, I don't know for sure. And I looked, I didn't see anything in the documentation one way or the other. It is honestly a little sparse on documentation. This is an interesting idea. And actually, it is often like this does happen whether people like it or not. And it's a completely legitimate according to a lot of the I mean, the the licensing right.

00:24:55 And for but for commercial projects, this is very common that I

00:25:00 Don't want to go out and pull things from PIP all the time, I want to just have things local so that they're, they're just built up locally, right? And it might not be for just to avoid the the pip install, it might be that you want extreme control over what's shipped and you don't want some thing that might happen to that package coming down through peope. And breaking your code. Even if you pin it, you know, you might want to just have more control over right or a decision that somebody takes the project in a completely different direction that you don't want to like, it's like this is a very hard fork sometimes. Yeah, I suspect we're rerunning Python dash bender eyes will redownload it but I don't know for sure. Brendon was a guinea pig versions in this last like the packages in the vendor as Tom Well, it doesn't say that you can do versions, but I would be guessing. I'm guessing here I'm thinking that you can probably pin them. But yeah, I'm just guessing that it passes whatever that string is over to Pip. And yeah, so yeah, that's what I was thinking as well. So probably you can try it out. Somebody can tell you wrong. Felix is right there with you knowing specifiers I don't know, like I said it doesn't say in the docs about it. But yeah, it's it's a small project. But I think it's an interesting idea. And it could be you know, if you just have these real simple dependencies, and you're like, we're gonna have to create environments and have all these complicated instructions, because of, you know, a few little files. Like, just, here's a nice way to do that. Obviously, you can do it yourself, right. But here's a more repeatable type of way. Yeah. Cool. All right, Brandon, take us out. What's your last. So there's a newer project out there called Super Bass. I feel really weird saying the name soup apiece.

00:26:37 You gotta get you got to say with an attitude. Sounds like a car audio product. I'm gonna go buy a super bass in my car, but, uh, basically,

00:26:46 when you.

00:26:51 But

00:26:52 they tout themselves as an open source Firebase alternative. So if you've ever looked at a lot of JavaScript, friends with JavaScript developers, a lot of people use Firebase because it provides authentication. I believe they're like more of a no SQL database. Yeah, real time updates. So if you subscribe to database changes, your Apple change based on if it you know if something changes. Um, so what suveys is doing is something kind of similar, but they are running basically a Postgres database for you. And then they've got different open source projects that are wrapping it. So they have the authentication part of which there has to have a wrapper around the go true library from netlify for handling authentication. So if you want to have authentication for your app, you know, you can easily do first name or email password, just email the sends, like an authentication link to the email, they have an extensive list of OAuth two providers. So if you want to add off to a, they handle all that for you. Yeah, so the the main idea of this database is kind of like, I want to have a front end JavaScript framework maybe hosted on the back of my Python, but then I just wanted to have like, database access over an API, just like the entire creds story, right? Yeah. And all of a sudden, you run into all these challenges of offline of authentication and, and stuff. And that's what this is mostly focused on, right? Yeah. So they, they have a package, they call it where it gets, if you get a user called Postgres, Oh, I can't say it is a wrapper around a Postgres that makes it basically gives you an API to your Postgres database that you don't have to write. And they implement that in a way that you can just like you said, make those HTTP calls, to write read to basically do your CRUD operations to your database. And what's nice is when you whenever you update your database, they automatically generate the API documentation for you. So you don't you're not writing any controllers, any services or anything to do that. It just provided by them. And like you said, is looks like a definitely a JavaScript thing. But they're actually just released a Python library for the shove up right now. Super base that dash pi. Yeah. So. So your snake has B. So

00:28:59 anyways, uh, so it's currently I believe in alpha. So I wouldn't suggest using it in like, you know, enterprise application, but it's definitely something to try, you know, play around with, if you want us to wait, or do authentication on access to a Postgres database. Um, it was it was, you know, if they give you a Postgres database, you don't actually have to access it through their terminal where their UI you can connect to it through, you know, whatever you use for your database. And yeah, going along the no internet development fills out a super base local, that you can run locally. So you don't need internet to do your development. So if you you know, lose power you want to get on a plane or something, you can still do your work. Yeah, this is, this is super cool. And I, one of the things that's interesting here is the subscribing to the real time changes, right? That's, that's pretty unique, especially over a remote API. So you know, if if you've got some front end, and you want everyone to see those changes, possibly guess you could even do this in like a cute or w x Python app, or even a terminal app. But you might even want to just say I've got a fast API app and fire up a web socket. There's all the client

00:30:00 Just get that the changes stream down. So the changes stream to you and then they kind of like multiplex on out to all the people watching. I've been. Yeah, I was thinking so like I was curious if you set up like an AWS lambda where someone changes in you need to send out a notification email or something to do hooked up to that, and it would just kick that off for you. Oh, yeah.

00:30:18 Yeah, that's a good find. I had not heard about Super Bass, but it does look super. Yeah, it looks really useful. Actually. Do you know what the story is? So what I'm looking at over here, they talk about Okay, so here's how you specify your API endpoint at app dot super base at i o is there it's in this open source thing, but there's probably some Database as a Service or something equivalent that I maybe sign up for I pay for Do you know what the story is around that? Um, I don't know. I mean, surely they are not running the database for the world for free. They gotta charge at least. And yeah, so that's the interesting thing. So there's a, their pricing model is a little confusing. I know that I feel like they've gotten some funding. Um, and I don't know how they they're going to plan to make money with the pricing that they have is like $25, a project a month. And that gives you unlimited API calls real time functionality. eight gigabytes, a database space. I mean, I don't know who they're using for their database provider. I can't imagine they have a data center somewhere where they're running it. But yeah, it's probably on top of some cloud somewhere. Yeah, they do have a zero over have a $0 per month version. Yeah. Yeah. There's a soldier project of going so yeah, very nice. That's an extra one. All right. Well, I think that's it for our six items. Brian, you got anything you want to throw extra you want to throw out there forever? Yeah, I mean, we had Simon Wilson on recently. And he just released a post about the bait data architecture pattern. And that's, if you know, what he's up to is isn't surprising. But it's a it's a nice write up. Big Data is bundling your read only copy of your data alongside the code for your application is part of the same deployment. And just an interesting in the write up and good to go have a read says most dynamic sites keep their code and data separate code runs on the server and it's stored in like Postgres, or Mongo with big data, the data is deployed as part of the application bundle. Interesting. Yeah, and then also on the live stream, Tim Pogue is doing real time research for us. Thank you, it looks like you are able to do a pin similar to as you would with PIP with with the Python vendor is so Yeah, awesome thing. Appreciate that. Brandon, anything else you want to throw out for people while we're here? Um, no, not really, I guess, maybe do a little bit of self promotion if I could. I'm currently going on a side project called released at att released.sh. Um, basically, what it is, it's a working on a tool to automate release notes for companies, I've noticed a lot of places, you know, they when that releases, they need to go out and like curate all these release notes. And have somebody mainly do this work that takes hours upon hours every release. So I'm gonna try to automate that and make it easier for people. That's, that looks like great project and nice web design. Well done. Thank you. Thank you. tailwind CSS, if you haven't tried it, give it a shot.

00:33:02 So many good things must, must learn. Alright, speaking of must learn, one must be cautious when learning it turns out because if we study the circle of AI life, there's this great cartoon here on dev humor.com. So there's the circle of AI life, and it's got these little pictures of how humanity progresses through. There's some do humans sitting here analyzing neural networks as human researches AI and then they're like celebrating their quantum computer humanity perfects AI, then AI perfects itself with lots of lightning, ai enslaves humanity. There's pyramids, a solar flare disables the AI. And then there's humans worshipping us and God humanity worships. Let's

00:33:42 start over.

00:33:45 There. There's our joke for the week. Good. Thanks. Yeah. Awesome. Yeah, it's a warning. It's humorous and ominous, all this. The Singularity is coming.

00:33:58 Anyway, thanks. Yeah. Thanks, Brandon for coming on the show. It's fun. Yes. Thanks for having me. Yeah, it was great to have you here. Brandon. Brian, good to chat with you all. And thank you, everyone. Bye, right. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYT. s get the full show notes over at Python by sarafem. If you have a news item we should cover just visit Python by sarafem and click Submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian rockin This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

