00:00:00 Hey there. Thanks for listening. Before we jump into this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes, FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python bytes.fm slash pi test. Enjoy the episode. Welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 246. Recorded August 11 2021. I'm Michael Kennedy.

00:00:38 And I'm Brian aka, not David Smith.

00:00:40 Hey, David Smith. Welcome. So good to have you here. It's good to be here. Yeah, you've been a suggester of topics. I believe you sent in some ideas and thoughts for us. And well, we're gonna get a good dose of that today for sure.

00:00:53 But honestly, if I'd known that you're going to open this up, I probably would have afforded some of those because it was a little bit of a scramble, like, Oh, yeah, we're gonna give them a Ferrari to give them that tip.

00:01:02 So yeah, had a little shared all your favorites. Well, your losses are gained because you've made it easier for us in the past. Thanks for sharing those things. And yeah, thanks for thanks for being here. It's gonna be great to have you definitely want to want to give us a quick elevator pitch on you people what people shouldn't want to they know about you.

00:01:19 Well, I'm a recent tech comfort, I'll say, over the last 10 years, I've been working in the manufacturing space, either in quality engineering, or manufacturing, engineering. And over the last couple years been using Python a lot more heavily. I used to do a lot of VBA and Excel, which it was, it was painful. And I got a suggestion from one of our equipment suppliers to say, Hey, you know, use Python, it's really, really nice. I kind of resisted doing a study, I want to learn something new, it seemed intimidating, because it's, you know, it's a programming language. I'm not a programmer, right. I, you know, finally caved when it came to trying to automate plotting, which is pretty painful in Excel. And, yeah, once I started on it and had something useful, working in a couple hours, I was hooked, then I started looking for more and more resources, found your show and, you know, got more and more into it from there started digging into the web. And it's just been a, I'd say, an upward spiral from there. And about, probably about two and a half weeks ago, I started in my first, I guess, official check role on a similar kind of domain as a poor automotive supplier. I'm doing a fantastic engineering work. So it's been really exciting to be able to use Python full time is part of my job. Because you know what, the bits and times I get to use Python before this always the parts I like the most. So I'm happy to be doing it, you know, on purpose.

00:02:35 I wish I could do it full time.

00:02:38 I remember my first full time software development job. I was like, I can't believe they're paying me to do this. I better figure this stuff out before they fire me. I can't believe I'm doing this. It was so great. Yeah, it's all good. I Well, congratulations, and happy to have you here. Right. I feel like we should document this

00:02:52 definitely should document it and test our docs too. So one of the things I'd like to tie that I just tried to edit There we go. Um, something that came up recently was a Vincent warmerdam. I think we've had him on the show for habits and a couple episodes ago. Yeah, yeah. So Vincent announced that he's got a library called make test docs. And I kind of love this. So the idea is, you it's a bunch of utilities that you can use to, to help test your documentation, it doesn't do it right out of the box, you have to, you have to create your own test files to do this. But the idea, like the the, the, the first example that he shows on his README is, is that you've got a markdown file, and it's got some, some pi tests, or Python blocks and code blocks in it. And you can make a test that goes through, reads the markdown grabs the Python code and runs it. And if there's any problems with it, if there's any exceptions, it fails the test. This is just brilliant. There's examples in here for, for doing it with doc strings, and even class doc strings. And then Vincent even did he does the comm code. And he did a little comic code video on how to use this, sir.

00:04:13 Yeah. And you're in the show notes for people ready to check out?

00:04:15 Yeah, yep. There's a link to the tutorial with the video. This suggestion, or the use case that he was talking about? The first was that maybe you're using make docs for documentation. Therefore, you've got a bunch of markdown, but my use case is going to be blogs. So yeah, I

00:04:34 think that's a huge use case, actually.

00:04:36 Yeah, I've got Python code in my in my blog source code. That's it's markdown files. I totally want this one on my to do list is to try this to make sure that the blog content is accurate. So

00:04:48 that is super cool. You know, one more thing that you might find interesting. I like think this is a more true software engineering type of solution, but another sort of way. wig as you work style of solution is pi charm. If you have a markdown file, and you have Python code in there will highlight the errors and actually show you if like symbols are missing and stuff. So if you had the markdown associated with the sample code, and then you like do stuff, a few little examples, it may actually show show you the airs live as well. That's cool. Yeah, that's not like a CI sort of keep it fixed. But that's a as you type kind of thing.

00:05:25 Yeah. And the other comment that he had is, if you, I normally don't put like asserting things are valid in in documentation. But the comment in the readme is that if you put asserts in there, it'll get checked also. So you've got like unit tests built into your documentation.

00:05:43 David, what do you think?

00:05:45 It's interesting, I'm just trying to figure out is a are you doing like a permanent parameterize test and looking at your inputs versus outputs for the code that's in the documentation? Or how do you actually know it's testing correctly? Yeah, right, valid Python or

00:06:00 little code snippet we've got in the reverse shown on the screen in the chat. But also, there's a link in the readme to the in the show notes to the readme. The parameterised is that it uses uses the like in this example, I'm saying, Go look in my Doc's folder, and for everything that it finds in there, that's a markdown file, that'll show up as a parameterised parameterization of the test. So if I've got this test will run once per file. So I've got three markdown files in there, it'll the test will run three times. This is the most comprehensive and yet extremely short test I've seen

00:06:40 occupies three lines, and it will basically work traverse a tree of markdown file hierarchy type thing.

00:06:48 I do tons of really tiny tests to it.

00:06:51 Yeah, nice. Nice. Nice. Alright, Alvaro, welcome to live stream. Happy to have you here. Let's see. Let's move on to the next one. I think speaking of users, given us our listeners, giving us ideas and helping us out here, I want to talk about something that I've been hanging on to for a little while, since March. But I finally decided it's time to talk about it. And that is creating queues out a process sort of asynchronous queue processing. So if I've got, say, a web app or an API, or even if I'm testing a bunch of hardware, and I want to kick off a bunch of jobs, eventually I don't want to, you know, unnecessarily block on all of them, I might want to push them down. So other things can work on them. You know, if I'm going to send a bunch of emails, if you've ever tried to send 1000 emails in order synchronously, it turns out that times out your web request, don't do that. So a better idea would be to like push them to a queue and have some sort of background process go, oh, there's new emails to send, let me jam those on down the line. So Scott hacker sent over this pointer to this library that's small, but cool little one called called ages called qR three, and qR three is a cue for Redis. And the three means Python three, because there used to be a QR that wasn't three, that's not Python three compatible. So here's like a reimagining of that for Python three, or just a compatibility that got moved over. So it's pretty cool, we check it out. The API implementation or the usage is quite simple, as you could imagine. So all you got to do is you got to, it's built upon Redis pie, you've got to have Redis installed that could be you know, wherever could even be Redis as a service on some of these cloud platforms. Docker run Oakley, you have Redis pie, and then you just go over and you create a queue. So you just say queue and you give it a name, and then some server Connect info like location, authentication, and whatnot. And then all you got to do is you push items to it, that could be just really simple things like a bunch of email addresses you're going to send, but it could also be really complicated. Like, for example, it could be saved pedantic models that store all the data that you need to process that request. So that's pretty cool. It has, the default way of getting data over to it is through C pickle. And c pickle is better than pickle, but still has issues and other restrictions. Some of the restrictions are you can't put certain types of objects like wouldn't make sense to serialize, a database connection that has an open socket, or a thread or some weird thing like that, right. But most of the sort of message, here's the data, you need to process the wood send over all of that stuff at work. And you can also create your own secure serializer on a per cue basis, which is kind of cool. So if you said I want to only work with pedantic models, you could put the sort of from dictionary to dictionary transformation with the validation and all that kind of stuff. I personally would not use the pickle. Because one of the things you can run into as if you upgrade your version of Python on one server but not the other, because you're in the process of going from one to the other and some thing has a different structure in memory and gets put over there. The other ones can't read it. Like there's always these these challenges of pure binary matches, I don't know, I would do that probably serialized as JSON or something and serialize it back. But anyway, it's pretty cool. What are you guys saying?

00:10:09 This looks nice. I actually haven't used queues in Python before. But it's on my to do list. Because I mean, designing complex systems, breaking it up into, into different processes with queues back and forth is a cool way to do it.

00:10:23 Yeah, I'm kind of inspired by this. I kind of want to do more stuff with queues as well, David? Oh, it

00:10:28 seems like a really clean, simple way to use queues, I'm with Brian, I haven't really used it in the Python context before, but like the examples he gave me are perfect. You know, emails are, they take a long time. So you don't want to be binding up your main application, you dump this off into a background task. And this looks really, really simple to use. So, you know, I seem like it'd be worth a try for sure.

00:10:49 Yeah, for sure. Other things where like, you need to generate a report that takes 30 seconds, you know, kick off the generation and then see if it's in the database, and just do some sort of like Ajax poll until it's there, or whatever. It has some more features. So it has a queue, which is first in first out, as you can imagine, it has a capped and call it a cap collection. And if you'd like it should be capital Q, because it's implemented behind the scenes as a kept collection. They'll say, a bounded queues and other aka design ideas if you're doing like analytics and logging, and you're trying to eventually process that and save it to the database. But you want to say, you know what, we really don't want this queue to get more than 100,000 items at a time because we should be writing to the database. And if something goes wrong, it can completely wreck the server. So you can create this kept queues where you're like, I'm gonna start throwing away old stuff. If we don't get to it in time. There's a dq, which to me sounds like getting stuff out of a queue. But oh, no, it's a double ended queue, a double ended queue. It should be, yeah. Anyway, it should be it, the idea is you can basically put stuff onto the front or the back, and you can pop stuff off the front in the back. So you could, for example, put low prior priority items on the back or something's really important, you could kick it up to the front, or right to the front of the queue. And then finally, you also do a stack. You can also do a priority queue, which is like sort is pretty close to what I described. But you can't jump ahead of the things that have a similar priority, right? Like if there's super urgent, and then low, you can put like a super urgent new thing at the front of the super urgent ones, but it would appear before all the others things like that. So this is all pretty neat. What I really like about this is obviously Python has queues built in, right, like that's just a datatype. List itself could basically be a queue, you can pop stuff off the front and Shazam, you have a queue. But this is a process, right? This means if you have to scale out for your worker processes in any sort of API, or you want it to be able to be durable across app restarts, things like that. And if you think oh, I'm not going to scale out across, I'm not having multiple servers, like almost every Python web app, and web API runs with multiple worker processes at a minimum. So yeah, you're scaling out. Anyway, I think this is pretty useful. And if you're all about Redis, this is cool. Redis. seems nice. I'm kind of inspired to do something like this with MongoDB. But I'm also busy, so probably probably not right away. And john Sheehan out there in the live stream is telling me that he learned a few years ago that dq is pronounced deck. So yeah, double ended. Yeah. Alright, so deck. Thanks. And then Teddy live stream says I'm not super familiar with queues. But how would it work? If you had your queue process that execute Python code, it would end up being a process sequentially because of the price of Python, Gil? Ah, so are you are you ending up with like a serial process because of this serial processing? I think it depends on just how you create the workers, right? So there's two ends that you build. One is the put stuff in the queue. And then you literally build the end that goes to the queue and says, Give me the next item. And that's stored in Redis, which obviously can support multiple clients. So if you just scaled out the the consumers of the the queue messages, the things running the jobs, then you would escape the Gil, right? Because you have multiple processes.

00:13:57 You can do using multiple things feeding the queue as well. Yes. Multiple web requests or something.

00:14:03 Yeah, absolutely. Absolutely. All right, David, what you got for us?

00:14:08 All right. Well, I either of you heavy pandas users.

00:14:12 I'm a pandas admirer. And I use it a little bit. But I always feel like when I come to Panama, I know there's way more I should be doing with this. And this is so cool, but not as much as I should be.

00:14:23 And I use pandas pretty, pretty heavily in my previous job to do a lot of analysis, especially on the one dimensional data sets. And I, you know, it always happened when I first started using pandas, I was doing a lot of really bad things like it arose that type of thing. And the more you kind of learn about it, the better you get at doing set of type operations, but even even, you know, in the last, you know, couple months, you think I'd have everything down, but the API is huge. And I always had these aha moments as I learned about something like transform. And you know, once I realized what you could do with transform, it's simplified so many things that I was doing and the first item I have is an article This is 25 Canada functions you didn't know existed. And I don't normally like these articles because they almost feel a little bit click Beatty, but this one actually had a handful of law moments for me. So I thought I would go ahead and share it. So, um, I haven't listed in the show notes kind of the aha moments for me, but I between it's a really nice, really nice, I think it would consider it a method on the data frame or a series and basically allows you to simplify logic. Instead of trying to say greater than or equal to blank and less than or equal to blank, you can just say between values very similar to the operation that you would do in a sequel transaction styler I had no idea existed, you can actually apply styles to the tables coming out of pandas, I do a lot to try to make my my notebooks really, really pretty so that I can convert them to HTML or another format and share them with the business. The business isn't typically like notebooks, but I am trying, because I can't stand the intermediate step of copy into a PowerPoint. But this, this would definitely help, you can do gradients, you can may have a bunch of different functions behind that options. It's another one I've kind of played with a little bit. But there's one in here that I wanted to try before the show I hadn't had a chance to you can change the graphing back end on pandas from matplotlib to something else. So at some point, I'm going to try changing it to plotly because that's my my preferred plotting library for most things, convert D types is really nice. If you know you have a categorial types, set of information, you can dramatically reduce how much memory is taken mask was a nice, a nice one, eight basically allows you to quickly convert somewhere down here quickly converts certain particular values or values that meet the criteria to another value. I was doing this oftentimes in multiple stages. And this would clean up that code significantly. Na smallest and any largest. Also could have been very helpful essentially, is similar to like a max or a man. But instead of just pulling a single, you can pull, in this case five, and I clip

00:17:03 at time. So like if I want to see the five largest revenue producing customers in my data frame, I could just quick do that. Yeah,

00:17:11 yep. And there, there are ways you can like with anything else, pandas, you could use a couple other methods to get that done too. But it's just so much cleaner to do diamonds and largest five, and then price is just very clean and fast, instead of having multiple lines to do a transformation, and then a transformation and then another change. So I wanted to suggest this article. Like I said, I've been doing pandas for a couple years, and I still have these aha moments. And it's article. Well, some of them are maybe quite odd moments for me, they may be on moments for someone else, because everybody probably knows 20% and maybe a slightly different 20% of the pandas API. Yeah,

00:17:47 this is really neat. I love these types of things that it's super easy to just scan through and decide whether or not it's it's really helpful to you. One for me, the pandas, one that had the biggest like, oh, my goodness, was web scraping, and like pulling HTML tables and turning those into data frames. So obviously, I can go, yeah, go with like requests and beautifulsoup and do something but then you still end up with just a table of HTML. But with pandas, you can say, read HTML, and then just give me table three as a data frame. Like it's ridiculous right?

00:18:20 Now, pandas has some really nice IO tools to around csvs parquet, most of the most common data data format types and even some of the, you know, lesser common ones. It's, I would say it's a really nice library overall. But yeah, like I said, there's always, always some aha moments. And it's nice to have a article that highlights several odd moments for me.

00:18:39 Yeah, super cool. So go ahead.

00:18:42 The one that jumps right out at me who's the number number one one? I didn't know that, that you can just write Excel with pandas. That's pretty cool.

00:18:52 And I think there's another wrapper around right Excel that kind of simplifies converting a data frame to excel I think, right Excel lets you do some more more intricate things with Excel. Yeah, pretty good.

00:19:03 Yeah, that's that's super cool. All right, before we move on really quick from the live stream. I liked when you ask if anyone uses pandas and likes it Dean likes them just said yes. all caps beautiful, but then also suggested pointed out this project that he built that is a like a give you life tips while you work with pandas and notebooks type thing called dove panda. So I literally I'm just checking this out now. But as you work with it, you can see here like it gives you like little tips like oh, by the way, did you know you can concatenate like this if you specified axis one, you get, you know, such and such and gives you a little little tips and tricks as you work with it so people can check that out? Yeah. On moments. Exactly. Exactly. Thanks, Dean. Brian. I do love some fast API. And I love rich and I'm looking forward to what you can do by trying to put these together.

00:19:52 Well, I was I've been what we've been watching rich, of course, and fast API a lot. And so this is This article is by Hayden Coleman, I think it's fast API and Rich tracebacks in development. So the idea is that one of the things that cool things that rich has is like these awesome trace backs and logging, they're just beautiful. And I mean, if you can say a trace back is beautiful, it's because of rich probably. There, they look pretty great. And the logging is pretty good. So the, I'm just gonna scroll down to some of these examples at the bottom. So the, it's kind of tiny, but the logging is nice and colorized and stuff. And then the the exceptions, one of the things with the tracebacks exceptions, is just a highlighted line number, it highlights the actual file name and kind of puts in lower, you know, more muted colors, that stuff you don't really need to care about right away. And just kind of a nice way to do it. But anyways, you syntax highlighting in your like keyword highlighting in your code.

00:20:56 Yeah. And that is the stack trace of the crash in the trace back.

00:21:01 And so we've we've seen some examples of how to how to use the rich trace backs from other programs, but haven't seen it actually written up by somebody else. And so this is nice. Using fast API is fast API is awesome for building web web API's. And but how do you do this? How do you get this, your application to do this, and so I'm not going to go scroll through all of this. But the, the gist of it is, is there's really only a few steps. So this post walks through all of it with all the code. And just for the most part, you create a database data class with the logger configuration. And then you need a function that will either install rich as a handler, or the production log configuration, I like that he puts this this switch in place. So the idea around this is, when you're debugging, you're gonna use this this nice, these nice trace backs. But when you're, when it's in production, it's not going to use that it's just going to do the the default logging. And then you have to call logging, basic config with the new settings. And then a little note that if you're using new via corn, you probably want to override the logger for that. And that's it really sets it up. And it's got all the code in place so that your fast API API application can have these lovely logs and trace backs during development.

00:22:22 Yeah, it's super neat. David, are you a fan of either of these frameworks,

00:22:26 I've had a chance to use rich too much. I have been watching textual pretty closely on Twitter, because it's just phenomenal. What he's been able to write like, you know,

00:22:34 how do you have a docking scrolling side thing in a terminal window, what's going on here.

00:22:39 And I do I love fast API, I built my my wife's website using flask. And I liked how best API was similar to flask and a lot of ways but you know, some of the syntax is was a little bit cleaner, although with the the newer version of classy kind of borrows some of the same syntax, and it's just got a lot of, really goodness, SPS built in the API documentation was a really, I think that's kind of clutch when you're learning a new framework to because you're not having to do like curl commands or anything like that. You can just bring up a web page and poke at it, you know, visually, which is, which is pretty nice. So now I really like fast. I just, you know, other than, you know, kind of building some small toy things haven't had a really compelling reason to use it yet. So

00:23:18 yeah, yeah, very cool. toys are compelling reasons. I think.

00:23:23 Definitely, definitely, maybe some Arduino thing could run a fast API server. Who knows? All right, so let me talk about some good news. Good news. Good news. We've had a couple of things we've covered about some visionary sponsors coming on to support Python, and the PSF zone, which is fantastic, right? I've certainly whinge a lot about people running, you know, multibillion dollar revenue companies, and doing nothing really to give back then maybe a PR or something. But we've got Microsoft, we've got Bloomberg, we've got Google as visionary sponsors, right. And one of the things that that made possible is the C Python developer in residence. I don't know if it's directly related to one of those, or if it's just sort of like that sort of brought it all together. But recently, the PSF said, they're going to have a developer in residence position. And well known community member friend of the show, Lucas Langa, has applied and got hired. He's now the developer in residence. This is a little bit old news for it's from last month, but I wanted to make sure we gave it a quick shout out because I think it's gonna be pretty interesting to know that there's a developer side person inside the PSF, making sure things are going so the PSF has an eight, nine or something like this. I haven't got recent updates, including this, but include this position, full time employees, right. So there's a bunch of people who work there, but to my knowledge, this is the first like developer person rather than marketing, legal, whatever, right? All that sort of business director administrative side.

00:24:56 Everybody that works with the PSF that's like, don't forget me Yeah, no, no, I

00:25:01 those are super important. But it's, it's interesting that there's not been a Python developer type of role within that group, is all I'm saying. So they put that out. Lucas Linga is now part of it. And there's some interesting takeaways here. So basically, let me do the do that just give a bit of a quote here for how Lucas decided to sort of position this and how he sees it. He said, I don't really want this to be like, Hey, I'm the, you know, the appointed CEO of Python. So he listened to what I have to say, right. So now I'm in this incredible hope, incredibly hopeful for Python, because of this and wanting to apply for it is until it says, I think it's a role that with role with transformational potential for the project. In short, I believe the mission of the developer in residence, the DIR, is to accelerate the developer experience of everybody else. And that not includes just the core team, but most importantly, the drive by contributions, contributors, submitting pull requests and creating issues on the tracker. So he's hoping that with this role, he can do things like make sure that there's a steady review of the stream of prs and issues so they don't get stale. And there's not a backlog, triage the issues, be present in the official communication channels to unblock people if they get stuck trying to contribute, keeping ci and test suites in a usable state and making them run quick, and keeping tabs on where the work is most needed in the projects that are most important. So he's sort of the it sounds to me almost like the technical person in the room to help the community keep moving and just making sure Oh, everyone's having a problem. Many people have no problem trying to do a PR because they can't get C Python to build. Let's make that incredibly simple for them and things like that.

00:26:46 Yeah. I like his attitude of where he's going with this. So

00:26:50 yep, yep. If I didn't point out, Lucas is also the creator of black black format, which I know, we've talked about 100,000 variations here. So that's great. David, how do you feel about this,

00:27:02 I think it's great. Any any full time person that can have working for the PSF are on Python directly is going to help increase stability. And I like his approach to where he's going to try to increase throughput by maximizing everybody else's efficiency. I think that's a, it'd be easy to say, like, Oh, I'm gonna work on these features are a mess. But he's most concerned about making development for Python is ergonomics possible, which I think ultimately will create more throughput? And you know, a better, better Python in the long run.

00:27:30 Yeah, and absolutely. Props to the PSF. Because it's easy to hire somebody and say, here's what I want you to produce. For us. It's harder to hire somebody and say, I want you to be an enabler of other people. Because it's hard to measure that right. Hmm.

00:27:44 One of the interesting things that I think that he's doing is, is I'm not sure if he's gonna keep this up, but it looks like he has so far is he puts out weekly report posts of what he's been doing. So this, I can't imagine having that much public scrutiny scrutiny over what my work week looks like. But I mean, Brian, probably

00:28:02 just so much time working on ci Come on.

00:28:06 So it's pretty, pretty, pretty impressive. And it's cool that he's doing that, to the entire Python world is watching no pressure or anything. So yeah, he

00:28:17 did say he was a little nervous about this, because this is the first year of this position. And so the success or failure, and he has will influence like whether it continues and you know, what happens sort of in the future. So let me get some feedback from the audience here. So Sam morlais. Hate says, good for Lucas. He's great. I watched a bunch of videos he did on YouTube about making music with async. io. Haven't seen those have to check them out. And then out in the live stream says CEO of Python reminds me of a known joke in my country where this famous newscaster was shouting, give me the person in charge of the internet. Get me the person in charge of the internet. That's great. Dean, you know a country that is that's awesome. All right, Brian, you want the next one? What's your next? No, you already did it. Right. Yeah, but David's Next, I gotta keep track what's happening here. David, your next.

00:29:11 Yep. So my next item is a library or framework. I'm not sure which one it falls under called Dexter. It is a data orchestrator for machine learning analytics. And ETL is one of the first attempts I tried for any kind of data pipeline. And it's based in Python. So you programming CLI build up your pipeline using Python and I be, you know, different decorators, depending on what kind of if you're building a solid, or, you know, depending on what you're building in the pipeline, or if you're doing configuration, use different decorators. And it took a little bit to kind of wrap my head around it. I think it had more to do with the just kind of understanding how pipelines are typically constructed in industry, but once I got my head wrapped around it, it was really simple to use. I felt like I can produce pretty quickly, one really nice thing that they do is they, you know, allow you to essentially work on your pipeline mostly then deploy to production to like a Kubernetes. Or you can deploy to airflow or dask, or, you know, whatever underlying engine, you want to run your pipeline, and the, you know, there's very little transition there, you know, you're not developing something local, and having to completely change it for, you know, like a cluster, you know, larger scale, so, and another really nice feature it has is a UI called Daggett. So you could do everything via the command line if you want to. But it does come with a really nice UI that allows you to see an overview of your pipeline, it allows you to test it using the playground, you can update your configuration in the playground, you can look at previous runs to see if they passed or failed, it gives detailed logging and error messaging. So it's, it's good, you know, this, this by itself is pretty, pretty nice on top of an already already very nice tool. So, um, I can give a quick demo, too. So this is the I think it's the first part of this work tutorial, they have you where you have multiple solids. So these represent different different pieces of processing. And then like I said, you can use a playground, it'll check all of your configuration, everything to make sure it's correct before it lets you run anything. So if you have something misconfigured it's not going to blow up halfway through a, you know, a 30 minute job. And then when you

00:31:30 like that, Oh, no.

00:31:33 Now, so I'll probably I'll probably forego the the real time demonstration, I think my terminal probably died is what that was, but uh, yeah, it will actually show a run in sequence and show the different pieces that they're completing and feeding into the other piece too. So it's not so not so much for this, because it's a very small, quick pipeline. But if you have like longer SQL queries, or something like that, it'll actually kind of show in real time, you know, how it's processing. So you can kind of get a visual intuition to what's going on, on top of everything else, too. So, yeah, you're some of the resources around this too. If you want someone that explains it a little bit better than I do. The data engineering podcast had an episode. And software engineering daily also did an episode about the extra. So, you know, that's kind of where I first learned about it. And there's a lot of really good information in those podcasts.

00:32:21 Yeah, these data pipeline frameworks are super interesting. I've certainly realized just how valuable they can be. Dean asks, David, how is this compared to airflow? Do you have any idea? Have you tried, have you looked at either

00:32:34 this was I haven't used airflow. This is the first, my first stab at any kind of data pipeline. And in my current job, we're not using airflow or DAX are using one of the cloud based who also it's, I think airflow is more Draggy, droppy, more visual, but I could be wrong about that one. One thing I really liked about Dexter is, at least compared to my what I'm currently using is that you could programmatically create these interfaces. And technically the tool I'm using now has a an API that you can throw JSON against to create your, your different resources and everything but it's nice having Python code because that works a little bit better with my brain than a lot of the Draggy. droppy. stuff. Yeah.

00:33:12 I did have the airflow folks on the show on talk Python another show a little while ago, it's not out yet. But last week, maybe. And they pointed out that it's mostly it's like pretty much all Python here as well. So you, you program it in Python over on airflow. And then you have similar visual tools to actually see what's happening. But you can't interact with it through those things. You can just like, kind of watch it and debug it and stuff from my understanding. So I would put them in a pretty similar category. I would say one thing that's pretty interesting is there's that's not what I would pull I've actually wanted airflow GitHub is what I wanted to sort of point out, I was really surprised to learn that airflow has 20,000 stars on GitHub, which kind of blew my mind I thought of is like a sort of framework that people might use. Apparently, it's popular, I'm not really sure about Daxter, I guess I could look as well,

00:34:03 I think it's relatively new. So I'd be surprised if it were quite as popular as airflow. But one nice thing that DAGs you can do. If you're running if you're running or if you have airflow pipelines that you're using, you can use that server to run the extra two, we can basically pilot to something that's compatible with airflow if you need to do that. So there's a couple of different I think translation, ways you can translate it to so it's seems like a pretty interesting too. And like I said, I had developed a small pipeline in my previous job is kind of my first stab at pipelines to to eliminate an Excel sheet that was doing a bunch of horrible, awful SQL queries. And just

00:34:42 imagine that people are trying to do this with Excel and it was probably wrong at all. It was necessarily incorrect, but it was wrong to do it.

00:34:48 Well, it was well it was it was an interesting Excel just very interesting to reverse engineering. It's a lot of go to statements. It's ubiquitous, but it's definitely as far as You know, programming production systems not a good tool. So,

00:35:03 yeah, yeah, very cool. All right, so I got some more real time updates here. Teddy says, I know one of the big differences with airflow is that you can use the output of a task as the input of the next task, from what I understand Daxter is kind of a second generation data orchestration, unsure which which generation airflow would be. But here we go. And then airflow mostly assumes you store and load data in each task, even though airflow has something called x comm, which allows you to pass the output as input to the next. Okay, interesting. Yeah, thanks for all that background info there. I haven't used either, but I definitely, definitely think they're both in need. And I feel there's a lot of places that are just like, well, how else we're going to do it, of course, we're gonna use that spreadsheet, right. And if they had tools like this, it would be very empowering. One of the things I find very interesting about these frameworks is usually what you end up building is like the little piece like load the CSV into the database, or run the report that gets me the revenue for the day, or what you end up building are very, very small pieces. And you don't have to worry about the reusability, that reproducibility the durability, you just go, I'm going to build an incredibly small bit of Python. And we'll just click it in as part of this workflow, which really seems to empower people almost like the microservices story. But for data processing, without all the hard deployment side of things,

00:36:18 I hope that they if they don't already have it, I hope that they put a tool connected with texture called dagnabbit. Because it needs to be there, I think, maybe some sort of capture tool or something like now it would be good.

00:36:31 Yeah, I love the UI BIT bit of it as well. Alright, quick bit of follow up, I guess, Brian, you want to start and you got any extras today?

00:36:39 I've got a just a vanity extra. So one of the things that we noticed, will mentioned about textual, we talked about textual briefly, this stars on textual is just going through the roof. I love the graph.

00:36:58 What like, is this the the XKCD format of matplotlib or something? What is this?

00:37:03 Um, it's a it's, I have no idea. But

00:37:07 anyway, the other pictures this Yeah, the stars are insane. It's like a

00:37:12 graph. One of my one of my own projects has a similar trajectory. So I wanted to just highlight that it's looking up to, of course, I only have 16 stars. Will has like 3000 little different but still look stunning. The same day.

00:37:30 Yeah. Most of my reposts you just got to extrapolate Allah. But no, that's that's really cool. Awesome. David juice, if you want to throw up, sorry, Brian,

00:37:41 I had one one extra, I didn't load it on my screen over here. Let me see if I can pop it over. We're real quick. But I and this isn't Python, but I know sequence.

00:37:55 nostalgic time on the internet where you open up a DOS prompt and type when to start windows. What is this,

00:38:00 this, this is modern SQL, it's a really fantastic slideshow that goes through a lot of updates. So if you're still doing SQL the old fashioned way, it shows you how you can replace that with, you know, better, cleaner, more concise versions. And there's so many things in here that I was doing a lot of like just horrible hacky tricks to get to work that you could take care of in one line for SQL and that, you know, even with some of the newer things I've learned, like there's just so many, so many great, great, you know, I don't know if I'm tools or methods or what but you know, I found in a sequel tend to work together a lot, especially in the data space. So if you're kind of like me, where you have some some, I guess, self taught SQL experience, something like this can be very helpful to kind of learn some of the, I guess, better practices for for different things that you might want to try to do with SQL.

00:38:50 Now this is great, because I learned SQL like in the 90s. So it's changed a lot since then.

00:38:55 And I was just thinking the same thing, Brian, like, it's been at least 10 years since I've tried to refresh my SQL skill. So there's probably a lot of stuff that's Oh, you shouldn't do this. Like why you do this. If you use this other keyword. It's more efficient, safer, faster. Come on, huh? Yeah. That's like,

00:39:12 Joe Joe. So the people learning sequel now. Yeah. How about you, Mike couldn't get anything extra.

00:39:18 I got some follow up. Some follow up from last time. This comes to us from john Hagen. And I think I probably is the one who said this. I said, hell, there's really cool time. But I would like about being able to use lowercase d dict and lowercase l list as type ns rather than from typing import capital L S or capital D dict. Right. So that's coming in 310 fantastic. He's like, Oh, you know, that's it three, five or three, nine, so it's kind of already out. Oh, right. Okay. But he did point out some things that are coming that are neat. So for example, were previously we had to say if I want a potentially optional, it could be none or it could be a list in the list. If it is a list of strings you say optional bracket. List brackets stir. And those are all capital because they have this parallel type implementation over in typing right? In Python three, nine, I can now say, optional of lowercase l list a bracket, stir. And you might think, who cares if it's lowercase or uppercase? l? Well, the difference is you don't have to do an import and explain to people who don't know that code like, Oh, you've got to go import this other type things to say the type Yes, I know list is right there. But you can't use list, you got to do something else. Right. So that's the feature that I was excited about that I said was in 310 10, three, nine, so Hooray. But he also pointed out that the union operators were simplified it used to be you would have a similar syntax for Union as optional, you would say union of bracket, one thing, comma, bracket The other thing, but now you can say, just type one, pipe, vertical bar, type two. And this actually allows us to model optional without importing optional. So instead of optional of List of string, we can just have list of string pipe none.

00:40:57 Yeah, this is cool. And I'm glad somebody pointed out because the the 310 announcements don't say anything about optional. But in effect they do. You don't have to use this anymore. But are you going to start using this thing? Well, yeah, and the optional thing, because I started to and then I realized that if I start using that, then my code is 310. Only?

00:41:19 Yes, exactly. which depends on the scent the the scenarios, right? So for, say talk, Python training the code all behind that I control the server?

00:41:29 Yeah, nobody's looking at

00:41:30 the it's easy for me to make the brand new thing. If I were to say generate, if I were going to build an example app for a course, then I would be hesitant to use this right away. I might wait a year or two, because I don't want to have to have people have a bad experience like, Well, I have three, nine, that's pretty new. I should be worried like, nope, that doesn't work. Because I didn't want to say that were optional, right? Yeah. And if it was an open source project, I guess it would depend on how if I wanted to support older versions, probably even longer there. Wait, I know, what do you think

00:41:58 I got a notice thinking library specifically, you probably want to almost stick with the three, five to three, at least for a while to kind of flesh out people that are using some of the older versions of Python is Yeah, I think I think three nine it I'm using three, nine on everything now. But I think for a lot of people that's still pretty aggressive to have a three nine or higher requirement for a library.

00:42:21 Yeah, I agree. A couple of bits of real time feedback out there. Sam and Dean both say there are a few Dunder future imports that you can do now that will enable some of this stuff already. So like Dunder from Dunder future import pipe?

00:42:35 I don't know if that's true. Or if it's a joke of Well,

00:42:40 I do know that the Dunder future stuff does support the newer type information. I don't know about for pipe. Okay. Yeah. Yeah. Okay. We can we can do some after coding on this coding after the recording, and we'll all know. Oh, Dean says he's kidding. Yeah. So, but there, you really can. Thank you. You really can do some of these other type of information with the import under futures. Okay. I'm ready for a joke. Yeah. All right. Right. So you're gonna have to help me along here. Okay, so there's two developers staring very wordy the screen, they have once section then a dead, a big, long, quiet section, and then two more. So you'd be the very first person and and I'll be the second person here.

00:43:27 Okay. Okay. Oh, that works. Do not hope.

00:43:30 pray. Pray it works. Yeah. Have you ever been there? And just with a situation where you're just like, Ah, you must, it must work. This doesn't work. We're done. Yeah.

00:43:41 Yeah, not so much in this this side of things. But when I was a manufacturing engineer, there was so many times we'd be troubleshooting a machine on a Saturday for eight hours straight and you think you may everybody's just holding your breath crossing your fingers work? We're gonna go home someday. So

00:43:58 yeah, I mean, I remember how I got brain.

00:44:00 No, I definitely feel this when I'm using it when I'm completely working on c++ code, because you have to, you know, wait for it to compile and, and then test, load it and then test it, stuff like that. But even with Python stuff, I still feel this when I'm working on ci tools. Because the continuous integration, you have to you know, you're not sure if you got it, right, the syntax, right, the ammo, right, or whatever, until you push it and see what happens. Yeah,

00:44:24 yeah, see is a good point. You have so little visibility in there. And if it's not working, there's one better real time follow up a mine here. So if you come over here, and you look at the the pep 585 it does, say the implementation of some of these new features under typing. This is the one that's coming out that came out in three nights, as you can say, from future import annotations, and then start using lowercase L and things. Oh, sweet, lowercase D. Who knows? I know Dean said he was joking, but maybe you really can't get the pipe to come out that way. But, but at least you can do like these, these sort of three nine level changes using Back to three, seven, it looks like okay. All right, cool. Cool. Well,

00:45:04 that was a lot of fun. Yeah, it was I had another one, but I'm gonna save it. So good. Alright, well,

00:45:09 I'm looking forward to hear about it next week. David, thank you for joining us. Thank you for having me. Yeah. Thanks for all the tips and stuff you've had throughout the years. And yeah, it's really good to be have you here and congratulations on your first dev job. That's fantastic. That is fantastic. And

00:45:25 thanks for thanks, Dean for correcting us in real time. That's awesome. It's good. Absolutely. Yeah.

00:45:32 Thank you, everyone. And oh, I'll Sam does sadly show us the import pipe from the future doesn't work. But yeah. Thanks, everyone. Do it. Hi. Thank you. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYT. s get the full show notes over at Python by sarafem. If you have a news item we should cover just visit by them by sarafem and click Submit in the nav bar, we're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian rockin This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

