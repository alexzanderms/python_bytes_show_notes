00:00:00 Hey there. Thanks for listening. Before we jump into this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python bytes.fm slash pi test. Enjoy the episode. Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 248. Recorded September 1 2021. gasp is summer over. I'm Michael Kennedy. I'm Brian I can I'm Paul Everett. Yay, Paul over here. Yay. Welcome, Paul. joy to be here. Longtime listener first time caller. Yeah, I think you made a appearance in the previous show in the live chat. But now you're Oh, yes. The lot. Yeah, trip. Possibly. I talked Python. I can't remember. It all blurs together as prepared as this one. No, now. Now you're on the big stage. So thank you for being here. You know, tell people about the things that you've been up to or what you're doing or who you are. Before we jump into our first topic. I'm a developer advocate at JetBrains for Python and web, which means pi charm or WebStorm. What a great gig. I love my job. I always joke that they should be I should be paying them. But don't tell them. I said that. And how I'm just embarrassed that. Here I am Python bytes. And I didn't get a haircut in time. I know this is a podcast, but there's a video version. And that's right. Looking at Brian rock and the do I feel like I should have been better prepared. Yeah, Brian and I have alternate philosophies. I guess I've got like the night Sneed hair, and Brian's just embracing it. And yeah, I would do that too. Except for mine just looks like a giant, Goofy thing on top my head. It doesn't look cool. So yeah, not so much. Oh, I want to see that. Yeah, it's amazingly bad. Yeah. I've tried to automate. Alright, but you probably have something amazing to tell us about how right? Well, I do I actually. So this is an interesting article. I want to talk about both adders. And pedantic because we've talked about both of them on the show. And they're both great libraries, I think. And so there's this article that I came across called why I use adders instead of pedantic. And there's actually a lot more in here than just that. So it was a it was an interesting read. starts out right off the bat, talking about basically one of the things that a lot of people think about with that, with the attars is don't have data classes do we need that anymore.

00:02:41 And the students are talking about not talking about pedantic but talking about data classes. And that data classes really came about as a subset of the adders functionality. So it's really pretty easy to go back to using adders. If you're if you're familiar with data classes, it should be easy. And actually, there's a lot of reasons to use adders instead. For one, they're just faster, which I didn't know that they were faster. But there's some examples about a lot of the boilerplate and stuff that goes into data classes that we don't really think about, but the adders is pretty, pretty tight.

00:03:20 Also, address has more features and has some validation code that isn't, isn't around for data classes. So that's interesting. So then then getting into talking about pedantic. So that the, we think of adders as kind of like data classes, but it does more. So adders. This, this author summarized, adders is a library for generating the boring parts of writing classes. And like, gosh, the equals and not equals that kind of stuff, right? Yeah, property and also, like thrown into validation if you want so you can opt in. So putting in some validation, you can set that up.

00:04:01 There's and there's a lot of stuff that adders does. I mean, it's a lot more than that. It's a it's a pretty full library also. But what you get with pedantic is you get that with the classes that byte antic provides, but you also have the validation library and structuring and and structuring and conversion to and from like from from a different type, like say Jason, into

00:04:26 into a pedantic class. And all these components really are with adders. You can do all of that. You just you you opt in instead of instead of having to opt out of it. And it's kind of a really interesting take on that. And I, I thought of it as kind of like, you know, I've got a lot of I've got a great screwdriver. I've got great knives. But I don't think of my Swiss Army Knife as a great anything. It's just that it has everything. I don't think it was that harsh of a comparison but we also think about

00:05:00 With like Jango and flask where flask is kind of build up your own framework, and Django has a lot of built ins already. There was, it isn't even that simple. There's also some, there was an example of

00:05:13 some of the validation that's just that is built into to pedantic that just seems wrong. Like the example was, if you've got a list of 1000 integers, do you really want by dantec to go and you pass in a list of integers? You want to make sure it's passing in a list. But do you want to want it to go through and make sure absolutely all 1000 elements is an integer? You might, in which case, you're in luck, because that's what it does. But if you don't want it to do that, because it's that's just too much time. You're out of luck. The other Well, you also got to remember the the origins of pedantic were about accepting input from arbitrary things on the internet. Oh, yeah. Well, and when your your goal is like, I'm accepting unstructured data from random endpoint on a random, like, a different level as described Tegrity. I loaded this off of a JSON file, and I know the act. When I first read it, what was it last week? Right? It's gonna be something interesting as well, right? At least that part, maybe when you scroll down, it'll show some results of the class generation, which and how the adders generates a lot less magic than the pedantic generates. Yeah, yeah. So that's the that's the generated, yeah, errors class and the generated by antic class. So it's, it's around validation.

00:06:37 Yeah, it is interesting. The other other aspect is making sure that that data is validated when it's set, not just when it's created. And I think I got lost here. But I mean, correct me if I'm wrong, but I think it's that pedantic, only validates on creation, whereas you can set adders to be validating on setting values as well. But I could be wrong. I believe you're right, I went and looked up a ticket in pedantic

00:07:07 I didn't read the whole thing about it. But these are hard conversations. There's no free lunch. And this article, I thought was a fair treatment about the topic. Yeah, the conversion bit was a little interesting, like for instance, um, take conversion. So if you pass in daytime, two pinup model, pedantic already has daytime conversions built in, so a lot of medically converted. But if you are using like pendulum, which is a subclass, that class is a subclass of daytime, you're going to get a wrong conversion, it's just going to do it wrong. Because it'll, it'll assume it's a date time and not a pendulum object. So that's interesting.

00:07:51 Yeah, anyway, definitely. Something to think about of the build your own versus having it all in one. But, but I definitely think there's places for both, like Michael said, especially with input validation on the, on the web, if you know what you're doing. Definitely, I think maybe you could roll your own or use all these adders and other tools. But if you're just sort of playing it, and you're just getting started, then why not try and paint into bits? It's a great place for that. Yeah. The other thing is about the open API specification stuff with the Titanic, where if you just use them, and you just say, I'm using this, it'll like, automatically generate the documentation, which is a big bonus. It's interesting with the release a sequel model, it's like you can kind of feel like pedantic is its own little mini framework dispatcher thing you with Hook points that you can plug into, and almost treat almost treat as its own little API surface for gluing things together. Yeah, yeah. It's the data exchange. But pretty interesting. Brandon brainer out in the live stream says I think it comes down to the using the right tool for the right job, which is, yeah. Can you open it up? Right, Brian? Yeah. All right. So we all work with the terminal, every now and then right? Or every day, you might be working with the command prompt if you're on Windows, but I strongly encourage you not to do that, you should, you should be switching over to the new Microsoft terminal with like, Oh, my posh shell and then you'll be you'll be in the terminal world as well. So Dunder Dan on Twitter, send us a recommendation, which I want to cover called MK fly, which I love the name. So what is it it is a bit of rust code that extension for your terminal, super easy to install? Like you can brew install it and other types of install it. And basically what it does is it lets you fly through your shell history. Okay, so depending on the show you use, you may use this a lot or you may use this a little you can hit Ctrl r in your terminal, and it brings up a reverse history search. So like if you knew that you type something to do with guests.

00:10:00 It had to do with this repo, you could hit Ctrl R and like type part of the repo name, and that would start to autocomplete those commands. There's a couple of things that are kind of a bummer about that, though. One is, maybe the biggest one is you only see one of those at a time, right? So if I go say, show me my history, I get a line. And then that is the closest most recent match to what I type. Well, what I often might want is like, I, it's kind of like a git clone, but which one was it and I want to see which ones of those are that like, that UI is not fantastic. So imagine if you could type, say git clone, and then hit Ctrl R, and it gave you like a UI in the terminal, that you could scroll through and pick, and then you can see what else to type a little bit more. That's McFly. So it's pretty awesome in that regard. But it also uses a little bit of AI, if you will, a little neural network and some context awareness to help build your in order that I guess price sort is probably the biggest thing is it'll say, Well, what, you know, we're searching for this. But usually when you're in this folder, you're often using this, this version of that command. But if you're in a different folder, you're doing a different version of get. And so it'll try to filter your history based on the context of where you are, what you all think. I think, I think it looks pretty cool. I was, luckily, I don't know why anybody would use the built in Windows command prompt. So I'm even on Windows, I'm using bash. But on my PowerShell Plus py PowerShell is pretty sweet in the new terminal. Carry on, carry on sorry, I don't mean don't derail it. Anyway. Searching history with the VI mode is pretty easy in bash. But I was glad to see that this. This isn't just for for your command prompt, or PowerShell, or anything you can use. You can use this with a Z shell and fish and bash too. So yeah, it works in a lot of them. And so I found it to be quite neat. So let's see, I'll run through some of the features. So you just rebounds Ctrl R, which is kind of nice. But one of the things, it'll store your history in a little local SQL database, so it can do more queries and more interesting stuff, have richer information on it. But it also, like injects the commands that it sees into your regular shell history. So if you stop using it, your shell history for say, z shell is still totally good. That's pretty nice. I will say that. I know you had Brett on recently. And so the rest ification of Python bytes appears to be complete. At this point. You can't go anywhere without bumping into rust. I know you keep bumping into it. It is quite interesting here. And my other comment is that I hate to say but I think the three of us where we've been around so long we were pair programming with Moses in the idea that I really needed a small neural network for my shell.

00:12:52 That's a tough one. Yeah, it's interesting, right? Yeah, I do think I mean, I do think it adds quite a bit of interesting

00:12:59 extensions for this stuff. Like, it's a really cool way to do, you know, I use, oh, my z shell. So if I wanted, like SSH, or I could type SSH and just start hitting up arrow, and it's like a beautiful history map. Like I never use Ctrl. R, because there's a better one, I got to make one of the Yeah, it's, it's so good. But sometimes I don't remember exactly what it is, or there's like a lot of them. And so with this one, it'll give you that drop down list that fills the whole screen. So you can jump through them. You could also delete your like this one I did once, but I never want to actually don't even want it my history, you can delete it from your history, which is kind of nice.

00:13:36 And then also, let's go through some of the other things. So yeah, so for in terms of prioritization, you know, that little neural says it takes into consideration the directory where you ran the command, what you typed before the command. So if you did a git branch, and then a checkout, I don't know, maybe that means something or I don't know, whatever. But like the series of commands that preceded it influence what it suggests and how it orders it, how often you run it when you last ran it, the what you selected in it as it's dropped down. And also its exit status. So if you ran a command, but the command bailed, like it won't auto suggest that command again, because that one's the broken one. You know, I mean, things like that. There's a lot of cool stuff. Let's go. And then I got one for you, Brian down here. So it's easy to install this, you'd like brew install, or where's the opening, apt get install or something? Anyway, if I go down here, there's all sorts of ways to install it. By but here we are. vim key bindings, Brian, yes. Okay. So okay, so you have vim key bindings, which is by default, it uses Emacs. It definitely reminded me of like just firing up Emacs, but for the shell, which is kind of nice. The other thing that I like about it I haven't turned this on yet, is fuzzy searching. So sometimes I'll be like, hey, there's this command. I think it was this but if you get it wrong, and then it's like you get zero help right if you get one character wrong, but this one

00:15:00 And as you get close, when you get close, it will give you some autocomplete on that. That's pretty cool. Yeah, that's great. Because you might like be searching for a file name or something like that, or. Yeah, exactly, exactly. Or if you see that there was an XKCD, I think, or some other comic of somebody. Now it's a different one. But somebody's scrolling through their history for like, an hour to get LS.

00:15:25 No, I'm definitely gonna try this out. This is pretty good. Can you scroll? Yeah. Yeah, go on the XKCD. Now, sorry. Scroll up to the comments. Number of commits. Yeah. 350. Yeah. This has the look of a project that's been refined. Yeah. Yeah, it does. I don't know quite how long it's been around. But yeah, it looks like the oldest, super obvious one is 14 months. Yeah. It's continuous integration was last configured 14 months ago, let's say But yeah, there's no it's the docks. The docks. were two years ago. Okay. There you go. I think this is nice. I wasn't sure I wouldn't want to use it. I'm like, Oh, that's interesting. And then I installed it. Oh, my God, this is this is pretty cool. I like it. You know, all the cool stuff. I like in Python, like pi and PIP x and things like that. They all have a section about using this with fish. You know, and so I I'm always taunted with my lack of boo when it comes to terminals. Yeah, yeah, I made the switch to z shell. And oh, my z shell and not looking back. Love it. Alright, Patrick OBO out in the live stream says, McFly seems really interesting. I'm using z shell for a month now and always thought that control our search lacks features compared to other plugins for sure. Absolutely. And then David pooch on out there says you covered that LS joke in the show. Yeah, that's beautiful. I love that. It's been a couple years, I think, but it was a good one. Well, we don't have a joke history command. So yeah. Oh, laugh who's writing?

00:16:56 Something we never show is textual. So why don't you tell us about that, Paul? Sure. Uh, switching over to me. Yep. We got me. Um, I think it was Episode 241 when you had Brett on, and Brian lead with Wilma Coogan talking about rich. And I'll quote Brian, because it was funny that and it's funny now, how can I not have heard of it. I'm a fan of the podcast. And Brian loves this tool. So I'm going to go back to the well with the thing that was spun out of rich at that time textual, which has been covered. But I want to talk about a particular aspect of it. It was kind of interesting to me as a pattern. And then our little debate where the two of you tell me that I'm wrong.

00:17:41 It really ancient about this. So I've traditionally been against the convention over configuration camp in the world of Python, I come out of kind of the zope tradition, the pyramid tradition. pyramid is like, Oh, yeah, well, here's a configurator object, and it does 15 trillion things that you really ought to care about. But don't, because Christmas, Donna has really great design sense kind of Goldilocks knows exactly what to put in leave out. And I just that whole worldview fits into my head. And so I have this dislike about magic names, magic filenames, magic variable names, can autocomplete on can't refactor can't navigate. If you can't memorize it, and keep it all in your head, you know, in Python is explicit over implicit, blah, blah, blah. I prefer like actual symbols that smart editors can operate on and not have, like, his little bit is going on with data classes right now, each individual tool having to wire out special support for that template language or that this that or the other thing to look for these magic and waves. But we'll have this thread. And actually, I should bring the thread up, we'll have this thread on Twitter, which made me feel a like I was a little bit wrong. And be like he had solved some of the issues that I had with it. So what he wanted to do was remove some boilerplate. And in this, he gave some examples about before and after.

00:19:18 Here's the screenshot of it. So that's before and you see like in here, watch how much this changes. When you go to this, the kind of the noise, the ceremony, a lot of the stuff was reduced. Okay? Now, anybody can look at this and say, well, that's great. If you're optimizing for writing code, if you're optimizing for reading code, and you want to walk back up to this later and know that there are some special semantics that you know, then if the name starts with these three things, then the next thing is kind of a thing that is etc. And so I worry about I worry about that.

00:20:00 Those kinds of things. But he had done it in a way where my PI would still help you SOP and one of the innovations he had that I felt like,

00:20:10 let's see, do you see? Do you see me on Twitter? No, you don't? Because I'm in the wrong window. Sorry about that. Okay, my apologies. So in the screenshot, you see a before and after, Brian, you see that? Yeah. All right, good. before and after. And so he's talking about boiler plate removal in this thread. And some of the decisions such as like this, for any of you that do type annotations, type hints, you'll look at this. And you will say, Oh, goodness, the type hint went away. This is actually a perfect example. And you look at this, and you think I just lost the typing information. And I believe in type hunting? Well, not really, because it can be inferred from it can be deduced. Right? So the example is you've got like a variable colon type, oh, yells, sorry, yes, this is a instantiate the type versus just drop the the type annotation. But when you're when you're allocating up the object right there, like all the editors in my pirate, like, you know what thing equals new object? That's right. It could be that object. Yeah. And in these, like, Titanic battles about type pinning, we forget that, well, you don't have to do all that typing all the time, Python and type checker static analysis can figure this kind of stuff out. So I looked at that I was pretty good. I was probably kind of seduced by that. But let me ask the two of you, maybe the audience as well. Do you think that three months from now, if you walked up to your textual application, would you be able to remember that he had done these things, and that the right hand side was telling you about the left hand side? In order to save a little bit of typing? Did I lose a little bit down the road and have to load up my future self? What do you think about that? Right?

00:22:02 Well, I'll tell you what I'll say what I think, is there a separation of where this happens, like on the example that you're showing here, like object or variable equals new object, I never need help with that, I get super clear what that type is all the time. where it becomes not so obvious to me is where I've got like, a class or something, it's got a field and then I'm, I'm creating that object and passing it in. If my PI gets still telling me, oh, this, this thing is one of these because the only time you ever use it, it's always passing this type. But that's a separate file. And I'm not looking at it side by side, then to me that like starts to add additional work for me to keep track of in my mind, the other one I would say, is the autocomplete test. If I'm working with thing, I say variable dot and it goes through, there's a list of things, there's a good chance I don't care about anything else, right? Like, did it autocomplete the thing? And did it tell me if I put the wrong property field whatever on it? Because it knows what that list is? Right? The Magic name changes later, will I get a red squiggle? Yes, exactly. will, will the editor know that it was broken? And well, it helped me write it. So I don't have to look at the docs, I don't have to go to the source. I just use variable dot and I just keep rockin until I really need to understand something. Yeah, I would say that that's where I come down on it. The third thing is, if this is not relevant here, necessarily, but if you're doing something like SQL alchemy, or Mongo engine, or Django ORM show often what they do is they have like two flavors of the thing. I'm creating a class, the class has a field, it's called email. Oh, wait, no, what is it? It's been set to a new Mongo engine field of type string that has a regular expression on it? Wait, that's not what, that's not what I get what at runtime at runtime, I get a string at code time I get this. So for those, I will say, field, colon type is string equals Mongo field is a Mongo string or whatever, or SQL alchemy column of type string, because I want it, I want it to be explicit that it's not really what it says there. Because often the editors will like give you like Column Information, which doesn't make any sense. Anyway, that's a long answer, but I gave Brian some time to think about his position here. Um, I'm actually just, I'm very impressed with wills design decisions. Yeah. A lot of things. And I am, like I, there may be some magic hidden in there. But I would rather have the less code to look at. So

00:24:36 let's go to look at means less things to get wrong. As far as I'm concerned. I am coming down with you on this one. I've been working for a long time on kind of a long project about static analysis and Python templating. That is driven by type hints and looking at what he's done has made me step back and think wow, there is some there's some

00:25:00 Some things you can do without throwing out type pinning them improves the readability and removes the boilerplate while keeping people on the rails back to what you said about wills design decisions. Looking inside the code of textual is really fascinating to me. Fascinating enough that first today will announced that he is changing his job status so that he can work for the next three months on open source completely rather than at night, and is looking to meet a target for GitHub sponsorship. So let's all go out there and sponsor him so we can get these delicious looking treats that he keeps giving to us. But second, I'm interested enough that I want to join the freakin project and learn from him. I mean, a reactive system. He's got one. Yeah, I wouldn't even know how to write a test for it. And he's got that too. So I'm with you on that. I love the way he writes his code, the way he talks about his thinking in public while being a gentle and encouraging public figure. Yeah.

00:26:06 Absolutely. Well, very, very cool stuff. There's a lot of neat things out there. And I think a lot of people's reactions are like astonishment. Like, wait, that's a terminal. That's insane that it does that.

00:26:17 Yeah. Ah, on to the next. Speaking of testing,

00:26:23 either. Have you ever used doc test? Paul? Yes, I have. So I way back when when I started, started blogging about testing, I thought I thought it'd be fun to compare

00:26:37 test frameworks, because I wrote my own wasn't fun. So I, I looked at unit test, I looked at doc tests, I looked at pi test, and nos, also.

00:26:47 And I actually thought, you know, maybe just I didn't think it would go very far. But I tried to use doc test as a as a

00:26:58 end to end test tool.

00:27:00 It was difficult. And there's still some cool things about doc tests. So if people are unclear what doc test is, Doc test is a package that's built into Python that you can write, you can use it by saying Python dash m doc test and pointed at a file, one of your source files. And within your doc strings, if you've got things that are like the three, see if I've got it here so that the three arrows are something like the prompt, python repple. And you can type some examples in there. And doctors makes sure that the output really matches what you said. So doctors will go through and make sure your code examples within your code actually work. This is a cool idea. In principle, in practice, it's very painful. And a lot of the pain points come around, well, I forgot to import anything. So you have to, you have to include the imports in there, or I forgot to, there's a lot of stuff that can go wrong.

00:28:01 Now pi test, add some things you can run doc test from pi test, it's pretty cool. What we're talking about now is a new project or a project new to me called the x doc test, and x doc test. It's got a whole bunch of cool features. One of the things is doc test is a regex played based thing it like pulls out the string finds the code runs, it looks at the output makes sure they match. x doc test uses a

00:28:30 whenever the source tree thing. abstract syntax tree. That's that's it abstract syntax tree.

00:28:38 Yeah, so it's actually parsing it better. And there's a whole bunch of cool stuff you get with that. The thing that I read, there's, there's some highlights in there. Like one of the things is continuous string continuation was paint painful, because you had to include the angle bracket things, you don't have to do that with x doc test. The thing that I love the most, though, is one of the defaults

00:29:02 in doc test is it does not do string normals that whitespace normalization, you can turn it on, but it doesn't do it by default. x doc test by default does whitespace normalization. What that means is, if in my code, I cut and pasted stuff and added like a tab or a space at the end of my string doc test will fail that because it like oh that's that string is not the same as whitespace at the end, that I don't care about the whitespace at the end. So one of the things that dar x doc test is just fixes that right off the bat. So it's gonna be way more pleasant just to work with but there's a whole bunch of other cool features of this that that they brought in it has a more sane skip syntax, although they kind of had to read it for a while you have to save plus skip to to start the skipping and then minus skip to turn it off. Yeah, anyway, but it's pretty, pretty neat and flexible. And I think if you're gonna

00:30:00 Start out trying to do doc test stuff, I would totally use x doc test. Plus it has a built in pytest support. So if you have it installed, you can say pi test dash dash x doc test and run it on your code. Run fine. Yeah, I'm very nice, Paul, you're two for two on dictating or what I was going to talk about. But what I really want to hear you do is say abstract syntax tree in a Daffy Duck voice

00:30:28 you know way that'll be in the bonus track. Brett cannon made a sing a song from like, Ren and Stimpy or something like that?

00:30:38 Oh, yeah. Was it that it was? No, it was pinky in the brain. That's what the brain Yeah. Yeah, it's all from the same general genre era. We should do a Ren and Stimpy. skit sometime. That'd be fun. God Ren and Stimpy was awesome.

00:30:53 The peak of civilization? Yeah, the red button. Okay. Don't press it. Alright.

00:31:00 What's next? I'm next with this. But okay. But I want to start with some code, and then tell you more about it. I want to tell you the code and then you can think about how complicated is it? And then what does this accomplish? So here's some Python code it creates a little LED is for like some embedded thing. It imports the LED imports time and approach random it says led equals led number 17. While true, led on sleep one second led off sleep for between 45 and 60 minutes. That's the entire bit of code. What does it do? This is how I automated my standing desk with a Raspberry Pi.

00:31:36 Pretty awesome, right? Yes. So this one comes to us from Joe Ridley Riley. Thank you, Joe. And this is by David Kong. It's apparently he's into sort of hacking his productivity and all sorts of ways. So we got a stand up desk. And he said, I have this cool automated standup desk and push a button for up push a button for down you have presets of like where you like the up where you like the down. But he didn't press it very often. So he's like, Well, why am I not pressing it? Because I am lazy. I don't want to stand up. And then so we put reminders on his phones as you want to stand out because No, I don't want to stand up right now. And then he said, Well, what if it just did it? And I had to like adjust to it right? So long, Andy there's like a couple of buttons, little programmable bits. And he just pried the faceplate off of the control surface of his automatic desk, you know, it was works desk. So whatever. If it breaks, I guess, Brian, pry that off. And he just has a few little like pins in the back. And if you push the button down, it completes the circuit. And he's like, well, really, all I needed to do was stand up, I can push the sit down button when I'm tired of standing up again. And so went through by how do I do this, I just need to connect something that will trigger electrical current on one of these these bits here. So say, well, maybe I could do some little like super micro things, some small things that you know what, actually for five bucks, I can get a Raspberry Pi Zero. And you know, go crazy, you get a case and an SD card and all that from Adafruit for five bucks, and just write some Python code. And then you connect these little, these little pin areas number 17 for example, to circuit and instead of turning on the LED, it just sends a current over to that little thing on the desk and then we'll make it go. Isn't that awesome? That's That's great. I want to do that. Yeah, he is standing desk first though. I know you're I am saying we'll who is in the audience has magic method names. How do I know how can I tab complete? And this thing's like hook it up to terminal 17.

00:33:38 Right, exactly. It's it's pretty janky No, but that's great. That is I've got your a sandy desk stand up desk, it had a different brand, but it looks like the exact same panel and well stay tuned to one of the things is like I don't really need a UI but maybe just a terminal and how do I talk to the Raspberry Pi so um, David goes on to talk about well how he set up an SSH shell over to his Raspberry Pi from his MacBook using a USB cable because he's it's on the desk anyway. And then just writes this little bit of code that I talked about move desktop pi and off it goes so I soldered a few things together and then just taped it to the bottom of the desk. And now you have it going I would contend there's a few minor upgrades that should be added here. Maybe a time check like you may freak a custodial person out

00:34:32 if they come overnight and they go to get the

00:34:36 loan already has been activated. Exactly we get empty like the trash bin under your desk and it goes wrong Jacob Do you would man I would run for it. But if that were me, but you know so maybe like a web service call the check the time or just check the time it goes really just do this during work hours. Like honestly, this was a pre COVID thing, but randomly raises and lowers it or Yes, that's between

00:35:00 45 and 60 minutes on the hour. Okay, that is fabulous. Yeah. If you look at the comments here, this is where you got to hang tight, Paul. So people are digging it. Someone down here a little bit further says I have something called a very desk. But it turns out when I peeled the front off of my very desk, it had exactly the same control board on the inside.

00:35:23 Yeah, so Paul, you if it looks the same, it may well be the same because someone else claims that they did. Now my desk is going to be smarter than me. I mean, I've gotten my watch being smarter than me, but it will just have more willpower than you because you're like, I don't really want to walk here anymore. I got to stand up Fox and the hedgehog. Yeah, exactly. All right. Well, that's all but I thought it was a, I'm always thinking of like, we have these super cool devices that cost like five bucks. And it's they're so easy to program, but I just I don't usually have anything cool to do with them. And this seems entirely attainable. Yeah. Yeah. I think maybe hooking up a height adjustment with with random adjustment to my webcam would be cool. So I could just have different angles throughout the day. What if there's like a pulley system that if that after a moment Yanks the chair, and if you don't get up, it's just gonna dump you like, a little bit more or at work? Exactly. Or squirt gun if he finds you're still sitting, puts my coffee slightly farther away. Exactly.

00:36:23 Alright, Paul, what's your last one? This was a really interesting one for me. I was on vacation in heaven in August. And two things I did was when I was at the beach, I had the beta of Brian's book. And when I was back at my mother in law's house, I was taking my six related Python projects and teleporting them into the future, using the hypermodern, Python cookie cutter. And what do I mean by that? Well, if you're doing a Python package, a library or something that you're going to distribute on pi pi, you know, I thought developments gotten the bar has been raised, let's put it that way on quality control and tooling and things like that. And my good friend Brian Aachen long ago, then minutes mentioned about x doc test, which is also on here, I believe, yeah, x doc test, along with 57. Other things you might want to do like the panda bot, and flake eight, and pre commit, and my PI and black and get home actions and all these other things. And individually, they're achievable. Collectively, they are a go on vacation in heaven, delete your repository and start over. That's what I did. I deleted all my repositories and started over

00:37:48 with poetry and things like that. This cookie cutter isn't just great, because it's a cookie cutter that gets you in the ballpark out of the box. It is a user guide that explains all the decisions made, including the why it's like teaching you how to become a modern Python packager, programmer, someone who's going to distribute stuff. And in fact, there was a blog, a series of blog articles before he did this. Let's see if I can find that. Yeah, so often, you'll see these articles of what you should do. And then you just have to go do it. And this is like, here's what you should do. And then you run this command, and then it's done. But now you know why, indeed, and in fact, I found the part you just described to be more valuable than the cookie cutter. Yeah. Okay, so the last thing I wanted was to be teleported into 57 things I didn't understand. Yeah. And so just for the two of you, if you could look through that list, maybe anybody in the audience, look through that list. How many of these are things? Brian, you've been distributing packages recently? How many are these? How many of these things are in your list of guilt that you're not doing? Yeah, no, a lot of these. A lot of these are great. Some of these, I'd like to add, like, I'm not doing much type checking. I'd like to do more type checking. Sure. I don't some of the choices. I just don't agree with the choices. So I was actually considering doing a fork of this with the choices that I would have made like I Knox is a cool project. But I've got first one. Yes, I knew you would say that. I agree with you. I would I would change that. And I know you said you like poetry. I know a lot of a lot of people love poetry. It just doesn't fit my brain. So I don't use poetry, but that's only 5050 on it. I'm fighting it. But there's a whole bunch of other stuff like you said things that maybe you didn't consider, like black and prettier. I don't think I use both. So I don't know what started here gives me the Black doesn't JavaScript in markdown the things like that JSON files non Python. Okay. Don't know what unreleased drafter is. That looks nice.

00:40:00 Whole release drafter thing I don't know if either of you have ever looked at release note automation and Python, but there's a number of packages semi dead. And most of them result in this dance of if you push before this thing runs, you can't get your notes on the tag. Yeah. So this is hooked up with a GitHub action, which makes a draft of your release notes for you as part of the merging a pull request to bump the version number process. It's just fascinating. I would have never figured this out, man ever. Okay, we got some cool comments. One here. It's not as from x. Excellent. Yeah, it's a good point. It's not as hyper monitors, the title suggests it's often pretty solid advice. I'm not sure if what he means is, by solid is a is a compliment or an insult. I think what he means is hypermodern, at least when I read, I was like, the last thing on earth I want is bleeding edge on this stuff. And then I think also List of guilt would be a good title for this. So yes.

00:41:09 One of the things I want to point out the article series. So at the top of this, what we're going to link to there's links to hypermodern Python, it's a list of articles. The artwork in this is a amazing, so he's using some some freely available. Nice, really clunky thing. So yeah, well said. Did you read any of the articles? Oh, well, I read all of them when they when they first came here, but looks like there's some newer articles that I haven't read yet. So yeah, yeah. So the kloudio

00:41:40 Mega kudoz. That's another project I should join. Because there's a couple I would like to teleport him from Sphinx restructured text to Sphinx, markdown. Oh, yeah, definitely, which is what I've done to my, my, each time I did this, I did a commit immediately to replace it. And it's a little bit of work. And so it's a contribution I could actually make. Yeah, Sphinx markdown is the reason why I use Sphinx though. Very good. Very good. So one last thing I'll close with on the X doc test, Brian. I was using it from hypermodern cookie cutter. And I switched to this from Chris withers scible

00:42:21 is Chris is an old time so pizza. And so what he does is he lets you This is not about dot strings in your code. This is about blocks in your snakes blocks of code in your spanks and testing them. But you wind up with this doing something pi testy. And this lets you have fixtures and all these other things available in your doc test blocks. Cool. We'll check it out. Yeah, yeah, super, super cool. And actually on said solid was intended as a compliment. They're very nice. Alright, Brian, you got any extras? To wrap it up? I don't other than just an apology. Sorry. About the solid content. Oh, I know. That was good.

00:43:07 Anything else? Yeah, I had a chance.

00:43:12 I guess at the end of last week.

00:43:15 If you've been to pi con before, you'll know the some of the folks in the PSF Bessie wall shell ski who is been with the PSF forever and ever was with O'Reilly before that. She is now with OSI, the open society.

00:43:34 Say that open source Institute I spent 10 years on a project with the Open Society Institute the other OSI and she is working with OSI on their messaging and fundraising and things like that. And it's a very interesting problem for us in the Python community that similar to the problem we had with the PSF getting people to pay for the comments, if that makes sense. Now, the comments for the world of open source is a lot squishier. and the value proposition is a lot more indirect relative to the world of Python. But I feel like there is a big there there, that the world of open source is still relevant and still has important next problems. There is a commons, there are things that will need to be done and we need a neutral agency that is an advocate for the commons, to to work on things like that. So she and I discussed what's next for the commons, things going on at OSI. If any of you around in the beginning of the words open source, you know, the problems that were being solved then they feel like salt problems now, but that's an open question and sometimes problem

00:45:00 don't have a way of staying salt. So keep an eye on OSI. Keep an eye on what Betsy and Stefan or when others are doing. Keep an eye on open source itself and maybe share some thoughts in the show notes or anything like that. What do you think? Is the big mission for open source? Yeah, maybe you reply to the Twitter thread announcing this episode, which will be out shortly? Probably the best place or the youtube youtube livestream chat would be good, good places for that. How about you, Michael? Jeremy, extra bits? You know, I do.

00:45:36 First of all, I want to just really quickly on the hypermodern thing throughout, remember, we talked about readme.so? Oh, gosh, and this is README as a service. This is good to generate your README and then you can use the release note thing to keep it going. So yeah, I just want to give another shout out to that because idea of README as a service blew my mind. Does it do badges? patches are so hard, I know if it doesn't do badges it better. That'd be an awesome upgrade. Okay, a couple of quick things I want to throw a shout out to these are the bottom of the show notes, active states, you know, they're one of the packagers, distributors have more full featured holistic sort of prepackaged Python distributions. They are running a survey called the supply software supply chain security survey to know supply chain security of like PIP vulnerabilities.

00:46:25 ipi package pollution vulnerabilities and stuff like that are big deals to they're interested in running survey. So I thought I'd give a shout out about that people can fill that out. Python 397, and three 812 are out with I think 397 might have some very minor new things. And three, eight is just a security update. So bug fixes, but the 391 didn't speak to me as anything super major, but you might check it out. There's a few security things in there about like if you pass this to like the IP class or something like that, it could be an issue, but I don't really think there's anything super important there. But no, Brian, this one, I'll be read the little description for you. This one here comes from Shlomi lanton is, Brian, you talked about having a history of all the files and a GitHub repo. And finding out how long the oldest one like we were just looking around, like how old is this project, maybe two years looks like lasting change. So he wrote a thing called grandpa. And the ideas, simply find the oldest modified files in the repo. So you can run it standalone, you can make it a GitHub action, and so on. So it just goes through and finds the oldest files. Last week I talked about wake pi, which will let you keep a process awake. Now keep your computer awake while you're processing your Python processes running. Do you do like a context manager you know, with keep awake, do the stuff you don't want the computer to go asleep during and then when you leave, the computer can go back to sleep. And I said that there was a problem on Mac OS a PR is accepted that things back to good. So thank you for that. Really quick shout out to some. Oh my z shell now my z shell. Oh, my posh shell Look at all that good stuff. Brian. That's, that could be your that could be your PowerShell on Windows. Does it have bi key bindings? If not, I can't use it. Just I honestly don't know.

00:48:16 Anyway, I think it's pretty cool. But people it's not just for PowerShell it just happens to be one of these really nice extensions that also works for PowerShell. Oh, really? Yeah. All right. took me forever to know what posh meant. I'm like posh. What? What shell is that? posh is PowerShell. Right? I probably is actually yeah, I probably it sounds cooler than PowerShell though. Okay. Cool. Cool. All right. I think that's it for for those all y'all ready for a joke? Yes. All right, here we go. So here's a tweet from monkey user, at his monkey user. And they have a mess. They have like this sort of planning diagram here like a flowchart, if he will remember flowcharts. But there's like real high level. And it's about trying to find meaning and as a software developer, so the person enters to the workflow quit question mark? Yes or no? Yes. Do you pay time off?

00:49:11 Then what you can do is you can go in and you change your Java, there's I think it's JavaScript change your JavaScript framework, then you acquire new skills. Are you burnt out? No, you go back, you change your JavaScript framework again, it will starve. Have you changed your JavaScript framework in the last two two months? If no, then you need to change it again. Or on burns? Yeah, you've got some some backlog here. It goes to in progress and that gets shipped it gets done. You get paid. Do you have burnout? Yes. Are you dead? Whoops, not yet. Do you have paid time off? You can change your gyroscope framework again? No. Then you ask how has it changed in two months? If no, then you change it again. Otherwise, you got the backlog? And I thought this part right here right. And you might particularly like is it ready for Qa? Nothing goes to that.

00:50:00 This is like an orphaned input box right there. This should be this should be the logo for HTML. Yes, it actually should. Yeah, this would be awesome. Because it really, it just tells you the churn at the another person walks up and says, Hey, are you trying to find a new workflow for how we're working with? No, I'm trying to figure out why I'm still doing this. Well, there's there's no way to go back to quit.

00:50:27 And there's Yeah, yeah. And you found the easter egg. Yeah. Well, so why is there still a separate QA department, but I love the leveraging of paid time off.

00:50:40 Yeah. backlog. backlogs like an afterthought. If there's nothing else you can do, maybe you can work on the backlog? Yeah, exactly.

00:50:50 Nice. Awesome. Well, thanks. That's it. Yeah. That's it for our show. Brian, thank you, as always great to have you here. And Paul, thanks for joining us. Thanks for having me. Love the show. Love everything the two of you have been doing for the last few years and hope to tell you this in person soon. Probably. Yeah.

00:51:09 Just you said to for me to interrupt you and tell you and your wrong. Mind forgot to so Okay, great.

00:51:16 happy thoughts. Do you promise not to cut your hair until we see each other? Yes.

00:51:22 I wanted to be I want to be cousin it by next year this time.

00:51:28 Alright, love it. All right. Bye. Bye, guys. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. Bent Python bytes as in BYT s. Get the full show notes over at Python by sarafem. If you have a news item we should cover just visit Python by sarafem and click Submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

