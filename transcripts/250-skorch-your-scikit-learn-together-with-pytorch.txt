00:00:00 Hey there. Thanks for listening. Before we jump into this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python bytes.fm slash pi test. Enjoy the episode. Hello, and welcome to Python bytes where we deliver Python news headlines directly to your earbuds. This is Episode 250 recorded September 15 2021. I'm Michael Kennedy. And I'm Bryan Aachen, and I am facing bracing Welcome to IBM bytes. Yeah, it's a pleasure. I've been looking so much forward to join you guys. Yeah, you've been somebody out there who's been given us a lot of good ideas and topics and helping us learn about new things. So you've been a big supporter of the show. And now you are a part of the show. Yeah, I'm rah, rah, rah, I'd say. Yeah, it's, I'm been looking so much for it. Like, for the first time I saw Oh, we can take part in this. Like, always should try to just get myself in there. And here I am. who you are. Thanks for. Thanks for doing that. That's really nice. Tell people a bit about yourself. Before we dive into Brian's first topic? Yes. Well, um, well, my name is Preston Daniel. And I'm originally from Tanzania. But living in Denmark, married with three awesome kids. Currently, I'm a principal data scientist at NTT DATA business, business solution, he and Copenhagen and yeah, so I accidentally became a data scientist and somehow discovering that I was really, really good at it. Then I just started climbing my way out. Thanks to the Python community and everything that is out there. Yeah, awesome. Congratulations. Nice to see you find new way in the data science world. Very cool. Yeah, exactly. Becoming a data scientist. That's interesting. Exactly. Alright, Brian, if people wouldn't do things wrong, I think so.

00:02:14 Including race conditions with screen sharing. Yeah, so I just couldn't resist this article, there's an article out called exciting new ways to be told that your Python code is bad, which is just great title in the gist is there's two new pilot errors. So it's pretty simple. There's but it makes made me think about my code a little bit.

00:02:40 And the first one is, is an error to tell you to consider ternary expressions. So if you if you have, if you've got like if condition, and then you assign a variable in both the the if clause and the else clause, and it's a short thing, maybe maybe use a conditional expression instead and do all in one line, like say, in one, one of the examples in the blog post says x equals four if condition else five, so ternary operators are pretty cool. And they're pretty easy to read in Python. But I was just curious what you thought it is, this is a ternary expression easier to read or more difficult? Well, for me, I think this is pretty nice. I'm always on the edge about the ternary condition, the value if condition else, other value, a lot of times it starts to stretch out to be a little bit verbose. And then it's kind of, you know, it's not entirely obvious. One thing I recently learned about, I don't know how it took me so long is the simpler version of that, like, variable or other option, without the if else, just the thing or that thing, right. So for example, if you try to get a user back, and you just want to return the user, or you want to return, and maybe you want to check if their admin if they are returning them, otherwise, you might turn them back then you can say something to the effect of like, you know, if I say user, or result equals user or false or something like that, some it's not a totally good example here. But this like super short version of value, where you kind of have the return value and the test and then fall back the else case.

00:04:21 It wouldn't work an example I have here, but not one I actually started to really like because it's so concise. I don't know I think I'm very traditional. I like reading my code up going down. So whenever it started stretching sideways to me, like oh, okay, I think I just love the flow, if then I know have to look down for the ELLs right, but now I have to know the elves from the other side and the Yeah, but one line is good in some places, but in most of the cases out of readability, I usually just try to avoid them. Yeah, I do as well. The one thing I was thinking is interesting on the data science side person is a lot of times you're trying to

00:05:00 Take, instead of statements, multiple lines, you're trying to create little expressions that you can put together in like little list comprehensions and other types of things. And these, these one liners become really valuable there. Yeah, definitely. Definitely. Mostly when we're using lambdas. Everywhere, right? Yes, exactly. Yeah, exactly. So the then the next air condition is funny, I think. And it's just the while is used. So it's just a warning to say you have a while in your code. And this is the comment really is there's, it's just not really usually good to have a while because it can, like never terminate, you can, there's no, it's not guaranteed to terminate if you've got a while loop. So I thought that was interesting. I actually was just thinking about this the other day is that I don't, I can't even remember the last time I've used a while loop in some code. So I think this I think this is actually pretty good. Just to warn people, they've got a while loop. It's pretty strong. It's a pretty strong word and say you have used this language construct, that's a problem. I certainly think it's, I'm on board with the Zen of the idea that most of the time a while means you're doing it wrong. Most of the time, you could probably iterate over a collection or you could enumerate and then iterate over the index and the value. But there are times where you actually need to test for something, and then break out and and to put it as a full on warning just for its existence.

00:06:30 To me, it seems a bit too far. But it's it's interesting to say the first one. Yeah, I think these are both sort of in the eye of the beholder a bit. Yeah, actually been in like in our team, or in my whole existence. I think we're using while only once. And this is on the computer vision. So you are trying to capture videos from the camera and then do analysis with them. So it says while these frame, keep on doing this, and of course you always have to catch

00:06:59 some way to go out of this world. But I think that's the only time we use while and we usually what one people say is never used while except when you were doing computer vision. Interesting. Yeah. Especially if you got things like pandas and stuff, or maybe you shouldn't even be looping at all. No, no, not at all. Not at all. Interesting. Interesting. A couple of thoughts from the live stream. So Sam Morley either says x equals wires he is really handy for setting instance variables in a class. Whether using nuns I totally agree. Chris may Hey, Chris says ternary is a great idea if it's simple. Else not so much.

00:07:36 Yeah, nice, clever random brainer out there agrees with you pressing that the traditional if else is probably easier to read. Henry shredder says Turner is much better for type type checking as well. Okay. Yeah, probably because the type of wrenches more obvious there. So yeah, pretty neat. Pretty neat. Also, speaking of neat stuff, what if you could have all sorts of placards and things about your README? So here is a project I want to tell people about called GitHub README stats, and get a readme sads is pretty interesting. It's comes to us from Houma. So thank you, Paul, for sending that in. And the description says it's dynamically dynamically generated stats for your GitHub readmes. But I feel like that scope is actually way too short. It's a dynamically generated little package for wherever you want to put them on the internet, you might want to put them on a project's README. So the project can describe itself more dynamically. But you might also want to put it on your about page on your blog or something like that. So give you all a sense of what's going on here. If you come down here, you can have these different, there's a whole bunch of different options, you can get like a GitHub stats card, you can get extra pins, you can get the languages, like for example, we could say what languages you are most likely to use across all of your repositories, the walk time, week stats, there's a bunch of themes and visualizations and stuff. So I think the best way to get a sense of this to see an example. So I put a couple of projects in my own self in here to kind of pick on me. So here's a image that I could add. Let's zoom that in. So I have this Python switch package that I created a while ago when Python didn't have anything like a switch statement. So I wanted to add a switch statement to the Python language. So I did. And apparently here are the stats of it. These are live, right, if I refresh it, it'll regenerate it. And it gives you a little bit of info about the project like the name and its little description. That's mostly Python. It says it has 238 stars and 18 forks, which is pretty awesome. So all I got to do to get that is to go up here and say I want to get the pin. And I want to have the username be Mike c Kennedy and the repo be Python dash switch. This returns an image that I can put, like I said anywhere, right, if you put this as the image source, it'll go it's not just like an old render on GitHub. It'll go wherever you put it.

00:10:00 So I think that that's pretty cool. Another example would be your stats, I'll refresh this because there's a little animation, I can get my Michael Kennedy's GitHub stats, apparently, I have an A plus plus, but a two thirds closed red ring, I'm not totally sure what the ring means. But kind of a cool little graphic here. Apparently, I've got 3.5 1000 stars, which surprised me a lot of commits, 73 prs 103 issues, 23 repositories that contributed to I don't know if that's this year, or maybe this year, who knows, or total. Anyway, that's kind of cool, right? You could put that on your blog, or somewhere where you're trying to talk about yourself, like trying to get hired, or you do consulting or something. And then the third one here is you can say your most used languages. So apparently, I've most used JavaScript, which is very much not true. But I've probably committed a ton of like, node modules to some projects that I don't actually want to have to, you know, re npm install, I want to just make sure they're there for like a course or something like that, right. But it'll show you through the breakdown of your various languages and whatnot. And so that gives you kind of a sense of what these are all about. What the idea of this thing is you generates these little cards, and you can put them, like I said, wherever you want, what do you think on a resume page? Yeah, I

00:11:12 really loved it. But it's kind of sad, because some most of our time is spent in Git lab, and all this other, and all our commits are done there. And then when I come to my GitHub, it looks so empty, and it makes my heart rate, but dude, he hasn't committed anything for a week. Yeah. So this really awesome. Yeah, cool. Yeah, I guess it really only works for GitHub. And that's where it's really handy. But still, do you know, the stats are only on public repos, or the public IP? Right? It's a good question. So you can choose as a user, if you go down here, and like the stuff that shows in your contributions in your GitHub profile, you can check whether you want public and private contributions to appear in that little green, how much how much contributions have you made this year by day? Okay, so maybe it depends on whether you've checked that or not, you know what I mean? But it might not. But anyway, yeah, pretty cool. Little project. person. You're up next, what you got? Yes, yesterday. So I got this one here. Actually, this is it's something that has been covered, not covered, covered, but been mentioned, too. So I could see it in footnotes, as when I searched through. Actually, Brian, you covered it in Episode 182. With hyper mode in Python, I think it's just a name that was there. Yeah. But it was not mentioned, I think it's just been, oh, this could be used in this hyper modern Python way of doing awesome stuff. And then, in Episode 248, it was mentioned, again, with hypermodern, Python cookie cutter, but it's just like a footnote of use Knox instead of tox. So this is really, really an awesome tool. So we've been using recently because we, when we do machine learning, we are encountering a lot of problems where we have to test how our models are performing and how are they are they ethical. So the test, when we do tests of our pipelines, we're not just testing that the models are accurate, all they are doing the things that they're doing like the API, it's actually, you cannot just change our API, you need to have keys on all those, we actually also have this test about the ethical ness of our models. So like, if we say our models does not segregate between

00:13:37 these they say,

00:13:39 gender. So we test, we have counterfactual test where we send different genders and see what are the models responding, they're responding with a similar result. So when we say it doesn't

00:13:51 segregate between sexual orientation, then we send different inputs where pretends to be a either straight or, or homosexual and just try to say do we receive the same results. So we've been trying to

00:14:08 run this very, in an automatic way. And before that, we use a lot of talks. But the problem is, it talks, the way of defining your talks is just not pythonic. Like, you don't write this pythonic way of doing things is similar to we had this issue with make, I really cannot to debug make. So whenever I made a make file, I copied from someone else and then change some things. Because anything they touch, then I have a syntax error, oh, this thing is not in the right place. So and then I came across evoc, which it was almost like pythonic I can write everything in a Python way. So this NOx is actually similar to what evoq did to make, but it's doing exactly to, to tux. So in this case, you can

00:15:00 Create a simple pipelines like this one here, where it creates a session, installs the package that needs to be installed, and then run whatever experiments you're trying to run. And this is really, really handy. At least, we found it really handy because you can select that it actually use the conda environment like the Condor world, it's been used a lot in data science. So you can say, first create conda virtual environment, install these packages, and then test them. So what I like about this tool, it's, it's almost similar to pi test. Like, if you know how pi test works, then you know how this guy works, because there is a parameterization. And whenever you run test, you can select which part of station needs to be run, like in PI test, we use the dash K, run this kind of test. And here, you use the same thing dish cake ran with only these kind of fields, right? So it is dark, we really, really enjoyed that. Like, you can pass in a environment variable. But I actually wanted to show you the coolest part here. Yeah. Nice. It's, it's just amazing. I cannot. I cannot. I mean, the guy who created this, I just give him all the thumbs up with everything that they have, they have come up with. So it's really, really handy. If you're not using it for if you're using trucks, you should probably consider changing to NOx with COVID. You can for example, write that you have a test and then say I want this, you know, as a decorator, sort of parameterize I want this drone on 2736373. And then I'll do that right. Yeah. So so. So it seems like I like this example here, right? So we can see we apart parameterizing different Django, so we want it to first install this version, and then run the tests, right? And then later it will come and take this version and run test. But then in the command line, you can actually just select it to run only the test with this guy and skip this guy here. So it's really I mean, it's

00:17:10 the ability that it, it gives you It's incredible.

00:17:15 So if I could see. So you can see like here, right here, right? This is exactly what like it goes into the PI test ish, wealthy. So you can run it and say don't don't run the linter or lint, it don't run the tests or tests. You can even put Python expressions that looks like tests and not lint, for example, is it? I mean, it's just, it's just

00:17:37 an insanely great.

00:17:40 Nice, Brian, what do you think of this? Oh, I really like NOx. It's neat. The parameter is the with the use of parameters is really cool. And the example of like using a couple different jangles is good. But you can also build up matrices of testing easily with like a couple, you can stack these so you can have two parameters together. It's it's a pretty cool project. I I just really love talks. So

00:18:08 I haven't switched. There's but but I know that the you know there's there's like invoke also people using Invoke for automation, but people are using narcs for more than just automating testing, you can automate really, whatever you want to you can run it as just running a command. Right. So nice. Yeah, basically that a lot of comments from the live stream on this one Henry Strider says I love Knox tox is mired in backwards. Compatibility defaults are just hard to tell what's actually doing whereas Knox is simple. It doesn't hide or guest stuff. It's just program like pi test. Sounds great. Sam Morley says this is the only way to write a make file.

00:18:50 I mean, I, I had that one. Yeah. Henry also says the pipe pa projects have some very powerful Knox files, ci build wheel, Pip, and so on, which is good. And then Sam Morley also has a question for you. Can it also Knox run external tools? For example, build a C extension or run a C test suite? Oh, boy, I didn't know Brian. I don't know that either.

00:19:18 He definitely can. Because Python has sub process. But can it do it without you forcing that into it? You're not but you could put technically, you know, Python call this other command. Right? Well, there's an example in one of the in the tutorial of calling cmake just as a cmake as well. So that probably counts, right? Yeah. Yeah, I think that would count. So it's just running a command. Yeah. And then Brian, Brandon out there has a comment for you. New Lysa. Great.

00:19:49 I agree with them. I actually need to adjust my my camera a little bit which is a little bit off on the light. Very cool. All right. Let's see. I think Brian, you got the next one. Oh, okay.

00:20:00 I forgot what I was talking about. Um, yeah, so I've got the old document there. So we've got a couple of things I wanted to talk about. So this is one of those extra extra extra things. But there's just

00:20:12 a couple of things that are around dealing with text. And I've been playing with my blog a little bit lately, not really writing much, which is a problem. But, but actually dealing with so what you wrote looks really good now.

00:20:27 Well, I'm, I'm doing some automated trying to automate some of the parsing of some of the old stuff. So I grabbed a whole bunch of blog posts from from WordPress, and which, you know, you can, nobody needs to throw eggs at me, I'm already switching and using Hugo now, but, but I've got a whole bunch of files that are automatically generated markdown files, but there, there's problems with them. So I have to, I have to keep track of them. So I've got some scripts, there a couple tools are helping me Python frontmatter is a is a really pretty, it's a package, that's, it's just a really small package. But it all it does is really takes, like YAML style

00:21:09 frontmatter stuff, and, and versus those, you could just load it. And so you load, I'm using a markdown file. So the example shows a text file. And, and you can get at all the pieces of the file, like the content and stuff. But for instance, um, I can grab, I can grab the title, you can look at what the keys are. But so for blog posts, I've got, you know, tags and the date. And it's all, it's all converted to Python objects. So if I have a date, listed in a blog post, it'll show up as a date time object, so you can do math on it and all sorts of stuff. So this is pretty cool. It's really small, but super handy for what I need. So it's good. Yeah, it's nice. The other tool I wanted to talk about, which is a even a tiny or use case, I think is called FTF. Why fixes text for you? And really, it just takes bad Unicode conversions and makes them good. So takes like, common problems with Unicode conversions and fixes them in like where it looks like you have Greek or Russian letters or something instead of a space or apostrophe or something like that. Yeah, like the one of the first example a quick example. There's like, yeah, like this weird a character. And really, it was intended to be a checkmark. So it just converted it to the proper, what it was, I'm not sure how it's doing this, but it's pretty neat. That is very cool. The

00:22:40 this gets me all the time with stuff like goes from Word. If I'm converting from Word or something, or copying, copy and pasting, or other things, there's a lot of different quote marks that word processors put in and like, it just ends up being gross in a lot of places. And having that converted to just the one example is the Mona Lisa doesn't have eyebrows, but instead of the just apostrophe T. It's this weird, ugly, big Unicode thing. Yeah. So just just replacing that with an apostrophe is a good idea. Yeah. Nice. Does it change single quotes or double quotes and stuff like that as well?

00:23:21 I don't know.

00:23:25 I don't know if it should either. I'm not sure.

00:23:28 But yeah, this is cool. So you just run this across, like your markdown files or something like that. Yeah. So I'm not using it really for the blog stuff. But there's, there was some other Text Parsing I was doing where I was scraping some information from somewhere. And it just was just gross.

00:23:44 Had a bunch of gross Unicode stuff in it. And I just wanted to, you know, have something easy to just convert it quickly. This does the trick.

00:23:54 Yeah, very cool. Nice one nice finds. So follow up on that I was playing with my Oh, my posh shell and the new windows terminal and the new Windows PowerShell on Windows 11. Earlier this week, trying to set up some testing over there. And I found they have all these cool themes that show you all kinds of neat stuff. So you can see like the git branch you're on and I've got these little cool arrows and all these colors. And they'll even do certain things for like showing the version of the Python virtual environment that's active in the prompt and stuff like that if you activate the virtual environment, and all that had a bunch of weird blocks and like squiggly junk like that. And so it's not exactly the same problem. I'm going to talk more about this later. But there I found that there's this place called nerd fonts. And apparently, posh shell is tested on nerd fonts. But nerd font is full of all these amazing developer fonts that have fought ligatures and all sorts of cool stuff. And they're all free. There's like 50 developer fonts and terminal fonts and stuff. So yeah, one more one more thing along those lines to check out very neat. But what I wanted to talk about is

00:25:00 Stealing this idea from price and he was gonna cover but I got to I got to it before.

00:25:06 So there's this new project that recently is making traction it's it's been around for a couple months even I guess it's about two years old honestly. But somehow it got discovered is now I was getting some traction called Empire MPI r e and ideas. It's a Python package for easy multi processing. It's like the multi processing module, but faster, better stronger. It's like the bionic one. So the acronym stands for multi processing is really easy. I love that thought. It primarily works around taking multiprocessing pools, but then adding on some features that make it more efficient. For example, instead of creating a clone a copy of every object that gets shared across all the multiprocessing, it'll actually do copy on write. So it won't make a copy of the objects you're just reading, they're only make a copy of the ones you're changing. So if you start like 10 sub processes, you might not have to make copies 10 copies of that which can make it faster. It comes with cool like progress bar functionality and insight to how much progress it's made. It's also supposed to be faster, I'll talk about in a second. But it has map map an ordered and things like that iterative maps, the copy on right I talked about, which is cool. Each worker has its own state and some like startup shutdown type of behaviors you can add to it. It has integration with TQ dm the progress bar, what else does it have, like I said, some insights, it has user friendly exception handling, which is pretty awesome. You can also do automatic chunking. To break up blocks of queues across sub processes and multi processing, including NumPy arrays, you can adjust the max maximum number of tasks or restart them after a certain number, restart the worker processes after a certain amount of work. So in case there's like a memory leak, or it's just hasn't cleaned it up, you can sort of work on that and create pools of these workers with like a daemon option. So they're just up and running and they grab the work, let's see, can be spent pinned to a specific or a range specific CPU or a range of CPUs, which can be useful for cache invalidation. So if you're getting a lot of like thrashing and moving across different CPUs, then the caches have to read different data, which is of course, way, way, way slower. So a bunch of neat things, I'll show you a quick example, to in the docs. If you pull their page up, there's a multi processing example. So you write a function, and then you say, with pool processes equals five as pool pool that map and give the function and the data interval. And it runs each one through there. With the Empire one, it's quite simple, similar, just create a Empire worker pool and you specify the number of jobs. It says the difference of the coder small enough to read learn anything, but you get things like all the stuff I talked about the more efficient shared objects, the progress bar, if you want, you can just say progress bar equals true. And you automatically get a cool little t UDM. Progress Bar, you get startup and shutdown methods for the workers. So you can like initialize them and what else you need to do. So yeah, pretty cool little project and the benchmarks show it down here at the bottom in the fast area. So y'all can check that out. Racing. What did you like about this? Well, I think it's also gonna trance transition really well to the other topic that I have is I like when one create an API that you can just easily plug to your existing code. Yeah. So you can just input this as this and do not change the entire code, and then it take care of that, you know, like writing your code in a way that one can just plug and play. That's the amazing thing. So you, it's easy that you don't have to relearn a lot of stuff. But it just gives you the power that you need. So this is why we will move toward this one. So we gain the power without changing much of our code. Yeah, yeah, definitely. I love that as well. You know, that I think of like, https and requests for a while. And I think they diverged at some point. But yeah, let's see some feedback from audience real quick. jump back to the nerd fonts. Chris says they're amazing. And restrainer says fish shell plus Fisher plus Oh, my fish. And then the theme Bob, the fish plus sauce code pro nerd font is fantastic. Oh my gosh, I have no idea how

00:29:30 they're gonna send me on a serious rat hole. I'm gonna be losing like the rest of the day.

00:29:35 I'm afraid I Well, I keep on messing my my my Tim, you know, every time I start fiddling around right away, right, because I'm using you know, with our windows stock system, Linux, right. So right whenever I fix something, then I get it right. And before I know it, I broke it again. And so but yeah, it looks really awesome. Yeah. Fantastic. And then on topic,

00:30:00 was most recently talking about Christmas is Whoa, Empire looks nice. Alvarado asked will it help to get login working in multiprocessing? I don't know that will make any change. I mean, it really is mostly still multiprocessing. So probably not. Yeah, yeah, very cool. All right person, I think you got the last one here esds Yes. So I have this awesome tool here like it's, it's called scotch. It's really like a mixture of psychic learn and touch

00:30:31 with this is really, really cool bit where as we were talking about having building an API that it's easy to integrate. So if someone already knows psychic learn, and a bit of torch, then you don't really need to learn anything in this tool because everything just fitting together. So basically,

00:30:51 in when you're using psychic learn, so if you are not familiar with scikit learn, it's just this, what we call it, the must have toolkit for data scientist, because he or they, they have created a really good tool with a really good API, where you can build an entire pipeline from cleaning your data to building interesting models and everything like that. But the the biggest problem, which we've been keeping, experiencing when working with Cyclone is when it comes to neural networks, that you really don't have a lot of power to customize your networks in the way that you will

00:31:32 you like, it's very limited with this input that you you already have here. And in most cases, someone says well just create your own neural network classifier or regressor, and then wrap it in the psychic learn wrapper. But then, sometimes one does not want to do that. But nice thing is, another guy's just

00:31:56 came up with this project, which is really, really neat. So basically, it's just

00:32:03 I think, mostly, I will just go about maybe I should shamelessly show you an example in in

00:32:11 one of my guests, which is

00:32:15 I know this a shameless way to do it easier, like giving a demo on how it works, right. So like, if you're using scikit, learn, you are very familiar with all these other tools that someone needs to have like the way to split your data to a server, but then pipeline and the pipeline and all those types of Yeah, okay. But the coolest thing is, instead of using one of the psychic learn models, you can create your own custom neural net, right? So this will be like a neural network where we decided what how many, what will how many nodes we want in the first layer, how many nodes Do we want in the second layer. And here we can build as many interesting net as we see fit, right. And then basically, here, we just do the calling of it. So this is very standard pytorch way of creating your net net. The awesome part is that now these net, forgetting about all this process, we can see it so we just create this net, wrap it up like this. And now we are using it as part of our pipeline. So you can see I will just go down right here. So I am having my preprocessor, psychic learn ish, and I'm having my net. And the coolest thing is now I just call this thing as I will do with any psychic learn model with my classifier dot fit this and later, I will do my classifier dot predict these things, right. So this example is we're trying to predict

00:33:41 the species of penguin given the data that we have. So this whole thing is really, really cool because it obscure the whole fuzz of when you do it in pytorch, pure pytorch you will have to write this follow up with the optimizer stepping up stepping down all these things. But here just transforming to the psychic world, a psychic learn world where you just do fit, which just train your model. And now you can just do predict as if you're predicting any other psychic learn tool. So scorch is really really a tool that just does that. So it allows you to connect your touch

00:34:25 net with the psychic learn pipeline. So this is really awesome. So I would just I encourage people to take a look at it. I love the idea of it that basically you you can create these pytorch models and do what you need to do to set them up and then just hand them off to the rest of the psychic learn world. And I can see some really interesting uses for this. Like, I've got some library and it can either integrate with pytorch or it can integrate with like hit learn. And it just uses this little wrapper to pass it around. I I like it. Yeah, yeah. So it's just for me, it's like it just gives me this ability to create this m

00:35:00 Extended

00:35:03 algorithms and then just continue using my cycle in my second

00:35:09 my

00:35:11 psychic pipelines. So that's the current thing that I don't have to change my code, because I just want to replace one line. And that is the model. So I get the model from scratch and then pass it in my ordinary something like logistical regression instead Now I'm using a net. Love it. This route do you think, like this? Yeah, I do like the, like the pattern of being able to use not have to change your entire tool chain just to change one piece. Nice. And yeah, I like it as well. So that's it for our main items. Right. I've got one. I feel like, I feel like I should have let you have this one. Right. I grabbed this little extra thing I wanted to throw out there because I thought it would make you happy. Neat. Yeah, wait. Yeah. So Marco Corelli sent over this thing and said, if you want to work in Jupiter lab, right, I know that one of your requirements for working with tools and shells and stuff is that they're vim ish, into vim keyboard things to it. I'm excited. Yeah. So he sent in this thing called Jupiter lab dash vim, which is vim notebook, cell bindings for Jupiter lab. So if you're editing the notebook cell, you can do all of your, your magic vim keys, make all the various changes and whatnot that you want. So yeah, cool. What do you think? I'm definitely gonna try this. Yes, yeah. Awesome. All right, let's see, what else do I have? I got, oh, yeah, this, I never mind my picture. I didn't really intend to put that up there. But I just want to point out that I'm going to be speaking. And the reason the pictures there is the conference, the PI Bay conference that's running next month, they featured my talk that I'm doing. So that's why there's a picture of me, but the PI Bay 2021 food truck edition, they have rented out an entire like food cart, topia type place with a bunch of these pods. And having a conference outdoors and putting up multimedia like TVs and stuff for each pod. So even if you're not at the like a great line of sight, you can still see the live talks, but sit outside and drink and eat food cart food and California. Sounds fun. So I'm going to be talking about what what did I say my title my talk was is going to be HTM x plus flask modern Python web apps hold the JavaScript. So I'm looking forward to giving that talk and there so people if they're generally in that area, they might want to check it out. I mean, that just sounds fun. Yeah, yes, indeed. All right. That's it for my extra items. You got an extra is Brian know about your person? Yes, I got one. I had to actually search if this one has been covered. And I was surprised that has no, I don't think it has, what is this? It is so you There is something called pi dot m. So we've been using pi dot info to

00:37:52 of course, one can say why don't you just use always dot instant get whatever that is? Why do we need to, to install another package just to get the environment variable or something. But this is pretty, pretty neat.

00:38:07 It's quite recent project, I think. And it's rising slowly. And there's a lot of contributor and it's, yeah, it's very promising. So what it does, I think I can just bring it somewhere here.

00:38:22 It allows you to do all this

00:38:26 type convention casting and theater, right? Like you can say is I'm going to get my D back here. And then I will set the default. And also I will do the casting here, right? So this is when you're reading config files, everything is a string, and then you're like, Oh, this one is a date time. So I got to parse it this Yeah, I got to parse it. Yeah. Okay. Yeah. But it's really even, it's so much that. So that's another way we can say from decouple input auto config. So it goes in search, where is that in a.in file is. So otherwise, you can just tell where the environment variable is. But it's just, it's just neat. It's very simple. It does what you want it to do. So I will really encourage people to look at it. It's, I just, we have just changed a replaces where I've been using, I don't even always study with with this one. And it just helped me clean some unnecessary steps in my code was pretty cool. Yeah. Great. Great idea. Definitely check that one out. All right. Well, I think that's it for all of our items. Well, I think should we do a joke? Definitely. I love it because I've almost forgotten what the joke is. So it's gonna be new to me as well. Alright, so the joke is called adoption. This comes from monkey user.com. And you've heard about the the Python idea of you came for the language but you stayed for the community. Well, what if it is a little bit different? What if actually, people get brought in on unwillingly and then they kind of realize they like it. So here's a picture

00:40:00 have, like kind of an open field. You know, think, Gazelle or something. There's there's a couple of developers just running. And there's one who is fixated on a butterfly who doesn't actually see what's there's a bunch of like a pack of Python developers going to adopt, oh, it's a pack of Python developers spotting a junior dev away from its pack, initiate their conversion, assault.

00:40:24 Yeah.

00:40:25 silly, silly, man. I'm away even for non programmers. So and my family just sort of like rolls their eyes every time this happens. But every time I like, get a some young, somebody's going, coming over, either in college or high school, or just out of college. all I'll say. So if you haven't done it already, I no matter what your field is, you really should learn how to code. And while you're at it, why not just choose Python? So I'm trying to make Python developers out of every person I meet. I think that's doing a favor. It's it's though it'll be their superpower amongst all their non developer friends.

00:41:05 Let's find out Brian things is always impressing. Really great to have you on the show this week. And thanks for being here. Yeah, thank you, Mike. And thank you, Ray. Thank you. Bye, bye. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYT. s. Get the full show notes over at Python by sarafem. If you have a news item we should cover just visit by them by sarafem and click Submit in the nav bar, we're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian rockin This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

