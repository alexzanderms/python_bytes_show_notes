00:00:00 Hello, and welcome to python bytes where we deliver Python news headlines directly to your earbuds. This is episode 256. Or as Anthony Shaw likes to put it to to the eighth recorded October 27 2021. Again, unless you're Anthony, which is probably like a totally different day in the future, because he's in Australia. I'm Michael Kennedy.

00:00:17 And I'm Brian Aachen, and I'm on to the show. Hello. Hey, hey, Anthony.

00:00:21 How is the 28th? Is the next day going to be good? Are things okay? Yeah, it's

00:00:26 pretty sunny today. It's nice. Yeah.

00:00:28 Right on. Okay. So the world hang up things together for one more day. Fantastic. You've been here before you've been on talk Python a bunch of times friend of the show, all sorts of stuff. So I'm sure many people know you. But you know, just tell people a bit about yourself. You're doing more techy things these days. You're a little closer to the code, maybe? Yeah. So

00:00:47 earlier this year, I started working at Microsoft and work with Nina Zakharchenko. on Python. inside Microsoft in a yeah, a lot of what I'm doing at the moment, it's just running around breaking things, sometimes on purpose. Yeah, just saying how we can improve our experience and working with VS code and Azure and a whole bunch of other stuff. So yeah, yeah, it's been a while since the last episode was episode 100. I think,

00:01:13 wow, you're hitting the big numbers.

00:01:15 So yeah, this two to the eighth is a significant milestone. I think

00:01:20 it is pretty cool. Awesome. Well, we're happy to have you here. Thanks for being here. Also, something to do with a puppy I've seen on

00:01:26 Twitter. I got puppy as well.

00:01:29 He's no age old and something.

00:01:31 He's a border Border Collie. But he's kind of golden colored. And he's not in the room at the moment. He's, he's not allowed in here. While I'm recording, I thought it would be a bit chaotic.

00:01:43 Yeah, my puppy sometimes is here. But it's very bizarre the way that puppies socialize around COVID Instead of us being gone. And then we come home, she now knows and understands the expressions I make to end a zoom call. So she'll sit quietly for an hour, as soon as I say goodbye, and zooms like we're ready to go. Let's go. It's super bizarre, but I That's the world we live. So enjoy the new puppy. Brian, you want to kick us off with our first topic here?

00:02:09 Lucas? Linga. He's once again, the developer in residence. Yes, for Python. Anyway, he wrote an article called Where does all the effort go look at looking at Python core developer activity. And I kind of really liked this article. He not only talks about really what what's going on with developers and who's doing what to start off with, he talked about how he got this data. So this is, this is also sort of a data processing, sort of information scraping sort of Article. He's looking at GitHub repository data for C Python, of course, and specifically pull request data. So there's a there's discussion about even using data set, which is nice. We've covered that on the show, and even lists the SQL queries that he has to try to get some of this data. So some of the neat data that he's got, oh, also, since get it's the data is from, from the time when C Python moved to GitHub. So that's February 10 2017. And it's mentioned that it's up through October 9 is when he pulled the data so but all the information is there. So you could grab it yourself if you want, even the little scripts he's got for, for modifying some of the data. But some of the interesting things, the top top parts of C Python that are modified, it's probably not that surprising that see a vowel that C is involved in 259 merge requests, the top top merged file.

00:03:46 C eval dot C Yeah, that's where the bytecode processor is. So yeah, that's where all as the center point or the tunnel everything flushed, if that makes sense. Yeah. And

00:03:56 then goes on and looks at which contributors merged, have merged. And this is an interesting thing, or had been involved in prs. It lists the top he lists the top 50 people but includes some bots, which is interesting. I was

00:04:14 gonna ask that I thought better there's probably going to be up there or Mrs. LinkedIn. Yeah, both thoughts, by the way.

00:04:20 So that this is a I'd actually love to talk to or either me or Michael or somebody talked to one of the core Python people to talk about the different bots that are used and why they're used and because that's an interesting thing of large projects using bots to help out with them. It's interesting the work and anyway, the the non bots. There's a couple people that stand out Victor stinner. And Sarah he or kaka sort Chaka, so apologize for messing up your name, but that's they're really up there. So that's pretty interesting, that they're involved a lot. And then there's a description here. nice note that Lucas writes, clearly it pays to be a bot or release manager, since that's naturally causes you to make a lot of commits. Victor and Sarah he, or neither of these things and still generate an amazing activity, kudos. And also it's not a competition. But it's still interesting to see who makes all these recent changes. By the way, this, that top PR thing was only since the beginning of January 2020. So taking a look at the more recent stuff. And then one of the things that's interesting looking at who contributed where I didn't know this, there's an expert's index. So that was linked, oh, it's asleep. an expert's index. That is part of the Python developers guide. I didn't know this was here. It's kind of lists parts at some parts of the system. But there's blanks. And so there's, so Lucas also listed to the script and pulled out the top five contributors to each file, which is kind of an amazing list of all of the different of, you know, the top five people for every file within C Python. So if this is kind of neat, because if you're gonna do a PR, or you're working on a fix or something, and you're a little confused by some of the code, one of these people might be able to help you out. So it's kind of a neat list. Um, so there's a at the bottom of the article, also, he talks about some of the some of the takeaways from this, I have this right off the top my head, merging how long it takes to merge a PR. So it's hard to draw information from this data, because it's all over the map, the standard deviations are pretty large. But if a core developer merges their own PR takes, on average about seven days to get through the process, give or take 42 days. And, and then core developer, authoring a PR, which is merged by somebody else takes longer, but 20 days, give or take 78. And then community authors up to 20 days, give or take 80. But I mean, I work on commercial projects that are not really that much faster than this. So it's not too bad. Yeah, we think this article.

00:07:15 Yeah. Anthony, what do you think of this? You spent a lot of time inside the C Python code. I mean, you did write a book C Python internals, which people can check out, right?

00:07:23 Yeah, that does how you had to write a book about C Python source code is interesting. Um, first of all, I'm super excited about locash. Being the new developer and residents, I think he's got the right approach. And he's already made, you know, really promising progress, I think in terms of help trying to make the community contribution process a bit slicker. Yeah, that that's that at the bottom, like, just watching the GitHub repository, core developers working on the repository and making changes and stuff from the outside looks looks fairly seamless. My personal experience has been sometimes there's quite like, if your PR gets responded to within the first week, then it probably get merged pretty quickly. And then if it doesn't, then it just kind of ends up in the pile.

00:08:14 And, like another year, right, the average was seven plus, but it could go out at like, another 40 days. And it's probably like, really quick, or really far.

00:08:23 Without that. Yeah, that met that metric is how long they take to get merged, which I guess, requires that they are merged.

00:08:31 Yeah, yeah. So So So I mean,

00:08:33 there's, there's basically just like, loads, people contributing stuff. And there aren't enough people with enough time to sift through it all. And it just makes it really tricky. And the project needs to continue marching forward. And there's people who are dedicated to working on at the core, the core developers, but you know, some of the community contributions are really valuable. I think that's what's promising to me is that the cache is kind of looking at that. And not just taking this role on as I'm going to be 100% core developer. Yeah. Because yeah, there's already lots of other people on the team who are making some amazing contributions. You know, Pablo, has been working on the new pausa. And now he's working on this, like stackless changes in three point 11. Yeah, there's so many things going on at the moment in C, Python. So it's really encouraging to see.

00:09:26 Yeah, it's super encouraging. I think Lucas is doing a good job sort of smoothing out the edges to just make it easier for everyone to go faster, which I think a lot of times in teams are not specifically here. But in general, there's these people who are kind of, oh, that's the person you can ask to make the CI work again, when you break it. This is the person who asked like, you just set up a new machine and remembers how to do that. And like, you don't necessarily get direct credit for doing that work. But without them, it's just way harder. And I feel like he's doing that for C Python. Behind the scenes. Yeah, they

00:09:55 experts index is really helpful if you want to get involved in bug triaging. So That's something that people are open to help with. If you go and boxed up python.org, and you want to help to triage bugs, often what you have to do is kind of look at it, make sure that the person who's reported it is filled in or enough information, and then basically add people on the experts index to something called the nosy list, which is like a cc list basically, on the buttock and then just kind of directing it to the right people. Once you've done that for a while, then you kind of get given like a triage flag in your user. And then if you've been doing that for even longer than you could be promoted up to a core developer. And there's a few people who've gone through that that wrote over the last couple of years.

00:10:39 I think while you're talking, I got two things to share out of the audience. Dimitri Figo. Hey, Dimitri, great to see you here. Dimitri says, Thanks for inviting Anthony. He's someone I look up to right now. Thanks so much, you see, yeah. And Waylon was recently on talk Python. Hey, Waylon says, What a great lineup here also kind of for you, and also Henry Shriner. Hey, Henry, also recently on talk Python says both PRs I've been involved with C Python got in, in about a day, I believe, which that's, that's pretty amazing. That's pretty good. Yeah, that's great. Yeah. So before we move off from this one, Brian could pick one thing I just want to point out, as well as all these cool stats, and these graphs and everything we're seeing here apply to C, Python, because it's on GitHub, right? This, but you can run the same code and run data set from Simon Wilson against it. But against a different repo, I would imagine. Right? And yeah, yeah. So if you run a project, you could probably do a similar analysis for your project. That's a good idea. Yeah. All right. Speaking of good ideas, and it's interesting that Henry is out in the audience, because I feel like we might have been responsible for this article. Clearly, we did not write it we may have triggered is what I'm saying. Mostly me, and not the positive way. Right. So this is a cool article by Paul Ganzel, who is also over on talk Python, talking about the mysteries of date, time and stuff is all sorts of cool things. He maintains the date util package, and set up tools, projects, and so on. Over an upset to 71. So he wrote an article said why you shouldn't invoke setup py directly. And the reason I think I might have some have had something to do this is Henry was on talking about CI build wheel and all the proper ways to build packages. I said, Well, you can run set up, python setup, PY space, you know, wheel or B test or something. And they're like, no, no, no, you could, but please don't do that. And then here, we have this article, like two days later. So I don't know if that was part of that conversation. But it's it's a really good article, talking about the state of building Python packages, and says, you know, look for a long time set of tools and district tools Dist. utils we're the only game in town when it came to creating Python packages, right? So you could do something like, invoke Python set up be dist, Estus wheel and so on. Wait, I see. Oh, so Paul is actually an artist real time. Fantastic. Hey, Paul says I think I did it because Matthew feickert asked for on Twitter. And I got like, Yeah, perfect. Okay, good. So I'm just a coincidence. Fantastic. But yeah, so my, the reason this is extra interest in me, and thank you, Paul, for writing it is. I was still doing this python setup, UI, various commands. And I was talking to Henry, he's like, No, you shouldn't do that. You should do it this other way. And like he said, Okay, well, how should I do? So you should use build the build package? What is this build packages speak of? You know, so we've talked about Pi project automall, a bunch of times, we've talked about things like flit and stuff that will use it, right, that's all comes from Pep 517. And there is a package called Build, you can pip install, build. And then you do things like Python dash M for Module, run, build, and you can say I want an STS, I want a wheel, and things like that. And this acts as a front end to things like setup tools to various backends that do building for pilot, but yeah, all these different things that understand it, right. So it says all direct invocations, Paul says all directive vocations of setup UI are effectively deprecated in favor of purpose built standard based CLI tools like PIP build and talks. So this is quite a long article, there's a lot to go through. It has some interesting history. So in the early days, there wasn't even dist utils and then in python two Dist. utils got added and then set of tools came along. And then there were there's, you know, while they work, there's still problems, like for example, you might have dependencies that you have to install to run the setup, but the way you install stuff and figure out what you depend upon is by running the setup. So what do you do? So an example that would be Cython? Right? So for in the, you might have to import Cython and then the invocation of calling setup, you tell it how to siphon eyes, the PBI X Files, right? But that's obviously not gonna work because you're going to have to have Cython installed, but how do you express that? There's like this chicken and egg problem, right? So let me pull up my notes here. Yeah. So basically, one of the big questions was, why am I not seeing deprecation warnings? Mega download further. Yeah. So if I'm not supposed to do this, why isn't screaming from the top of its terminal? Stopstopstop? Why are you doing this? Right? So there's a lot of commands that still have indirect uses of a dist, utils and stuff. So it's a little tricky to deprecate it. But basically, you should consider it deprecated. At the end of the day, it's better replace your set of commands with tools like build, instead of setup py s. dist, or betas wheel, or talks and Knox instead of setup UI test and other commands backed by projects intended to support that. Yeah, that sounds good to you guys. Where are you on this?

00:15:46 Brian, you go,

00:15:47 Well, I don't use opinion. I mean, okay, indirectly use build. But I basically just use flit. So I'm not writing things with C extensions. So pure Python stuff. They just do a flip build or whatever works fine.

00:16:02 Yeah. So that's kind of do I mean, that's using the pipe project? Tamo stuff, right? Yeah. Yeah. Anthony,

00:16:07 I kind of if I'm starting a project now, then I use PI project Tommo. And the project doesn't have a setup.pi. There were some reasons why I had to add one in the past, but that's mostly fixed. Now. Some other using flip or, or something similar, like poetry. Yeah. And I worked on projects years and years ago, where the setup dot p y was like, just ended up just being a script to run ad hoc commands, like there was a test setup.pi Test, and then there's like, and lint, and

00:16:38 yeah, like, how did you know installing software? Right? Why? Yeah, nothing.

00:16:41 It was just like, yeah, it just ended up being an entry point to do things. And one

00:16:48 happens to be installed. But there's a bunch of other stuff you might randomly do.

00:16:51 Yeah, that's fine, too. It's been deprecated. But it just, you know, C, Python still does. Like the setup dot p, y, and C Python is still used in that way, and called an invoke directly in the source code. This is so yeah, it's good that it'll be deprecated. But I don't think the tooling is quite ready yet.

00:17:10 He's not really saying to get rid of set that up. I just don't You don't run it directly. Yeah, fine.

00:17:15 Find something better. Pip should

00:17:17 do that. Pip should do the discovery for you for pet 517 and run the correct steps for you. So

00:17:27 yeah, absolutely. So a couple of comments out in the live stream is that while recommending build, it's nearly impossible to Google to find it. In races, I love and hate the name. So authoritive. So in Google Mobile, and a bit hard to use and conversation, but yeah, yeah, for sure. So I think if you want to take away from this conversation right at the top, there's a TLDR section that pop it in, click on the summary takes you down to a summary and you can go to a table and it says I was about to type this. What should I do instead? I was about to type setup.pi S DIST. What should you type python dash m build having built installed or if I was going to type setup.pi betas we'll I should type python dash m build a dash wheel or something like that? setup.pi test? Oh, maybe pi test or talks or Knox? We covered Knox recently. With Preston, which was really fun. I believe. Episode, setup. py install. No, that's pip install. python setup. Py develop? No, that's pip install dash E. As well as upload goes back to twine. So yeah, anyway, I think this is the most actionable bit here. Yeah. It's good. Yeah, indeed. All right. Well, Anthony, let's talk about keeping an eye on things.

00:18:38 Yeah. So I wanted to highlight a project, which has been in the works for a while, but they've just recently finalized a specification. So this is called Open telemetry. It's a part of the Cloud Native Computing Foundation CNCF. And it's a cross language, event tracing, performance tracing, logging, sampling framework for applications, in particular for distributed applications. So if you've got an application, which is spread across multiple micro services, and you want to trace things, or monitor performance, or whatever, across all of the stack,

00:19:17 and it's super, super hard problem, right? Maybe you've got a Docker container running this thing, that Docker container calls some other service on a different Docker container. And maybe the logs are even transient, what what are you going to do to know if something went wrong? Where exactly

00:19:30 and if you've got an application that spread across, what if it's built into multiple microservices, then and one of those services has a fault, it's really hard to know where that fault came from. So like, if it just says error bla bla, bla bla, you're like, Okay, so what triggered that error? Which requests from a user, the front end or like, how did the error happen in the first place, and how can I fix it? And also like identifying, I guess, tracking performance across your application and looking at So there's been attempts at doing this in the past, open tracing and open census were the two kind of projects beforehand. So this new project open Telemetry is a merger of open tracing and open census. There's engineers from some big companies working on this, including Microsoft, Amazon, Splunk, Google elastic, New Relic, and a whole bunch of others as well, including actually full time engineers from some of those companies working on this. So yeah, I've been working with an engineer at Microsoft, who works full time on this project he works on, he has a few people who work full time on this, but the person who works full time just on the pisin components to this. So the Python SDK basically allows you to instrument lots of different frameworks. So you can basically drop it into flask or Django or style up. So if you're using fast API, and you can sort of instantly get capture of what requests are going into the application. When there's been a crash, like where the exceptions gone, all the logging information, you can look at performance records and stuff, I've been sharing some examples of where I've wrapped around a fast API app. And then I can see like performance of what's the average request time for each of these parts of the application. And where's that time spent? And even down to

00:21:24 like, this is the data layer section. And this is the business logic. And here's Yeah, vacation or whatever,

00:21:30 exactly. So I can kind of see like a almost like a call stack, but across the actual components of the app. So here's where it came into fast API, here's where it went into database. Like, here's how long the query took, here's how long that ORM took to remodel it. Here's how long Jinja took to build the template like so you can kind of see a breakdown of all the different components and how things are being pulled together. So there's two parts of opentelemetry was actually more than two parts. And I am actually really appreciative of, even though there are lots of engineers and big companies, this hasn't been over engineered yet. And I'm really hoping it

00:22:10 doesn't matter a factory method in here.

00:22:12 Uh, yeah, exactly. Especially because it's like so generic. There's a real danger of it being just over engineered. So if you go on the website and go to registry, and then pick Pisin. On on the right hand side, you'll see the kind of different extensions you can get. So instrumentation is basically like, this is the thing I want to monitor. And it could be like ASCII or async, Postgres, for example. Database, celery, celery, Django, Elasticsearch flask, like there's a stack of app stacks that you can just drop it into, and it will give you all the tracing information. And then there's these things called exporters, which is basically like, once it's got the information, it can send it to somewhere, like data dog, or New Relic or Azure and AWS, obviously, and Google monitoring as well. And yeah, actually, I just worked on recently, if you just want to hack around with it, there's an exporter for rich, that just basically printed on the console. So you can see everything that's happening. And so probably, yeah, yeah, yeah. Yeah. So it's all kind of color coded. It's really nice to see I see. Yeah, I'm really excited about this. I've been mostly trying it with fast API, as there aren't really many frameworks for setting up like decent monitoring and tracing and fast API applications. And yeah, I think it's really promising. So I suggest you check it out. And if you see a framework that needs support, or something, then you know, this is all open source. And they're all accepting contributions as well. And it's fairly straightforward to add, add support.

00:23:48 Yeah, it's got Postgres, MySQL, MongoDB, pyramid, Redis, all sorts of good stuff in here. Another thing maybe worth pointing out here is because this crosses languages, right? There's a Python one, but there's also a dotnet. One, there's a swift one, and so on. Which means there might be scenarios where I've got like, say, a mobile app written in Swift. And then I've got the backend written in Python in fast API or something. And you want to put those together, like because it goes across those languages. Theoretically, that's a thing that could happen.

00:24:19 Absolutely. Yeah. And you can pull that all together, and it would give or request a trace ID. So when a request comes into the front end, a trace, Id could carry across the different stocks as well, which is pretty cool.

00:24:32 Yeah. Yeah. Very cool. This is neat. Awesome. Thanks for recovering. Now, before we move on, Brian, we have a sponsor for this episode. That's cool. Hey, Yay, thanks to a shortcut shortcut formerly known as clubhouse. So they're a really cool project management tool. And they asked the question, have you ever really been happy with project management? You know, how's your how's your JIRA or whatever right? How much are you loving it? So to They basically said most, most are either way too simple for growing engineering teams to manage everything or too complex and just throwing the kitchen sink and you don't want to work with it. You got to constantly tweak it to make it work for you. So shortcut who used to be known as club balance is different. They tried to be simple. It's project management built specifically for software teams, fast, intuitive, flexible, many other nice positive adjectives. So some of the highlights are team based workflows. individual teams can use shortcuts, default workflows, or customize them to match the way they work. Also, organizational wide goals and roadmaps, so these workflows automatically get tied into larger goals and feed into like a bigger system outside the team, good source control, integration, GitHub, GitLab, Bitbucket, all those types of things. One thing that I really love is the web app has hotkeys. So it's keyboard friendly, just like I charm vs. Code, whatever, right? I don't know why more web apps don't have hotkeys. It's not particularly hard, but they do, which is great iteration planning. So you can set your priorities and let shortcut run the schedule, you get nice little burndown charts and so on. So check them out at shortcut.com/pythonbytesciocca.com/pythonbytesbecauseyou shouldn't have to project manage your project management. That does not sound fun. So let them do their job. Now, before we move off to the next topic, Robert Robinson on the audience Hey, Robert, is open telemetry sounds interesting. wants to try it out. I've I do as well. I feel like this is the kind of stuff that you just keep putting off integrating into your system. And then once you finally finally do like, Oh, look how awesome this is. We can see what's going on. And it's actually did you know this part was crashing? No, I didn't know that. Nobody looked at the login. It was just eaten. Evening exception, right? Yeah, tricky. Tricky. All right. Brian, you got the next one.

00:26:41 So pythons got a few built it's not a ton, but quite a few. So this is a there's an article call from two sharks said Wani called understanding all of Python through its built ins. And it's a pretty like, he's got a pretty ambitious goal here to understand everything. But I actually kind of really enjoyed even the first part of it. So I started reading it. I've been especially giving it a shot, I got a shout out to to him. He's been fairly involved on Twitter, answering questions and being involved in conversations. So that's a good way to get noticed. But there's a there's, there's a starts off talking about scopes. So what is built ins are not just things that Python has built in. But there's also it's has a route lot relevance to the scoping rules. And he called it the LE GB scoping rules. So it's when Python if Python sees a symbol, first it looks in the local scope, then the enclosing scope, and the global scope. And then the built in. And built ins really are just anything that's in the built in package. So and that actually that discussion, it's a really pretty good discussion, and it helps it kind of it's good for, especially newbies to to understand, but even advanced beginners sometimes don't quite understand what's going on here.

00:28:05 Yeah, Brian and Anthony both come from C style languages, historically, right? Or at least have spent a lot of time there. Right. Brian do a lot of C++. Anthony, I know you've done some C sharp and stuff. Did the scoping story of Python confuse you and kind of leave you a little uncertain in the beginning?

00:28:20 Yes, definitely. Especially coming from C++, where it's, it's very well defined. And within the curly

00:28:27 braces, it's alive afterwards. It's gone. Right? Like, wait a minute, that's not the story at all.

00:28:32 Right? And also, you've got so many nested curly braces, it could be anywhere and it's not really, there's it seems like, actually, we just don't do that too much in Python, but Anthony probably know better than me. If I've gotten like multiple nested named curly braces, we don't have curly braces, but multiple nested indentations. Does the scope sort of look in outer and outer and outer ones? Is that what non local means?

00:28:58 Non like, there's a non local key word. Which is like a whole other thing.

00:29:05 Everything okay,

00:29:06 I think I was

00:29:07 able to capture basically, yeah, yeah. But yeah,

00:29:11 the globe, the difference in global really freaked me out because really, we were pounded into our heads everywhere, is to never use global variables. But Global's different. The global namespace is not a global variable. It's more like, module

00:29:26 level. Yeah. Or like, like a static variable in a class maybe would be what, but other people might call it?

00:29:33 Yeah, it's not a dangerous thing in Python. So yeah. So I didn't mean

00:29:37 to derail you that much. But I think it's interesting to think about the built in scope, the global scope, these different scopes, because it's such a different world from the intuition you get coming from all the C languages.

00:29:45 Yeah. I'm also just sort of just really enjoyed looking at the language through the scope of built ins. It's an interesting take on it. One of the I will pull out a few things that that he mentions, and one is all the constants. I guess I never kept And before but there's five, there's five constants in Python. True False, none ellipsis and not implemented. I do like ellipses. We talked about that the other day, or I guess, one or two weeks ago, using dot, dot, dot instead gas,

00:30:15 are you going to start doing that?

00:30:16 I've already started doing that.

00:30:17 Have you? I'm all about I think I'm up for it as well.

00:30:21 I don't, I guess I don't think I've ever used not implemented or even looked for it. But interesting discussion. Also, just like I like looking around. So here's a section on compile executive. Well, it's not an alphabetical listing of everything. It's more grouping them together. It's quite a big article. But I would suggest people just like, skim through the list, because it's got a good table of contents at the top. And you can just sort of skim through what he's talking about. And pick a couple and go read about it, you'll probably learn something. So anyway, good shout out to to shore for writing this.

00:30:57 Yeah, this is super handy.

00:30:58 Yeah, some of the built ins are super handy. I often have a Python repple open just to do things that would otherwise be annoying to do on a calculator like converting hex integers and vice versa, there's a hex built into which is pretty helpful he doing Yeah,

00:31:15 I use hex a lot because I'm often looking at looking at data elements in a in a packet or something like that, and trying to convert those. So

00:31:26 yeah, very nice. Nice fun. Before we move on, Anthony, how do you feel about dot dot dot?

00:31:31 I should have called it yada, yada, yada. Yeah, I think that will be ways ellipses. Come

00:31:37 on. Yeah,

00:31:38 I'll use it for type stubs. And that's it. So

00:31:42 there's tons of use pass, right? And I feel like you know what dot dot dot kind of says, I kind of know I'm not ready to put stuff here yet.

00:31:49 I think we should start calling it sort of ellipses. We should call it Dun dun dun.

00:31:56 Exactly. Alright, how about we hand out some awards? Okay, best open source software of 2021. Now, who gets to vote on this? Who gets to say, well, InfoWorld in this example. So this is accordion fo world. But there may be other rules. But I found this to be pretty interesting. Actually. I heard about it, learn about it. Because Sebastian Ramirez from fast API said, Yay, we've been voted one of the best open source projects. So this is called the InfoWorld. bossy. 2021 awards. But what I thought was interesting, he's going through here, there's 30 different projects that won awards. I'm like, Oh, that's interesting. Oh, I didn't know about that. Oh, check this out. Yeah. So I wanted to touch on a couple. So there's some things that may or may not be interesting to you, like svelte, which is a JavaScript front end, like view or react that's not interesting to me, about mini cube, mini cube is pretty interesting. Mini cube is a way to run like a baby Kubernetes cluster read on your computer, just say mini cube start and guess what, you've got a cool little cluster running. So that might be really helpful for Python people. Let's see, Pixy zoom back over here. Number five is fast API. No, we're all fans of fast API. I think it's really awesome that it one and two, or maybe even a quick shout out to have they described it as Django flask have been leading the Python web frameworks for years fast API now deserves to be mentioned in the same breath, I agree. calls out the main features, which are its truly modern, truly modern Python web framework written from the ground up using type hinting async and high speed components by default. That's true. I also really liked that they pointed out that while its name indicates it's primarily for API's, it's also really good at writing more conventional websites with like Jinja templates, or even chameleon tip. So where you go, and then you want to add or Breiman editing?

00:33:42 Well, I just think that I think I think you're partly to thank for people considering fast API for not just API's, because you've been beating that drum a little bit as well.

00:33:51 Yeah, thanks a bunch. I even created some decorators that make it really easy to like render templates as response values and stuff. Yeah, that's fun.

00:33:57 Okay. I tried out the chameleon thing. The one you wrote, actually, yeah, cuz I'm working on this first API course with you at the moment. Yeah, that's gonna be fine. So yeah, I'm a big fan of FOSS API. I think it's brilliant. And testament to Sebastian, really, because he really kind of builds on something which is quite complicated. But he makes it seem so effortless. And just working with fast API, like, the documentation is excellent. The framework itself, it's just, it's really logical. And, you know, it's really easy to use that. In terms of like the I've been keeping an eye on the popularity of the different frameworks and stuff over the last few years. And Django flask are kind of neck and neck can happen for a while. And fast API now is the third third most popular according to the metrics that I've

00:34:47 Yeah, as to where to third, third most popular Yeah, yeah, I know.

00:34:51 JetBrains are doing the new to latest. Well, PSF developer survey. So yeah, we'll see kind of what happens in this Is this year's number but I'd imagined fast API would still be the third most popular. So yeah, it's pretty brilliant. So yeah, I think it's a good it's a good solid pick, in terms of writing like full apps with it at the moment, like, there's still a lot you have to do for templating. Like you, you pretty much have to like build in a whole bunch of other templating stuff. And picking an arm moment isn't isn't easy. But there are some brilliant ones to have a play with.

00:35:27 Just a couple interesting shout out to Yeah, that give, like the similar and even integrating with pedantic, which is sort of the natural exchange of fast API. So you want to give a shout out to tortoise you say,

00:35:37 Huh, yeah, that's my favorite. So far I've been I've used try out six different ones. And tortoise, I think it's my favorite at the moment. So

00:35:47 I know, well, maybe next year, we'll be talking about the award for sequel model, which is built on top of identic plus sequel Alchemy by Sebastian as well. So who knows? A lot of good ones out there. But it's good to see a lot of the excitement and new ideas coming on there. All right, what else we got a crystal don't care. Windows terminal, I think is actually pretty interesting. Windows has traditionally been not on par with its terminal experience. And I think you know, the windows terminal PowerShell seven, oh my gosh, all these things come together nerd fonts to make it quite an amazing place

00:36:18 to be actually, Windows terminal is an open source project.

00:36:21 It didn't start out that way. But now it is. Yeah. Okay. Yeah. Yeah. So that's a good one OBS Studio if you're doing video stuff, that's amazing. There's a bunch of stuff in here that may apply to people that you can all check out that are interesting, but I don't want to cover them. Basque, though. Dask is a big data science one. Scale computation, like pandas, operations of what? Not across cores across clusters across compute that's larger than the RAM you have by streaming it off disk and all sorts of interesting stuff. I have no idea what my browser's jumping up and down, we'll have to ignore that. I'm not in control. But I'm sorry. This seems like you know what, I'll tell you why this is happening. I'm I'm looking up and I see I'm not running my VPN, which would block ads. And so there's some kind of ad off off the screen that's just running. And if I turn on my VPN, we'd be good. I blazing SQL is another great one. Rapids from Nvidia. And I feel like there's one more I want to give a shout out to hugging face. I don't really think about that. Now that was it. So I'm just going through that list. I thought I'd call that a lot of neat projects, in addition to just fast API. Yeah, any any of those jumps out at you guys, either. I've screened by

00:37:29 lots of lots of stacks that I don't use. So, team. Yeah.

00:37:34 There was a bunch of ml stuff, though, which I don't use, but I think would be relevant to people who are listening. Maybe we're not too extra. Yeah, Michael. No, no, I know. I just closed it because the dumping was driving me insane. Okay. All right. Anthony, you got the last main one. Right.

00:37:49 All right. Yeah. So I think the cache is taking up like half of this episode. So we're gonna go back to the caches blog, and evolve the discussion that was started last week on this discussion. Yeah, yeah. I'm a bit mildly I'm excited about this. I think if this happens, it's probably gonna be the biggest thing that happened in C Python in the last five years, in my opinion, and this being the GIL removal, this be the GIL removal,

00:38:17 but not me, not the girl I know. Exactly.

00:38:21 Yeah, so no girl, or let's just go and no girl. Not. So almost seemingly out of nowhere, some grace, who works at Facebook, specifically, like submitted to the core developers, this research paper and a working branch of a Gil Deus Python. And just quickly recap, I guess on what that means. This, this article was pretty heavy in technical detail and the stuff that's yeah, as stuff that's being discussed in the article org, again, is pretty complicated. And as you didn't understand a lot of it. And I've written a book on the Python compiler. If you read this, and it's confusing, don't worry. So the GIL is basically the global interpreter lock. And it exists as a way of making Python threadsafe when it comes to keeping reference reference counts of specific objects. So if you create a Python object, for example, there's a counter of how many things are referencing it. Because you don't want to just destroy an object. And then, like you're working through a list of objects, for example, but then one of the items and in the list just disappears, has been D allocated, or is a port because everything is a pointer in Python, like that pointer just goes nowhere. Or actually, there's a there's a magic pointer that Python uses when it D allocates objects, which I know from very painful experience. So you don't want that to happen. And if you've got multiple threads, kind of working with the same objects all at once you don't want them to credibly hard To keep track of what's happening, threading is great because you want you can have multiple threads working on a, on a computer and the operating system can do the scheduling of which threads one on which cores and which CPUs etc. So in theory, like it's a way of making your Python applications a lot faster, if you write them to be multi threaded, but pythons basically built in this lock, which says, okay, in the evaluation loop in C eval, don't let anyone else run instruction whilst this thread is running the instruction.

00:40:36 Yeah, with the exception seems like it's on top. Yeah, yeah, it seems like this is a thing to control, threading. And really, it's just a thing to protect memory management, but it has this huge blocking effect for threading, right?

00:40:47 Yeah, so it's the thing to basically make the reference counter thread safe.

00:40:52 without blocking, so it's fast,

00:40:55 without locking. Yep. So you don't have to wait to add an income. So to give you an idea, like if you run the GC by hand, or just see how many 10s of 1000s of objects are just created, like all the time in Python applications. So what Sam had put together, so seemingly out of nowhere, but if you go through the article and what he proposed, he's actually been working on this almost full time for two years. Which is astonishing. And it's, it's a real feat of engineering, to be honest. So kind of what he's proposed is a way of removing the Gil. So that there's essentially, like almost two ways of keeping references into objects. And one of them is specific to the local, that local thread. And then there's also another reference count, which is for other threads. So why is that important was let's say, for example, you've got a Python dictionary with values in it, and then you have multiple threads are working on the same dictionary. Like that's, that's a complicated problem to solve, like, how do you make sure that keys, like the references to the keys or the values don't disappear? And he does actually go into detail about how that's been handled. And also, objects like Python dictionaries are not thread safe at the moment, either. So, you know, if you have two threads, working on a dictionary, adding values, for example, to dictionary, do you have to lock the hash table. Anyone who's worked with multi threading, and in low level languages, knows that like the complexities of complexities of doing it, so what he's proposing is that we're in his prototype, he basically replaced the Python memory allocator with another one called me Malik Malik, which is a sort of thread safe memory allocator. It's actually a Microsoft Project. But I think it could have been any other thread safe memory allocator. Writing memory allocators is very involved, for them to be performant and efficient. And then basically, objects get tied to the thread that created them. And then there's a non atomic local reference count with the owner thread. And then there's basically a separate mechanism force would be slower, basically reference counting from other threads. So single threaded performance is equivalent with this proposal, but when you're there's still a performance impact of multiple threads working on the same object, which is to be expected. But there's a little overhead for that. Yeah. But to give you an idea, like in his note, he implemented a few like common problems as a multi threaded implementation. And he said, If you give it 20 threads, it runs 19.84 times faster than it would in just regular C Python. So like, yeah, for certain types of problems, this can have enormous impact in performance. But it is really complicated. And that's why I think it's an interesting discussion to see. Okay, how do we how do we get from this is a cool idea to this actually being released and being used by, you know, millions of people and I don't know, pythons like running on, like a satellites in space and stuff. Like, how do we go from a fork that someone's been hacking around with to something that's like, production ready, and this is kind of what the article goes into? So like, you know, how would this work? Would it be a feature flag? Which version would we target, and at the moment is targeting 3.9 Alpha three, actually, so it wasn't even the release of 3.9. So he needs to do some work to update that to the latest version of 3.9, which is three point 9.7. And then I think the target release, if if the core developers agreed to kind of like explore this, if that was three point 11 I don't think anyone wants to touch the Python four topic.

00:45:06 And it's 11. It's like a year away with that. Is that even possible? Or would it most likely be a couple years? Yeah,

00:45:11 yeah, it seems pretty soon to me. And I, like sub interpreters, for example is like an experimental feature. I think the issue with this is that it's that the volume of changes is so broad, that it's quite hard to kind of like have it in as a feature toggle. So like sovereign turbulators was in as like a, like a hidden package that you can use. And it's experimental. Whereas this is like, changing everything. Yeah, well, everything. But like, it's a pretty wide sweeping change, and changing the memory allocator is a massive change. So question is more how can we introduce this softly, I think, and have it either as a feature flag. And what would this break, and the main thing is that C extensions haven't really had to worry about thread safety, because the GIL kind of handles that for them. So the C extensions essentially, would, would need to if they use the mechanisms that are here, that's fine. But C extensions often have other objects, which they haven't used the reference counter for. So they've basically kind of like allocated their own objects and variables and stuff like that, that would not be for thread safe, and they had just not have had these kind of collision issues in the past. So introducing this with that potentially break some extensions. So you know, how could that be introduced? Gently? I think what was interesting in the article is there's a mention of NumPy. And NumPy, has actually done a lot of its own work already on basically kind of making it thread safe and more scalable. But the one of the tricky ones is pi bind 11 is caught out in here as being anyone who's using PI bind 11 potentially might have to make some decent refactoring to support this if, if it was supported. And then in closing, Lukash who wrote this review of posts, some said, you know, the team had been really impressed with Sam's work and invited him to join C Python project as a core developer and he is interested in Lukash is going to mentor him. So I think that's brilliant, like, yeah, that's brilliant. Just to come up with this, this over, like, if two years is like, a really short amount of time for a problem that people have been trying to solve for. Well, over a decade. See? Yeah, very exciting.

00:47:33 Yeah, this is great. I think we have a record number of core developers in the audience right now. Yeah. So some great comments from Steve dour. Hey, Steve. The big thing needed here is a path forward for native extensions, they could all need rewriting or else importing them could re enable the Gil, that discussion is happening now. It's very early. And Henry Shriner also has similar comments that they're considering that but yeah, and Henry also says, we would be up for refactoring pi bind 11, if needed, I believe is also of interest. But this is exciting. There's a lot of stuff coming here. I think another thing in addition to the No, Gil, is I got the sense that Sam had added several other optimizations that were independently worth adding to Python.

00:48:18 Yeah. I, one of the things I I know that the there's there's a lot of tension around whether or not to do four Oh, but if it ends up being that you all have the extensions need possibly tweaked, then that might be then it's an API change. And I think, the shift to the

00:48:38 writer, yeah, well, we should just go to Python five, so no one's worried about four. And we'll skip the whole conversation and be fine. We'll

00:48:44 do it Angular JS will just like, make a big fuss about going from one to two and then just just all of a sudden they're on live version 10. Oh,

00:48:52 yeah. Just go crazy. Yeah, yeah. Now, this is fantastic. I'm actually having Guido van Rossum and Mark Shannon, I believe, on on Monday on talk Python to talk about like performance and future and stuff. And I'm sure we'll talk and stuff a little bit. Yeah. So it'd be a lot of fun.

00:49:08 This was Guido suggestion. When I asked internally, if anyone wanted to share anything. This is what he sent over. So

00:49:14 Okay, fantastic. Yes. I'll try to take that up with him again. All right. Well, Brian, does that bring us to our extras?

00:49:20 We are at extras. Do you have any issues? Gang? Now

00:49:22 you go first. Tell us about Python? Well, first right.

00:49:25 call for proposals is open for us. Python. I'm pretty excited about that. I already read wrote down like six ideas of things I might want to talk about. So and of course, there's no guarantee no matter who you are. There's no guarantee that you're going to get in but it's fun. It's fun to come up with proposals anyway. And it's fun. I'm definitely going so I'm pretty excited about that. And anybody else is going to propose to Anthony, you're going to try to talk there.

00:49:51 Yeah, I've been thinking about the what I'm going to put forward. I want to put together a talk on performance. antipatterns only fun propose that for for next year. Yeah,

00:50:02 because of your name like Aunt Anthony.

00:50:07 Also, Jack section yet Brian.

00:50:11 If anybody doesn't know, I wrote a book and then I rewrote it. And it's, I I'm finished with it actually. So it's not out yet. But I'm pretty excited that I'm finished the all the betas, this beta seven out, has all chapters in it. So if you're, if you're waiting for it to be done, it's done. But it's not in print format, that's going to happen in January, February. So pretty excited to get that done.

00:50:35 I'm happy for my copy of pecan Brown. I'm pretty sure I paid for the last one as well as you, I paid you in cash. So I'm gonna give you a copy of my book.

00:50:44 I'll bring I'll bring it at least maybe we can just swap swap? Yeah, that'd

00:50:48 be great. Yeah, Anthony, I got your book over there. I'm not sure what I can trade it for though. That's awesome. Congratulations, Ray. And if you got any extras you want share?

00:50:58 Yeah, I'll be shipping fairly soon. The JIT compiler that I've been working on called pigeon, be going version one in two weeks. So it's a Python, Python three point 10 JIT compiler is, uh, you basically just drop it into C, Python and turn it on and then run your code. And it just compiles it in the background. And in some cases, makes it a lot faster, and in other cases, makes no difference. But yeah, some of the benchmarks up and doing, like, float, floating point math and integer math like makes a massive difference. So

00:51:38 yeah, like 60 scientific side of thing, right? Yeah.

00:51:41 So stuff that you would otherwise think I'm going to redo this and siphon or something like that. You don't have to add all the extra stuff. You just got to turn it on. And yeah, everybody benchmarks now 60% Faster than standard C, Python. And yeah, some of the other benchmarks. I've got a 60% upwards.

00:52:01 reciprocal. So this work was Sam and the no Gil, does that throw a spanner in the works? Or?

00:52:09 It would make my life quite hard for a few weeks? If it gets merged? Yeah, so yeah, that could be interesting. And I'm also working on a secret project, but I'll share that, you know, few weeks. Yeah, pitching does comment in the chat pigeon does use psychic build. Which I did want to call that out when we're talking about setup pui earlier, because, yeah, so putting uses is all C++. And it uses C make, which generates make files. So yeah, and it uses socket build, which is a C make extension, I guess, around Python extension modules. So that's how it kind of compiles it's really cool.

00:52:53 It's like a build. Yeah. And I recommended using build earlier, Henry, on our episode together mentioned that if you have external non Python code, like C code, or Fortran or whatever, then instead of build so I could build to be a good option to build the binary bits for that. This is the other question I wanted to ask and Steve dour beat me to it says I, he states it as a assertion I was gonna say the question I bet once pigeon ships you'll get people are interested in helping ad optimizations? Yeah. So it's one thing to JIT compile, it's another to just then straight up, run it versus go, oh, we can inline this method. Oh, and I see what can do this. And then like, we could actually reuse this field, because it's not used below and or early, free, all that kind of stuff. Where's the optimization of that? Look?

00:53:35 Yeah, I've got like, on the documentation page as a optimization section. And I've kind of written up a lot of the optimizations and how they work assertions that they make and compromises and stuff like that. So yeah, if you're interested, there's there's some info on there. But yeah, I'd love love more help on this, that learning curve on the product is quite steep. But I'm trying to make it easier. I mean, there's a compiler. So like, Yeah, like that. And I just added arm support as well. So m one, Apple M one and got tested Linux, arm 64. And in theory windows aren't but I don't have access to any machines to test the windows one. And I could only take the

00:54:17 view one if you periodic testing and reach out. I got a Windows 11 running on arm.

00:54:22 Oh, really? Okay. Yeah, maybe I'll take you up on that.

00:54:25 Very cool. All right. I have a couple throw out there as well. Python Software Foundation. On Twitter, the PSF analysis, we're happy to announce the Python developer survey 2021 Take part in it. This is the one that is then hosted and data analysis is done by JetBrains. So but not influenced by JetBrains. So I'll link to that in the show notes. Be sure to get out there and take that enri audience I have something as well. The feature for what you said the other day on Twitter, I said after pythons bytes mention Yes. On yesterday's show. I asked for a new feature and it's already in Pip pip PIP X PIP X run py py command line a wheels, and it. Basically this is added to py py command line. And it'll tell you all sorts of cool stuff like the details of the wheel. So you could run PIP x, or basically run pi pi dash command dash line wheels, NumPy however you run that, and it'll tell you like for NumPy on Mac OS 10, universal data signatures or binary distribution, what versions are updated, supported? How old is it? How big is it? Same thing for Linux, architecture, arm on Windows, and so on, and so on. So you get like, just as cool graph using rich of like tables of tables telling you about the status of wheels on different platforms straight out of IPI, which I thought was cool. Nice. Yeah. So that's pretty good. So Henry, thanks for making that happen. Also, on the last episode out in the YouTube, not live comments that we got a message from, I want to make sure I give attribution from Baja RAM, and said, we talked about was it t bump, T bump that was at T bump for bumping the version. He said, Oh, that's cool. I use bump to version, which is another option to do some similar types of things could work with, with or without source control, all kinds of stuff. So fun one to check out. And, Brian, you sound really good this this time, like last time, I thought maybe a bee had gotten into your microphone. What was the story of that?

00:56:23 It's a long story. Basically, I had to throw a mic. So I had a bad mic, and a bad cable. But I have a new

00:56:30 wave. Two things that are connected together are both broken at the same time.

00:56:34 The buzzing I think was definitely my cable. I think there was a feedback thing going on,

00:56:38 but getting an SMS

00:56:41 but the then and then I was examining everything in my in my AUDIO chain and just get rid of the stuff that wasn't working. So

00:56:50 yeah, all these sound great new mics even better than before. So like a phoenix your back.

00:56:56 Nice image, too.

00:56:57 Yeah. And then have you got your Mac Pro, yet?

00:57:00 No, I just bought a Mac a couple years ago. I'm not gonna buy another one right now.

00:57:04 Anthony, are you using the ARM version? Now?

00:57:07 I don't have a spare F $4,000. Yes. For another, another lab. And also, I was like, I don't really need a laptop because I never leave the house. So like. Yeah, that

00:57:17 is a big problem. I mean, I am so loving my Mac Mini and my 4k monitor that I'm just like, I don't wanna leave. I'm really alright. Well, that's it for the extras. I think it's time for a joke. Maybe Roberts got the first one out there. Can't complain about Brian. It's all about the hair. Got to see the live stream for that one. But yeah, I agree with that.

00:57:35 Next next Halloween, I want to go because it's I got a ways to go.

00:57:39 Anthony, are you up for doing this joke? Yeah, yep,

00:57:42 I got it on the screen on my screen, or you got any else? Yeah, obviously yours. Alright. Okay, so I got a picture. So I like to describe it. I couldn't stop laughing at this or I sorry. So this is photo explaining to Gollum. And there's Gollum sitting at a computer looking quite confused. Looking at a picture of the ring. And it says by now 1/8. And as, right, yeah, as in Syria. And Florida is basically trying to convince Gollum to buy an NF T of the ring instead of actually having the ring. And underneath

00:58:16 is my digital precious.

00:58:19 So underneath it says so you can't own the precious physically. But you can pay to have your name listed as its owner in an online distributed database.

00:58:31 Only what is it like 400? US dollars? 500. Australian, something like that. I know that a lot for a listing.

00:58:38 I don't I don't own any NF T's yet. Nor have I sold any.

00:58:42 I don't plan to either.

00:58:43 I mean, I feel like we're missing an opportunity to brand. Some of our former episodes. Maybe like, I could just take screenshots of Brian laughing at different times out of the live stream and then like turn it into a stream of NF T's that will retire upon.

00:59:00 Oh, yeah. Let's let's do that. Yeah.

00:59:05 Fantastic. All right. Oh, that was a good one. Thanks, Anthony. And thanks for being here as on this big episode. 256.

00:59:13 Yeah, I felt like we might be going slightly over this. This is not really a Python byte. This week is more of a poison lunch

00:59:19 sandwich.

00:59:21 At the proper meal, a Python dinner but it was a good one. We talked about a lot of stuff and a bunch of great people in the audience gave us like really good inside information on where things are going. So yeah, so thanks. Thanks, right. Yeah. All right.

00:59:35 Thank you

