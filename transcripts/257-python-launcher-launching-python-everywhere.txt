00:00:00 Hello and welcome to python bytes where we delivered by the news and headlines directly to your earbuds. This is episode 257. Recorded November 3 2021. Hates November cool. I'm Brian Aachen.

00:00:12 I'm Michael Kennedy.

00:00:14 I'm more or less a car buff.

00:00:15 Well welcome Morley. We haven't even really meant other than a few seconds ago. So can you tell us who you are?

00:00:22 Yeah, my name is moralistic carbo. And I met Michael Kennedy a couple of weeks ago at a PI Bay event in San Francisco,

00:00:31 a fantastic 5am. And for people who cannot see it, they should go to pixabay.com. And just see the graphics is the conference outside at a food cart area. So awesome. So great to see you there.

00:00:41 Right. And so I help Grace law organize that event. She and I've been working over the past couple years. And it's it's it's fantastic community. And I've been in sub Cisco for the past three years. And I'm actually I work for the Defense Department. And I do I lead a software development team. And we work on optimizing software processes. And on the weekends, I'm a martial pilot. So I do fly and I do teach student pilots. So that's, you know, speaking who I am.

00:01:11 That's so awesome. That's cool.

00:01:14 Oh, my side jobs a professional pilot. Yeah. Including

00:01:17 jets, right. Yeah, I

00:01:19 did fly. A couple of corporate jets.

00:01:21 That sounds so fun. I think that's so neat. You know, it's good to get away from the keyboard and the offices, especially when with COVID happening in, everything's harder to get out around. Like, you really get away, you get up in the sky.

00:01:35 I do get away. And but you got to be careful, right? Because you go in across different ecosystem, right? So you got to make sure that you're well protected that you take in all the precautions that are required to not get sick, but it's an adventure. I do like to get around

00:01:53 a teddy election since you invited James Bond, I think I think we may have actually Yeah, how's it? Where do you park your Aston Martin? No, seriously, let's, let's kick this off. Brian was something also more like a you also were involved with Django stuff, right? In San Francisco?

00:02:07 Ah, yes. Just a little bit. By the way. First, I do want to say thank you very much, Michael. So many years ago, I was overseas and I was in Qatar at a time and I got started learning how to code. And Python was the language that was was was, at least from my perspective, you know, something I can use in my data science perspective. And working with you through talk Python to me was extremely helpful for me, learning how to code, just just being with a community. And I think that was extremely helpful. It's, it's gotten me, it's gotten me in different places, all because I learned and federal learn how to code and got involved with your podcast many years ago. So thank you

00:02:47 for that. That's amazing. Thank you so much. It really means a lot in, it's easy to forget, Brian, and I just sit here at our desk and chat about stuff. But it really helps connect people, especially if they're new, or they're coming from places where there's not a big community, they can drop into it, it helps people get more integrated, quicker. And I think

00:03:07 yeah, and it's just the way you guys talk, right? I mean, it's just you're talking to me, as opposed to talking to an audience or, you know, a group of large, you know, you know, proud or something like that. So, you know, I'm listening to a podcast, and I'm going, this is relatable, and I can actually go out and in and do a little bit more research in a package on a topic that you guys are talking about. It's really good. This

00:03:30 fantastic speaking packages.

00:03:32 Let's talk about Django.

00:03:33 Yeah, let's let's start with Django here. So I don't do that much Django. Do more on the microframework side of things. But Django is super important. And when cool stuff happens there, I want to make sure to give it a shout out. So we're Django for I mean, a beta, but still Django for morlais. Have you been tracking this? You excited about this?

00:03:53 I am tracking it. I'm excited about it. Yeah, absolutely. Yeah. Yeah. Super cool.

00:03:57 So Django 4.0. Beta one was released. I feel like it was Django one for a really long time. And then Django two and then you know, you know, blow the doors off, go 3456. Right, we're gonna be at Django. 20 cent enough, right. But there's really good news. The beta one, zero means feature freeze bug fixes, only type of thing is out. And if you're interested in this, you can try it out. Now. notable changes here for what's coming on. First of all, it's only compatible with python three, eight and beyond, which is pretty fantastic. And if you want older support as an all the way back to three, six, you got to go back to Django three, series, three, two. So I think that's pretty interesting as well, the rapid adoption of new Python, right? This is like two years of Python and not more. So things that are new. There's stuff about time zones, which I'm not going to bore you with. But database stuff is cool, right? One of the things that I think Django is really renowned for is its web front end, plus database integration, right? Wouldn't You say somewhere? Oh, yes, absolutely, yeah. Yeah, I think it's the not just the well, you have an arm that's built in. But you've got the admin sections that know about the models and all kinds of stuff. We're actually going to come back to that as well, later in this episode. But one of the new things is functional, unique constraints. So like, I can only insert this record, if there's not already one that matches, say, the email address for a user. So now you can do is you can create functionally unique constraints with expressions and database functions. So for example, you could have an index, which is a unique constraint where you have the lowercase of the first name, the lowercase of the second name, the sending, I guess, for the index, but that doesn't really matter for the constraint. And then you can give it a name like first name, last name must be unique constraint. So that's pretty awesome. Right? You can say, I can't have two users with the same name. I'm not sure how practical that is. But you know, as an example, that makes good sense. Yeah, poor and poor Joe Smith, or Michael Kennedy, for that matter, like, probably getting enough make it in after a couple 100,000 users. Let's see they have the script, password hasher. So you do not hopefully you're not storing raw passwords. Every time I see a website that says your password cannot be more than eight characters. I'm like that better not be a VAR char eight field. I don't know what you're doing. But I'm starting to get really worried because the size of the output of a hash is always the same size, regardless of the input. Anyway, so new password hash, or that's more secure and recommended over what was previously the default a PB k d, f two, right? It's however, not the default, because you have to now install open SSL 1.0 or above, which is not super high, but it's still not super new version. Alright, then Redis. There's now a dedicated built in Redis cache as the caching tier. So you can set up caching in Django and say, cache here. Now one of the options is Redis. Yes, you could do that previously. But now it's like a built in thing. So you don't have to do that outside of school. Yeah, that's cool. Right? That's very cool. Yeah. And then template based form rendering. So enhanced customization of forms, form sets, errors list and so on using the template engine. So pretty cool. Not a huge bunch of changes. But they all sound really nice.

00:07:18 Yeah, the support the support of which Python versions is pretty big. But I mean, come on people. It's an application, you can pick your whatever Python version you want.

00:07:26 So now that's right out there in the live stream, Alvaro. Hey, says, I guess that dropping versions helps to reduce the number of wheels to build and also to test right probably. So CI is probably faster, you can take advantage of some of the newer things, and just count on them being there, which is great. Yeah. So speaking of versions, Sam Morley. Hey, Sam, great to see you again. So getting my boss to agree to drop Python 3.4 was a task. That's it's been a while since three four is out. I actually remember I think where I was. I was out in Redlands, California, that came out which is pretty interesting. Anyway, I don't know why that came to my mind. This stuff exciting to you more ladies. Someone does more Django than probably Brian or me.

00:08:08 I know. It's very exciting to me just just being able to see just the iterations of Django is very, very helpful to the community. I started with Django three. So this is this few. The Russians have been very helpful. Especially Redis. Absolutely. Yeah,

00:08:22 the Redis is exciting. Yeah, for sure. Right? Well,

00:08:25 um, I have to apologize. I don't remember who pushed us this way. But somebody on Twitter said, Hey, you guys should maybe talk about pi once in a while, like just by itself, that P why the application. So pi or pi dot exe, it's a the Python launcher. This is been bundled with python three, three. So it's been there for a while. But I've kind of to be honest, I kind of ignored it because it's a Windows only thing. And I work in multiple. I do work on Windows, but I also work in Mac and Linux and multiple environments. So I really don't want to change my workflow just for one. So but the idea is, is that you just type pi and it picks the latest version that you have installed on your system. It's kind of neat, but I don't didn't really get the get the feel for it. But then. But then Brett cannon wrote this thing called PI launcher. That is the same thing. But it works on Mac and it works on Linux. And it works on a whole bunch of other stuff like Arch Linux, and really anything that Russ can run on I think it works on which is like almost everything. So this is pretty this pretty neat. But why is it neat? So I'm like Still, why did Brett spend time making this work? And so I started changing my workflow for this. And I kind of say it's kind of life changing. The big thing is I don't have to care where pythons installed anymore. So I have this set up on my on my Mac. I've got it set up on I included it in the install on Windows. And then you just say, pi. Like for instance, you can say pi dash dash list. And you get like all of the sets, I don't have the example here, but you get all of the versions listed out. And it lists it tells you where they are to, but you don't really have to care. And in the pie launcher version on Linux or Mac, it shows the paths right away. On the Windows version, you have to say list paths, but it's still pretty easy if you want to know where they are. But basically, you don't have to care where things are anymore. So and I also don't have to care where they are in the path, like in my path variable. So the Python version I want, is it the first one, the second one did did somebody did I install something and mess it up, like if i pi install Python 310. But I also want to test on three, six, so I installed three, six later, where does that show up in the path, I don't have to care anymore. Because my workflow is two is mostly around virtual environments. So I say, like Python dash, M, V, and V. And I create a virtual environment. And I create it with the most recent Python version, no matter where they are in the path where they're located. And then if I want to test like, three, eight, something on three, eight or three, nine, I can either I can just type pi, Dash 3.8, or 3.9. And then it just automatically runs that version. So I can run a script in python three, eight, easily like that, or I can run it with, I can create a virtual environment, a three, eight virtual environment really easily. And then, then I still basically I don't have to care where things are installed anymore. And I love that. So yeah,

00:11:37 the other thing that I really like, sorry, if I missed you hearing you say this is once you create the virtual environment, subsequent calls to pi will use that environment long as you're either in that directory or in a subdirectory ever under it. So you don't have to activate the virtual environment, like long as traversing up the hierarchy hits a dot v, v and v directories. Okay, that's the that's the most appropriate Python.

00:12:03 Does it work though?

00:12:04 That's what it says like see the code sample right there. Look right underneath the, what's the next paragraph, right? It says subsequent uses a PI will then use that virtual environment as long as it is the current or higher directory. No environment ACTIVATION REQUIRED.

00:12:16 That's pretty cool.

00:12:17 Yeah, that's very add.

00:12:19 It's so nice, because that way, you can set up your file system. You don't have to remember to activate it like certainly not common, but it is not also uncommon that I'm like pip install this. Oh, it went wrong place, you know.

00:12:34 Yeah. Configuration. It's extremely important. Right. So this is this is very good. Yeah. Very good.

00:12:39 Yeah. And Xerox machine. Hey, says what's the main difference from this to pi EMV? I think that that's one of them. Right? Pi NV you've got to do pi EMV run. You've got to like start the shell. And it's kind of fun. I think this one is sort of, it's more like Node packages or node modules like as long as they find something they're like, Okay, that's the project I'm in. Let's run.

00:13:00 Yeah, DPI, EMV does these shim things to change which which you can set up which one you find and I just that, that makes it weird to me. It's makes my my system have state that I have to remember.

00:13:14 I I've activated python three, seven. So now that's it stays that way. Yeah, totally change that. Right. So

00:13:19 anyway, this has changed my life for the better. And it's, it's great. So Thanks, Brett, then. And now. I use it on Windows too. So

00:13:28 fantastic. All right. Up next. Oh, I almost closed. Close what you're talking about more? Yeah, you're on the data science side of the world. Yeah. Now. So bring us some data science news.

00:13:39 Now this is good. Right. So this is this state of AI report. 2021. It's a pretty extensive report, it comes out every year, just surveying across the world, really just the trends on on data size. And so the very top there, it has the actual report. It's a it's a PowerPoint version. But in this report, it highlights just the the need for transformers being used not just for NLP, right, so forth, you know, looking at text, but it's also looking at audio, it's also looking at video and it's also looking at like, you know, protein transcription, for example. So it's transformers are going beyond what they were intended to be, which was just primarily just NLP.

00:14:25 Right? Yeah. Give us a quick definition of a transformer. This is yeah, like you say, out of the natural language processing, right of ML, right,

00:14:33 right. So it's a it's basically a sequence to sequence so it's taking text from say, English and converting it into an equivalent text into French or something else, right. So having a natural language processor transformer that can do that in a rather efficient basis, is the whole idea of transformer space. It's basically take in a in tokens or this sequence from one language than other language. And so what this is saying now is that it isn't just constrained to just NLP right. So now you can use it for looking at large datasets that are audio or large datasets that are, you know, imagery, and then converting that into something that's that you intended to do stick in those models, transfer learning, essentially taking the transfer learning from one model into another set of models, as essential, what is this talking? The idea here is that you're moving away from just an LP that you use any for computer vision assays on there, and even protein structure prediction. This is important to me, because I actually, Michael, I don't know if we're still early, I spent some time in Qatar and I was I was studying Arabic there, right? So I would spend like hours just just going through like transcription datasets and stuff. So now, you know, having a transformer that can actually do that faster and maybe more accurate than, and in the past I think is extremely helpful for somebody like, and the hugging phase transformer from a Python perspective, is an extremely popular package on GitHub. And most people it's got about 53,000 likes at this point. Oh, stars at this point.

00:16:17 Well, that's, that's comparable, the Django and flask level of pop? Yes,

00:16:21 yes. Yes, yes. And therefore in partnership with AWS. And so you know, you can spin up resources to enable a VST use Huggins face transformers. And again, don't transformers have models that you can use for transcription, you can use them for a vision, a computer vision, or even like it's saying here for protein structure predictions. Yeah,

00:16:43 cool. I'm very excited about what ml can do for medicine, and biology research, I think, you know, machine learning, and like recommendation engines and all sorts of stuff, have good sides and bad sides and all kinds of things. But on the medical side, it seems like just mostly good, right? If you can say, actually, we can cure this disease, because we've understand how to create something that will bind to this protein, because now we know its actual shape. Yeah, that's great.

00:17:09 That's, that's incredible, right? So predicting those shapes for fruits in the system. Before I studied chemistry, in college, and in a little bit of biochemistry, I was in college. And in knowing just structures for proteins is like, extremely important. But it takes a long time to model those. The structures right now you can do to pretty easily on our Asian transformers, get to the thing.

00:17:31 Now, there's probably less well known ways around more like physical chemistry as well, right, like trying to understand different kinds of batteries and things like that, potentially, you know, don't get all the press. Well,

00:17:41 I'm thinking that maybe we're not too terribly far away from universal translators, and you're in air pods. That would be cool.

00:17:48 Yes. That would be actually pretty amazing. I mean, we're pretty close with Google Translate. You can speak to it, and then show it to someone and their language, and then they can, I can think you can make it read back and like, you can really clumsily do it. But yeah, you're envisioning it's just like natural conversation, right? Yeah. Yeah.

00:18:05 and have it be in their voice too. Yeah. But that's

00:18:08 pretty cool.

00:18:10 Yeah, you gotta wait five seconds for to calculate a deep fake then you can start talking.

00:18:14 Well now but like, our our kids are gonna be like using these things. Probably. Yeah,

00:18:19 no, I think you're totally right. They're absolutely awesome. Yeah, good pick. They're morally Great. Before we thank our sponsor on just give a quick shout out to John Sheehan's comment here that Python launcher the PI thing the brain spoke about. Looks like a nice package and a better alternative to the PI alias I created on my Linux laptop. Oh, man, you and me both. I, my DS HRC is full of alias this alias that many of them started with P to do something with Python.

00:18:47 Yeah, I mean, I used to list like pipe like makeup aliases for PI three, eight by three, nine just to and then I couldn't remember if I had a.in it or not. Was it 3.83? Anyway?

00:18:58 Yeah, yeah. Cool. All right. Before we move on, though, I do want to tell you about our sponsor shortcut. Thank you shortcut formula clubhouse for sponsoring the show, check them out at shortcut, comm slash Python bytes. Or Brian, do you know what else that people can do? Now? What we've started adding chapters, Chapter images, Chapter links, so I guess you could even click the chapter link right here in your podcast player or in the podcast show notes. So that's pretty awesome. But however you get to them, you know, thank you to shortcut for sponsoring this episode. They've built simple project management tools that grow with your engineering team and don't get too complex but are not too simplistic. So some of the highlights include team based workflows so individual teams can use shortcuts, default workflows, or they can customize them organizational wide goals and roadmaps lead, like the overall organization define workflows and then tie these smaller team ones into the larger workflow and kind of get a big organization wide view VCs version control integration. So works with GitHub, GitLab and Bitbucket, and it can tie them pay your items in your project management back over into what's happening there. And you can even do that from the command line, which is cool as almost all web apps should have, but many don't. Shortcut has a bunch of keyboard so you can use their power bar and use hotkeys all over their webapp to just zoom around because like someone like Brian, who would rather be in vim mode and not take his hands off, the keyboard can cruise around this, he does iteration planning will automatically schedule how that should go along. If you don't want to customize it, so give it a try over at shortcut comm slash Python bytes, because you shouldn't have to manage your project management. So yeah, thank you shortcut for sponsoring the show. Now, let's go back to Django. And I'm going to tie this together. So morlais has a background in Django, Brian, you have clearly a bunch of testing. So let's talk about testing. Django models. Okay. Okay. Yeah, so one of the problems you might need to do in your test is you are going to create some data models. And then you want to do stuff with them, right, you want to pass them off to a function or whatever. And so that can be a bit of a hassle. So I want to tell you about model bakery, which are smart fixtures for better parenthese Django test. That's not quite there. But for better tests for Django code. So the idea is, it's like, Faker or mockery or something like that, but for Django, ORM models, and it specifically understands things like relationships, and whatnot. So pretty cool. You can come over here and do things like you've got your Django model defined as it does, right? Dariush models has fields, which are columns, like email fields, character fields, and so on. And then when you want to use it, you just go to the baker and say, make a, you know, in this case, it's like a shop, online, e commerce shop Tuesday, shop, purchase history is the namespace of the class. And then guess what, it'll populate it with customers and emails and all kinds of stuff. That's cool, right? Yeah, this is very cool. Yeah. And then you can also set up model to model relationships. So you can say, I want you to, when I create a purchase history, for example, it also has a products. So you can say make the model to model relationships for me and mock those out as well. So then, in your test, you can work with your purchase history object and say, dot products. And then you know, loop over them do count, whatever. It's like a collection of sub related models that were baked up for you. You can even go and say, prepare, when prepared something to bake. When, when you ask somebody gives you a product, I want you to create a product of five of these. And then as you make a purchase history, also use those five as the related object instead of guessing or randomizing or whatever. It's cool, right? That's very cool. Very cool. Yeah. So if you're out there writing tests for Jango, specifically, the relationships I think, is where this is pretty interesting. But it's kind of interesting all over, right, it'll, I suspect, it'll do things like create emails, if the model says, here's an email field and integers, if it says, here's an integer field and just take care of that for you. It's very

00:23:16 cool. So is it? Is it another, like a another fake system? Or is it using fake or something under the hood? You know?

00:23:24 Yeah, that is a good question. What kind of project? I guess I don't know. Like Alright, so let's go check out the requirements here. It's just Django. It has the only requirement is Django, Django. It doesn't use like, baker or anything like that. So I'm guessing it's its own thing.

00:23:44 Nice, isn't it? Yeah. Cool. That's very cool. Yeah.

00:23:48 Thanks. All right, Brian. You gotta cover this next one, for sure. What?

00:23:52 Yeah, I'll cover this one. Yeah, that's one of my goals.

00:23:56 So good comeback.

00:24:00 So Ned Batchelder is the maintainer for covers pi. Excellent tool. And he's, he's great person to have at the helm there. But he, he's says that he's got had requests for, like one of the things you can do with coverages, you can incorporate it in your, your testing tool, chain and CI and stuff to say, the coverage has to be at a certain level. So you can say, SB 100%, if you want to do that, where you can say, well, at least what is the current percentage, and we want to make sure that we don't drop it. So like, let's say you're at 75, you want to make sure that we don't drop below 75. But he's had requests for per file thresholds, which is an interesting idea. But instead of giving us per file thresholds, he's he's got like this proof proof of concept thing called goals.py. And it's just a snippet that you can download yourself and try it out. But it's a little tiny script, but it it uses the coverage data after the fact so cover just generates a report. And then you can do things on it. But this, what this goals thing does is it kind of acts like another stage. So you can, you can set up these in your pipeline to check for these. And if, and it'll have an exit code that indicates to your CI system that it failed. But, for instance, you can say, all of the, I want all my tests to be 100% covered, but my source code, maybe 85%, for those, and but like maybe the HTML part of it, I want to really want like, all the code that is dealing with HTML, that I want to make sure there's really tested. So I want 100% coverage there. But in general, if you can 90%. So he has an example set up to do just what I said, of that. So there's these glob groups that you can say, you know, the 85% for everything, that's a python file, except for the tests, and then have a

00:25:53 different stress status. And so the way you basically do is a CLI thing. And then you pass in, yeah, file patterns, like star.pi, or star HTML startup UI, or whatever. Right. And you can even do knots, which is interesting.

00:26:07 Yeah. And one of the things he's talking about is just he wants to, wants to have people try this and say, Is this kind of does this satisfy what you wanted? Or is there something else that's needed? Do we really need per file? I actually would hate to have per file? Because, yeah,

00:26:23 yeah, one quick way to like accomplish per file is just to put the file name as the pattern, right? I mean, so like, this is a superset of per file testing? Yeah, potentially.

00:26:34 But I believe that he's probably right that there's, and there's a link in here, just say, if you want to comment on this, go to the original feature request and do a comment. But there, it's probably right that like, it's not really a profile thing. It's that there's different sections of the system that you want to have. Yeah, no specifics. Or, like, for instance, with a knot, you could say, well, everything except for there's this one file that I know it's a problem, but we don't care about it, maybe exclude now,

00:27:00 I'll go over who wrote it quiet, nobody understands it, we're not touching it. To us about it, we have no intention of touching it. Or maybe it's

00:27:09 the splash screen, like, you know, some things throw up a splash image. And, you know, really, if that's wrong, who cares? sort of thing. But

00:27:17 anyway, cool.

00:27:18 Yeah, it's a good one, I find, and I like the generalization of it. Well, then that Alright, morlais. So there's a lot of stuff about economic news these days, especially d phi d phi m, and coin and

00:27:32 NF Ts. Right. So it's already out there.

00:27:36 Yeah. So my brother is an artist and worked for a long time doing just like insurance stuff and project management stuff and is now started getting into NF T stuff. Because finally put in his master's degree in art to us, which is fantastic. Yeah, it's a crazy world.

00:27:51 It's a crazy world, and just the thought about like, making digital assets, volume digital

00:27:58 scarcity, right, like,

00:28:00 digital, as you could call it. Right. Right. Right. And and over the past, I mean, I've been looking at this over the past six months or so. And I'm just curious, I'm just, you know, where does this go in terms of like, how can you use digital assets as scarcity, but you know, provide value eventually. So artists can actually kind of get paid now or, or, or, or make make use of their they are making that make it available out there and they get value from it. So a cerium dough is like one of those blockchains that pretty much I think about, I want to say 80 to 90% of all NF T's reside on if they're in blockchain, or if it's popular. Yeah. And so of course, the language there is solidity. But to interface with the blockchain. There's this library called Web three the poi, right. So instead of instead of using JavaScript, you can use with web three, WA to actually interface with Ethereum blockchain. So basically, you can write smart contracts there, but you can also get information from the blockchain itself or post information into the blockchain. So this is something I found in a mature walking into an athletic board I shared with the community.

00:29:14 Yeah, it's interesting. Yes. So there's a theorem.org/python. For Python tutorials. There's a quickstart. Right? So yeah, right. If

00:29:23 you were allowed, you can see what it takes to actually get it install and use it for some of the protocols that are required, though. It's actually pretty good. I've used it just a couple of times. I'm still playing around with it, but I think it's a instead of using something else, if you familiar with Python, this is a very comfortable transition if you're curious about blockchain or Aetherium.

00:29:44 Yeah, so you could build your own platforms and your own integrations, not just own a theorem coins,

00:29:50 right. So you can do the old swap contracts, right? We should just logic essentially, send ether or CB ether or or if it's NF T's again, how do you in face with a blockchain with cryptography. So, though, web 3.0 web 3.2 I think is extremely helpful. Oh,

00:30:09 yeah. Yeah. It's neat to see Python applied in some different places. Yeah.

00:30:13 Everywhere. Everywhere, right?

00:30:17 Yep. Cool. All right. Awesome. Yeah, that's a great find. Pretty cool. Yeah. Very cool. Brian, it's time for extras extra. What do you got for us? Would you line up for us here?

00:30:26 I actually don't have any extras today. No extra. There's

00:30:29 no extra extra extra read all about it. No. All right. I'm sure I got to cover here. As you might imagine, so I want to give people an update on McFly. I mentioned McFly. A little while ago, McFly. Sweet, it's allows you to install it. And it's kind of like reverse search of your shell commands be that bash, Z shell fish, whatever. But way better, right? You get like an emacs interface to your history. And you can delete it, you can edit your history. So if you miss type something and you want to save it, or you see like, oh, Jesus put the password in there, I want to get that out of my history file, you can do that, too. You just hit Ctrl RF you install it and it gives you this is awesome, interactive view. I just wanted to tell people that I've been playing with this and totally loving it like, now I've taken it first spin for a while. And I really, really dig it. I've even set up the fuzzy matching. So it doesn't have to exactly match what I've done in history, which is pretty cool. So I can now with some experience, give that a thumbs up. Nice. Nice, nice. Also a couple exciting things about Python web conference, if you're looking to speak somewhere, and you want that somewhere to be on the internet, you should check out Python web comm it's like a five day conference. It's one of the biggest virtual conferences going these days, I think. And it's interactive presentations or live presentations over the internet, and then chat and so on. So we've had Calvin, one of the organizers of it on before. And the the news is they've extended their call for papers out into November, November 15. So you got 12 more days, maybe 11 If I'm slow releasing this one. And also, I'm gonna be talking about flask and htm X over there, because I'm still psyched about that. So that's next year, early next year, but people can check that out. What else have I got forest Brian. So the new MacBook Pros like the super expensive macbook pros have come out. There's an interesting review. I'm not super thrilled with it. But over ours, they usually do a pretty good job. But I do want to read a fun quote from it. And they say rest assured if you didn't like the direction that Apple has been taken with the MacBook Pro for the last five years, this laptop feels like an explicit apology for all that the result is is the best lot best laptop money can buy for many use cases, provided you have a lot of money. But one of the things that I've found pretty interesting is the power supply for that thing is 140 watts. Oh, wow, that's insane for a laptop that you carry around the power supply. So I came across this thing called inker Nano 265 Watt. And it's it's, if you put it up next to that's not it's, it's well hold on. It's barely bigger than the brick that used to charge an iPhone. I can American break not a UK break, which has got to be giant because the size of the plug. Right, but it's like super small and light. And yeah, it seems like it's not enough. But with my I got a MacBook Pro Max, and I've been using it and this 65 Watt thing will charge it just fine. So unless you're doing like machine learning, or video exporting, or something that completely nails it like this will charge like 25% and an hour. Even though it's supposed to take 140 Watts, you can give it this little tiny thing. So I haven't done enough to really give it 100% Like Absolutely, that's gonna work all the time. But my new plan is to travel with this tiny little thing and walk along US BC or Thunderbolt cable. Interesting, right?

00:33:50 That's really interesting. Yeah,

00:33:52 could you put two in there?

00:33:54 I don't think maybe it'll catch fire. If you do that. I'm not gonna do that. But like here you have the picture. Like it's like less than half the size of the the charger, which is pretty interesting. Yeah, that's a 60 watt charger right there, not the 140 Watt charger 40. Right. And finally, I want to say that if people who have an in one on one MacBook Pro, you can pretty much not have FOMO about this thing. Like as far as I can tell my Mac Mini and my much more expensive MacBook Pro are exactly the same speed. Oh, really? Okay, as you almost always except one thing I found is for outputting video, I found that I could re encode or I could encode the videos for a talk by them training more efficiently. I re encoded the entire library, which is like 20 220 230 hours in multiple formats. It took 14 days of compute time not I got around to do it in 14 days, like start it finished 14 days later. And it's actually three over three times faster with in one max. So So that's like three or four days. Yeah, it's only five days, which is still a long time. But it's way better than 3014 days. Yeah. So I think also this will have a really interesting knock on effect for ml more than Right, right. It's got like the onboard machine learning block, and it's got a 32 core GPU. I think there's a lot of stuff that's going to be coming along. That's pretty interesting there.

00:35:20 That's No, no, no, it's absolutely that you absolutely right, I have a friend who works for Google does the same thing with that I do. And he and I were talking, I have just the did the little version of MacBook Pro. And I wasn't going to wait for another one to come out. But it has a lot of the components and model capacity that I need to do my work instead of just putting yourself on like AWS, and now you can run them locally. And it's extremely powerful. So this is this is a good paper once and when

00:35:52 the new stuff is quite it's seriously impressive, as Sam has set out there. I totally agree. Fair presser. Yeah, more than anything else you want to throw out for people while you got the mic.

00:36:02 You know, I just want to say thanks to you. And Brian. Right. So again, I've been listening to you guys for a very long time. And I've come this far, partly because I've been listening to you guys just the encouragement I think you guys every day, every time I listen, you guys, you guys, you guys are talking to me not to a large group of audience, I think it's extremely helpful to see you guys be part of the community. And shout out to pi pi Bay in San Francisco. Those guys are real Korean, I call thanks for coming out there and talking. This was a great trip three weeks ago, as abuse goes. I was brilliant. So well. Thank you guys for the work that you guys do. And we'll continue to listen to you guys and be part of the community.

00:36:38 Yeah, thanks. Yeah, really appreciate that. Thank you. It's, a lot of times we put stuff out there, and there's not a lot of feedback. But you know, people are out there listening, then then you meet folks and talk to them you like actually, that it has an impact, which is really great.

00:36:50 You know, for me as a particularly impact, right? So like, like I took a journey and that it's I am at where I'm at today, because again, partly because of the work that you guys do. I'm listening to you guys doing a lot of research and following up on a lot of the topics that you guys have on the show. So it's it's taken me a long way. Because this gives I listen to you guys a lot.

00:37:09 Thank you so much. And I pray and we pray for a joke with a smile.

00:37:14 Well, well, I just wanted to comment that maybe the next version of Mac Book Pro might you might have to charge it in the laundry room, because that's the only one with a plug. That's strong.

00:37:26 Yeah, it's a 240 volt. Yeah, that's right. Yeah, it's but the thing is, it almost never runs at that, right. It'll go for like 1415 hours. It's only if you're doing like insane stuff. Also, you can plug in three, Thunderbolt USB, three things. And each one of those it will provide up to 15 watts of output from the laptop. Oh, wow. So I think it's also trying to pass Yeah, I think it's trying to pass through 45 watts. So it needs a charger that can account for how much does the Mac need plus 45 More watts, right? Because you plugged it into all these vulnerable thingies. Okay, anyway, I've been trying to think about why it really someone that so Hi, Chris May is gonna hook us up to like, a level three DC fast charger charge. I think I'm five minutes on the car. Alright, so this one comes to us from the variable x k CD. And it's talks to us about programming standards. How standards proliferate CAC chargers, very timely character encodings, instant messaging and so on. I'm talking I'm thinking network protocols. Remember, this is a follow on from the joke of what is soap. And rest and what the heck was wrong with soap? I know. GPRC is better than rest. Ah, the torture never ends. Okay, so this is a follow up from that. And here it is. A man or woman developer say you're talking says situation. There are 14 competing standards 14 Ridiculous. We need to develop a one universal standard that covers everyone's use cases. Yeah. Soon. situation. There are 15 competing standards. Yeah, yeah. Yeah.

00:39:12 The only thing going in the other direction is cellular standards. They seem to be a really blessing. So but Wi Fi is going crazy. Anyway, it's just one standard, but it comes out with a new version about every six months.

00:39:24 Good thing. They don't bake those into hardware and chips and stuff. Oh, wait.

00:39:30 That's a good thing they do. I'd be out of business if they

00:39:32 didn't fact like I think the testing never ends. Fantastic. Yeah.

00:39:36 Thanks, Michael. Thanks, Morley. This was a really fun episode. Yep.

00:39:39 Thank you very much. Thanks

00:39:40 for the invite. Appreciate it. And thanks, everybody on the chat and on on the stream for watching.

00:39:46 I'll Bye bye.

00:39:47 Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYD s get the full show notes over at Python bytes FM. If you have a news item we should cover just visit by them by sight FM and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording, just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

