00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 261, recorded December 2 2021. And I am Brian

00:00:10 Aachen. I'm Michael Kennedy. And shall Gentlemen,

00:00:13 welcome shell, could you let us know a little bit about yourself? Yeah,

00:00:16 I'm a Research oceanographer. So I studied the sea from space. And I've been doing oceanographic research for NASA for a little over 20 years. I do almost everything using satellite data. So I never have to leave the comfort of my used to be office. But now,

00:00:34 office at home. That sounds so fascinating. is a

00:00:37 fun, super fun. Cool. It's like maths and physics and computers, all mushed together. It's like all my favorite things.

00:00:45 And oceans.

00:00:46 Yeah, it's fantastic. And oceans. Yeah. So that sounds like such a cool job. Welcome to the show.

00:00:51 Well, Michael, what do you got for us to start?

00:00:53 Well, let's talk about our clone. So this one was sent into us by Mark Pender. Now, our clone itself, I believe it's written in rust or something. It's not Python. So the story here is not oh, here's a cool thing created with Python. But it is a cool library that I think will be useful for Python developers. Okay, so this Auckland thing syncs your files to Cloud Storage, I let me basically see my summary. So imagine, you wanted to put some files in AWS s3, or you wanted to store something in Azure Blob storage, or there's actually 40 Different places where this can go. So like Backblaze, backup, box, Citrix, ShareFile, Dropbox, Google Drive, let's see some stuff with OpenStack, cloud, all these different places, and formats, or even just web dev, and whatnot. So if you want to either read or write files to that location, what you can do with our clone here is it will basically mount those different locations as just something on your hard drive, right. So if you want to write to s3, you can just, you know, write to a file, like a with open slash s3 slash, wherever it goes, and then write to it with Python, or set up some kind of cron job that moves stuff. So if you're trying to move like large data for data analysis up to the cloud, so then you can connect it to a notebook, or you're trying to move files that are the back end of your website or your API through s3 or somewhere, then you can just copy files over sync different locations, like I said, mount it as a drive. And it has a lot of cool support for things like if the file transfer gets interrupted, it'll fall back to the last one that was working, and then continue uploading. So it can be kind of interrupted and unstable, and whatnot.

00:02:47 So cool. Yes, like, we know, when I first moved to the cloud, it was so frustrating having to figure out whether I was using s3 or the you know, the Google commands or the Amazon commands. And all I want to do get my data to where I can

00:03:03 use it. I'm so so with you. And sometimes it's like, well, how do I copy files here? Well, yeah, here's our API. Like, I don't want an API finder, or to the Windows Explorer and draggy, Droppy, the file, can I do that? Like, no, no, no, you can't do that. No way. You can run our app, maybe? Yeah, this this is cool. Yeah. I'm glad you like it. That's awesome. I think it'll allow people to move data around from especially it seems relevant to scientists who need to put a bunch of data in the cloud and run it. But then they might be want that data locally, and keep it and stuff.

00:03:35 And it's really frustrating when your expertise is in something else that's not in computer science. And like, everything I pick up is because I'm only forced to learn it. And I don't want to learn the Amazon API. And I don't want to learn the Google API. This like gives me maybe one tool that I can just be cloud agnostic, and move data around in a way that I'm already comfortable with.

00:03:54 Yeah, I agree. Yeah. Here's the thing. I was like, Yeah, so the virtual backends wrap, local and cloud file systems and play encryption, compression, chunking, hashing, and joining. And it looks after your data preserves the timestamps, stamps, verifies checksums, all the time, transferred over limited bandwidth, intermittent connections, it can be restarted, checks, the integrity of files, all those kinds of things. So you know, like, if you're out, I know, you don't leave the house anymore. But if you're out doing research, and like on a boat, and you needed, like, you had this rickety connection, you know, maybe you could get stuff uploaded well this way. So I think it's neat.

00:04:31 How do you like configure it with you have to put in all your cloud stuff?

00:04:35 Yes. I suspect you when you set it up, you have to give it like, let's see is your Amazon if that's Amazon drive, I forgot that that existed. Okay. Let's see. You've got to give it like your, your AWS keys and stuff, of course. Yeah. But yeah, they have a whole configuration section. I'll let you give it here to set it up. It looks like you create a config file for it, I think but yeah, pretty neat. That's right. Yeah. Brian, what do you think?

00:05:02 Well, so I'm trying to forget like, even for something for a mental model, is this like a Dropbox without version control? Or do is a completely different space?

00:05:13 Well, I mean, it does have some tie ins to there, right? It's got, like Backblaze, and things like that, which is just a pure backup system. I think it's just trying to match like, how do I move files around to the cloud. And you could also, you could move it between the cloud, right, you could mount two places and copy from one to the other. Like, I could copy from Citrix ShareFile over to box and either, which I really know how to do

00:05:36 now. Oh, even has Dropbox is one of the configs. So yeah, but but different at this is actually pretty cool. I like it.

00:05:44 Yeah, very cool. Let's see him out in the live audience says I like this very few people really need to know or care that s3 doesn't have real files and directories, for example. And Sam says, it's funny, my group was just talking about how to transfer a huge amount of training data to our compute resources earlier today. I'm guessing that's machine learning, training. Very cool. When you

00:06:05 still have to go to Amazon or Google and set up the bucket. Right, you're not spared that particular pain. It just like tried to click public until it's public, but not to public. That's my approach. You still have to do that. But this seems like a really nice solution.

00:06:23 Yeah, for sure. It does. I guess over to you, right. Yeah.

00:06:27 So this has been suggested several times by several listeners. So thank you, everyone that sent this in. Oh, I'm on the wrong thing. Today, I wanted to talk about Czech wheels. So Czech wheels is a Czech wheel contents. So the idea around it is that there's so I'm often using flutter. And it kind of does all this for me. But there if there's other backends that you can use for building wheels. And if you if you configure something wrong, it might get the wrong stuff in there. So by wrong stuff, it's you might have like a PI cache in there or, or you might deliver your tests with your wheels. And you know, you know, that's just extra space, you know, it's really need that maybe your documentation doesn't should be there. But maybe it shouldn't be depending on that. I don't think that that actually, I went on a tangent with the documentation. I don't think this checks for that. But so there's a it's just a pip install build tool. And then you can run check wheel contents, and you can give it a wheel. But wheels are often long. So I just when I've been trying it out, I've been just giving it my dist directory. And it just looks all the wheels in there and checks things. So what is the check for though, so it's checking for things like making sure that you don't have any byc or PIO files in there, because you shouldn't have those in your wheels, checks for duplicate files, because maybe you've got, I don't know, copies, your directories or something. And there's actually a lot of 1012 1314 15 checks or something like that I'm counting really quickly. But there's what I really love about one of the things I like about this is, there's a lot of things that you like if you if you configured it totally wrong and your wheels empty, it'll check for things like that. And yeah, you probably could test this and try it. But it would be, it'd be nice to actually have something in your pipeline to automatically check for these things. It's really fast. The other thing I like is the readme for this project lists of has a very good description of all the all the checks, and why something like that could go wrong. So if for instance, you happen to have your tests in there, but you don't want them in there, well, how do you fix that? Or it also says if you actually do want your tests in there, how to go about putting it in there. So the check passes? So interesting project.

00:08:48 Yeah, this looks really neat. I think if you're going to be creating a package, you definitely don't want to be releasing things that are not intended to be in there. I was looking through it. If it's possible to say, you know, check for certain files to make sure that they don't get in there. Like I'm thinking like a settings file that has some sort of key, like an AWS key, like we were talking about or something,

00:09:13 can you so I don't make lots of packages. So what's the wheel? When you're using that term? Like what does

00:09:18 that mean? It's it's the thing that you pip install, it's like they used to be just tar balls, they used to be GCS and whatever. But what we do now, for the most part, his or hopefully, his wheels are not, it's for if it's just pure Python, it'll be the same for everything. And hopefully it will be but it can also specify that it runs on Python two or three and that some of those sorts of things can be built into the name and what operating system because if you've if you're building on like, say, just simplifying the world, a couple versions of Unix and and Linux and maybe Windows and Mac, and then also the new Mac with a different architecture. Those will all be different wheels. But when you so when you pip install it, pi pi and PIP will download the correct wheel for your operating system. And, and that makes it so that when you're installing something, none of you don't have to compile anything, it just, it just brings it all down. So it's a cool format.

00:10:27 Yeah, it's especially important for the scientific community because there's so many weird libraries that have to get compiled with things like Fortran as we were joking about. And so wheels will basically contain the precompiled version. So you don't have to have like a Fortran compiler on your machine to pip install it or whatever it just downloads and unzips. Really quickly, without all that steps,

00:10:47 I was told to a simple mental model of the difference of old and new is the the old style with the setup tools. And stuff would often have a whole bunch of stuff that you download, and then you run set up to to like build some things and redo things. Whereas a wheel is closer to mostly just a zip file that just unpacks things and throws it in your site packages.

00:11:12 And Sam also adds, you can also package extension modules and wheels, which is their greatest strength. Right, cool. Cool. All right. Right. Is that it for the check wheel contents? Yeah, I'm done. They're right on. Alright shall take it away. All right.

00:11:27 So I thought we would talk a little bit about weather and climate data, Python. And we're really trying to get more eyes on programmers involved in weather and climate research. And the data, I think, used to be really hard to get weather and climate data, it was in these really weird, obscure formats that only scientists knew how to read. And they only wrote Fortran routines to read them. But now with Python, it's becoming really, really easy to get these data. But the first thing is like, where do you get the data. So I'm just going to show the open data at Amazon and AWS. But really, you know, Google has the equivalent in the Earth Engine. And Google has all sorts of open datasets. And that means that they're free egress, do most of these you can get, you can access data for free. And Microsoft has the planetary computer, and they're building up the same thing. And like you can see lots of people are putting data on here, like NASA has a Space Act Agreement, there's the NOAA, which of our weather agency, the Big Data Program. And so like, you can look for data, and one of the biggest datasets that I work with is era five. And if you just sort of type in here, and it brings up the data set, and you can click on that, and see they have it in these two different formats. So one is R and one is net CDF. And most people in sort of data science, work with, you know, SQL databases, or maybe they're doing CVS files or tabular data. So weather and climate data is a little different, because it's three dimensional. So there's these different data formats. And really, almost all of the weather and climate data now is currently in this net CDF format. The goal is, let's just write a Python library and make it so you don't care about the format, right? The data formats, the people who produce the data should care about it. But as a user, what we want is we want anybody to be able to use it, and do anything they can think of. And so that's the sort of X ray. So X ray is a Python library that is designed for sort of three dimensional structured data. And all the data has labels, and it has these things called data sets, so that it organizes your data for you. And to read it, you just sort of say open dataset.

00:13:41 Nice. It understands the these formats. Yeah, and

00:13:45 like I'm gonna bring up a little example here, but this era five, I mean, this is like, I think it's 35 terabytes of data. So I took this off of the AWS. Why didn't take it off. I ran it on AWS. And I said, Where are you going to put it? Right? Yeah, that's it. I mean, used to be that like to get this data set, you had to write a script, and then you would download it for like three months. And now it's just on AWS, which is like mind blowing, right? Like I log on in a few minutes later, and actually have access to all this data, which is so cool. So like, with X ray, I'm going to run this cell. And basically, I just import X ray as XR. To read the data. I just say like open data set. That's it, it figures it out. And it'll read almost, it'll read a lot of different formats. And then it just has your data. And so this is like a really big data set, and it tells you all about it. And you can look at the different data that it has. And, you know, sort of the goal with this is to make it really really easy for anybody. Like let's say you want to look at you know, sales patterns in San Francisco or you want to work ship traffic or you want to look at how weather is evolving. at your location, like you don't need to know about the data anymore.

00:15:03 Yeah, fantastic. Just just know how to work with NumPy. Like, yeah, stuff in your notebook. And that's all you got to know. Yeah,

00:15:11 yeah, it's all built around pandas and NumPy. And like, if you want to, like, let me find a really easy example. Like, what if I want to plot the data set? You know, I just type got plot, right? Oh, wow. And then it like labels everything and you understand what you're looking at and what day it is. And you can use cell and isol. And just sort of like pandas

00:15:36 almost looks like an ocean just right there. It's yeah, to longitude. And then I guess temperature, right?

00:15:42 Yeah. And so this is like, you just typed plot, and it actually tells you exactly what you're doing and what it's plotting and what the color bar. So what are these different colors mean? And you can do a spatial plot like this, where you do it in time. Or, let's just pick a particular latitude and longitude. And the nice thing is that you can actually just tell it, your latitude and longitude. And you can use Google Map to look up your latitude and longitude and then bought it and it says, Oh, I'll make a time series.

00:16:13 That's pretty cool. Wow. Yeah, I remember just struggling so much, getting into programming and having to work with custom file formats, out of like research projects, like, What do you mean, I have to read this binary file? This is gonna be so hard. Okay, here we go.

00:16:27 Yeah. And then like, you wanted to read a different binary file, like start from scratch, write all that code again. And like X ray sort of took all of the back end work that all the people at the data archives did with, like, getting everything in the same format and labeling all the data nicely. It sort of took all that work and just said, well, we'll write one library that builds on all of that and can read anything.

00:16:50 Yeah. Awesome, great recommendation, a couple of pieces of real time follow up. Sam Moore lay out in the live stream says X ray is great. I did an example of using it to open a net CDF file in my book, and I'm learning about his book, applying math with Python practical recipes for solving computational math problems using Python programming and its libraries. That's awesome.

00:17:11 It looks like fun,

00:17:12 actually. Yeah, so Ray linked to like sai pi. And it has all a lot of statistics and math built into it. So you can actually compute trends in one line and all of that.

00:17:23 Yeah, nice. Quick, I also have one other piece of follow up here, Brian, I don't want to panic you all. But right here in Portland, we panic at the software company. And I just want to give a quick shout out to this thing called transmit here. This is what I actually used to get stuff up into, into and out of s3. And it also will let you talk to Backblaze, Box, Dropbox, Azure, Google Drive all these places as well. And it's basically like a, like an old school FTP program where like, on one half it has your computer and the other half it has, whatever cloud storage is that you're working with there. And maybe you could even put the other half not just your computer, but somewhere else as well. So if you want just like a UI, not something like our clone, but just a UI that I'd strongly recommend this thing. They don't sponsor the show or anything, but I definitely love it. I use it all the time. All right. In my next Actually, yes. Yeah, I think so. I am, I am Number four would be, I want to talk about this announcement from JetBrains. Being one of the bigger tool companies, tool builders for the Python world, they came up with this thing called JetBrains remote development, and buried at the end of this is actually what I think is the lead got quite buried here. But we'll see. So they introduced something that I was not aware of called Remote development. So the whole idea of this is basically what if, instead of running, like pi charm, take for the source for any of the IntelliJ stuff, but let's say pi charm, instead of running PI charm locally on your machine, you could just given an SSH destination, let's say, and it will go over there and run pi charm, the server or the sort of logic bits over there, but just have a light front end to your computer here. So like a lightweight, if you're on some really wimpy laptop, and you wanted to access, like a better server at work, or in the cloud, or in like shells example D or some massive data set instead of far away from some massive data set. So you could just directly talk to it and so on. So yeah, it's super cool. You just basically give it some SSH thing. They also say it's good for things like if your laptop gets stolen, what data goes with it, you know, if you just keep the data somewhere else, right then like, just revoke the SSH key and nothing's nothing's bad. You can also set it up so that it'll create pre configured environments. Like when you connect to it, it'll automatically give you something with like that say conda set up and all the right libraries pre installed in that one weird see thing you got to apt install to make sure it works like it started But that just all configured from different things. So anyway, that seems all pretty cool to me. I thought it was pretty neat, though. I think it's free if you set up your own server, but then I think it costs money if they provide you the server, right? So kind of just like firing up a VM for you on your behalf. Alright, you ready for the buried lead? Scroll scroll. So here you can see it's an example of just like connect over SSH, or you go the JetBrains space, and they all create one for you. Right? But here's the buried the lead, they announced this thing called JetBrains. Fleet, which is, as far as I can tell, unrelated, I think it'll connect one of these names. But is, is a another thing. So if you click down at the bottom, or is there something about learn more, if you go to this, it is a complete rewrite of the whole ID story over at JetBrains. And basically think VS code, but from JetBrains. Yeah,

00:20:48 I'm interested in watching this. And I just heard about this last week. Yeah. And they're doing an invite only sort of a not invite only, but you have to like early access, get approved sort of thing. Yeah, get approved sort of thing. They're trained to limit, basically limits of feedback so that they can deal with feedback. So yeah,

00:21:07 so it's like, super fast to open, it doesn't have a project structure in the same sense that like pi charm, or IntelliJ. Wood, it just opens files. And it doesn't even have the IDE features unless you click this little like, make it smarter button, and then it will like fire up all the high end stuff that takes you know, five seconds to start. The other thing that's causing see on the screen right here is there's like three people typing all at the same time. Actually, no, there's five people typing. So it's like Google Docs, where you can all like collaborate on it in parallel, like right within it. So yeah, I think those are all super neat developments in the whole editor space, which we all right, a lot of could kind of deal with these tools.

00:21:46 As a service is something that is happening. And I'm it is a hard thing for me to wrap my head around because my brain thinks I want all my stuff locally. But there's a lot of times where you don't.

00:21:57 Yeah, it's just like the group Cody.

00:21:59 Yeah, I know. I think that's really neat as well. I think that'd be really valuable to some people on teams instead of you know, we've all been in those screenshare meetings like No, could you go over there? Could you type this? No, not after that. But inside the parentheses like Please, no. No, yeah. Exactly. And yeah, I let's see, bunch of people out there really like this. rjL and Sam and so on. But Kim has an interesting comment. We've come full circle ish back to talking to the one mighty mainframe over lightweight terminal circa 1985. Or, you know, for me 90 Like 95 and like x 11x. Windows, like is your X Windows setups, you can talk to the server. Yeah,

00:22:49 yep. That was thinking the same thing. Yeah, definitely. Um,

00:22:53 but these are interesting ideas. You know, for me, personally, I love to use PI charm for working on projects. But if I've got just a JSON file, or even a python file, I just want to look at the file, I probably won't open it in PI charm, because there's going to create all this project goo that's going to be stuck in that folder. And it's going to expect it's going to complain, there's no interpret, I just want to look at it, you know, and so tools like this, I think are going to be really neat. Yeah, yeah. And Brandon's support, suggesting something crazy out there, like mobs might run in and no mob programming, where you like working as a group? I think it's fine.

00:23:24 Yeah. Yeah. I'll be we should play with this, though. Yeah, I think it'd be fun to see what what all the interactions feel like and stuff. So

00:23:34 I totally agree. Yep. All right over to you. Um,

00:23:37 I, you know, I, I'm trying to remember how I came across the XY problem. And, and I was doing some research last week, and in think I was down some rabbit hole of Link, follow link follow link sort of thing. And I ran across this problem in the XY problem. And probably everybody else knows about this already. But I it was, the concept was new to me. And I don't

00:24:01 know the x y problem. Okay. And math Come on.

00:24:05 Well, so it is isn't isn't really that mathy. But so the X Y problem is essentially, your is, is you're trying to solve problem x. And you think of a solution y that would help work to solve that. And you get down to trying to solve all the details of y, and you get stuck. So you ask about y, what what you're really trying to do is x and it's that sort of nebulous an example kind of highlights it. So and we've got this example in the show notes I pulled out of one of the links is how do I if somebody asks, How do I get the last three characters of a file name, and somebody says, Oh, you just like do and this is a shell command. You just do like, if it's in the variable foo, you just do dollar curly bracket foo and then do a colon then negative three, just grabs the last three characters. But also, why do you want the last three characters? Is it because you are trying to do during to pull off the extension? Somebody goes, Yeah, that's what I'm trying to do like, oh, well, then you don't want the last three characters because it might be a two character a fortnight extension. So teach them how to do the real problem. And in one of the, I'm gonna link to a couple, a couple, like forum answers and stuff in there. Because I think it's interesting to it's, there's a lot of verbiage around the x y problem that sort of blames the asker for asking a stupid question. And I think it's important to not do that. Because we do this all the time, we break problems in software, we bricks up problems down. If I want to do a, then I need to do B and C to but to do B, I got to do D, and then and then also fng. And then way down into the rabbit hole, I get into the x&y problem. But how far back do you back up to give enough context to somebody else? So it's hard to avoid, you'll run into it. And then I really like there was one forum that had some great advice both on asking questions and on answering questions. So in asking questions, state the problem that you're trying to solve, but also state the higher level thing that you're trying to achieve, if appropriate, and then also how that fits into the wider design. And then it also brought up if you if you've thought of other solutions, that you've eliminated, for some reason, some reason or another, go ahead and list those because somebody might give you one of those as an answer. And you've already eliminated that. So give the reason why. And then I think what's most important is giving answers to what x y problems are giving answers to problems, because although I think everyone that's that's on this podcast, and also listening is probably an expert in some fields and a novice and other fields. So we're going to be on both sides of the fence. So when answering questions, and you think, Oh, somebody's just trying to get the extension, I'll just tell them how to do that. That's not necessarily helpful. So a great, there's a great three part thing to do. And in our example, follows those is going to answer the question directly. But also ask some questions about the problem. Say, just curious, why are you trying to do this? Is it because you're trying to do this other thing? If so, you're the thing I just told you might not be appropriate. And then once you figure out really what the real problem is, then you can help them and give the final answer. So it isn't helpful to just say, Oh, you're probably getting the extension. Go ahead and just do that. Anyway, I thought this was an interesting thought process around answering and asking questions. Yeah, absolutely.

00:27:51 I, it seems to be very relevant to Stack Overflow type places. Because you're gonna pose you're looking for help you say, I'm trying to do this, but a lot of times people will. And it'll give you very specific answers. And the answer could be, well, why don't you do this library that already understands that format? Like shell mentioned earlier? Like, why don't use X ray, instead of trying to understand how to parse this thing, just just use that? Oh, well, that's way better. Thank you.

00:28:16 I see that a lot on Stack Overflow that exact, it reminds me also of my, like, when I went to school, and you're trying to ask question to your professor, or to get help on anything, right? You're like, this is my problem. They're like, what really is your problem? Please tell me that. And like, that's, that's what you're asking, right? Like, tell me what the actual problem is. And if you can do that, clearly, you're going to get a much better answer. Yeah, absolutely.

00:28:42 And a lot of people just don't, I mean, it's also just a different perspective thing. They know that they know, they have the toolbox of things they know how to solve and ways they've solved. And if a new problem, and this is a related thing is people don't sometimes don't even think that there's a really simple solution out there. Like, oh, that tool you're using, it already has a flag that does exactly what you want. But you didn't know the flag was there. So it took

00:29:07 me with started learning Python, and I was so used to Fortran 77, where there was never any help. They just don't even try that. When I started learning Python. It took three or four months before I finally just said, anything I want to do. Someone has done better. Yes. And they are out there. I just have to find out how to ask the question correctly to find them. Because it's true. Like everyone is worried. You know, most people have tried to solve the same problem. There's someone out there who's worked on the same problem in all likelihood. Yeah, there's

00:29:39 so many libraries with PIP or conda. Even if you knew it existed, it would do

00:29:44 nobody knew it existed back well. Yeah, exactly.

00:29:48 All right. Okay, so

00:29:50 I guess I'm in my next you are next. Okay. So what I wanted to show this library that is called chunk Oh, It's great name. Yeah. Brand new. So can you see my snail screen? Yeah. So we had this problem where, like as NOAA, NASA, everyone's starting to throw all these net CDF files or all these different files onto the cloud. And that it turned out that access in s3 was really, really slow. And so people got really frustrated. Because like the clouds supposed to be fast, right? This is gonna transform science, we're gonna do it better now.

00:30:29 That's the promise. Yeah, that's the

00:30:32 that the grass isn't always greener. So this is this library that I think has really, maybe some broad applications. It's, it's being developed right now. And the idea behind it is like, we have all these data formats that we're sort of stuck with lots of data, that sometimes it's slow on s3. So is there a way that we can fix this? And the idea is that you create a reference file system. And so you do this by going to each of your files, and just taking the data that you need for that file, like just the metadata. So like, what side? Is it what its dimensions and coordinates are? What variables does it contain. So you just take those little bits, and pull them out into a JSON file. And so then you have this reference file that just contains the important information, but it's really small. And so that makes it faster to access. And then you construct this JSON file, and I have some benchmark s in here. But then you construct a mega json file, and you basically virtually aggregate all of your data. So that in one call, again, you could just get access to everything. And

00:31:42 nice, because you might not need actually the data, you might need to know well, what timeframe is this? So I do I need to read in that file or not. Right?

00:31:50 Yeah. And in some ways, because you're doing a lot of one of the things with X ray back to that other libraries that does the lazy loading. So like, this is a 16 terabyte data set that I'm loading here, but I'm just loading the data about the file, I'm not actually loading any data until I need to touch it. And so I can load this giant data set in a little bit over, you know, less than two minutes by doing this virtual aggregation with Chuck. And so all it's doing is it's reading these aggregated JSON files. And right now, it works for three or four different types of datasets. So if you have big collections of data that are going on to s3, that have lots of different little files, this is a way to sort of virtually aggregate them into one big data set that you can then subset.

00:32:41 Oh, that's really cool. It seems like this is one of those that comes as part of the EF S spec project, which we talked about pretty recently as well. Yeah. And so this is

00:32:51 part of Fs back, and it's her chunk, it was just released. And it's a unified way to represent compressed data formats. And it creates this virtual data set. So that's where it's located.

00:33:04 Yeah, super cool. See, Kim has a question, do you keep the individual JSON files with the data, you can.

00:33:10 So the nice thing about this, the data can be anywhere. And again, this is idea to make data invisible and easy to access so that you don't have to care what format it's in or where it's at. You can as long as they make the little chip, you can either create them yourself, and just keep the little JSON files public. And then you just make the one aggregated json file public. And then anybody could actually use that JSON file to access the data this

00:33:36 way. Yeah. Fantastic. This looks really helpful for working with large data. Yeah, yeah. It's cool. Yeah, that's awesome. All right. Brian, does that bring us to the extras? Yeah, I guess it does. How many how many extras you got today,

00:33:50 I just have one entertaining extra thought. As some people have amusingly noticed. I'm attempting to grow my hair out. And I went to Florida last week, and it's very humid in Florida. And I looked like a cotton swab. It just like pooped. Anyway. That's It was amusing to me, but

00:34:11 you should send us some pictures. Yeah, I mean, there's the pictures you don't really want out there

00:34:16 but yeah, yeah, so I wish I could have seen like the out because I was I was at Disney World and we're doing like rides and stuff and I really wish I could have seen like the flowing hair in the on the coast or something like that.

00:34:31 Nice, nice. Ah, let's see what's got shells got first. Okay,

00:34:36 so what are extras just something that we did last week? Well, just whatever

00:34:39 you want to also just give a shout out to our here before we call it

00:34:43 a I think I'm pretty good. I'm really excited like NASA starting a big transformation to open science which is exciting. They started a new they announced just last month a new $40 million initiative to try and help scientists move to open practices and pythons a big Part of that, because a lot of this was the open community that Python helped develop over the last decade and all of the tools that now is making. It's not just science easier, it's making it easier for more people to participate in science.

00:35:14 I think there's a lot of synergies and similarities between the scientific goal of spreading knowledge and publishing your work and so on and open source. Yeah,

00:35:24 cuz it used to be like scientists, like you would share your knowledge, right, you'd publish paper. Yeah. And that was it. And if you like, that's what graduate like I remember in graduate school, you'd go through, and they'd be like, okay, derive the equations in this paper, because they wouldn't show you all the steps. And you would do that. And then if you wanted to code it up, you would just open up a new window and start coding. And now you know, people are starting to publish their code, so that you can actually reproduce their results and then build on them and move faster. And

00:35:53 oh, the whole reproducible science thing as well. Fantastic. Yeah. Yeah. Awesome. Sam and audiences. Yes. More open. reproducible. Science is great for everyone. Yeah. All right, I got some extras as well, as you can imagine, surprise. I don't remember when I was going on maybe this was actually in talk Python, I was going on and on that Visual Basic six, just that I want to drag a few things on the screen and write a little bit of code made it so easy for people to build apps, Robert Livingston out there said, You know what, whoa, Joe, Joe, Joe, XO, Joe, or Jojo, I don't know, is this replacement thing. So if you're trying to build some desktop apps, and you want to do a bunch of draggy, Droppy stuff, or if it worked with Python, or somebody could build a Python integrated thing behind those events there, I would love to try to work on some integration between those things. But currently, now there's a little demo, we're in like, six minutes, seven minutes, they build a web browser, which is kind of neat. So very visual basic feeling.

00:36:52 So is it Python? It's not?

00:36:55 No, it's not Python. It's more VB six feeling. I don't know if it's actually VB six, which is even worse. It's sort of kinda, but not exactly. I just did a webcast 10 reasons you love high charm even more in 2021 with JetBrains. And Paul ever, we just did five reasons. So I'll link to that people care about that. And then who doesn't love a little good? Tech, shock and awe and pin? I don't know, outrage, I guess is the word I'm looking for. So Microsoft Edge is his browser that's sort of Chrome based. And they just announced like a Linux version. And it runs on Mac OS, which was all these things surprised me. And there was getting a lot of traction. And there's this whole thing where Microsoft, the team at edge, just added a like a buy now pay later thing built into the browser from some third party company, not as an extension, but like integrated into the browser that you can't not get when you go shopping. It says, Would you like to use this like for payment program, it's almost like adding like payday loans like baked into the browser. It's insane. So there, I know is such a bad idea. So there's an Ars Technica article, it says users revolt as Microsoft bolts on short term financing app into Edge is like 30%. Borrowing. And one of the quotes is this view, this all feels extremely unnecessary. And the comments are, you go to the comments, they are really, there's 256 comments, which is an awesome number of comments for the moment. But there's just almost nothing but like, Why? Why is it this is unbelievable to me, I can't pull it this is so it just makes it feel so shady and trashy, right? Like the next thing to do is to get like Bail Bonds offerings inside your browser, if you get your browser just weird stuff. So anyway, I thought people might enjoy just reading through this and taking a little bit of that in it,

00:38:53 it must work, right? Because they all have this experience where you I mean, there's been this has been going on for 20 years like with their browser, Revert used to install all this stuff on your machine, have to delete it all. And then that was ruled illegal. So they had to take it, they had to separate them out. And they just keep finding ways to get back in.

00:39:14 Yeah, there's some really interesting stuff. You know, they're, they're now sort of putting ads in the start menu and stuff. And then the ads are forced to open an edge not your default browser. It's just like, there's layers of like, really like why? Why are you doing it makes me happy that I'm not using Windows 11 At the moment, whereas I've been actually looking forward to using say, like the new terminal and Oh, my posh shell on Windows and stuff, which looks amazing. So I think there's a horde of like different different groups. So this is a definitely a different group than say the VS code group of people.

00:39:43 This is again, going to take us back to 1995. And we're just going to be using a terminal window to access everything so we don't get annoyed by analysts.

00:39:51 There's no ads.

00:39:53 No ads at the linux browser. Yeah,

00:39:55 you know if they could just get the ad companies to be able to Just collect your credit card information. And then instead of showing you that just buy it for you, and on a payment plan

00:40:08 that was just shared, like, we already know who you are just click here if you want it, okay, great.

00:40:12 Or just send it to you anyway and just charge you later.

00:40:18 Exactly. So I feel like this almost could be the joke, but I've got a different joke for you. Okay. All right. So the joke for this week comes from a solid source XKCD. As you may know, this is about workflows and changing software to here's one that says workflow. And it's just in the change log or some sort of conversation flow, may be a GitHub release, with some says, changes in version 10 dot 17. The CPU no longer overheats when you hold down the Spacebar. And then there's a frustrated user comment. It says longtime user for writes, this update broke my workflow, my Ctrl key is hard to reach. So I hold the spacebar instead. And I've configured emacs to interpret a rapid temperature rise as pressing CTRL. B admin rights that's horrifying. The user rights look, my setup works for me just add an option to re enable spacebar heating.

00:41:10 Oh, I remember, like enabling all the weird emacs things that only you would know about.

00:41:18 And the subtitle is, every change breaks someone's workflow. I love it.

00:41:23 Yeah, I'm actually in a, it's interesting because pythons even like more so like that because of the introspection and everything's really open. Unless you really work hard to make it. I mean, you can't really hide too much stuff with Python. So some, even if you tell people, even if you have a comment around a function or an access point to say, this is not part of the API, this is subject to change. You can change it and it will break somebody because somebody has reached inside and use the thing you told them not to use.

00:41:54 Yep. Yeah, those double underscores and single underscores. They're just there to slow you down, but they don't

00:42:00 notice what you're not supposed to do. Those are the interesting parts are.

00:42:04 Exactly. They wouldn't get a feature, but I can just do it right here. Alright, well, I think that's it, Brian.

00:42:10 Yeah. It was a good episode. So thanks, everybody, for showing up.

00:42:14 Yeah. Thanks, everyone. Yeah,

00:42:16 thanks, y'all for being here. Great to have you on the show.

00:42:18 Thanks, Michael. Thanks, Brian. Take care. Bye bye.

