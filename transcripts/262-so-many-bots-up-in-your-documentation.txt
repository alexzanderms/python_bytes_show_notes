00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 262. Recorded December 8 2021. Oh my gosh, it's almost winter. I'm Michael Kennedy.

00:00:12 And I'm Brian knockin.

00:00:13 And I'm Leah Cole.

00:00:15 Yay. Yay. So great to have you here. Thanks for being here on the show.

00:00:19 Yeah, happy to be here.

00:00:20 You and I got a chance to discuss airflow over on talk Python a couple months ago, something like that. Yeah. Yeah. But now, we'll probably do a little more airflow over here for people who are unfamiliar that but also just whatever you're interested in, so yeah, great to have you here. Why don't you tell people quick bit about yourself before we jump into the topics?

00:00:39 Sure. So I'm Lia and I am Developer Relations engineer in Google Cloud. And specifically, I work on Cloud composer, which is our hosted managed product of the popular Apache Airflow project, which we'll talk about a little bit later. And in addition to writing samples and content for that, I also work with a group of fellow engineers, and we maintain all Python samples for Google Cloud, and make sure that they stay tested up to date, and are healthy and they're getting reviewed for new samples. And that's a lot of fun. That kind of fell into my lap in his

00:01:17 passing. Yeah, I remember Python being one of the original, two supported languages on Google Cloud, right? It's sort

00:01:24 of a special place. Yeah. Now it's one of seven, I think.

00:01:28 Yeah. Cool. Well, that sounds like such a fun job. I've always imagined dev relations type of jobs to be super fun, maybe slightly less fun and COVID. Because the travel conferences and yeah, you know, all those kinds of things are part of it. But still a fun job, right?

00:01:41 Still a good time. Every day is a little bit different. You kind of never know what's gonna happen. And that's part of what I like about it.

00:01:47 Yeah, awesome. Cool. Brian, I don't even know we're gonna cover so I don't know what's gonna happen. Why don't you let us know? You know what I'm gonna cover? i Well, I'm not looking at my Docs yet. Oh.

00:01:59 Sorry. Fighting the cold. Um, I am super excited by this seven release candidate. One is out. So

00:02:06 oh, that's excellent. That's big news. Yeah, is

00:02:08 the last release for PI test was or six. They've done two other dot releases. But this six, two or six, zero came out six, two, I don't know, I lost

00:02:18 track, we use six to four for our GCP samples. So

00:02:22 Oh, you do? Well, the this, I think it was I wrote this down the six to zero was released on December 2020. So it's been, it's we're ready for a new one. So seven O's out the release candidate at least. And so in because it's a release candidate to install it, you have to do pip install PI test, double equal 7.0 dot zero RC one. We've got that the show notes. It's also on the release, release. Announcement page for PI test. But I wanted to go through some of the some of the cool features that I'm really excited about. There's a lot of great things in there. There's some little improvements with the approx thing. So one of the things pi test has is an approximate, you can say floating point numbers if you're comparing them, you should never do equal but you can do equal approx with PI test and it's really pretty cool that

00:03:16 now I didn't know that because I know that science you're doing is so like double equals is the kiss of death for floating point math comparison.

00:03:24 Yeah, well, the the PI test approx does. Now the docs reference the numpy comparisons, which is nice, because NumPy has some really cool features around that. But But pi tests out of the box does. And now also with mappings and dist dicts and other sets, it does it handles decimal types, which is nice. Decimal types, of course, are very useful when working with money and other things that need to be exact decimals. One of the things that's really cool is this sequences are compared better. So if you have like a list of numbers, and you compare against in approximate list of another numbers, I didn't know you could do this. It will tell you which index was was wrong. And i Whoa, nice. And actually not by how much but what what the expected was and that's pretty neat. So those are little minor features. Most of these are kind of minor from it, but it major first somebody right. So one of the things I like is some people have mentioned fixtures or sometimes when people use a lot of fixtures they don't know where the fixtures are. Well there's a couple flags, fixtures, protest and dash dash fixtures, there's to both those flags are helpful to find out where what fixtures you have available. And now by default, they print the location of the path in with the fixture name. And you can also do a verbose option that prints out the full doc string, which is which is pretty handy. There's a couple things that I'm really excited about our Python path that's been added. And that was a feature I added to the Project, which is fun.

00:05:01 It's cool to see the contributions you're making come back out.

00:05:05 Yeah, that's cool. And it's and then there's a bunch of other features that I contributed to by just saying, this is a little weird. Can we fix this and somebody else volunteered to fix it. So it's nice.

00:05:15 That's the best kind of contribution.

00:05:18 Yeah, one of the one of the improvements in the docs, which is kind of fun is there's an auto generated list of sort of got the change lot going on here. And I gotta come back to this. There's an auto generated list of plugins, and there's 963. Right now, we'll refresh it, Nope, still 963, that's a lot. When I first started writing the the beta, or the second edition of the PI test book, I noticed this and I wrote it down of it, the number keeps changing. So I took out the number, it's a lot, it's a lot of cool plugins. One of the things that if you'll notice, when you go to the change log, it starts with breaking changes. And then deprecations. In I know, I think this is around because people when they upgrade, they want to know if it's gonna break their code or not. I have tested a bunch of stuff and upgraded from six to seven. And I haven't noticed a lot there was, there was a, like a six, one to six, two, I can't remember what the the there was one break a while ago in the 6x, that that messed some plugin authors. But I haven't noticed any problems. So please try these out. I wish they would do the features first and then not the breaking changes, because that's

00:06:29 I suspect, it's the people working deep in the guts like the plug in authors that hit these deprecations. And not just people doing a start this equals that type of work.

00:06:40 Right. One of the things that I didn't list, but I think a lot of people are excited about there's more the objects within PI tests that people are using more of them are type hinted now so that you can do type hints with objects.

00:06:53 Oh, that's nice. Yeah, that's really nice. So fun. We do use PI test some of these changes, exciting.

00:07:00 We do we use PI test on our Python samples. And so I actually the one that was most exciting to me was the fixtures, figuring out where fixtures are is definitely something that comes into play for me, especially when we're maintaining something that was written a while ago by someone who might not be working on that code anymore. Yeah, yeah.

00:07:21 Nice. Yeah. It's great. I love the PIP installable RC one. That's great. And before we move on, to taking a step back, Roman, right author, a beanie, hey, Roman out there in the audience says, Hey, I'm a big fan of Google Cloud. Oh,

00:07:32 thank you, for sure. Well, I've

00:07:34 got some fun stuff to talk about next year, I want to talk about this thing that David Smith's former co guest co host here on Python bytes, sent over and said, This looks cool. Sam Lo and Phillip well released this thing called pandas tutor. Handle. Yeah, previously, Philip had built Python tutor at Python tutor.com. Now there's pandas tutor comm. And it's all about just helping you understand what the code does. So it basically says, look, there's this code here. Like, imagine you've got a list of dogs that have a breed, a type belong, devotee type is like a herding dog or a toy dog. It goes in a purse, longevity, size, weight, and so on. And you've got that as a data frame. If you wrote dogs were the size equal equal medium, than sort values on type than group by by type and then showing the median? What does that actually doing? Like? How do I understand that right, as somebody learning pandas, imagine, I don't really have a database background. And so I'm not sort of trying to map that over to like, okay, there's the where clause, there's the ORDER BY clause, and you know, like that kind of business, right? So what, what is happening when I write that code, either because I'm coming across it for the first time, or, which happens to me a lot. I wrote it two years ago and understood it perfectly, then I have no idea what it does now. Oh, my name? Yeah, that happens way too often, right. So what you do is you can go and run this code over in pandas tutor, and you say, visualize and says running a code, please wait. And so what they do is they put a CSV bit of text in here is like a triple string, and then use pandas read, and then just do that one line. So that's a nice way to kind of get data in there. And the way to think about this is steps. It shows you what is the first step and what is the second step, and so on. So when you go there, you'll see that it has the code that we were talking about. But then right now the effect of WHERE clause, the filter is regular font, and the rest is great. It's like fade into the background. So you can actually see what the starting data frame was and the ending data frame and then how it got in there and you can use the mouse over like so what they're saying is the type is medium. So if you hover over like a large or a small dog, there's just no arrow but if you hover over medium, it shows you where in the result that that thing landed. Isn't that cool? Wild in that wild? And so then you can see size has all the values on the left and then the size is group On the right, and it should medium, medium, medium medium, because that's all that's in there. Now, when I first looked at this, I'm like, there's a bunch of stuff on the screen what's going on? I noticed the arrows. But then what it took me a minute to realize is there's multiple steps. So the next thing if you scroll down, shows the same code at the top. But now the sort values type nice is highlighted, right, that's the next part of what looks like one expression in pandas. And so now it highlights the column that it's sorting on. And you can actually see the arrows pointing to how they were reordered in the result because you're sorting by type. So it's non supporting, non supporting, non supporting, non supporting and supporting, supporting and working, working, and so on. So that was step two, we have a group by This one's interesting, I said have arrows as colors. So the group by type, again, non sporting, sporting, so on, you end up with these groups, like here's a blue blue box of all the non sporting dogs, the Bulldog, the poodle, the French Bulldog is so cute. Then you've got the golden retriever and the Labrador in the box, right. So these are grouped into the colors. And then finally, you do the median. And it shows how those groups reduced down to statistics, like the longevity of a non-sporting dog is less than a Sporting Dog, apparently, but they're also lighter. So anyway, what do you think, Oh, my

00:11:11 gosh, I love this.

00:11:12 This is nice, right?

00:11:13 I'm a very visual learner. So I really appreciate this. And especially if you're working with data that you kind of aren't sure what it does, and or the like, that's pretty incredible. I'm filing this away, it's gonna go to my team's group chat pretty much as soon as we're done recording, in fact,

00:11:29 yeah, it's awesome. I think it's really good. You know, there's so many people who are presented a notebook or presented some kind of result. And they're like, I need to understand what that means. Yeah, I can keep falling. And I think, you know, throw it into here, something like this would be really helpful.

00:11:42 What and a lot of people that have spent a lot of time with databases might, it might be obvious what these things do. But for people that don't spend a lot of time with SQL, it's not obvious. And and so this is really nice.

00:11:56 Yeah, definitely. Or if you're like trying to take some example that you have with their example data and trying to translate it to your own data. That's something like customers do all the time. For us. It's something I do a lot too. Just seeing how your stuff. Oh, man,

00:12:13 you didn't write it, but you want to use so how much applies? Yeah, exactly. Yeah. Yeah. So this is quite cool. Dean out in the live stream. Hey, Dean says pandas tutors, pandas tutor looks awesome. And Robert Robinson also loving it. It's nice. So very cool. Indeed. All right. Over to you, Leah.

00:12:31 All right. So yeah, my first thing today is Apache Airflow. So airflow is a project that is part of the Apache Software Foundation. It's a workflow orchestration tool that originated at Airbnb, I want to say like 2014. And then pretty shortly after became part of the ASF, and it became a top level Apache project in early 2019. It's been a little while now, which is very exciting. So you can use it to author these workflows as directed a cyclic graphs, or DAGs of tasks, which is pretty cool. And it's most commonly used with workflows that are like pretty static, not super frequently changing or slowly changing, just so that you can see how the workflow goes over time. And that allows you for some clarity and continuity in your workflows,

00:13:22 I've always sort of wondered what the role of these workflow type systems were, until I realized, you know, if you're going to build a full end to end type of workflow without a framework, there's a lot of coordination. And what if this fails? Where do you restart? What do you do, and then the analogy for me is kinda like flask or some web, like, all I got to do is write this little thing. And everything else will come together to make sure these four lines of my Python code run, they run reliably, if they fail, it gets dealt with, right, it allows people to not have to understand the whole system and just go, I need you to load up this file and put it into that database. Can you write that code? And that's all you got to know, to be part of some complex thing, right? Yeah,

00:14:00 it's, I mean, it's not the most glamorous thing, but it is extremely useful. I mean, I did a summer internship when I was doing my Bachelor's, where I wrote a cron job that ingested some data every night. And the only way I knew if it failed was if I looked in the target folder where it's supposed to end up and if the data was there,

00:14:21 files, whoops,

00:14:24 that sorry, I'm sure a lot of people have dealt with that. And this is actually like a really common airflow workflow, which is the extract, transform and load the ETL workflow, which is where you have data somewhere that you want to get, you want to do something to it. Or maybe not, maybe you just want to extract and load it. And you want to put that result somewhere else, either locally or in the cloud for all of that. An airflow lets you do all of that. And you can see the history of these jobs. There's a UI where you can see did it fail it has a full error message if it failed. It's not just oh gosh, the data center Not there. What do I do? Yeah,

00:15:01 you've got a really cool UI where it shows all the parts of the workflow running. And yeah, whether or not they finished successfully and stuff, right?

00:15:07 Yeah. And it got to make over fairly recently. So a lot of improvements. Yeah, that's

00:15:13 super cool. Another thing maybe you could talk about really quick. Yeah, connectors, I don't remember exactly the right terminology. There's a yes, a name for them. Tell us tell people about that. That's good to know.

00:15:24 So these connectors that you're thinking of, I mean, we use the word connector to describe what it does there. So there are these things called operators and airflow and an operator executes a single task. And so that might be executing a bash script or executing a Python script. But we also have these connectors that are grouped by providers, which might be your cloud provider or other software providers that allow you to execute code there. So for example, we have a ton of GCP operators. One example might allow you to create a data proc cluster, or then like run a job on that data proc cluster, and maybe tear it down when you're done. And we have there are providers that have operators for all the major clouds and more you can do, there's one that like sends a Slack message when it's done. So it's, if you can dream it, it might be there. And if not, you can make it there.

00:16:18 That's awesome. Yeah, what's GCP?

00:16:20 GCP? Is Google Cloud Platform, or GCP? Might be a dated acronym. Sorry.

00:16:27 Done.

00:16:28 Yeah. Yeah. So one of the advantages, I think of that that's really cool is you don't necessarily have to know all those API's. Like, if I was gonna connect slack to GCP to like Azure Blob storage to like some hosted database, I don't have to learn all those things, I can just sort of click it together. Yeah, you just

00:16:45 have to, there's a small amount of setup you have to do for auth, which is understandable, you can't just like publicly go to your Azure Blob thing to grab your data. But once you've set up that connection, then your operators can talk to those things. And if you use so you can run or host airflow yourself. And there are a few different ways to do that. And then Amazon and Google both have managed hosted providers. And there's a company astronomer that also does manage hosted ones. And so if you're in an Amazon or a Google, the advantage there is that the connections with those operators might be a little bit simpler from the off and networking perspective. But other than that, you're you can still like if you're running in cloud composer, which is Google's airflow, you can still be using the Amazon or the Microsoft operators to pull data from over there. That's really common. And you see it all the time and bring it do some stuff in Google Cloud and either put it back in the other cloud or leave it in Google Cloud. That's totally normal. And people are doing that all the time.

00:17:47 Right on. Yeah. Cool. Cool. I think this is neat. And people for whom that would make sense, you're like trying to do these are running in the background? Yeah, scheduled jobs, or there's triggers as well, like a file has been uploaded or landed here. Yeah,

00:18:00 let's talk about that. So that's actually I had written down this one example, but I'll adapt it slightly, since you mentioned triggers. So that's another common type of operator, these sensors where you wait for a certain condition to be true. And they're used in data analytics workflows all the time. So like, one example, workflow might be waiting for a particular file to appear in a cloud storage or an s3 bucket. So you use one of those sensors to wait for that to happen. And then you want to do something to that data. So let's say you then create a data proc cluster that is going to run a PI Spark job on that cluster. And then you can store the results in BigQuery at the end, and then delete the cluster and like send a Slack message when the job is done. That's a very common ETL thing, including that sensor.

00:18:50 Yeah, that sounds pretty nice. Yeah, definitely seems interesting and quite useful. Yeah. Thoughts before? Yeah, that's before we move on.

00:18:57 I have a question. If, if you want to get started with something like this, I was trying to look for tutorials and getting started and stuff like that. Is it? Does it make sense? There's a too confusing of somebody, you said you could run it on your machine. Does that make sense to try that? Try it that way? Or should you try it with, okay,

00:19:16 um, I, you totally can do it on your own machine. And there's this really wonderful environment that can be found in the airflow repository, that's called breeze. And it's a Dockerized version of it shouldn't be run in production. But if you're looking to try it out, or if you're looking to contribute to airflow, we highly recommend that everyone check out the breeze environment. Right now I have the community page pulled up where you can join the dev list in the slack, if you have questions, but if you were to go to the GitHub repo, you would see breeze right on that first page. Okay, cool. Thanks. Yeah, great question. Thank you.

00:19:53 Yeah, take it away. All right, Brian. Are you gonna give us a tutorial on airflow or what we got going next?

00:19:58 Yeah. So I was looking through the tutorials in there. Flo, and I noticed that one of the right hook right away one of the examples, use the dent. So

00:20:07 that for our connection,

00:20:08 nice connection

00:20:09 totally planned very cool.

00:20:12 Didn't was suggested it's a text wrap tools suggested by Michael Rogers fillet. It's a small utility, but it's super useful. And I kind of forget that it's I mean, I use it all the time, but I forget to mention it to people. But it comes up a lot. And the idea around D dent is you've got something lost my didn't thing. See, if I can find it, there it is. The idea is you've got a multi line string, like here, we've got HelloWorld, and some multiple lines, and there's different spacing. But I'm, as you notice, I want to define it within a test within within a test function or within some other function. And that's so there's this extra like space at the beginning. That's, that's in the string, it's in the multi line string, and we don't want that we don't, we want it to be just just No, like nothing at the beginning, or the same amount chopped off. So one of the options that people have used before is to just define a variable multi line string out of the function, you just do it out of the function, then it's against, then it's just against the left side of your editor, whatever, on column zero, and you don't have to worry about it. But it does bother some people that you've got this this variable defined outside of your function when you're just using within one function. So didn't is the answer. So what he didn't does is it just takes a multi line string and strips off all the common whitespace at the beginning, that's it. But it's a it's super useful. They've got a little example that we're showing here. But I, I think this is a not a great example. So I wrote a new example, oops, fell asleep. Um, and so that the idea really is I've got a function that either, you know, print stuff or as some output, and I want to be able to compare that string. And I want my comparison to be in the function. So. So I use DNS to just write it right in my function, and then I don't have the spaces. And then anyway, so this is a PI test example of how you could test output string. So anyway, this really

00:22:18 sounds like a classic example of there's a problem like the open source. This really bothered me. And so I wrote something to fix it. And it's wonderful, like a time honored, open source reason to make something.

00:22:30 But I also want to remind people that didn't is not the only thing in tech strap and tech strap has a whole bunch of other cool tools. So it's used. It's not huge. It's just been a five minute read to peruse what's in tech strap. So the next time you need to manipulate some text, it's useful. So

00:22:46 maybe wrapping.

00:22:48 Yeah, like wrapping wraps. It does things like like if you've got a huge string and you want to be able to like one of the things is to shorten it. So if you if you've got a huge string, but you really only have like eight characters to show something like ellipses eyes it Yeah, it does that for you. So that's nice. That's there, too. That's good.

00:23:05 Because I've written that code. It wasn't fun. It didn't feel useful either. Only Okay, great works. But here we go. Some audience feedback Anthony out there, Hey, Anthony says is really useful used it many times. Mm hmm. All right. This next one comes to us from Dan Bader, you might know him from a real Python other things. He and I were chatting, and he said, Hey, have you heard about PIP audit from trilobites, and I was sure that I had, I thought we had talked about it, but then I realized, I don't believe we have. So I must have just heard about it somewhere else. And and we haven't covered it before. So the idea is, we've heard about a lot of issues with supply chain vulnerabilities, things getting into PIP but also Ruby gems and NPM, and so on. Sometimes that somebody's trying to be evil and putting in some typosquatting thing, or you know, worse than that would be if the GitHub account of a maintainer got hacked, and somebody published a package with like, to the real package, right. So however things might get into your dependencies. If something is going on bad there. It's better to know than to not know. So this PIP audit is all about that it audits Python environments as in virtual environments, and dependency trees for known vulnerabilities. So that's one of the things that's interesting is when you pip install things, you might be very good about saying, Oh, I pip installed flask and I pip installed pandas. So those are going into my requirements file or my project automall. But did you remember to pin their versions, so that things like GitHub will say your version is wrong? Because if it just sees flask, and the recent version doesn't have a problem, it's not going to tell you but the one you have installed may also the transitive closure of the dependencies. So Flass depends on it's dangerous, which depends on I don't know, but if there's something down that chain that has a problem, you may have not put that in your requirements file, and you may not be tracking it like I might be paying careful attention to flask. I might not care anything about it's dangerous. But that's where the problem is. Right? Yeah. So this tool from trilobites, which is a security company, basically solves that problem. And it lets you just type PIP dash audit. And for me, it's a dash our requirements dot txt or whatever. And from what I can tell, what it does is it will go create its own virtual environment, where one by one installs, each package, looks at the things that come out of that process, and then scans those. So it's not just looking at all you say, you have flask, and that's 201. Great, you're good to go. It actually installs it because who knows what the setup.pi process is doing, and all those kinds of things. And then it scans that, and it gives you a report. So for like talk Python training site, we've, I don't know, 30 dependencies or something. And it sat there. And it took, I don't know, probably took two minutes to go through. And it said, everything's good to go. So that was good to hear. But it's pretty neat, really easy to use. It's like an external tool, like black or something. So it's very a good candidate for PIP x. And then it's just globally available to point at any environment, where you think,

00:26:10 Oh, this is so cool. I heard about it, because one of my colleagues, Dustin Ingram, I think has been involved with it or either it's his Twitter that I found out about it from but he also has a really good talk from pi con this past year about the supply chain vulnerabilities. And that's worth checking out if you're wanting to get an idea why this is important.

00:26:30 Yeah, yeah, we've highlighted a few examples. Yeah, for the over the years, but it's, it's definitely something to pay attention to. And that's cool that Dustin was talking about it. He works. I think he's still working with a PPA and works on, you know, the IPI dot, pie, pie pie pie.org and all those kinds of things. So very cool warehouse. Right. What do you think?

00:26:50 I think that's cool. I'm gonna start using it right away. Yeah,

00:26:53 yeah, I already used it once as well. And everything seems good. So here, look, I even call it flask as an example. So here on this particular version, there was this security vulnerability ability from night 2019. And same with, I guess, change at all those will get but yeah, just gives you a nice description of what went wrong. And like in this case, it's a denial of service attack, and whatnot. So

00:27:15 so I definitely recommend people pin versions, definitely in your in your requirements. But what do you all think of, including ashes? I

00:27:24 think that's something Dustin talked about in his talk. And at the time, I was like, oh, that sounds like a good idea. And it's not something I've started doing yet. Yeah,

00:27:32 exactly. That's exactly what I think it sounds like a good idea. And I'm not doing it yet. So

00:27:37 anyway, but that's a me problem. More than anything else.

00:27:42 I also, it seems like a good idea, you know, I might be missing a step, it feels like the the challenge you're going to run into there where what you're preventing against is a man in the middle attack, somebody can intercept what's happening with pi pi.org. And sneak in some kind of broken, hacked version. I don't know. I don't necessarily trust what goes into PIPEDA. Org, but I trust pi pi.org. So I'm not super, it's not my biggest worry. There's like 10 other words that make me have a hard time sleeping at night about running stuff on the internet that precedes that. So I haven't worried about it, but maybe I should.

00:28:20 Yeah, but like, it's

00:28:22 in the queue of things to worry about.

00:28:24 For instance, with this audit, you can you can pin your stuff and and then have it be check it every once in a while. Everything and check thing.

00:28:34 I don't see why it couldn't be a CI step.

00:28:37 I was actually just gonna say that PIP audit, I need to bring it to my examples maintaining group to talk about who wants to implement it and how soon we're going to do it.

00:28:46 Who's pager rings when it finds a problem? Yes. Yeah, they see that pictures from back in the day. All right. Well, that's that's all I got for that one. We're off to? Well, yeah,

00:28:57 I'm so glad you mentioned pinning requirements, because that is actually a great segue for managing samples for GCP. So what I have open right now, for Google Cloud is an example documentation page, I picked cloud composer because that's what I work on. And I want to talk like, give an example of where this code lives that I'm talking about that I work with this group to maintain. And so this is a page that's about using a particular airflow operator. And if you were to scroll on it, you will see these code samples and they are all stored in GitHub and then embedded embedded in our Doc's. So you can click View on GitHub on any one of them. And it will take you to the link repository. You can look at the history look at everything in context. So we have 1000s of samples for all of the Google Cloud products just for Python. But we have them in other languages too. And they're located across hundreds of repos. This happens to be one repo that has samples for multiple products, but we have Other repos where things are stored too. So to ensure that there's consistency, and that my group of engineers, my colleagues, and I actually have time to do our work and function as humans outside of work to at least a lot of automation. So we use a lot of bots to do things like keep our dependencies up to date, check for license headers, auto assign PRs, for reviewing syncing repositories with centralized configurations, and even more, which is pretty great. And this is actually where the pinning requirements comes in, we very strongly believe in pinning requirements because it makes the samples easier to maintain and test against. And it's easier to go back to the product and say, Hey, you just pushed a release candidate for your product, and it broke your samples, it wasn't supposed to what gives, rather than finding out mysteriously when getting a customer issue. So then to keep it up to date, we use a bot and these are some pull requests recently opened by the bot have some dependencies, they get double checked to make sure everything looks good by human and merged. It's pretty great. And then we actually have a team of engineers in dev rel, that works on making GitHub bots that we use, and that is totally open source. So you can see some of the ones that we use, like we have our license header one, the sync repo Settings allows us to have a single source of truth for our configuration for all of our Python repos. And then it makes sure it gets synced across all of them, it's pretty great. I really don't know how I would function without all of my bot friends.

00:31:40 This is super cool. I can just imagine how much work it is to keep all of those different things in sync. And I have worked recently on projects, where I'm like, Okay, I got to integrate this library, I'm gonna go to the documentation. And I try to use the one or two functions that the whole thing does. And it's like, no, that parameter doesn't exist, or you're missing some printing, like, come on, at least just keep the signature, right, you know, is, yeah, of course. It's something like star star star, kW RX. It's not like, oh, I can just look in my ID and see oh, yeah, it says it takes like use security. use SSL yes or no, like, No, it's It's unknown without the documentation, basically. Yeah. This is awesome.

00:32:19 Thank you. I do. I'm very grateful to it. And yeah, for our dependency, but we do use an external one. I know, I think GitHub is the one that does depend a bot, we in particular, use white source renovate bot, it's what we were using when I started and that works very well to and they're very nice and responsive to

00:32:37 issues. That's fantastic. Yeah, yeah, depend a bot was fairly new. And then it was bought quite recently by GitHub. So I can imagine you were all do some doing something before then. Yeah,

00:32:47 probably. But I know I've run to use that to integrate using a dependency bot. I would say if you need a starter bot for any of them, that dependency bot is a great place to start.

00:32:58 Yeah, that's fantastic. I recently switched to pip tools and PIP compile to generate my requirements with pin versions and stuff. Nice. Before that. I was all about dependable telling me if something new was out and seeking that.

00:33:11 Nice. Yeah. Pixels rocks, little PIP tools. Yeah, it definitely

00:33:14 does. Brian, there's a lot of cool automation here. What do you think?

00:33:18 I'm excited about looking through all these I love looking at bots that because the whole idea by the bot is to do is like the Unix philosophy of do do one thing and do it well. Yeah. And yeah, I love that.

00:33:30 And if something else do it, and not you do it well.

00:33:33 All of our bots are based on like, oh, gosh, we're doing this one thing over and over. And we're not doing it well, because we're doing it manually. So how can we like use automation to make sure we're doing it consistently and just save a lot of time?

00:33:47 Like one of the things you've got in here that's that's shown right now is label sync. So one of the nice things about one of the interesting things about different groups workflows is to have different labels that mean different things. But when you open a new repo, it doesn't have all those labels. So being able to sync those labels across an organization, right.

00:34:06 Like, that's triage, that first first contribution out those kinds of things, right. Yeah,

00:34:12 as I said, we have hundreds of repos just for Python. And we use things like we have labels that say what API something belongs to. And that helps with the auto assign bot to make sure that issues and PRs get routed to the right team. Otherwise, you're having a human do all that triage, which is fine, but doesn't scale super well, in our use case. Yeah,

00:34:36 yeah. And adding a label is really easy in and to to an issue or something. So having a bot that looks at label changes and just does an action based on that is brilliant use of time.

00:34:48 Yep. So highly recommend.

00:34:50 Yeah, fantastic. This is great. And you have an install link next to all of them that mean I just click that and install it into one of my repos.

00:34:57 I believe that is the intent. And if it doesn't work, You should open an issue on this repo because my colleagues are very responsive.

00:35:03 Fantastic.

00:35:04 Deed bots to generate bots.

00:35:07 Honestly, if you if my colleagues told me they're working on that in this repo, I wouldn't be surprised, but I don't know.

00:35:14 The meta bot. Yeah. Fantastic. All right, well, how about some extras? Brian, you got anything extra? You wanna share? While we're here before we call it a show?

00:35:23 No, just I'm fighting a cold. Hopefully, that'll be over.

00:35:28 Yeah, maybe some sort of audit thing. We'll check your health status, we can run that against you, Leah, anything else you want to share with us? Oh, I

00:35:36 mean, on Twitter. Earlier, we were talking about HTTP status codes. And it reminded me of still my forever reference for HTTP status codes is HTTP dot cat. It's

00:35:47 got cat is fantastic. So it is so good. Let me share a few non funny things. And then we'll mix that in with our joke. Please do. Fantastic. All right. The first one has to do with, uh, speaking of GitHub, another cool GitHub thing, you know, you could press a dot, and that would do certain things. This only works if you're signed in. But now there's a command palette, this idea command palettes are becoming popular in UI, we've got it in VS code. We've got it in like superhuman, the email, and often you get them by pressing Command K, or Ctrl K. And now you have that for GitHub. So if I were on a repo, or I could do stuff to it, I could hit Command K, and then it will say, What do you want to do search or jump to? I can go to Pages issues, I could look for See, look for the app, if I just type app, it'll search for those. I could search for all sorts of things here. And boom, it takes me and shows me all the apps. Isn't that cool? That's so cool. command palette. Yeah, that's now a thing. That's beautiful. And you can just you I mean, no mouse, I'm here. I'm in this repo, the top level Command K, Down Arrow two times to enter. I'm on the issues. Oh, my gosh, love to see it. Yes, that's a good one. The other one, the other extra is Python. Three 10.1 is out released December sixth. So as in two days ago, Whoa, it's got a fun little snake with a hat on? Well, that that's really about 310. So let me describe, I can cover the entire release for you. So Python 310. One is the newest major release of the Python programming languages. It contains many features and optimizations. So now you all know what's in it. It's very vague, very vague. Apparently, it has 300 commits of changes and fixes. One thing I would have wanted to know, are there security updates? Yes or no? Like, should I like, should I install this? If I'm curious? Or should I install this now before tomorrow, because someone's gonna start poking around. I would love if it would say that. There's a great thing about the major features. But that's just 310 point release. So we'll have to anyway, still still good? Yeah, we've

00:37:54 been having fun making all of our GCP samples, making sure they're free. 10 compatible, which we're getting there. It's all waiting for certain dependencies to be ready. It's but a lot of fun. Very exciting to see.

00:38:06 Yeah, that's awesome. Well, you can look at

00:38:08 the change log. So if you look at the 310 the change log, you can see 310 One so can they go? A little bit

00:38:15 bold change log there? Maybe? Yeah, yeah, I can't. That's true. I can't go to the change log there and check that out. So

00:38:20 but having a like a security thing and being like a TLDR.

00:38:23 Yeah, exactly. Exactly. Cool.

00:38:26 Well, it also a lot of people didn't want to try 310 until we got one patch release. So now we have one patch release. So there's no new

00:38:33 so now now it's quite safe. I have been running for a day in production, and it seems okay. Yeah. Put it on one site to see if it would hang in there. It seems fine. So we're all good.

00:38:42 Yeah. All right. The samples that are using it are doing fine. They've had passing periodic builds for a while.

00:38:47 Yeah. Fantastic. All right. Are you ready for some now? I'm ready. Okay. All right. Yes, I mean, we started our conversation off today, talking about cats. It's true. Before we hit record, so I feel like we should round that out. Definitely. So first of all, HTTP status says.com is a fantastic place to go learn about the real meaning or the official meaning let's say of status code. So for example, there's 100 continuing if you want details, you click on that and it actually pulls us all up even shows you like the innum in Python, if you oh my god, I love that. And that cool. Yeah, it gives you the meaning like 100 Continue the initial part of a request has been received and has not yet not yet been rejected by the server. The server intends to send a final response eventually and so there's other ones like 200 Okay, 201 created let's see, what else did I point out three or four cash not been modified? 400 bad request bad 404 not found four three forbidden by internal server. Yeah. teapot Yeah. And 502 Bad gateway. Okay. So let's do yours. Firstly, putting I put it I put out this joke and you said this is good, but oh my goodness. But

00:39:59 yeah, so When I was doing my computer science degree a friend shared with me HTTP dot cat, when we were learning about HTTP status codes and if you go there, you will find one cat, her HTTP status code representing What is going on. And I am not going to lie to you in my professional career, I still use it as a reference because it's my favorite one.

00:40:22 And you can even it if you go to like HTTP dot cat slash 200. It returns a JPEG of a cat. That's like okay,

00:40:29 yeah, exactly. And you can do that for all of the status codes.

00:40:33 201 The cat has walked through some wet summit and that's too uncreated for Yep, friends. Let's see what else we got in here some good ones for or for not modify. Three or four. Sorry, for for the cat is hiding under some wrapping, not found too. Fantastic. Yeah, I love this. I had not heard about this. And it's glorious. Well wait

00:40:54 lists deserve for 18 there is there is a teapot cool.

00:40:59 Kitchen, literally inside of a teapot. Alright, so I saw this joke by Brene, who is John Breen. And I thought, That's really funny. What he did is he put his own like, personal take on what status code means. And I thought they were hilarious. But I thought, you know, let me take a shot at this as well, a little more Python focused. So I linked my tweet, I put this set of colloquial meanings of the HTTP status code. Alright, y'all ready for this? Yeah. Do so 200 is was all good. To have one Hello, creator through a four not modified or cached is same old, same old for a three permission denied it's Get off my line. 404 is just there's no message. It's just not there. It's not that that's the message but it's just blink 500 is we're bad at API's a little rare. 400 is your bad API. Yes. Yeah. So the the real cardinal sin of API's is 200. But in the body, there's a JSON that says error and a reason. Oh 200 both air attacks were really bad API's? Yeah. 502 were bad at deployment or DevOps. Part of the infrastructure can't get to the other part. In Brian's favorite for a team. Is it already April again? Yeah. Because the reason is that was actually put into the spec as an April Fool's joke, and they left it. I'm a teapot.

00:42:27 I love that. They lost it. I do do it too.

00:42:31 It's like, like import this just stuff. That's fun. That should just always be there. Yeah, yeah.

00:42:37 What's the harm? What's the harm? Just leave it there. Anthony, that live stream has some feedback for status codes using cats. Well, I never.

00:42:48 I mean, where there's internet there is cats. No,

00:42:51 of course, why we created the internet, I forget.

00:42:55 Exactly. All right. Well, I think that's it for our show. Brian. Thanks for being here. As always.

00:43:01 Thanks for joining us, Steve Brown me. Thanks for listening, everyone.

00:43:03 Yeah, you bet. See y'all later. Hi.

