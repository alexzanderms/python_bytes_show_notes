00:00:00 Hey there. Thanks for listening. Before we jump in on this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes at FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python by stata FM slash pi test. Enjoy the episode. Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 264. Recorded December 22 2021. I'm Michael Kennedy.

00:00:41 And I'm Brian knockin. And I am Kim Sandvik. Kim,

00:00:45 welcome. You've been on talk Python before but not here. Yeah, that's

00:00:48 right. I've done a couple of top buttons with you, including the one where you bravely submitted yourself to questions from your audio in other one, talking some small tool. So that was very good fun. I'm very much looking forward to this one as well.

00:00:59 You know, both episodes you on, we're on. We're super popular one was about little automation tools, and just cool stuff that people can pick up unusual easily there. And that was great. And the Ask Me Anything was surprisingly, one of the more popular episodes as well. So thank you for being part of that. And you've been part of the audience for sure. You've offered comments and feedback as we do the live show. And oh, Cody.

00:01:19 So yeah, to be honest. Yeah.

00:01:22 But now here you are on stage. Thank you for being here. Tell people a bit about yourself before we get started.

00:01:27 Sure. I am a DevOps engineer at the moment, then just also move engineering based in South Africa working with a home loan provider or a mortgage provider in the American sense. I've been probably doing Python for close on 20 years. So the fact that I've shaved means you can't see the gray beard but I've been around a while.

00:01:47 The gray beard we're gonna come back for some good jokes at the end about this as well. Not not at your beard, but just beards in general gray, gray hair. Yeah. Awesome. That sounds like really fun stuff. So yeah, thanks. Thanks for being here. Now, before we actually get into the main content of the show, Brian, I'm going to do something just a little bit meta. So I went and pulled up or created a questionnaire for people. When we first created Python bytes. We're like, Alright, 20 minutes, the time of this episode is gonna be 20 minutes, we're just gonna like knock it out, you and me real quick. And I think it's grown a little bit we've done, we cover a little bit more in detail, we've added a joke. We've added a few like little extra things we brought on guests like, Kim. And is that is that still in line with what people want when they signed up? So I put together a questionnaire here that just asked three simple questions. And I really appreciate if listeners could go to the show notes and just click on the link that says this three questionnaire three question Google forum or you know, find it on our Twitter account or wherever but should be in your podcast player shownotes, right near the top. And they can just click that and fill it out and give us some quick feedback on idea having a guest on the link the show and so on. So anything you want to add about that Brian? Just you know, crispy No, actually now.

00:03:00 Yeah, I'd love to hear feedback, because sometimes we feel a little guilty that we're running long. But I enjoy the a little bit more in depth conversation. We still don't go super deep. But I think it's a good I'm I'm flavoring the survey though. So forget what I said. No, I'd love to hear feedback and what people think.

00:03:20 Yeah, absolutely. Yeah. So people can give us feedback there. We'd really appreciate it the way people seem to be feeling so far as they kind of like the link they definitely like the guests format. So you're welcome here, Kevin. This according to listeners, fantastic. Thank you. But yeah, I think I think people are generally liking but still, let's just hear from everyone cuz I'm happy if a bunch of the people not and you're like, No, we really want no more than 20 minutes. And my going on about this is actually making it so longer, then then it'd be great to know. Right? So so we'll go from there. And with that, you know, let's let's play a game.

00:03:54 Jump in the first topic. Yeah. I want to talk about Jupiter games. And this the idea around this is IPython canvas, or i pi canvas with Box 2d, I get a little bit more into it. But the gist is making, making video games and small video games is one of the ways that a lot of us started programming. I know that was the that was the case for me. And there were not difficult games, but it was difficult enough, these 2d sort of 2d engines and this some of that's lacking and I haven't seen that in Jupiter before. And Jupiter is an excellent platform for for a lot of things especially teaching with with people that don't have computers if they use an iPad or something like that. Often they can still get access to Jupiter through hosted systems. So this is a Jupiter. This article talks about writing 2d games and mostly it's a 2d physics engine around a library called Box 2d which is a sci fi C++ Type engine, but it's something that you can access through Python. And

00:05:05 yeah, it does kind of physics stuff. You know, when people think of games, they think of, oh, here's what I got to do to get the picture on the screen. Oh, that's just a start. Like you need physics, you need collisions, there's like so much stuff that also gets done. So this is really cool.

00:05:19 Yeah, things like physics and gravity and collision detection. And, and, like the examples on this page are great. But the this, the person that wrote it is Torsten beer. And he's one of the I think he's he's got a library called PI, B to D, which is a one of two different Python accesses to this, this, this box to the system. But it's pretty cool. The one of the things I like about this articles that talk, it has like lots of pretty examples. But game physics engines are even if they're built for games, they can also be used for things like, like an engine simulation, or even like airflow simulation. So there's a lot of cool uses for this too, that are outside of games. But the incredible things is how small the programs can be. So the this, this article has a content like an attached notebook, hosted notebook that has things like angry shapes, which is like Angry Birds, and rocket game. And there's a color mixing game, which I was just fascinated by, there's like a bunch of colors drop into it, it isn't on the it isn't listed on the article. But if you go to the example, it's got a color mixing thing. And it's it's only like 70 lines of code. And in with that, you can have some some amazing physics examples. And I'm pretty excited about this, actually. So I'd like to do

00:06:51 you know, I think, a lot of sense in the the notebook form because you're trying to visualize certain things. And sometimes graphs are fine. But other times, they just don't capture, like flow and that kind of stuff. And it seems like game animation would be great. Give me anything.

00:07:07 I was also gonna say if you can get something very impressive done 70 lines of code as a learning tool. That's brilliant, because that's effectively a screen of code. Otherwise, you'd be looking at, if you're looking at hundreds and hundreds of lines, you know, for seasoned developer, that's perfectly reasonable. But to you, person, that must look overwhelming. Yeah. If you can fit a single screen and say, Here is it this is everything you need to make this thing work. It's quite a powerful tool. And it looks like a lot of fun. Actually,

00:07:32 it does look fun.

00:07:33 Yeah. So there's some interesting, the article talks about some interesting hoops, you had to jump through using IP events and i i pi widgets, and Canvas to be able to draw things and get events from people. But this just some fun stuff. Here's like the showing on the screen the thing like Angry Birds. And to be honest, like the play ability of it isn't maybe like, it's not on the level of what, you know, playing an Xbox or something like that. Obviously,

00:08:06 he probably won't hook up a controller to it. Yeah.

00:08:09 But, um, that you can do something like this so quickly is pretty amazing. So I

00:08:14 also on the other hand, if you write once you write it yourself, the playability actually doesn't matter that much. If you're looking at interacting the thing you wrote that, yeah, yeah.

00:08:23 I love it. This is really cool. Nice, fine, bro. All right, let me tell you about some really interesting cybersecurity side of things. So I'm going to first tell you about this thing called a thinks Canary. But that's not actually what I want to talk about. It's just to set the stage. Okay. So here's a challenge. Something that always stresses me out is, what if somebody was to break into your app into your systems into your cloud infrastructure or whatever? How would you know? Right? Like, what, what would be the indicator, right? If long, they don't trash it, they don't, you know, lock it with crypto lockers or anything like that. Ransomware, then they could just cruise around there, right? So this company thinks Canary created this, I think you can put it in the cloud as like a hosted container type thing. Or you can get like little raspberry pi like things and put them physically on your network if you had a physical network. And you could say you act like a SQL Server, you act like an Exchange server. You if somebody tries to search the network and says, show me all the active directories up that maybe we're not even using Active Directory, because we're not on Windows. But if somebody breaks in, they may well start looking for those types of things. And what they'll do is will trigger alarms if somebody tries to interact with them, and normal things shouldn't because only if you're like trolling around looking for them. Should it be discovered, right? That's what this is. And with this whole log for Shell stuff that's going on, it's just such a nightmare of like, well, we installed this app that did invoice management for us. Did it have a log for Shell vulnerability? I don't know maybe they said they fixed it. And but if somebody gets in, it's not just we have to patch the log for Shell, there's a log for J version, we've also got to The Know what else has been run? Because I could have installed whatever, right? Yeah. So the thing I actually want to recommend Python people is this thing called Canary tokens. So check this out, this is fantastic. So what you can do, you can get different things that will then trigger alarms, like emails, or other sorts of stuff to you. So I can come over here. And I can say, I would like to get a URL. And if anybody visits that URL, send me an email and say, you know, whatever message I put in here, so I could come in and say, here's a URL and send me at Michael at talk Python are my email and say, this is hidden in the admin section unused, or something like that, if somebody sends me an email, if I get that email, somebody has gone in and click that link in the admin section of my site. And if I didn't, it gives you like IP address, and all that sort of stuff of what comes back. So if I didn't do it, or it looks like an unknown IP, that should be highly concerning, right. So what else that URLs interesting, I can get a DNS token, somebody requests like, does a DNS lookup on rollout dot Python bytes.fm, I can get an alert to that, that'd be pretty interesting. A unique email address, if somebody ever tries to contact that a Word document, so you get like a Word document and put it in say, like SharePoint, or something dreadful like that. And if it gets opened, you'll get an email that somebody got that. Let's see, you've got the pin wire guards file, you can create a custom exe, if somebody runs your exe, or a SQL Server instance. Or you can even do like directly a log for Shell link that will run. So if you are trying to like figure out just put stuff in there to let you know, if somebody gets into a part they're not supposed to be in like, this is really cool. There's no it's free, it doesn't cost anything, it doesn't require any setup, like put a Word document in a folder if it gets opened, let us know. What do you think?

00:11:57 Well, I was gonna say I'm, I've been looking for ways to do exactly this kind of thing, because it's totally unique. And being concerned that log for Shell has got impacts that I had done that I can't see on our systems. Yeah, just because your public facing systems happened not of use log for Shell things, doesn't mean that you're necessarily safe. All it means is that, you know, if some other by some other means somebody got into one of your internal systems wouldn't necessarily know that. So I'm very much interested in this. I knew about canaries already. And things happen to sponsor the local South African pythons at a conference. But I can every tokens are very funky additional add on to that these

00:12:36 exactly. I knew about the Canaries as well, and I got, but that doesn't really apply to the world that I live in. I'm not an enterprise, but like this, these make a lot of sense. And they're free, which actually, yeah, here's what it looks like. If you get a notice. It says this is the email I got your canary token was triggered. The channel was HTTP. The token was that this is a test the IP address of the person. So this was one of those URLs. If somebody interacts with this URL, let me know, here's their user agent. Here's the message, there's the IP and so on. So you would just get a notice like that that says, somebody clicked on something they shouldn't have had access to. Yes, anyway. Pretty neat, huh? Right.

00:13:13 Yeah, I'm not sure. Yeah, it's actually pretty cool. Um, some of the things I didn't think you could I wouldn't even expect like, can somebody cloning your website? Yeah, I didn't know that was a thing.

00:13:26 I'm scared not to be honest. I didn't. That was something I should be worrying about.

00:13:31 Get an alert when a MySQL dump is loaded. Like, okay, like, how does that happen? I don't know. But that's pretty awesome that it's possible. And also frightening. Yeah, yeah. And Sam out in the audience says, ironically, the log for Shell might have its own vulnerabilities. You know, that thing has been patched a couple times. It's, it's gonna be a big, big problem. Anyway, Canary tokens. I think this is broadly useful for Python people, you could put the URL stuff in, inside of your app, you could put an email inside of locations. There's lots of stuff that I like this, the database restore type things. And so on this, this looks useful.

00:14:06 Yeah. So I'm still lost. You throw this like, for instance, like you said, in the admin section that you shouldn't be using, and you just know about it. So you don't click it or something.

00:14:16 Yeah. So imagine this, imagine you've got in your admin section, you've got a, like a search for user button. And then next to it, you could just put a, an export all data. Yeah. And then put one of these URLs at the endpoint at and nobody who works, you just tell everyone never click the export all data, it doesn't do anything. But if someone were to break in, what's the first thing they're going to want? Oh, well, let's get the export all data, boom, they'll go click it, and you'll know, they're still in. It's bad, but at least they're not in and just have an unlimited time to be it, you know,

00:14:46 yeah, you can put some other stuff too. Like let's say you've got a Django website and you stick you load like a PHP admin page or something like that. Just at the same URL, in case somebody is trying to grab that or something. Yeah.

00:15:00 Yeah, a lot of lot of interesting little breadcrumbs you can leave in there. Okay, Kim, that brings us to yours.

00:15:07 Sure. The first topic I was going to talk about are actually two similar but not quite the same pieces of software, by pi auto GUI and pie when auto are both toolkits for automating gooeys. Effectively, while automating gooeys for interacting programmatically with gooeys. Nice, I was

00:15:25 really, really hard, right? Hey, would you go off? Before you go on? Can you give that like three control pluses just

00:15:31 see now it's a little bit on the small side, thanks, I'll set a little more space to play with Lego. Fair enough. I love it, we just won I remember due to this one as well, they both happened to be read the docs, documents. So you're quite right there programmatically controlling a GUI, it can be quite a pain, particularly for gooeys that aren't particularly easy to understand. And the reason that I bring tools like this up is that there's quite a lot of use cases, I can think of two examples of the top of my own career. And I'm sure there's hundreds more with this kind of thing is useful and didn't might not know it's something you can do. And the kinds of examples I'm thinking of, particularly in I'm sure much enterprise and in industrial software, when you get a piece of equipment, you frequently get a GUI tool that accompanies it. But it is no API, right? Well, no API server, there's a tool you fire up and you set all the settings. But because the company that supplied the the piece of equipment, they don't write software, it's not a thing, you know, they either outsource the tool or the intern writes, it ended it has 50, checkboxes and, you know, in laid out in good form, and you need to set it up every single time you want to use that piece of software, there's no ability to remember what you said, there's nothing to do. And I've worked with a couple of other systems. And I see Brian, I think you probably have as well. And we basically there's a piece of paper next to the computer, the software is on with a screen print of what the settings should be. So that the person put secretaries to come down and use it knows which of the 50 tick boxes to check in the math check that the patent effectively matches on screen. And then they hit run. And something like pi auto GUI or bio and auto are both useful, so that you can effectively script the startup of that app. And you can see to your right, a small piece of Python that fires this tool up, identifies all the checkboxes ticks, the ones you've programmed in, and then either leaves it for the human to push go or whatever it is, the app does or for that matter, pushes go itself and then closes the app and records that it did that. So that that kind of use case is very powerful. And I think there are lots of cases, particularly in enterprise software, or internal software that, you know, somebody wrote for the company that does something very useful. But it's been around for 20 years, and the guy who wrote it is not around. Nobody wants to touch it because the source is terrifying. So nobody's where to sit down even JJ, so

00:17:41 basic six are visual basic five, and said exactly. I don't even

00:17:45 have a pilot now. Exactly. So to be able to wrap it is a very powerful thing to be able to do. And the other kind of use case that's somewhat related, it also comes to mind is I've spent a large amount of my career doing industrial automation, factory based type work. And they, the faster you can go in, the fewer bits of the fewer steps you need a human to repeatedly do the better for you, in many ways that the humans time is best spent actually creating objects and checking things rather than opening pieces of software and ticking boxes and closing them again. So yeah, quite frequently, we've had cases on the production line with the vendor of the chip we're using has supplied this tool that does some security related thing. And it's a GUI tool. And every single time you wish, you would have to open it up, you'd have to stick click the same two boxes, they'd have to say yes, secure this ship, close it again, repeat, wait for another one to arrive at your at your workstation. And if you can automate it, again, with the wrapping tool, nobody need even be involved at all pick to be part of your production process is you wrap it up, you fire up the tool, you click the three buttons programmatically, you hit go, and you close it again, and repeat. And again, I personally have encountered situations where that's useful and I'd like to is that imagine I'm far from alone. And it's I just thought I'd mentioned these things do exist. ISIS, lots of people do use them. But for people who don't know they're there, they're very useful things to be able to do. You wrapping wrapping gooeys is it's a bit tedious upfront, because often these tools aren't very well written. So you'll have checked box one check box for check box 27 check box 295 at no obvious naming consistency with what they do or how they work. But once we figured it out, that the computer worried that the script worry about what those checkboxes do.

00:19:20 I've seen the backside of that code where you're like looking at some event handler and it's like, if check box 24 dot checked then do this. Like what in the world like Who exactly did you want to name this? Because they got a program against those names. That's insane. Well, they

00:19:36 just do a time when you're working on exactly it. Yeah. Yeah. So you're working on one feature, and you go, Oh, I need to check box. Oh, the default is checkbox. 24. Then you look for the you do the callback handling and you just did it. So you know it's 24 so

00:19:51 I don't want to bother changing it. That's cool. All right. Is this automation of place in your world? Yeah,

00:19:57 so there's there's like, like Kim said, There's places where tools that that don't necessarily have a user interface that the thing that this doesn't I don't think these do like web stuff that web automations other tools.

00:20:10 Well, I presume you could automate a browser. But I mean, by the time you're doing that, you might as well be using the tools designed for it. Yeah.

00:20:16 Yeah. Selenium or something. What I wanted really hope is anybody that has any sort of tool that they're writing in, in on a web, so web frameworks often get internal tools get written and web frameworks and, and then people forget to throw IDs and things. So yes, the best way to automate a web stuff is to have an idea that you can grab onto, but often they're just these in these nested div mnemonic nightmares. But anyway, um, yeah, there's a couple tools that we've used pie when auto for that are, it's pretty nice.

00:20:47 Yeah, very nice. Yeah, it seems like if you're building a GUI app, you could test it with this, right? It's sort of full on integration tests from the outside. And also, I was talking to somebody and they were like, well, this app that I work on, he doesn't have like a concept of a back button. So you drop drive into the menu, hit a thing, go, and then it'll take you back home, like 10 steps, right? I could definitely see a little toolbar thing, you press a couple buttons, like get me to this scenario. And I'll put the last thing and get me to that scenario, like do the nine steps, I'll do the 10th. Exactly. Now, yeah,

00:21:19 in many ways, but the way I've mainly encountered, it has been the first scenario laid out not so much, actually automating the full running of the tool, but setting the tool up so that it is in the right state for what the company needs, without having somebody have to add the consultant document and risk getting it wrong, or not know which of the settings they should have, because that piece of papers and with the computer anymore, all that kind of thing. It shouldn't happen. But it does. It's much easier to have this kind of to have the computer worried, but all the settings should be ideally, the program should remember that. But you know, they don't they don't it's not much you can do to change that after the fact. It's like

00:21:50 external intelligence for a bad app. That's right. Hmm.

00:21:53 Well, there's also like API stuff that people forget about, like, like, like, I want to, I've got a device that that I need to automate connecting it to this to, to Windows and getting the device set up or something every time I plugged one in, in, you know, just automating that, that works sometimes, too. So anyway,

00:22:13 Oh, yeah. Hi, Brian, over to you.

00:22:15 Thanks. Um, this, I saw this, Brett cannon wrote an article called a reverse chronological, reverse chronology have some Python features. And I really love this article, it's pretty simple. One of the things I like about it is just because we cover so much, and we've been covering Python releases, for quite a while, I kind of forget which releases got I got which feature in so a really brief, you know, rundown of some of the different features is nice, like, like, last week, we were talking and saying, well, well, you're on, if you're on three, seven, why would you want to move forward. And, you know, I can't remember which features in which, so having a quick bullet list like, like in 310, we got the match statement. Of course, we've talked about that recently, but also bear better error messages. And I'm going to pause a little bit, Brett brings up in the introduction discussion, that if you're kind of one of those people that think pythons kind of getting bloated, and throwing too much stuff in it. And I wish that we had the good old days where you could just think about all Python in your own head, well, you kind of throw everything out if you if he said he recommends going down this list, and picking the first feature that you don't think you could live without, and in everything before that led to that. So you can't throw that stuff out. Either. It all kind of goes together. And one of the examples is the the match statement or the what are they pattern matching that, that was sort of controversial, but the the the code to get that to work involved, or the process involved even like making a new parser for Python, or using a new person for Python, and but with that new parser then things like better error messages are possible. So if you like better error messages, which I do that means 310 and everything below kind of has to stay but anyway, it's kind of funny, the moving on I like I forgot what the dictionary support for for like or like the the origin or equal that came in in three nine. So somebody's thinking, Well, why should I upgrade? This is a good list to take a look at.

00:24:35 Nice alright, I did a little exercise. I've just added 37373 words

00:24:39 so what was the thing and three seven that you can't live without?

00:24:42 So the dictionary preserving order? Yeah, stuff is really nice for like reading writing files and making sure that they don't diff hard. You know what I mean? If you try to like so they're in the order you put them there, all the other stuff. I'm not hating on it like I like the walrus operator. I like some of the other things. I like the lowercase last bracket. And rather than importing ties, all those are great. I'm not knocking them. I'm just saying like, Where would I go? Ah, that's it starts to hurt, where it really starts to hurt me at three, seven and below? Well,

00:25:11 I was, I was trying to Jupiter, like to an interactive Jupiter's system the other day looking at some data science stuff and it was already set up. And I tried to throw in this, the the F string value equal thing to be able to quickly debug a item. And it didn't work. He said, What the heck. And it turned out it was using three, seven and not three, eight. And apparently I'm very used to that. And I don't think I can live without it. Yeah, but and then reminder also that 311 When it comes out in a year, it's just gonna have a lot of speed ups. So

00:25:45 yeah, that comes with a lot of the performance stuff. And like, that's my new number.

00:25:51 If you forced me to roll back, I would refuse to go further than 3.6. Because I must have those strings. Yeah. Because they're basically it's so much, they just make your code so much more attractive. That said, While I don't necessarily use everything that comes in the new versions, I don't particularly have any problem with him being there. I'm quite happy, just use the parts of Python I want. And what really happens to me is that I don't necessarily know I can do something until two versions later, I probably only started doing that val equals on 3.9, for example, mainly because that's probably the first time I needed it more than anything else not, I don't particularly rush forward and use the new features when they're available. But I'm glad that they when I do ultimately want the year three

00:26:30 six is an interesting example to bring up because it's got F strings. It's got a whole bunch of other stuff too. But really, could we could stop with F strings.

00:26:39 Pretty much yeah,

00:26:40 yeah. Yeah. And then the the debugging stuff, Sam and audience says yes, F curly bracket name equals is indispensable for Divine

00:26:49 within justice. I hadn't used it when it first became available, but I would really not want to not have it available now. Yeah. I'm a caveman printed by go. Yeah,

00:26:59 Kim, I like your take on it. Like it's not going to hurt me if I don't care about it. I think one of the powers of Python is that you can be very successful with Python with a partial, quite partial understanding of what it even is, you don't need to know what a generator is, what a yield is, like when an expression is what a class is. Maybe not even how to create a function, just just write the code top to bottom, and it'll probably still do something for you. And so you can sort of bring these in, when it makes sense. Yeah,

00:27:27 I would definitely still not teach match statements to beginners. It's unnecessary. So

00:27:33 yeah, totally. Whereas I would use F strings, for example, for beginners, because it's just so much more readable than the other stuff is, but you don't have to magically, you don't use it all because it's there. Yeah.

00:27:44 I'm sure there's people out there feel like it's I gotta use it to tears. But now I agree with you. Alright, so how about

00:27:50 I've ever written a subreddit, for example? Sorry, you say, Yeah,

00:27:53 I actually, I actually took down a talk Python website or the training website, one of them with the walrus operator, because I put the walrus operator in a utility script that's not actually used by the site. But the site scans all the files trying to figure out where the handlers the view methods are, and it killed it, because I forgot that this is way back when it was still seven. So that was my my first really oh my gosh, but yeah, no, that's good. Alright, so I want to talk about something that I've actually personally been working on lately. This is a follow up to talk Python episode I did, where I interviewed Mike bear came on and did a great job talked about sequel alchemy, too, and so on. And I mentioned that you're just the way that pythons GC is set up is it's somewhat hostile to things like RMS, where they have to create a bunch of objects and return them to you in one batch. And what do I mean by that? Well, if I'm going to do a query, and it's going to return 1000 records, like the best case scenario is it has to create 1000 classes, SQL alchemy models, and give them back right? If I'm asking for them as a list, well, the way the GC and Python works, not the reference counting, but the garbage collector is after 700 allocations of container types, classes, dictionaries, lists, etc, that do not get cleaned up 700 Surviving over the cleanups over a period of time, that's going to trigger a garbage collection. And so I said, you know, like, Is there something you could do? Is there something we could like, kind of think about, oh, RMS, this is not at all specific to SQL alchemy. This is happens. I have a, an example here called pythons GC and RMS as a app in a little conversation on GitHub. And I said, Is there something we maybe can do or if you guys thought about it, because I don't really sure what the answer is, and said, not, not so much. Sure. But here, check this out. So I created this app. It creates 1000 records in both a sequel lite database and a Mongo D DB database. We have like two really different examples. And then you run a query that returns 20,000 records. It's probably a lot,

00:29:55 but just doesn't mean it makes 100,000 records. But yeah,

00:29:59 if I didn't say that 100 1000 records in the database and it gets 20,000 them back. Okay. It's probably a little extra. But for example, if you go to go over to the talk Python training site, over here, we've got a sitemap. And in this sitemap, there are many, many holding down the page down arrow, and you can barely see it. We've got to get like 5000 records, 6000 Records just to like list out the number of the pages that contain transcripts for the sitemap, right. So it's not entirely unreasonable, you get a bunch of records back and then do something like render a page with it, right? Well, under this scenario, if you just run straight Python, that single query results in 101,859 garbage collection runs just to get one answer back. Is that insane? None of which is garbage. Yeah, it's not garbage. Because it's just being realized from the database, right? Like it. It hasn't even come into existence all the way yet. And it's just like garbage, garbage, garbage, garbage, garbage. And it takes 900 milliseconds. If you go and you tweak it in a way that I described here, which you may or may not want to do, but if you did, if you tweak the garbage collector, it will go from 1800 collections to 2964 times less, the speed of the program is 23%. Faster. Okay? But it also uses less memory.

00:31:25 Okay, less garbage collection,

00:31:27 less, no less garbage collection. And it's not just 1800 versus 29. Python has this 100 to 10 to one ratio of Gen zero gen one and gen two collections. And Gen zero collections are pretty cheap, because it just touches new memory and looks at it. Gen one looks at like stuff that's only been inspected once and gen two inspects the entire memory space. For to see. Right? So this one, this one will also trigger. Just that.

00:31:57 195.

00:31:58 Yeah, 185 gen one. So 18 Gen twos, right. So it's not just oh, there's fewer, there's also like this, this other 29, zero gen two collections, very likely, right? So it's not just the number. They're also like, cheaper than doing that. So this is pretty interesting. What do you got to do? You just say you run less frequently on allocations, and then leave everything else alone? Does it make a lot of sense for absolutely everything? Probably not, there's probably some scenario with lots of cycles that this is a problem. But anyway, this, this is an interesting thing to sort of consider if you are doing it, some kind of API or a website or something that queries a lot of data over 700 records, basically, you're going to absolutely encouraged GC, when you know, it's not garbage. Right. So I don't know, I thought this was interesting. I'll put it out there for people to play with and get some feedback should be fun to hear about it.

00:32:55 I think this is very interesting. And I, I'm correct, I plan on playing with the garbage collection myself. So I'm glad you have this little sample app thing up to to start playing with it. One of the things that you can do that a lot of people don't mess with too much is is not not slowing down the frequency, but you can disable it and enable it. And I'm not sure, I'd like to play with that a little bit more to see if you can kind of kick it off or something like that, because you can

00:33:24 disable it. And you can call GC collect if you need to. So like it's there. I'm not sure if it makes sense to do it. But the switches are there.

00:33:34 Yeah. I mean, there's I mean, there's times where I mean, you're not going to get real time with Python. But you can you can get there's times where you know that you're not doing anything else. So garbage collection is fine. And there's times where you're doing an event, and you really want to get done with this as fast as possible. So it might make sense to turn off GC.

00:33:51 Sure. And for people who are not super focused on this, turning off garbage collection, or altering garbage collection only affects a very small portion of pythons memory, because the primary way is reference counting. So reference counting things stop referring to it goes away, only in the case where there are cycles, does GC even apply? Right? So that's actually unless you've got really interesting algorithms that are super focused on that kind of stuff. You know, you probably don't even have cycles, or very rarely do you. The

00:34:21 interest is a one size fits all solution. But where does fit? It's a pretty simple thing to do that really makes a heck of a difference. Yeah, it's,

00:34:29 it's quite interesting. So my musings was, well, maybe someday Python will have an adaptive GC, where it runs a certain number of times and says, Oh, I ran, but I didn't actually find any garbage any cycles. So let me back off that threshold by a factor of two. And then finally, garbage again. So I'll back it off. And then oh, look, I found a bunch. So now we got to start doing this more frequently. And I can see like an adaptive garbage collector, turning these numbers, but until then, I just cranked it up. Yeah. Interesting. All right. Yeah. Kim, you want takes data here for our main topics.

00:35:01 Sure. And the other topic I was going to talk about is a tool called Docker slim, which basically

00:35:08 sounds good, I don't know what it does, but I don't want

00:35:14 to be slim. Yet. It's effectively it as far as I can tell, but not quite magic, but it certainly seems like it, I, I use Docker quite extensively at work. And because I used a fair amount of that at work, and I started using it for a lot of personal stuff as well and websites, I deploy in my own writing little things running my own systems or in Docker containers. And, and this you, you take a lot of care about it, your Docker images can end up quite large. If you start with just Python in an Ubuntu base, for example, you're probably looking at about a gig of Docker image, before you get anything done. Now, the way Docker works, and this you have just one of those things, if you've got more than one, you start to benefit from shared layers, so you're not having a gig and another gig and another gig, etc. But still, it all kind of adds up. Docker slim, is a tool to basically look at your existing images, do some analysis and give you back a much smaller and in many ways, much more secure image. And I have run this that I read earlier today, just to kind of check that I wasn't Miss remembering from the last time I use it. And I fitted an image I had which was an incredibly simple small little floss API app I'd written it would had one job it basically whenever you sent anything to an endpoint it printed out but that was I forget exactly why I needed that. I think I was having trouble figuring out some suppliers that it wasn't documented how or some suppliers we took was going to work. So basically, I set this up, and I said, talk to me, and then looked at what it said.

00:36:36 Exactly. So side note is way better than trusting their outdated, crappy and consistent documentation. It's just Alright, why don't you just call it we'll just print out the JSON. And then we'll go from there. Yep.

00:36:48 So yeah, as a as a sign that that was quite an easy thing to do. But that was I just put that into a butcher base container running. I forget exactly what presumably, I was using fast API. So it would have been Python in window and frost API, and etc. And that was about a gig of image. I fed that to Dr. Slim. And I ended up for 48 weeks. And it still worked. He did everything he was supposed to do. I've granted I found this interesting. I had, I mean, he had one endpoint and so forth. i

00:37:16 There's a lot of dependencies. There's Python centric, there's flask, maybe there's even micro whiskey or something running there. Who knows. But yeah,

00:37:23 well, exactly what it has done, it's closed on all sorts of other angles of attack make sound a bit dramatic, but all sorts of ways that you could interface with a container that you don't necessarily need. It no longer has, for example, a bash is no longer available, but you can't run it in an interactive mode and talk to it, which is not necessarily a 100% a positive thing, it makes debugging a bit harder, but they do have some solutions for how you can do that with side containers and talk to it in other ways and the like. And they, if I go through them, their documentation effectively, they're they're doing all the security stuff, and the app offering stuff and all sorts of things that I know are important, but I don't know enough about to do right. I don't trust myself to do those things correctly, I can basically follow someone suggestions. But I have absolutely no way of knowing if the suggestions I'm following are valid. I'm not in most enough in this world to know what the best thing is to do. So I'm much happier to have somebody come along and say, we've written this tool, we get the stuff, we'll do the best we can to make it more secure. Even if it isn't 100% secure, it's far better than I was gonna achieve my own. And it's, I haven't used it enough to get a 100% recommendation that this will fit every use case, I'm sure like every tool is this things it does well is things it doesn't do well with some use cases where it's maybe not as suited. But just from a little bit of experimentation. With it, it looks like something I'm going to be inserting into my tool chain where I can because the smaller the images are, the better. Really, especially we're all working from home, and we're putting these things down from servers that aren't actually in the building that you're in anymore.

00:38:50 And if you're doing continuous deployment that which means pushing those actual images, then you want to run exactly, yeah. Yeah. Cool. Very nice.

00:38:58 Yeah, one of the things that doctors use for the think a lot of web people don't think about is the cross compiling. That's one of the places where does shows up. And it's one of the places I use it is to compile on a machine that I don't have access to. So I can have a Docker image, like I can have a Windows machine with Linux Docker image or something. And I can do compiling in there, so slimming that down speeds up my compiles, or I conceptually would. So I think this is something that definitely to try. If you're using using the

00:39:31 exact date that you've reminded me of in a similar vein, Docker is the basis of our continuous integration systems. And the ultimate end result is built inside a Docker container with all the bits we need. That can take quite a while because it can be quite large. You CAN SLIM that down as well. The first thing you'll see is the beta for you really? Yeah, always.

00:39:51 Yeah, absolutely. All right. Well, Brian, I think that might be it. Time for some extras. Oh, I do want to do a quick follow up. I thought these were extras but they're actually not there. things that, that I do want to point out really quick, I actually gave a talk on this whole memory thing if that GC conversation sounds interesting to you over at the Python web conferences here, so people can check that out. And also have a talk Python class that like dives into a whole bunch of this stuff. Nice. I made to include that in the before thing. Now we're at the extra, let's talk about, what do you got?

00:40:21 The only thing one of the things I want to shout out is to everybody that's supported the PI test book, so pragmatic, pragmatic, if you just go to the main page, there is a best sellers link that has had Python testing with PI test on it for many weeks now, in the top six. And I just wanted to thank everybody that supported the book. And it helped the success of this. Also, the feedback that I got, the technical reviewers, and plus many other people going through and submitting data is going to make this a really solid book. And I'm really just happy to be part of a community to put this together. So thanks.

00:41:03 Yeah, congratulations. That's awesome. Give me anything extra you want to throw out there. A couple of

00:41:07 small things I was hoping to mention, if we had the time and see we've actually got mess with DNS upon screen. This is a good place to start. I started to mention this little website mess with DNS dotnet, which Julia Evans, who on Twitter is bork, and produces a variety of excellent webzines, and so forth. I think you've actually you've discussed to get learning webzines. Before blank she'd get. That's the one. Yeah. And I think there's an HR friendly one, his name, I can't remember. The memorable one. Exactly. Oh, he released something I got, yeah, she released mess with DNS dotnet, recently as effectively a way to play with DNS without breaking your actual website, which isn't something I'd ever thought to look for. But now that it's around, it's actually a brilliant idea. There are some hard to understand things based into DNS, and what isn't a record and a CNAME? And what if your TTL is a three digit number versus a five digit number? What's the difference? Or for that matter? What does TTL mean, and it's not this is an explainer for all these things. But it is a way to make these settings and see what they do without actually breaking a real website. So effectively, she's spun up a subdomain with a sign name, this one I happen to be on as Goblin 61. Mr. dns.com, the worst you can do is break Goblin 61. Don't mess with dns.com. And that will then just go away and the next person who comes along, so it's actually a really smart, really clever idea. And typical to Julia's thoroughness. She's got a series of experimental suggestions on the side. Here are some things you can try her some tutorials, how about making a CNAME? Or here's some weird things you can try. What happens if you're a very long TTL, or you convinced three different DNS servers that your subdomain has three different IPs? That why you would do that as a mystery to me. But you know, what would happen? If you did is something you can explore the site without actually breaking your real website? And that seems like a really useful learning tool?

00:42:56 Yeah, absolutely. Cool. I love it. That's fantastic.

00:43:00 They would one other two other small things, I just wanted to mention one, just because I use it all the time. And I don't know how common knowledge it is. It is possible in Python, and I don't have a webpage to open for this, to run a small little web server. If you do Python dash m, what's it HTTP dot serve? Server I've CommBank on which it is not to be on this

00:43:22 server. Yeah, I'm reading your notes. I don't actually. But

00:43:26 that's all just going back to the notes tab, look myself in that effectively fires up a web server in the directory, you are bedded in, and serves up the files that are there, or the sub directories that are in there. And there's no security, there's no attractiveness, there's no styling, there's only thing that sort, you wouldn't serve this to the public. But if you wanted to get a file of the machine, and I do this quite a lot to get files onto my phone, for example, firing a web server there, and then just pointing either a script or your own, you know, just to your browser to get your, the localhost for the port you gave it and just download the files from there. It's a useful thing to be able to do.

00:43:59 Yeah, that's correct. directory browsing basically. Yeah,

00:44:03 exactly. And then the final extra, I just wanted to talk about and this is a little more tongue in cheek somewhat in both last week's pattern bites. And on recent top pattern episodes, you have been speaking a little bit about different ways of doing good. And we were discussing doing all you get on the CLI and I think one of your one of your audience members that the last pattern by suggested the way they do get is just mash all the buttons they can find in VS code. There is I just want to put out the there is a middle ground that you could be looking at is a tuple of magic in a GI t, which is effectively if you're an emacs user, and you don't know magic, you should change that immediately. Magic is effectively a brilliant way of doing to me a brilliant indispensable way of doing get inside Emacs. Granted, it doesn't mean you should learn Emacs, but in just a couple of short years after that, you should be an expert at you shouldn't you should find magic indispensable to take a couple of years learn Emacs. I'm not disputing that. But once you've got the next dial Magic really is an excellent option to look at doing your get with. So if you're tired of doing it on the CLI, just sit some years aside, then learn yourself some Emacs, turn to magic and then wonder, are you ever did anything else?

00:45:12 So some years aside? I don't think that's fair to Emacs. But just a little, it's not too much.

00:45:22 CDMX isn't much longer linear given vi but it's not. It's got my and I say this, I mean, yeah,

00:45:29 yeah. And Mario in the audience is taking credit for the VS code, button mashing. Ah, right. Right on. Cool. Yeah, that's a great recommendation. Yeah, you're

00:45:39 right, I should just point out in terms of being unfair to you makes it and I've been using it for more than 20 years, and I find it almost impossible to use anything else. But I'm sure it didn't take me years to learn. It's just been a long time.

00:45:50 That's right. All right. I got a few throw out there. Actually, just one. I made a comment, I think on the last show, Brian, about using emojis in my code. Yeah. So I want to bring that example up. So here's like a little CMS thing that I got going on. And if you return a collection, like themes are represented by these little tags in the CMS, if you return a collection, the common has a list of emojis if you return, if they're just like processing a single emoji, I think single thing you get that emoji for pages, you get a list of page emojis, and so on. Anyway, that's what I had in mind when I talked about that. That's pretty cool. Use Yeah, you can sort of scan through Oh, look, there's a list of these this must be do a bunch of stuff. Or I could probably come up with something like a modifying, gonna change a theme versus read a theme or something like that. Yeah. Anyway, well, that brings us to the laughs and I hope you all enjoy shodhan Freud, because it's, it's, it's bad this time. Thank you. Love for Jay. Okay, so let's see. First of all, this is not shopping for it. This is just something about the cookies. My daughter yesterday gave me this candle. It has a website, we use cookies to improve our performance. Meet same I just eat cookies. That was really funny for like a tech candle that it shouldn't

00:47:04 be. It should be a 10 of cookies, though.

00:47:07 I know it should. It absolutely should. At least it should smell like cookies. It says scented, I have no idea what scent it is. But it

00:47:14 smells like websites. Maybe, baby.

00:47:17 I just want to point out more practically here, I have this add on you can get for all the browsers, I don't care about cookies. And if it sees one of those cookie warnings, it'll try to click it and just accept it.

00:47:26 This is indispensable. That's brilliant.

00:47:30 And then Brian skin starts us off with the log for J stuff. So if you remember, if you're aware log for j a lot. The problem with log for j is if you try to log a piece of text, even as an argument, if that text has J and di colon la dp la LDA P colon slash slash to some Java library instead of logging it will execute that Java stuff. Even if it's remotely on the internet. It'll output the result of that, like you're hacked or whatever. Right. And so we've all heard a little Bobby Tables, right? Here's the modern day one. Hi, this is your son's school. We're having computer trouble. Oh, dear. Did he break something? Well, in a way, did you really name your son? Kurt? Your dollar curly JNDI colon LD AP colon slash slash Evil Corp. Parentheses parentheses, Bobby. Oh, yes. Little Bobby jindee. We call it. We've got our servers crypto lock locked. I hope you're happy. I hope you learned to systematize your log for J inputs. Fantastic.

00:48:38 Yeah, this I mean, this is gonna go on. There'll be the next isn't log for J it'll be something else next year. It's yeah.

00:48:47 I mean, it's been it's been there for 10 years. Exactly. Yeah, it's not a new thing. Unfortunately. Yeah, it's not

00:48:53 even a vulnerability. It's just

00:48:54 the way you can make with your teacher.

00:48:59 And Brian helpfully suggests this actually came from log for J memes.com. So we got to go there for a second and of course that exists of course, and oh my gosh, like look at this picture. So Brian, we describe this person for being on the screen there's a person in a saying next to an old white guy. Like Jimmy he looks like a perfect sort of grandpa sort of character right getting up there. Probably 70 You know, nothing wrong with a guy but it says upgrading log for J three times wasn't that stressful? Dave? 28 years old. What else have we got in here?

00:49:34 We've got which was outrageously funny and just kind of true ish. Yeah,

00:49:38 I know. Here's like a 1940s looking picture like a dad and some kids hang out. Daddy, what did you do during the Great War? The log for Shell incident? Let's see. There's a few of you go in here. Like there's the how many days since such and such accident zero days without log for Jcv and there's like Homer running around with like a new killer. Loading stick. You can just spend, you can spend some time in this place, it's probably unhealthy. There's like a grim reaper. It's going to take that technology. And it has a log for day on the Grim Reaper, you know. Let me see if I can find one more that there's there's some really good ones. This one is probably good. There's a picture of a guy in a tuxedo says vendor not vulnerable the log for J but there's a mirror and you see the back of him. It's closer just saw God and says, you know, well, yeah. Yeah, that one's pretty gross. I want to get that. But yeah, these are these are just fantastic here. So anyway, people can check out the memes. Thanks primers in that in Brian skin.

00:50:41 Said I am reminded I did see one the other day I've done that, that I could put it up now. But it's effectively that I just seen it in various other means that a chap receiving an award from probably his manager. So you know, me receiving the award from the manager for not being vulnerable to the log for J vulnerabilities. Inside thinking, let's mainly because I chose not to login. I completely forgot to log anything.

00:51:01 Except Oh, that's really good. Yeah, here's a tweet today. Java runs on billions of devices. It's not a Steven a pride but a statement of pure terror. All right, well, I don't want to hit on Java too hard. But the log for J, I just cannot believe somebody thought it's it's a fantastic idea to execute remote code that you cannot escape between the logging system. Yeah, in a logging system. It's just what did you think you would get? So here we are. With log for J memes.com. If you want to scroll through it,

00:51:35 let's back up and say somebody thought writing an application in Java was a good idea. No, sorry. I'll get hate mail for that one. So

00:51:47 yeah. Don't mail Brian don't email Brian. He knows. All right. Well, so Brian, that's it for the year, isn't it? I mean, it's your last episode. We're gonna take a little bit of time off. Yeah, some well deserved time off. Yeah, absolutely. So thank you, everyone. For listening. Kim, thanks for coming to join us this time, Brian, as always, thank you. And

00:52:07 we'll see everybody next year.

00:52:09 Yeah. See you next year for having me on.

00:52:10 So that was that was brilliant.

00:52:11 Yeah, you're welcome. And if you're out there, and you still haven't filled out that form and given us our feedback, let us know your Google Form. Link is at the top of the show notes. Alright, bye. Just thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYD s. Get the full show notes over at Python byte set FM. If you have a news item we should cover just visit by them by setting them and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording, just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

