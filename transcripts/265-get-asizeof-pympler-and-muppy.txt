00:00:00 Hey there. Thanks for listening. Before we jump into this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes at FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python bytes.fm/pi test. Enjoy the episode.

00:00:29 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 265. Recorded January 5 2022. I'm Brian knockin. I'm Michael Kennedy. And I'm Matt Cramer. Matt, welcome to the show. Thanks.

00:00:46 Happy to be here. Yeah. Who are you? Oh, so a huge fan. I've listened to every episode. Um, I actually, I'm one of these folks that started their career outside of software. I've heard a similar parallel story a bunch of times in the past. So I have my degree actually, in naval architecture, marine engineering, which is design of ships and offshore structures. On grad in grad school, I started, I was started with MATLAB picked up Python, thanks to a professor. And then over time, that's just grown and grown. I spent eight years in the oil and gas industry, and using Python mostly for doing engineering analysis, a lot of digital type stuff, IoT type monitoring work. And about three months ago, I joined Anaconda as a software engineer, and I'm working on our nucleus Cloud Platform as a back end software. Very cool.

00:01:34 Awesome. Yeah. Congrats on the new job as well. That's a big change from oil to a couple years. I mean, it is in Texas and all but it's still it's still on the tech side.

00:01:43 Yeah, no, it's it's related. But obviously a different focus. I wanted to make writing code my job rather than the thing I did to get my job done. So

00:01:52 fantastic. So I'm sure you're having a good time. Yeah.

00:01:55 Well, Michael, we had some questions for people last week,

00:01:59 we did I want to make our first topic, a meta topic. And by that I mean topic about Python bytes. So you're right, we discussed whether the format, which is sort of, I wouldn't say changed, its I would rather categorize it as drifted over time. It's sort of drifted to adding this little thing and do that different thing. And we just said, Hey, everyone, you still like the format. It's not exactly what we started with. But it's it's where we are. So we ask some questions. The first question I asked, which I've an interesting follow up at the end here, by the way, is is Python bytes too long at 45 minutes. That's roughly the the time that we're going these days, probably about 45 minutes. And so I would say, gotta do the quick math here. I would say 70 65% of say, 65% are like, No, it's good. With a third of that being like, you can make it go way longer. I'm not sure we want to go way longer. But there are definitely a couple people, I think God's it's getting a little bit long. So I would say probably 12% of people said it's too long. So I feel like it's actually kind of a decent length. And one of the things I thought it's like, as we've changed this format, we've added things on right, we added the joke that we started always doing at the end, we added our extra extra extra stuff. But the original format was the the six items, you cover three, I cover three now it's two, two, and we got Matt here to help out with that. So what is the length of that? And it turns out that that's pretty much the same length still. So the last episodes, 39 minutes, 32 minutes, 35 minutes, 33 minutes, that's how long are our main segments up to the end of them. And so it's kind of like, for people who feel it's too long, I wanted to sort of say like, feel free to just delete it. Like you hear the six items like deleted at that point. If you don't want to hear that US ramble about other things that are not pure Python, you don't hear us talk about the joke or tell jokes. No problem, just just don't stop. It's at the end for a reason. So if you're kind of like I'm kind of done then then be done. That's totally good. We'll put the important stuff up first. The other one was, Do you like us having a third Coast like Matt, or shell or whoever it is we've had on recently, and most people love that format? Or, you know, it's okay, so that's like, I think that that's, that's pretty good. I do want to read out just a couple of comments as well. There's stuff that you always get that like you just can't balance it. A couple of people are saying like, you just got to drop the joke, like don't do that the other people like the joke is the best who doesn't want to stay for that? You know, like, Well, again, it's at the end. So you can do that. But I also just wanted to say thank you, everybody, they they wrote a ton of nice comments to you and me at the end of that Google forum. So one is I can't tell what counts is an extra or normal but it's fine. I love it by them bytes is such an excellent show fun way to keep current. Brian is awesome. Oh good.

00:04:44 I asked my daughter to submit that.

00:04:48 Good. I think your third grasp that having a third guest is great. Like I said drop the jokes keep the jokes for sure ideal. i So anyway, there's a bunch of nice comments. I think the other thing I'd like to just speak to real quick and get your thoughts on. And maybe it was, Well, Matt, because you've been on the receiving end of this a lot is as having the live audience, right? I think having a live audience is really interesting. I also want to just acknowledge, like, we knew that that would be a slight drift of format, right? So if you're listening in the car, and there's a live audience comment, it's kinda like, well, but I'm not listening to it live. That's kind of different. But I think it's really valuable. One time, we had four, maybe four Python core developers commenting on the stuff we recovering relat. Like, that's a huge value that people come in and sort of feeding that in, though, for me, personally, I feel like it's, yeah, it's a little bit of a blend of formats. But I think having the feedback from the audience, especially when people are involved in what we're talking about, I think that's worth it. Brian, what do you think? Well, we,

00:05:49 we try not to let it interrupt the flow too much. But there's some great stuff. Like if somebody, if we say something that's just wrong, somebody will correct us in that's, that's nice. The other thing is, sometimes somebody has a great question on a topic that, like we should have, we should have talked about, but we didn't, we didn't. We didn't write we don't

00:06:11 know everything. We certainly don't. So yeah, I do want to add one more thing. The there was a comment, like, hey, we as hosts should let the guests speak. We should be better interviewers. And like, this is not an interview format. You know, like, talk Python is a great interview format, or that's where the guest is feature testing coders a great form interview format, where the guests is featured. This is sort of just three people chatting. It's not really an interview format. So

00:06:37 and we always tell the guests to interrupt us, and they just they don't much. So yeah,

00:06:42 yeah. So Matt, what do you think of this live audience aspect? Like do you feel like that's tracks? Or is it good?

00:06:46 Well, yeah, first of all, thanks. I'm glad that people generally like having a guest. Otherwise, this would have been very awkward. But no, I do like it. I think with maca, disconnected, there was one Yeah, occasionally there is a kind of a little bit of a disruption. But I think in general, it's been great. Yeah, I've definitely been listening when times when, you know, a bunch of people are chiming in. Because there's always as you know, that you mentioned a GUI library in the news about 12 other options that you may not have covered. In fact, instead of waiting 12 weeks, you could just get them right out. So I think that's great. And I'm, I'm generally a audio listener, or this and when I'm walking my dogs, but but I love having the video, because when I am very when I'm interested in something I can do hop to it right away, and see what you're showing, which I really liked. So yeah,

00:07:34 awesome. Thank you. Two other things that come to mind. Someone said, it'd be great if there's a way where we could submit, like ideas and stuff like that for gas, and whatnot. Yeah, I'm right here at the top and our menu, it says submit. So please reach out to us on Twitter, send us an email, do submit it there. The other one was, if we could have time links, like if if you go to the listen, and at some certain time, a thing is interesting. That's mentioned, be cool if you could like link at at a time. If you look in your podcast player, it has chapters, and each chapter has both a link and a time. So like the thing that Brian's going to talk about next, interpreter's, if you want to hear about that, during that section in your podcast player, you can click the chapter title and it will literally navigate you to there. So it's already built in. Just make sure you can see it in your device. Alright, I think that's it for that one. But yeah, thank you for everybody who had comments and took the time. Really appreciate it.

00:08:34 Yeah. And just the comment if you do you want to be a guest, just email on that form, and you might be able to do it.

00:08:41 That's right. That's right. Yeah. Great to have you here.

00:08:43 Um, actually, I didn't want to talk about interpreters. No, that's me.

00:08:47 Oh, wait. You're right. Well, you're talking about it now, because I've changed now. Let's talk about oh, sorry, I saw the wrong screen.

00:08:55 That's apparently we're not professional here. But no, it's okay. I wanted to talk about adders. We, we haven't really talked about it much for a while, because the lots of reasons. But adders is a great library. And it just came out with adders came out with the release 21 dot 3.0, which is why we're talking about it now. And there's some documents, there's a little bit of change. There's some changes and some documentation changes. And I really, in an article I wanted to cover. So one of the things you'll see right off the bat, if you look at the the overview page of the editor site is is it is highlighting the the Define decorator. It's a different kind of way that if you've used adders from years ago, this is a little different. So the there's a there's there was a different way to to a different API that was added in the last release. And this is our own one of the previous releases and now that's the preferred way. So this is what we're calling modern adders. But along with this I wanted to talk about an article that Henyk wrote about about adders. And it's a little bit of a history. And I really love this discussion. So and I'll try to quickly go through the history. Early on, we didn't have data classes, obviously, we had, we could handcraft classes, but there were problems with it. And there was a library called characteristic, which I didn't know about this was this is before I started looking into things that and then glyph and Henyk. And in 2015, were discussing it ways to change it. And that began the old original adders, interface. And there were things like adder dot s and adder at rib, that were partly out of the fact that the old way of characteristic attribute was a lot of typing. So they wanted something a little shorter. And then it kind of took off. Ours was pretty, pretty popular for a long time, especially fueled by a 2016 article by glyph, called The One Python library everyone needs, which was a great, this is kind of how I learned about it. And then there was a different kind of API that we're used to for adders. And it was good, and everything was great. And then in 2017, Guido and Henyk. And Eric Smith talked about at in the Python 2017, they talked about how to make something like that in the standard library. And that came out of that came Pep 557 and data classes and data classes showed up in in python three, seven. And then so what then a dark period happened, which was people were like, Why do we need adders anymore? If we have data classes? Well, that's one of the things I like about this, this article. And then there's an attached article that is called why not? Why not? Why not data classes instead of adders. And, and this is a it's it's important to realize that data classes have always been a limited set of adders. adders, was a is a superset of functionality. And there's a lot of stuff missing and data classes like, like, equal equality customization and validators, validators and converters are very important if you're using a lot of these. And then also, people were like, well, data classes kind of a nicer interface, right? Well, not anymore. The pound defines pretty Are they out to find really nice. This is a really easy interface now to work with. So anyway, and it has typing, and it has typing. And and I'm glad he writes that read this because I'm, I kind of was one of those people of like, Am I doing something wrong? If I'm, if I'm using data classes, why should I look at adders. And one of the things that there's a whole bunch of reasons. One of the things that I really like is adders, has slots, the the slots are underbite by default, so you have you kind of define your class once instead of keeping it growing, whereas the default Python way, and data classes is to allow classes to grow at runtime have more more attributes. But that's not really how a lot of people use classes. So if you if you came from another language where you have to kind of define the class once and not at runtime, enters might be a closer fit for you.

00:13:28 I like it. And it's whether you say at define or at data class, pretty similar.

00:13:32 Yeah. Yeah, there's this really cool. I personally haven't used it, but I've always wanted to try it. We're using fast API and pedantic so I've really come to like that library. But adders is something that looks really full featured and nice. Definitely something I want to pick up.

00:13:47 Yeah, it's cool. And by Dantec, it also seems very inspired by data classes, which I'm learning now, I suspected, but now learning that is actually inspired by adders. And they kind of sort of leapfrog each other in this the same trend, which is interesting. Yep. So yeah, cool. Good one. Right, Matt? I thought Brian was gonna talk about this, but you can talk about it, this would

00:14:08 be me. So this one's not strictly Python related, but I think it's very relevant to Python. So I mentioned earlier, I came from a non CS background. And I've always, I've just been going down the rabbit hole for about 10 years now trying to understand everything and pick it up and, and really connect the dots between how do these very flexible objects that you're working with everyday how do those get actually implemented? And so the first thing I did if you heard of this guy, Anthony Shaw, I think he's been mentioned once or twice, he wrote a great book. Shout out C Python internals, real Anthony Anthony

00:14:43 is out in the audience even say, Happy New Year's, Hey, happy new year.

00:14:47 So this book is great if you want to learn how C pythons implemented, but because I don't have a traditional CS background. I've always wanted. You know, I felt like I wanted to get a little bit more to the fundamentals. And I don't remember where I found out about this book, but crafting interpreters. I got the paperback here too, I highly recommend it. It's, it's, it's a implementation of a language from start to finish, every line of code is in the book. It's a dynamic interpreted language, much like Python. But I really like how the book is structured. So it is, it was written over, I think five years in the open, I think the paperback may have just come out last year, but you walk through every step from tokenisation, scanning, building a syntax tree, and all the way through the end. But what I really liked about it is is you actually, you develop two separate interpreters for the same language. So the first one is written in Java, to direct evaluation of the abstract syntax tree. So that was really how I got a lot of these bits in my head about what is an abstract syntax tree? How do you start from there? How do you represent these types? But the second part is actually very well, I think it becomes really relevant for Python, because you the second part is written in C. It's a bytecode, virtual machine with garbage collection. So it's not exactly the same as Python. But if you want to dig down into how would you actually implement this with the types that you have available for you in C, but get something flexible, much like Python, I really recommend this. So again, it's not directly there's some good side notes in here, where they he compares, you know, different implementations between different languages like Python, and JavaScript, etc. Ruby, but I really liked this book, I devoured it during my time between jobs, and I kept telling everyone about it. So I thought it would be good for the community to hear. Yeah, nice.

00:16:38 Yeah, I didn't study this stuff in college, either. I mostly studied math and things like that. And so understanding how virtual machines work, and all that is just how code executes. I think it's really important. You know, it's, it's not the kind of thing that you actually need to know how to do in terms of you got to get anything done with it. But sometimes your intuition of like, if I ask the program to work this way, and it doesn't work, as you expected, you expect him maybe understanding that internals like oh, it's because it's really doing this and Oh, everything's all scattered out on the heap. And I thought numbers would be fast. Why are number so slow? But okay, I understand now.

00:17:13 Yeah. I, I really liked the I mean, it answered a lot of questions for me, like, how does a HashMap work? Right? That's a dictionary in Python. What is a stack? Why would you use it? What is the when you do a disassemble, then you see bytecode? What does that actually mean? Right. Um, I really, really enjoyed it. And he's got a really great books open source, it's got a really great build system. If you're interested in writing a book. It's very cool, how adding lines of code and things like that are all embedded in there. And he's got tests written for every part where you add a new, you know, a new bit to the code, there's tests written, and there's ways we're using macros and things to block them out. It's pretty, pretty interesting. Nice.

00:17:53 Testing books.

00:17:55 That's pretty excellent. Yeah. Yeah. So Matt, now being that Anaconda. I like that world, the, the Python world over and the data science stack, and especially around there has so much of like, here's a bunch of C, and here's a bunch of Python, and they kind of go together, does this give you a deeper understanding of what's happening?

00:18:12 Yeah, for sure. I think, um, C Python internals gave me a really good understanding a bit about bit more about the C API and why that's important, as I'm sure, you know, and the listeners may know, like, the binary compatibility is really important, between the two and dealing with locking in the global interpreter lock and everything like that. So it's definitely given me a better conceptual view of how these things are working. As you mentioned, I don't You don't need to know it, necessarily on a day to day basis, but I've just found on it, it's given me a much better mental model

00:18:43 having an intuition as valuable. Yeah. Quick audience feedback. Sam, out in the live audience says I started reading this book over Christmas Day, and it's an absolute joy. So yeah, pretty cool. one more vote of confidence for it. They're cool. All right. We ready for my my next one? Yes. Definitely. A little Umali. Yeah, I'm hungry. So this one is cool. It's called Umali. Or yeah, Emily. I'm not 100%. Sure. But it was suggested by Andrew Simon. Thank you, Andrew, for sending this in. And the idea of this is we work with YAML files, that's often used for configuration and whatnot. But if you want to verify your demo, right, it's just text, maybe you want to have some Yamo that has a number for a value, or you won't have a string, or maybe you want to have true false, or you would have some nested thing, right? Like you could say, I'm gonna have a person in my Yamo. And then that person has to have fields or values that don't like a name and an age. With this library, you can actually create a schema that talks about what the shape and types of these are much like data classes and then you can use your Molly to say, given a Yamo file Does it validate think kind of like pedantic is for JSON? This is for a Yamo, except it doesn't actually parse the result out. It just tells you whether or not it's correct. In that cool. I think it looks neat. Yeah, yeah. So it's it's pretty easy to work with, obviously requires modern Python. It has a CLI version, right. So you can just say Umali, give it a schema, give it a file, and it'll go through and check it, it has a strict and a non strict mode also has an API. So and then to usually just say Umali dot validate schema and data, either encode or on the CLI. And in terms of schemas, like I said, it looks like data classes, you just have a file like name colon, ster, age colon int. And then you can even add additional limitations, like the max integer value has to be 200 or less, which is pretty cool. Then also, like I said, you can have more complex structures. So for example, they have what they call a person, but then the person here, actually, you can nest them, so you could have like part of your Yamo could have a person in it. And then your person schema could validate that person, so very much like gigantic, but for Yamo files, like here, you can see scroll down, there's an example of that is called recursion is and how they refer to it. But you can have like, nested versions of these things, and so on. So if you're working with the ammo, and you want to validate it through unit tests, or some data ingestion pipeline, or whatever, I just want to make sure you're loading the files correctly, then you might as well hit it with some Jamali guessing one of

00:21:33 the things I like about stuff like this is that things like Yamo files, sometimes people just sort of edit it in in the Git repo, instead of making sure it works first, and then it gets in then having a CI stage that says, hey, making sure the the animal's valid syntax is, is pretty nice. So that you so that you know it before it blows up somewhere else with some weird error message. So yeah, exactly.

00:22:00 Yeah, this is really cool. That validation of these types of input files, especially Yamo files is really tough. I've found just because it's indentation based, and whitespace is not a bad thing, obviously. But for Yamo stuff, I can't tell you how many hours of banging my head against the wall in the past life, trying to get ansible scripts to run and things like that. So this is really neat. Anytime I see something like this, I just wish that there was one way to describe those types, somewhere like if preferably in Python, just because I like that more. But there's a really cool,

00:22:32 yeah, I wouldn't be surprised if there's some kind of pedantic mapping to Yamo instead of JSON, and you can just kind of run it through there. But yeah, I think this is more of a challenge than it is, say, for JSON because JSON, there's a validity to the file, regardless of what the schema is. We're YAML less so. Right? Like, well, if you didn't indent that, well, it just, that means it belongs somewhere else, I guess, you know, it's a little a little more freeform. So I guess that's why it's popular, but also nice to have this validation. So yeah, thank you for Andrew. Thank you to Andrew for sending that in.

00:23:04 Um, yeah. So next, I wanted to talk about Pimsleur, which is great name. And I, I honestly can't remember where I saw this. I think it was a post or something by Bob Bell Duboce, or something you wrote on PI bytes? I'm not sure. Anyway, so I'll give him credit. Maybe it was somebody else. So if it was somebody else, I apologize. But anyway, what is Pimsleur Pimsleur is a little tiny library, which has a few tools in it. And it has, one of the things it says is one of the things I saw, it does a few things, but what I it measures monitors and analyzes memory behavior and Python objects. But the it's the memory size thing that that was interesting to me. So you've got a like, for instance, it has three, three tools built into it a size of and mapy, which, okay, name, and class tracker. So a size of is a provides a basic size information for one or a set of objects. And mapy is a monitoring. I didn't play with this. I didn't play with the class, the class tracker, either class tracker provides offline analysis of lifetimes of Python objects

00:24:17 might, maybe if you've got a memory leak, you can see like, there's downs of my hundreds of 1000s of this type. And I thought I only had three of them.

00:24:26 Yeah, and so one of the things that I'd really like to have, with a size of is its it, I mean, we already have ces get size of in Python, but that just kind of tells you the size of the object itself not of the like later on. So a size of will tell you not just what the size of the object is, but all of the recursively it goes recursively and and looks at the size of all the stuff that contents of it so right and

00:24:56 people haven't looked at this and they should check out Anthony's book right but If you've got a list and say the list has 100 items in it, and you say what is the size of the list, the list will be roughly 900 bytes, because it's 108 byte pointers plus a little bit of overhead, those pointers could point at megabytes of memory, you could have 100 megabytes of stuff loaded in your list. And if it's really only 100, like, no, that's 900 bytes, not 800 megabytes or whatever, right? So you really need to, if you actually care about real whole memory size, you got to use something like a size, it's cool that this is built in, I had to write this myself, and it was not as fun. Yeah, this is awesome.

00:25:33 I also, I hit this sometime in grad school, I remember when I was going to add a deadline or something. And I hit the same thing about the number of bytes in a list being so small, and just writing something that was hacky to try to do the same thing. But to have it so nice and available is great. And the name is awesome. I love silly names.

00:25:55 Yeah, for sure.

00:25:57 That one of the example. And I was confused that the example we're showing on the screen is just a there's you've got a list of a few items, some of its text to some of them are integers, and some are lists of integers, or tuples of integers, and being able to go down and do the size of everything. But then there's also a, you can get more detailed, you can give it a sized size. With with a detail numbers, I'd have to look at the API to figure out what all this means. But the example shows each element, not just the total, but each element what the size of the different components are, which is kind of cool. But it lists like a flat size. And I'm like, What's the flat thing? So I had to look that up and flat. The flat size returns the flat size of a Python object in bytes, just termed as the basic size. So like in these examples, it's like the tuple is just a flat of the tuple itself is 32 bytes. But the the tuple and its contents at 64.

00:26:57 I see. So flat is like sis dot get size of and size is a size of that bit.

00:27:03 I think that's what it is. But yeah, not sure. But that's for people

00:27:08 who are listening, they don't see this, you should check out the docs page, right? Like a usage sample. Because if you have a list containing a bunch of stuff, you can just say basically print this out, and it shows line by line, this part of the the list was this much. And then it pointed out these things, each of those things is this big, and it has constituents and so on. My theory is that the detail equals one is recursive one level down, but don't keep traversing to like show the size of numbers and stuff. Yeah. Cool. Yeah, I love it. This is great. Yeah.

00:27:39 All right, I think it's all okay, so I'm going to talk about HV plot, and HV plot dot interactive, specifically. Um, so this is something I actually wasn't very aware of until I joined Anaconda. But one of my colleagues, Phillip Roediger, who I know is on talk Python. One point is our is the developer working on this. And there's basically there's, you know, when you're working in the PI data ecosystem, there's pandas and X ray and task, there's all these different data frame type interfaces. And there's a lot of plotting interfaces. And there's a project called hollow views, or HV plot, which is a consistent plotting API for that you can use and, and the really cool part about this is you can swap the back end. So for example, pandas default plot will use dot plot, and it'll make a matplotlib. But if you want to use something more interactive, like bouquet, or Hello views, you can just change the back end. And you can use the same commands to do that.

00:28:37 So that's cool. And you set it on the on the data frame.

00:28:40 Yeah, yeah, exactly. So what, what you do is you import HV plot dot pandas. And then on the data frame, if you change the back end, you just do dataframe dot plot. And there's a bunch of kind of, you know, rational defaults built in for how it would show the different columns in your data frame versus the index. And then

00:28:59 I like that, because you could swap out the plots by writing one line, even if you've got hundreds of lines of plotting and stuff, right? It just picks it up.

00:29:06 Exactly. And, and the common workflow for a data scientist is you got a, you're reading it a lot of input data, right, then you want to transform that data. So you're doing generally a lot of method chaining is a common pattern, where you want to do things like filter and select a time and maybe pick a drop a column and do all kinds of things right. At the end, you either want to show that data or write it somewhere or plot it, which is very common. Now there's interactive part. Philip, demoed this or gave a talk at PI data global about two months ago, I think it kind of extends on that and this blew my mind when I saw it. So if you had a data frame like thing and you put dot interactive after it, then you can put your method chaining after that. So this is an example where you say I want to select a discrete time and then I want to plot it and this is this particular example is not doesn't have a curtain All running in the backend. So it's not going to sweat, which but if you were running this in an actual live notebook, it would be changing the time on this chart. And again, this is built to work with the a lot of the big data type API's that match the pandas API.

00:30:15 Nice. So for people listening, if you say dot interactive, and then you give the parameter that's meant to be interactive, that just puts one of those I Python widget into your notebook right there. Right? That's cool.

00:30:27 Yeah. So a related library is called panel, which is, it is for building dashboards directly from your notebooks. So you can if you had a Jupyter Notebook, you could say panel serve and pass in the notebook file. And it'll make a dashboard. That's the thing I'm going to show in a second here. But the way they interactive works is really neat. So wherever you would put a number, you can put one of these widgets. And so you can have time selectors, you can have things like sliders, and you can have input boxes and things like that. And all you do is you would change the place where you put your input number, and put one of those widgets in and then it sort of it, I actually don't know how it works exactly under the hood. But from what I understand, you put this interactive in, and then it's capturing all the different methods that you're adding on to it. And anytime one of those widget changes, it will change everything from that point on. And so the demo here was from another panel contributor, Mark SCAF Metzen, and are just going to play this and try to explain it. So we have a data pipeline on the right, where we've chained methods together. And what he's done here is he's just placed a widget in as a parameter to these different methods on your data frame. And then this is actually a panel dashboard that's been served up in the browser. And you can see this is all generated from the little bit of code on the right. So if you want to do interactive data analysis, or exploratory data analysis, you can really do this very easily with this interactive function. And when I saw this, I kind of hit myself in the head because the normally my pattern here was I had a cell at the top with a whole bunch of constants defined. And, you know, I would manually go through and Okay, change the time, start time, from this time to this time, or change this parameter to this and run it again and over and over.

00:32:16 Again, remember, run all the cells that are affected.

00:32:19 So the fact that the fact that you can kind of do this interactively, while you're working, I could see how this would just, you know, you don't break your flow while you're trying to work. And the method chaining itself is, I really like to, because you can comment out each stage of that as you're going and debugging what you're working on. So yeah, this is really neat. And I definitely I'll put a link in the shownotes to the actual talk, as well as this just that marks cobnuts and put on GitHub. And yeah, it's it blew my mind, I would have made my life a lot easier. Had I known about this earlier. So

00:32:54 yeah, and one of the important things I think about plotting and interactive stuff is it's not even if your end result isn't a panel or an interactive thing. Sometimes getting to see the see the plot, seeing, seeing the data in a visual form helps you understand what you need to do with it.

00:33:14 Yeah, no, exactly. I mean, I did a lot of work in the past with time series data and time series data, especially if this was sensor data, you had a lot of drop outs, you might have spikes, and you're always looking at it, and try to make some judgment about your filter parameters. And being able to have that feedback loop between changing some of those and seeing what the result is, is a huge game changer. So

00:33:37 yeah, yeah. And you can hand it off to someone else who's not writing the code and say, Here, you play with it. And you you tell, you know, give it to a scientist or something. Oh, that's

00:33:44 exactly right. That's what panels all about is what the biggest challenge that I always had in many data scientists have is you do all your analysis in a notebook. But then you got to show your manager or you got to show your teammates. And going from that going through that trajectory is can be very challenging. These new tools are amazing to do that. But that's how I turned myself into a software engineer, because that's what I wanted to do. But I went out, but down the rabbit hole, learn flask and dash and how to deploy web apps and all this stuff. And yeah, well, I'm glad you did. Yeah, maybe I wouldn't be here if I hadn't done that. But But yeah, this is really cool. And I definitely recommend people look at this. There was also another talk this sorry, this is an extra. But there was another talk at PI data global, hosted by Jim James Bednar, who's our head of consulting, but he leads pi WW is, which is a community for visualization tools. And it was a comparison of four different dashboarding apps. So his panel, dash, voila, and streamlet and they decided, you know, main contributors from the four libraries talking about the benefits and pros and cons of all of them. So if anyone wants to go look at those, I definitely recommend that

00:34:56 to that sounds amazing. All those libraries are

00:34:59 nice Thanks. Oh speaking it was extra parts of the podcast that make the podcast longer. We should do some extras.

00:35:06 We should we should do some extras. Got no,

00:35:10 I don't have anything extra.

00:35:11 Matt, how about you?

00:35:12 Yeah, um, two things. So first, he can show my screen. Last year Anaconda hired the piston developers piston is a faster implementation fork of C Python. I think it was at Instagram. First I can't recall. But anyway, before, right before the holidays, they released precompiled packages for many of couple 100 of the most popular Python packages. So if you're interested in trying piston, I put a link to their blog post in here. They're using conda. Right now they're able to leverage a lot of the conda forge recipes for building these. This is that binary compatibility challenge that we talked about earlier. So yeah, I know that the team is looking for feedback on on that if you want to try that, feel free to go there. And it mentions in the blog that they're working on PIP that's a little harder to just because of how, you know, the build stages for all the packages aren't centralized with PIP. So it's a little more challenging for them to do that. And then just the last thing is, you know, I don't want to be too much of a Salesman here. But we are hiring. It's an amazing place to work. And I definitely recommend anyone to go check it out if they're interested,

00:36:21 though. Fantastic. Yeah. And you put a link in the show notes. People want to

00:36:24 Yeah, it's Anaconda comm slash careers. And we're doing a lot of cool stuff and growing. So if anyone's looking for work in the in data science, or just software and building out some of the things we're doing to try to help the open source community and bridge that gap, spelled it wrong. bridge that gap between enterprise and an open source data science in particular.

00:36:46 Oh, yeah, it definitely seems like a fun place to work. So cool. People looking for change or for fun Python job. Yeah, we're gonna reach out to Yeah, cool. People do reach out to Brian, I mean, saying, hey, I really want to get a Python job doing other stuff. But how do I get a Python job? Help us out? So we don't know. But we can recommend places like Anaconda for sure.

00:37:07 Yeah, it looks like there's about 40 jobs right now. And, though, pick it out? Fantastic.

00:37:10 Oh, wow. That's awesome. All right. Well, I would surprise you if I had some extra things.

00:37:16 It would surprise me if you didn't.

00:37:19 Alright, first of all, I want to say congratulations to Wilma googan. We have gone the entire show without mentioning rich or textual? Can you

00:37:28 almost. But now, only because I knew you were going to talk about this. Otherwise, it would have thrown it in. Yeah,

00:37:35 so will last year a while ago, I don't know the exact number of months back. But he's planning to take a year off of work and just focus on rich and textual, it was getting so much traction. He's like, I'm just going to live off my savings and a small amount of money from GitHub sponsorships, and really see what I can do. Try that. Well, it turns out, he has plans to build some really cool stuff, and has actually all based around riched, and textual in particular, and he has raised a first round of funding and started a company called textual eyes.io. How cool is that? Well, we

00:38:13 don't know. Because we don't know what it's gonna do.

00:38:15 All you do is if you go there, it's like a command prompt. You just enter your email address, I guess you hit Enter. If something happens, let's find out what happens. Yes, I'm confirmed. Basically just get notified about when texturised comes out of stealth mode. But congrats to Well, that's fantastic. Another one we've spoken about tenacity. Remember that? Brian? Yeah. So genesi is cool. You can say, here's a function that may run into trouble if you just put at, you know, tenacity, dot retry on it, and it crashes. It'll just try it again, until it succeeds. That's probably a bad idea in production. So you might want to put something like stop after this, or do a little delay between them or do both. I was having a race condition we're trying to track when people are attempting to hack, talk Python, the trading side, the Python, byte side and all that. And it turns out when they're trying to attack your site, they're not even nice about it. They hit with a botnet of all sorts of stuff. And like, lots of stuff happens at once, and there was this race condition that was causing trouble. So I put retry a tenacity, retry, boom, solve it perfectly. So I just wanted to say I finally got a chance to use this to solve some problems, which was pretty cool.

00:39:18 That's really cool. The other one that's similar to this, which I've used, and I think, I don't know if you use Brian, but it's called PI test flaky. And it's awesome. Because I was working with this time series data historian, I had a bunch of integration tests in my last job, but you know, network stuff, it would drop out occasionally. And so you can do very similar type things and wrap your test in an at flaky decorator and do similar type stuff. And you know, give it three three tries or something before you make it fail.

00:39:49 Yeah, exactly. That's cool. That's what my I think mind us three tries. And it's like randomly a couple second delay or some. Remember that part Brian, where we talked about it's really cool. People are in the audience while we talk about stuff and then go Little feedback. So Wilma, Google says, Hey, thanks, guys can't wait to tell you about it. Yeah, congrats. Well, that's awesome. Glad to see you out there. All right, a couple of things. Did you know that GitHub has a whole new project experience? That's pretty awesome. Have you seen this? I haven't, I haven't. So you don't have is like this Kanban, board Kanban board, where you have like columns, you can move your issues between them. So just last week, they came out of this thing called a beta projects, where it's still can be that, or it can be like an Excel sort of view, where you have little drop down combo boxes, like I want to move this one in this column by go into that mode, or as a board, or you can categorize based on some specification, like, show me all the stuff that's in progress, and then give me that as an Excel sheet, and all these different views you have for automation. And then like, there's API's, and all sorts of neat stuff in there. So if if you've been using GitHub projects to do stuff, you know, you can check this out, it looks like you could move a lot of a lot more work towards that on the project management side of software, these two,

00:41:01 this is really neat. Yeah, in my previous job, I was using Azure DevOps. I was always wondering when some of those features might move to GitHub. I don't know if that's what happened here. But being able to have this type of project management in there for for this type of things. It's really, really great.

00:41:17 Yeah, super cool.

00:41:18 Yeah. One of the things I love about stuff like this is because even I mean, yes, a lot of companies do their project management on or projects on in GitHub or places like that. But also, open source projects, often have their often have the same needs of project management as as private commercial projects. So

00:41:40 yeah, yeah. I personally, I only have a few open source small projects that are kind of personal, and no one would probably want to use them, but even just keeping notes about to dues and interest stuff, and it would be really nice.

00:41:55 Yeah, just for future you if nothing else, right? Yeah. Awesome. Okay, so this is cool. Now, the last last thing to talk about is markdown. So Roger Terrell, turned me on to this. There's this new Markdown editor. it's cross platform, yes, crop across platform called type hora. And we all spend so much time in Markdown that just wow, this thing is incredible. It's not super expensive. And it looks like a standard Markdown editor. So you write markdown, and it gives you a WYSIWYG, you know what he sees what you get style of programming, which is not totally unexpected, right? But what is super cool is the way in which you interact with it. And actually, I am going to show you real quick, so you can you can see it. And then you can tell people like what do you think about this? Here? I think that's it back waiting there. Okay, yeah. So here, here's, here's my, here's a markdown file for my course, just the practices and whatever. You can say, You know what I would like to view that in code style, right? Well, that's kind of cool. We want to edit this, you click here and it becomes Ooh, comes markdown becomes markdown. That's but this is a boring file. So let's see about he has a whole file system that navigates like through your other markdown stuff, hierarchically. So like here, chapter eight is a good one. So we go over to chapter eight on this, and now you can see some more stuff, I can go set these headings and whatnot. But if you go to images, like you can set a caption, and then you can even change the image like right here for a PNG. It's not but so put it back as JPG, and then it comes back, you can come down and write a code fence. Use the right symbol. And you can say def A, right, whatever. And then you pick a language. Isn't that? Isn't that dope? Oh, this is so good. So if if you end up writing a lot of markdown, and if you need to get back, you just go back and switch back to raw Markdown and then go back to this fancy style. I think this is really a cool way to work on markdown. I'm actually working on a book with Roger, and it's got tons of marker. And it's been a real joy to actually use this thing on it. So

00:44:01 yeah, does it got vi mode? Oh, I don't

00:44:05 know about that. But it has themes. Like it. I can do like like a night mode or I could do like a newspaper mode or you know, take your pick. It's it's pretty cool.

00:44:15 The weirdo grad student in me is upset. This isn't law tech, but it has

00:44:19 it has built in law tech. Oh, it has like you can do? Yeah, you can do like inline law tech. And you can use a bunch of settings you can set for the attack that it's got a whole a whole math section in there. Oh, sweet. Okay. Yeah, let's see. So am I

00:44:34 the only person that went all the way through college pronouncing it latex?

00:44:37 I did too. But I just learned that the cool way of saying that okay.

00:44:40 Yeah, yeah, it's French. No, I don't know. But no, yeah, it has it has support for like chemistry settings like in line law tech and math and all sorts of good stuff. So yeah, it's it's I'm telling you this thing's pretty simple. All right. Well, I got to do my screen share back because so you all can see the joke because the joke is Very good. And we're going to cover where at the end, it's at the end. So if people don't want to send the joke they don't have to. Brian I blew it. I blew it. I blew it for move off the markdown thing though. Anthony Shaw says editorial for iPhone iPad is really nice, too. Cool. So, but let's do let's do the joke. So I blew it because I was saving this all year. I saw this like, last March. And I'm like, This is gonna be so good for Christmas. Yeah. And then we kind of like an already recorded episode of our are not going to do that. We'll just take a break over. So we didn't have a chance to do it. So it's doing now people are gonna have to go back just a little tiny bit for this one. Right. Are you ready? Yes. Matt. You ready? Yeah. So this goes this sort of a Data database developer type thing here. And it's on a I don't know, I thought a printout. Anyway, it's called SQL clause, as in SQL clause. So it's, he's making a database. He's sorting it twice. Select star from contract contacts where behavior equals nice sequel. Claus is coming. Nice. It was so good for Christmas, but we can't keep it another year. I gotta get

00:46:10 to sing it. Sequel clauses come in

00:46:13 to town. Yeah, exactly.

00:46:16 Okay, I want to share a joke that I don't have a picture for. I do it but but my daughter made this up last week. I think she made it up. But it's just been cracking me up for and I've been telling it to everybody. So it's a short one. Imagine you walk into a room and there's a line of people all lined up on one side. That's it. That's the punch line.

00:46:38 I love it was so nice. We had my we had my cookie candle. Last time, guys. My I can't all

00:46:48 these cookies. We've got a dad joke of the day chattel in our slack at work and it's it makes me OOF every time. Nice, nice. Okay. All right.

00:47:00 Oh, nice to see everybody. Thanks, Matt, for joining the show. Thank you for having me. Good to see you, Michael. Again, as always. Yeah.

00:47:06 Good to see you. Thank you. Thank you. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYD s get the full show notes over at Python by Sarafem. If you have a news item we should cover just visit by them by Sarafem and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

