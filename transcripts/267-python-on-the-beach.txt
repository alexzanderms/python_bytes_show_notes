00:00:00 Hey there. Thanks for listening. Before we jump in on this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes at FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python by stata FM slash pi test. Enjoy the episode.

00:00:29 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 267. Recorded January 19 2020 2022. That's it. I'm Brian. I can Michael Kennedy. got kind of I've got a cool green screen today.

00:00:47 I know some days we have cool stuff to talk about and cool things to share. But you're taking the next level you are live streaming and recording. Yep. Right from the beach in Hawaii. So

00:00:58 yeah, I'm looking at I'm so diverse right now. So it's nice. It's

00:01:03 you could probably handle doing it more than one week. Right? You could just do this for a while.

00:01:07 Yeah, we should do I should move here about a month every year. That'd be great. Anyway, uh, let's move on to our topics. Michael, you want to talk about boxes,

00:01:17 I really do want to talk about boxes. This is such a cool library that I found. So here's the thing. We have Python classes, and we have dictionaries, where's all the data stored for most classes in the Dunder dict, right, which is a dictionary of what is your field here is its value, each instance of the class each object gets its own instance of that dictionary right there. And yet, when we have a dictionary, we can't treat it. We can't get the values of the dictionary, in the same way that we do have a class A class, you say thing dot field? Well, wouldn't it be nice if you could go to your dictionary and say it has a key dot name, so just d dot name, to access it. That's the basic idea behind this thing called Box by CD Griffith. And that enough, that was enough to get me interested and think this is a cool idea that I would love to play with. And maybe I should use it more. But then I started to look a little bit further. So if you go down here, it says, All right, well, sometimes these keys, they have a structure that won't allow you to treat them that way, like a space or colon in the example of spaces and colon. Yeah. So for example, they have a key that is the name of a movie, and then data about that movie. So Robin Hood spaces, colon men and tights with spaces. And by default, it'll actually convert that into something that you can use by just you know, replacing spaces with underscores and colons just go away and stuff like that, Oh, that's awesome. You can still do that, which is cool. But there's a lot more stuff, it says check out the box, GitHub wiki, which is right on the homepage, the GitHub that I linked to. And there's all sorts of things. So they show it start by showing just the basic stuff, like here's a box and you just you can create it through keyword values or pass it a dictionary, it'll initialize out of that. Do they've got like funny movie equals something and you just say my box dot funny movie, just like it was a class. And that was like I described the first thing. However, there's more that you can do with it. So if you go over to the types of boxes, they have conversion box, default boxes, box, dots, camel killer box, which is awesome. That was in boxes, converters, so not just only will it work in all these ways, which I'm about to describe, it will convert to from dictionaries to and from JSON to and from YAML to and from message pack and CSV. Aha. Okay, so let's go to the types of boxes and check this out. So by default, you get the conversion box, which is what I described where there's a space sort of put an underscore, yeah, all of them you can access in this key value way, it's just a matter of what happens to the keys if there's a way to make them more accessible. But you can turn that off, you can have, you know, a default dictionary, right? Where if the thing is not there, instead of throwing a key, or it will create whatever you say the default is like create a list because I want to add up things or create start with a number of zero, because we're trying to count each one of those as we build it up or something like that, right. So it can also be a default dictionary, they call that a default box, which is cool. And it can also do what it calls box dots. So in a string, you can traverse the hierarchy of the stuff contained in the box through the dot notation. So you could say, you know, my box dot A dot B dot c, and it has this fluent interface where the thing that it returned from each level is either a primitive thing like a number, but if it's a sub dictionary, it'll return a sub box, I guess, right? So you can keep going on it. You can also just say, quote A dot B dot c, to traverse that hierarchy as a string if that's more programmable This one is great. Are you working against an API or some data source? That is written in a different language style. So especially I'm thinking C sharp here where it's not lowercase and underscores as a separator. But it's capitalization camel case, like, the example they have is pesky and annoying keys, which is capital P, capital A capital A capital K, all one thing and like, if you're going to say dot the thing, well, guess what? You're going to have to write that in your code, right? Yeah. Unless you make it a camel killer box. And then it converts it to snake case pesky. Underscore and underscore and annoying and keys. So if you program against an API that's written in another language, you can still do this Pythonic code, which is That's amazing, right?

00:05:44 Yeah. I like that. That's great.

00:05:46 I know, it's a good a good name.

00:05:49 I mean, I, it's it's a fun thing. I personally wouldn't recommend it. Because then your code you're it's hard to look up the documentation because it'd be wrong.

00:05:59 Things like Yeah, yeah, maybe something more in the affirmative, like snake case, converted or whatever. They have a frozen box. So it's unreadable. And hashable, which is pretty cool. A recast? So you if you put in strings to this key and that you want it to be numbers, it'll always convert it to a float or whatever. So those are all pretty awesome. And then it'll even do things like put a prefix for stuff that couldn't be valid, non quoted, symbols, right? You could you can say, dot name, but you can't say dot 327. Name, right? So you can say put an X. So it's x 317, or whatever. All those things are pretty awesome. Let's go back here. The other thing is just the converters, right? So there's all the converters, you might go to dictionary to YAML to tahmo. And also from all those things, which I think is pretty neat. So what do you think like it?

00:06:55 Yeah, I do in this, there's times where I've really had wanted to conveniently just create something with a dictionary. But I wanted to use dot notation. So I've used like, name tuple, or something like that. And in this, this is actually this does it for you. So nice.

00:07:13 It's really nice. And I've done stuff like that as well, where I'm alright, I'm going to create an own class that derives from dictionary and just give it a set adder get adder. So you can do the dot thing on it. But this seems just so many more other features on top of it that I don't think I'll ever do that. Again. I'm just going to use this box thing. Much better. Nice. Yeah. So I think there's just a few comments that I got to bring in. Yeah. Roman, right. Other points out that the setting default box is not the default setting, which is pretty awesome. Yeah. Chris May points out that, that for this someone needs to think outside this package to get something outside the box, right? To get something really amazing. And just, you know, Brandon brainers a little bit jealous of your green screen.

00:07:58 Hey, that Brandon was the one I had I had on a guest for testing code recently. So

00:08:03 I ran it right on. Yeah. Okay, cool. So, all right. Um, well, but next,

00:08:08 what's next is a mocking sort of mocking. So Adam Johnson has an article called making simple mocks with simple making simple mocks was simple namespace. And I had never heard of this. So I'm really glad he wrote this article. It's really pretty great. Oh, I have the wrong. Oh, yeah. Let's just cover this one. They might notes there. Right. So Adams actually been refreshing it lately. He's got a lot of recent blog blog posts. So good job, Adam. The simple namespace is pretty neat. It comes from the type standard library. So it's not an extra package, you have to have to bring in which that's cool. But one of the things that said, it's like, normally, we use unit tests mock. You can to mock something. But one of the problems with mocks is by default, if you misspell something, it's gonna be fine. And mock just lets you do whatever attribute access you want. And that's usually not something you want. So Right. Usually

00:09:06 the mock is like, let me just get in the way. And just let things keep working no matter what, right? Yeah, don't do anything unless you say return this value for this function call or something. Right,

00:09:16 you can pass in specs. And if you have a known object that you're mocking use specs, and that that works. But sometimes you don't need that much of stuff. So simple namespace is a thing that just lets you fill in attributes. And then it works to access them. It works kind of like a name tuple or something like that. But the usage of it is super simple. And then, and then you can pass this around. And so in the in the parlance of, like testing, this would be for a faker stub. Not really a mock because you don't interrogate it, but if you just need to fill it have something that that, you know, walks like a duck and quacks like a duck. You can use one of these to create a duck and have a good passed in. It's pretty cool. And super simple and really easy. Love it.

00:10:04 It seems a lot like just what people would have expected mocks to do if you described it. Yeah.

00:10:10 Like it. So he has a great quote, it's as simple as possible with no faff around being callable or tracking usage or something. So in, in a lot of sometimes with mocks, you try to interrogate so you have a function call, and you interrogate the marks to say, did it get called by my code. These don't do that. You can't do that. But as long as but you set it up with the attributes you want pass through. And it's pretty, just pretty neat. I'm going to use these all the time now. So

00:10:38 yeah, it looks fantastic. Very nice find i for the next one that I want to talk about. Let's go to space, space, and embedded things in space. So this is pretty fun. This is the article on CD net, talking about a Raspberry Pi. So apparently, the European Space Agency has uploaded and installed and configured two new Raspberry Pi's and not just any Raspberry Pi's there these, what is it Astro pi, that's what it is. These are regular Raspberry Pi, four boards, model B's with eight gigs of memory that had been hardened for space. Okay, wow. Okay. And the whole goal of having them up here is so that students and kids can write code and run experiments and just play with automation, but literally using the sensors of the International Space Station and actually writing Python code and machine learning stuff that runs up there in space. Isn't that cool? That's incredible. Yeah. So apparently, there's 500 student programming teams in Europe who are all participating in this thing called the European Astro pi challenge, which is like an education focused competition or started up or whatever.

00:11:59 Okay. Yeah, very so out of this world. It's out of this world.

00:12:03 Absolutely. It's really cool to see Python in space. Right. And here's just more of it. Right. So Raspberry

00:12:08 Pi's. I guess you can you can practice your stuff at home, and then have it go up there. Neat.

00:12:15 Yeah, very cool. So you have things like the humidity, reading and board the ISS, and the various sensors and things on there that you can work with, and then just do sciency things. I mean, when I was a kid, the science fair was like, well, let's make a little volcano that erupts and like it was this stuff out of paper mache. And you know, these kids get to write code that runs in space. That's, that's the next level.

00:12:40 Yeah, I admit that. I've never done the volcano thing, though. What kind of I should do that?

00:12:45 Yeah, I haven't either. Very much. I mean, I did some paper mache thing. And I think I had a failed volcano once. But that's about it. Anyway, I just think this is really cool. And it's a neat use of Raspberry Pi's, it's a cool way to take like a semi modern computing environment, put it somewhere anywhere has access to real the real world and let kids and other researchers write code on it without going. Yeah, we're not going to install your program on the ISS. No, no, thanks to that.

00:13:12 This is so neat. I'm just blown away. I would have never thought that something like this was going to happen in my lifetime. sighs

00:13:18 Yeah. Yeah. So many neat things. All right. Well, that's, that's all I gotta say about that. But definitely fun.

00:13:24 So one of the things that new, new coders have to deal with, in unfortunately, it's too hard to tell them ahead of time how to deal with it is tracebacks. So trace backs are. They're they're just part of life with coding. And Trey Hunter has an article called Reading tracebacks in Python. And it's a really great simple introduction. I love it. One of the things I want to comment on is just just the order in which we teach people things. And teaching people how to do trace backs is something that it really needs to be early, maybe like right before testing it right after the Hello World. But trace seriously trace backs happen so fast. And and when you start coding, an assertion happens that you don't catch and you get a traceback. And people panic and go, Oh, my God, I suck as a programmer, and you don't, it's not overwhelming, just kind of walk through it simply. And that's what this article is about is how to walk through simply. And so we're going to, it's if people are new to Python, listening to this, or how to teach people, you just teach people to start at the bottom, you read the last line first. So the last line of traceback is the error message, let's scroll to one on here,

00:14:40 which is good to know, because that's not true for other programming languages. The error is at the top in it, it's kind of inverted. Oh,

00:14:46 really? I forget that. Yeah. So the last line is the the exception and then and then also the message for the exception if it's if it's there, and then and then you read up and the next two lines up Are you've got a file name and a line number and, and then a copy of what the line is. And if and that's it, that's the place where the exception actually happened. And these two double things, there's two lines, the line is called, what do you call it? There? The stack trace the stack, whatever. Yeah,

00:15:19 call stack?

00:15:20 Yeah, it's this is the call stack. And that's even

00:15:24 more so because you get lines within functions, right? Not just that. Yeah.

00:15:28 And then. And then, if you don't understand why you have an exception there, you just keep going up, you keep going up to and sometimes the exception happened not in your code, but in some, some third library call that you went called. So you're not going to debug that. So you have to debug your code. So you, it's good to go up enough to where it's in your code. And then if you can't figure it out, you just keep going up. In this, this example, is actually not obvious to me what was going on. So I'm glad he walks through it. So Trey walks through how to read this, and goes up to the fact that so this is the example has a type error, because you can't concatenate a string to an integer. And that's weird, because doesn't look like it's trying to do that. But then he walks up to find out that the function is actually taking the standard input, and passing it in as a number and one of the arc v's and you have to convert it to an int first, but so that's a sub, I'm glad to use that example. Because people new to command line interface, coding, often forget that, that the input is usually a string, even though you pass in a five, it's still going to be a string with a five minute,

00:16:43 right? It looks like a number, but it's not a number.

00:16:45 Yeah, so you have to convert those. And a reminder here, this is user input, even. So in this case, it's not going to be harmful just to convert it to an IT. But even command line input is input from a user. So you have to sanitize it if you need if you're doing anything like with the database or something. So

00:17:04 absolutely. That's, that's great. I think, definitely, that's the kind of thing you need to start with. When you're teaching people Python, like almost before you teach them to code, like how to, if you run into an error, here's how you understand it a little bit. And here's how you Google it or go about finding some way to fix it.

00:17:22 Yeah, and if you start, especially if you start at the top, it's gonna be a mess. Because if you've got a call stack, like 50 functions deep, hopefully not. It's gonna be a really big trace back. And you don't want to try to untangle all of it just start at the bottom.

00:17:35 Yeah, absolutely. And Dean out in the live stream says, you know, when you use some Python wrapper on top of a Java micro service, and you get a 500 line exception, hey, like, what have I done wrong to deserve this? Yeah, that's like the advanced version of this. Yeah. So you know, advanced, how about some intrigue? Ooh, huh. This picture? Oh, yes. So you and listeners may have heard of this person who turned out to go a little bit bonkers on their open source code, luckily, an NPM and not Python. So Java, JavaScript space. So there's colors and J S, which are two widely used no padding margin NPM libraries use for JavaScript and Node J. S. Well, this developer Maroc squires in first they thought it was a supply chain vulnerability, and somebody hacked their account, but it turns out no, no, no. Marek intentionally corrupted both of his library. So they ran in an endless loop spitting out random political messages while it would loop around and just fill the screen with garbage. So initially thought to be a hack, but political and personal messages included in the code and on his related websites indicate that it may be the work of a disgruntled lashing out. Developer wacky, wacky, okay, so that's not I was not going to cover that. I saw that and I thought that that was pretty interesting. And then Mike LaFontaine points out. Oh, Brian Krebs, a security guy. I just noticed that this Mirek squires seems to be the same fellow who sabse sabotage to his own popular open source libraries next week. And he links to an article on in my posts, residents of Queen home with suspected bomb making materials charged for some sort of like terrorism type of thing. So the same person who sabotage their their NPM packages then was like in the process of making bombs, and it just kind of shows you the interesting spectrum of where all this stuff lands. That's crazy, huh? Ah, yeah. Weird. Yeah. Yeah, very weird. Oh, I also forgot to point out this is an extra extra extra section. So short, I got more stuff. But the first one is the guy that went and messed up all the stuff on NPM and everybody's dependencies recently, has now been charged with creating bombs in Queens. New York. So, yeah, there's that. Okay, here's one that's really positive, Andy Griffiths, don't know this person, but they posted something incredibly simple. That is super helpful when you're building websites and trying to design them, you know, you can go to inspect element and you can like hover over different parts of your page, and highlight, it'll show, okay, this is actually the div here that is containing this, and it has a margin. And so that's why it looks like that. Yeah, this guy posted, hey, struggling with layout, turn on CSS outlines, it's a superpower. And all you have to do is write this incredibly simple CSS star is the CSS selector, outline colon one, px solid red. And what you get is your entire site now highlights all the elements on the page so you can figure out how to style them. Oh, that's pretty cool. Given the amount of work in man, amazing. Yeah, yeah. So I definitely think this is something I'm going to try to use when I'm working on design and stuff, because it's just so so much easier than trying to like, hunt around with like, the debug tools. And then you know, you reload the page, and it changes and all that. So, quick tip for people there who do web stuff, python three 10.2 is out. And there's actually a decent amount of stuff shipped in it. If I do some quick scrolling scrolling, I would say that's like 3040 changes and bug fixes and so on. Wow. So things like fix, hang in run test underscore MPT, due to race condition, or fixing and documentation or fixed hash lib used for security option to work correctly with the new version of open SSL fix memory leak and pi eval dot eval Kodiak. So that sounds like it might be used a lot of places, and using the conjunction with the word memory leak, that might be good to fix. Anyway, I already installed this on all my servers and have it run in production and nothing seemed to catch fire. So that's good. Yeah, very good. Yeah. So Python 310. Two is out. That's cool. All right. One thing, one more thing, to put two more things related. I'm doing a YouTube series on a bunch of little short Python lessons. And I've got about 100 videos I want to make. And I've made five of them, and published or scheduled them to go out already. So I've got a list, don't me this thing. Anyway, a bunch of little tips like parsing data with pedantic or counting the number of occurrences of items in a list or you've got foreign loops, convert them to list comprehensions. These are all like, four minute videos that just teach you something really quick and Python. So if people are interested in that, they can click the link and then subscribe to my personal channel, not the Python bytes, YouTube channel, which is awesome, but doesn't have this content. To get more of those says that that's fun. Cool.

00:22:48 How do you find time for all this stuff? Michael, you're like everywhere.

00:22:54 I've been, I've been wanting to do some of these YouTube videos and just try and explore some of the ways in which people are like presenting and teaching coding for like six months, and I've just decided, I'm just gonna take two days, and just gonna do it. Because I've been putting off for like months. So there's that. Speaking of time, I also am controlling our stream and doing all sorts of fun stuff with like this device called a stream deck, which you may have heard of the stream deck, you have one too, right, but just not Hawaii. Stream deck is this little device here that lets you basically set up a bunch of buttons and control things, which is super fun, and it's built for streamers and whatnot, I decided to see what you could do. If, let's see, I pulled up the wrong link, I decided to see what you could do around the stream deck, and software development. So so far, I have two profiles, one for PI charm, where you can control all sorts of things like click a button on your little device, you know, show your PRs, or switch the select mode, you can write and call it multi columns and all sorts of stuff. And then also one for Jupiter that'll like launch Jupiter and insert, insert your standard imports and add cells above and below and rerun them or show me the compare command palette and stuff. Nice. So yeah, that also has a video on it as well. People can check that out. But I, I've got this YouTube profile and GitHub profile repository where it has all the profiles for the stream deck. So if you want to download it, play with it, customize it, those are up there as well. Alright, that's it for all of my extras. You got any yourself?

00:24:32 Yeah, so I wanted to talk about. So this is a cool article by David Amos. So David's awesome. He's one of the one of the games that people are real Python, but it's the articles are three things you might not know about numbers, if in Python, and one of the I don't know where the line is, oh, it's near the top. It's so awesome. He's got a line that says there's a good chance that you've used A number in one of your programs. Yeah, I think so

00:25:03 this is I wish I could get behind that statement.

00:25:06 Yeah. So what are the things like strings have strings have bug, like functions attached to them, they've got methods. And, you know, we know that it's kind of different than other languages. But numbers do too. And this is something actually didn't didn't occur to me that the the you can do like two bytes and stuff. So there's, there's functions that you can call on a number. There's a trick, though, you can't do like 250 5.2 bytes, you have to put it in a variable name, so that it doesn't think it's a decimal point. And you also or you can put parentheses around it. So you can do 255 with parentheses around it, and then call two bytes or something like that. So there's integers have two bytes. So you can convert it to bytes. You can use the class class method from bytes. And you can also do like bit length and a bunch of other functions that are pretty cool around integers, which is neat. And then floats have their own methods floats have, like, Isn't integer, or is integer ratio, which are as integer ratio, so it'll convert it to energy ratio. That's pretty cool. Oh,

00:26:15 wow. Like the some sort of approximation in rational numbers like, yeah, so

00:26:20 yeah, I don't have I don't have that example pulled up. But now that's cool. There's some idea about this stuff. Yeah, I've got a bunch that there's a, there's a, there'll be some links in the show notes to the Python documentation for these. It's pretty nice. The, the, okay, so that's the first thing that you should know about numbers is there's methods there. So look them up in the documentation. And I'll we'll have links to the documentation. And then the second thing you know about numbers I can have the third is numbers have hierarchy. So there's, there's four, four abstract types in, in Python for numbers, there's complex, real rational, and an integral. So complex is the complex that most of them only have one type in it complex. The abstract type of complex has complex real has float rational has fraction, but integral has both int and bool. So that's neat. They're Boolean interrelated. And then, but then we also have these decimals. Um, yeah, so there's, I wanted to find his stuff on decimal. Decimals don't fit. So decimals have there. They're not really part of this hierarchy at all. But they're, they're their own decimal class. So there's not there's not an abstract class, but that's okay. decimals are great. And people should remember decimal is round. If you have if you're working with money or something like that,

00:27:48 use def, super precise science. So

00:27:51 these are good. Also, because these are just normal types. Numbers are extensible. Oh, yeah. A comment about floats are weird. Yes. Those are always weird. Boats are weird. Yeah, the numbers are extensible. Since these are cloud classes, you can, you can derive from them. But he comments which is good, it'd be really careful. Because if you want to extend a class, there's a whole bunch of Dunder methods that you have to make sure work, right. So maybe you don't want to extend it, but you can you can make your own numeric types. So just the third thing, anyway, kind of a neat,

00:28:28 kind of wonder what you might actually create those for. I mean, maybe you might, well, maybe we'll create an integer that has a bounds and is an error if you try to make one too large. Or some

00:28:39 Yeah, I'm not sure.

00:28:42 On the spot here. Yeah. Another thing that's amazing is a complex numbers. All right. Natively built into Python.

00:28:50 Yeah. And that's, that's really great. And that's essential for a lot of scientific and, and, you know, measurement work and stuff has to have complex numbers are in

00:28:59 there. Truly amazing. All right. Well, I think that's all I did my extras. I skipped your set here your articles to ask you buy extra Do you have any actual extras you want to cover?

00:29:10 I don't have any actual extra Have you had any dangerous encounters with like, warm water?

00:29:16 Have you maybe stubbed your toe on a rock? Or was there a turtle that came by or well so they run into like an eel there are eels in the corner in the reefs there that you might want

00:29:25 to stay? So I've only been here a couple days so far we've been I've been swimming couple times right out right like you can you have to look down not across to see the beach from from what I'm saying. And so I went swimming right here. It's got it's kind of fun because it drops off right away. So there's a little beach and then it drops drops deeper right away. And that's but it's not like a big current so you can swim really was only going out a few feet which is nice. And then we went to another beach that was like shallow for a long time but then had coral and stuff. And that was really fun to scuba dive or not scuba But snorkel over and look around, but if you're just wanting to walk out the corals like tough to walk on then

00:30:09 Yep, super sharp. Yeah.

00:30:12 But having having a lot of fun. Awesome. Good to hear. Well,

00:30:15 I think we should round it out with one or two things here. We got some jokes. Now I saw Josh out in the audience and he sent in some jokes which we'll make part of this soon. But I didn't have time for this episode. So we got four. Oh, really? book covers. I love these. Not the O'Reilly cuz you know, though, Riley books, they always have an animal and a title. Yeah, and whatnot. So Oh, really our take that kind of puts a funny spin on it. I'll do this first one, we got 40. We could do two each. So the first one here has a platypus on the screen it says the little subtitle is that the quote is the original developer isn't here for a reason. And the title is losing your will to live code maintenance guide.

00:30:58 Yes, written written by the intern the insert. You want to take this?

00:31:07 So the title is a expert vague understanding of computer science probably be able to explain a sorting algorithm if it ever comes up. By them.

00:31:20 Yeah, by the practical. They're very good. Very good. Okay. The next one is an elephant. Very proud. Speaking out loudly. Yes. It depends. The Definitive Guide The answer to every programming question ever conceived.

00:31:35 It's a short book.

00:31:39 Alright, bring it bring it home with us. Last one.

00:31:42 Okay. So works on my machine, the Definitive Guide. How to Convince Your manager. Yeah.

00:31:50 I love it. Very good. Very good. Yeah. Well, Brian, everyone listening, almost everyone is jealous. I'm sure there's some people in Hawaii like yeah, I just go there every day. But most of the people are probably jealous, where you get the record from today? Yes, you're making the time.

00:32:07 Thank you. Um, it's fun. Always fun to be here with the Python bytes people.

00:32:11 Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYD s, get the full show notes over at Python byte Sarafem. If you have a news item we should cover just visit by them by settlement and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording, just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

00:32:11 Transcribed by https://otter.ai

