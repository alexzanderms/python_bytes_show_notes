00:00:00 Hey there. Thanks for listening. Before we jump into this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes that FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python by stata FM slash pi test. Enjoy the episode. Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 268. Recorded January 26 2022. I'm Michael

00:00:40 Kennedy. And I'm Brian I can

00:00:42 and I'm Madison Swinburne.

00:00:43 Hey, Madison. Great to have you here.

00:00:45 So fantastic speaking. Yeah, we

00:00:48 talked to you before pi cascades where you are on the hosting side. tables are turned a little bit. Yeah, they absolutely have to why don't you tell folks about yourself before we jump into the news?

00:00:59 Thanks. Yeah, I am a senior data engineer at a company called automatic. We do WordPress, which is surprisingly, I recently heard that it backs 40% of the internet. And so that was so much.

00:01:15 WordPress, I don't believe Oh,

00:01:18 yeah. And I work with the open source team there, which I'll talk about a little bit later in the show.

00:01:23 Yeah, fantastic. Cool. Yeah. So Brian, shall you kick us off? And the first thing? Yeah, there's something about parentheses. I like Python, because it generally doesn't have that many parentheses. But you're going to tell us that it should have more?

00:01:36 Yes. Well, we haven't gotten function calls, right? And tuples need. So actually, because there's function calls in tuples, both whose parentheses there's a confusion that happens. And so I just saw this the other day, a pep 679 was added, submitted by Pablo Salgado to allow parentheses in the assert statements. So what happens like currently, I don't know if there's examples in here. But what happens currently is, if you if you call a cert, you're not supposed to use parentheses. A actually can't right now. You can, but it's wrong. So if you

00:02:14 it's one of those Princess Bride, things like that, that doesn't mean what you think it

00:02:18 means it says, think it means. So what happens is, is you give assert assert statement within within Python, you give it a an expression to evaluate. And you can also give it a comment like a string to add a message if if the failure happens. But what happens is sometimes people think it's like a function and put those within parentheses. And it looks like a function call and it looks visually fine. But what happens is, is it doesn't matter what the expression evaluates to, because the this it's a it's a to value tuple. And especially if you got a string in there, the strings not nonzero. Yeah. So the tuple evaluates to a true value and your assert never fails. And, and the tuple

00:03:07 is never none. And so you're good to go. Yeah. Well, you have some passing tests.

00:03:12 Yeah, I feel like this is one of those like, Python gotchas, like if you have one. And if you assign a variable to one comma, then you get a tuple instead of just the one, right? Yes. Particularly with print being changed from a statement to a function, I think it like, makes a lot of sense for people to assume that a CERT is also a function. And it's kind of an odd odd duckling in the language because it is just a keyword. So this

00:03:39 PEP is just to say, let's allow both, let's go ahead, because right now, there's no real reason to pass in the tuple as an as an expression as a full expression, it just doesn't it's, it's always going to be true. It's a no op. So let's go and add that to the language and allow people to call it as a function if they want to. And the as there's a STD around it, that to make it like basically be the same thing. I think this is a no brainer, I think we should just get it done as soon as possible. Hopefully, we can get it in to the, you know, 311 through 12, or something like that. So

00:04:14 I wonder, too, if having it as a function might help with autocomplete and some ideas, because I think right now, when you do the assert, you don't get like suggested arguments or suggested parameters that you do as a function. And so it might help there. Yeah, yeah. So

00:04:33 if you're trying to put too many things in there, it won't tell you exactly what's wrong. All the things. Yeah.

00:04:38 Hope. Hopefully, this will go through.

00:04:39 So I hope so as well. So let's talk about local ghost. So local ghost is a blog by let me get the name right here by Sophie Coonan. And she blogged or wrote about everything I Googled in a week as a professional software engineer. Oh cool. So I wanted to highlight this because there's a lot of folks out there who's in the show and just are in the industry who feel like they don't, they don't quite add up, or they don't belong or whatever, because they feel like they get stuck and lost and banging off things. You know, and I can tell you, we were just talking about it last time with a joke, right, Brian, like, hey, programming, I hate programming, programming works. I love programming. But the hate part, there's a lot of searching a lot of Googling and bouncing around from that. And so here's just another pro software developer, pro in the sense, it's her job. And she's been doing it for a while. And it just talks about like, Okay, what did I do? So the, what she searches is slightly different than what we would search because she mostly is a front end and node, mostly JavaScript type of developer, but it doesn't really matter. You can, you can sort of see there's some basic stuff in pm react testing library. And what's nice is she puts a little comment behind a lot of these, like, why did she search for this not just the word like during a React upgrade, looking at dependencies to see the latest version and checking for breaking changes? And then react Apollo release notes, totally normal, and then undo a rebase? Oops. Yeah, exactly. Or just silence warning, or maybe undo commit? No, what did I do? I can't push this. Just silence warning. Don't judge me. Okay. So there's a bunch of interesting things. And it kind of goes along there. So you all can look through, I don't want to go through all the detail. There's just a lot of stuff. What are you going to point out there, Madison? Now? It's

00:06:32 just a lot of fun and interesting searches. And I think like, if we were all to do this sort of analysis for ourselves, it would be kind of an interesting retrospective, it would

00:06:41 be super interesting. Yeah. Like what surprised you most about your search history? Let's see, there's a few. I think one on Friday down here, the end of the week, that was pretty funny. I put my notes, I'll pull it up down there. So one that I thought was interesting was she shirt she searched for expecting expecting a party to Graph QL document, perhaps you need to wrap the query in a string, quote, G QL. Tag. And the content of that's not super interesting. But what that is, is exactly an exception message, write in some sort of code. And for people who don't do this, you should take the error messages and put them straight into Google or straight into DuckDuckGo or wherever you put search things. And it is so good with the problems with Yeah, exactly the maybe quotes on the really important bits, right? Like, I really want to make sure it's Graph QL. and not some other document or something.

00:07:31 I would say half the time when I do that, it takes me exactly to the GitHub issue that describes the problem that I'm experiencing. It's

00:07:39 just a fact, isn't it? Absolutely. It's like, why is this work? So Well, the thing that blew blew my mind most once is I had a friend. This is way back. I mean, we're talking like early 2000s. He was using Outlook. Don't judge him as a long time ago. And he was using Outlook and it was just stopped working. It gave him some weird error that had almost no message just a number. So I just searched outlook, that number and boom, here's the exact fix. It's just like, Are you kidding me? Yeah, I love it so much. A couple others semantic HTML contact details wanted to check if address tag was relevant here. I highlight that because here's somebody who's a professional HTML developer, basically doing front end stuff. And so they're Googling to see does this address tag match here? Like, should I use this block this, this HTML tag in this situation, right? So it's, even if you work on stuff day to day, there's stuff that you just go like, I'm just gonna leave that to the search engine and distributed cognition and not have to, you know, memorize every detail of what I'm working in. And then finally, I just thought this was fun editing host file. This was the search, not the action, desperate times, and it didn't even work. Anyway, I think this is fun. And I thought I'd just share it because I think it's, it's interesting for people to compare notes.

00:08:55 One of the things I noticed recently was I, I don't, I don't remember the exact way you're supposed to get to GitHub repos. So I usually just Google GitHub, and then my repo name, just to get to the repo.

00:09:09 Exactly that Yeah. Nice. Home, a lot of times they search for like a project, and then it brings up like pie pie, or some other like, they've read the docs. It's like, No, I want to I want to take me to GitHub.

00:09:24 Yeah, I'm always like, Alright, fine. I'll click the pie pie. So I click on the source code.

00:09:27 Exactly, exactly. How many links do I have to go through just to get to the real Exactly, yeah,

00:09:31 I know, I'm two clicks away. That's good enough to do this.

00:09:34 Yeah, I have a couple thoughts on this. Yeah. Tell first of all, local ghost dot Dev is an amazing domain name. I absolutely adore that. And the second is, it's it's really great seeing articles and posts like this. I see a lot of seniors particularly like senior women and other underrepresented minorities, talking about this sort of thing. And I think it really helps to dispel the myth that like you have to be As an expert who has every command for, you know, every utility memorized in order to be a senior death, like a lot of us are doing these sorts of Google's right? We're like looking up the the function signature for something that's like in the standard library. You know, we're all doing this. And so I think it's I think it's really valuable to share something like this, for particularly for people who are new. Yeah,

00:10:23 those are some of the best skill acquisition isn't memorizing things. It's remembering that the feature was there. Excellent. Yes, right.

00:10:32 Exactly. I'd need to know just enough that I can Google it. Yeah. To get to get to where I want to be. Absolutely. And Johnny out in the audience also thinks this is interesting. Yeah, we we all think is great. Fantastic. All right. I did give a quick shout out to pi cascades previously, Madison, you want to tell us about your first Yeah,

00:10:48 I wanted to share about it. So pi cascades is coming up in less than two weeks, which is really exciting. We have another year of just excellent and diverse talks from an array of different subjects and expertise levels. Last year, we were online. And we're going to be online again this year, using the same platform that we did last year. And a lot of people really enjoyed that platform. So we're excited to use it again. We're hoping to do some watch parties in Seattle, Portland in Vancouver. But unfortunately, reality wanted us not to do that. We opted to get. But we're so excited to be doing this again this year. And one of the things that I'm like really excited about us that we have the PSF 's Diversity Equity and Inclusion working group, I'm doing a meet and greet as sort of our our first event on Saturday. And so they have a form that they are sharing for just trying to understand the landscape around diversity in the Python community. And so we have that link in the show notes. If you would like to fill that out. And we are going to have socials on Friday and Saturday night. And we had a DJ last year, we're hoping to have a DJ again this year on Friday night. And then we'll be doing sprints on Sunday. And tickets are still available. We'll be selling them throughout the event too. So because it's a virtual event, there's it's not like NF T's there's no digital scarcity with these. So please feel free to buy a ticket whenever whenever you have a chance. And we hope to see you there.

00:12:21 I don't think that's a fun commerce. I've enjoyed going to it when it was in person. So it's cool. It's going I can't wait for it to get back to being actually in person.

00:12:30 I know. I know. We were hoping we're hoping to dip our toes into it this year, but just wasn't going to happen. And I should also mention too, we're having talks from some well known folks in the in the Python community like Thursday prom and J Miller, who I know you had on. Talk Python to me recently. Yeah, very similar. Yeah. And we have some first time speakers as well, like Joseph riddle, and Isaac nah. So we're, there's a lot of really great talks that, that we're looking forward to.

00:12:58 Yeah, super cool. All right, Brian, back to parentheses and stuff.

00:13:04 Yeah. Oh, maybe not parentheses, sorta. But yeah,

00:13:07 stuff that happens between parentheses.

00:13:09 So it is interesting article by Seth Larson that I ran across that strict Python function parameters. And I thought strict, but what do we mean by strict Python function parameters. And the idea is, let's put everything together. So we have, we've got keyword only parameters. And that's a little small on screen. But keyword parameters is where you can put an asterix in the middle of your, your parameter list. And it says that everything after that has to be a keyword, it can't be. You can't pass that in as positional. And I'm not sure exactly how that works, really. But it's kind of it's useful. The, and then you can also put defaults in there, of course, for things, and it's just that separating of what where your keyword positional and keyword arguments go. And that's an it's a cool thing. That's helped allow people to add parameters before, so this was a nice addition. And then also, we've got those are keyword only parameters, we also have positional only. So with the slash, you can say everything before the slash is a positional only, you can't you can't pass it in as a keyword parameter. And it's, it's the this, the natural progression is, you know, hey, let's just do both of them at the same time. And I didn't actually for some reason, I didn't realize you could do this, and neither Yeah. And so what, so then you're going to have your positional parameters first, and then a slash, and then a star. And then you'll have and then all your keyword parameters after that. What what happens then is your both of them are true. So you have to have to have the first and then the keywords after. And, and so what's the benefit this this just looks like added syntax to confuse people. But there are a lot of benefits. One of the benefits is really that your documents and your code and your example code and all examples, people look, if they look up some other GitHub repo or something using your API, all the examples are going to look kind of the same. And this is sort of something we're used to in other languages. It's a, I was actually surprised in Python, that you could rearrange your your input arguments, especially the keyword ones, you can rearrange them, and they work fine. But it's confusing sometimes. And, and I just actually think this is kind of a neat idea. I think that especially for API, or you know, library API entry points, doing something like this might make complete sense. And that's something I'm going to look into considering just to make sure people use it, use something consistently. The article also goes through a thing about empowering library authors to have flexibility to change things. And in it's good thing to read up on. But I was curious what you guys thought about if ever haven't had an API, or you were looking at API, and it had this slash star in the middle of everything? What would you think?

00:16:19 I mean, I really liked this concept. And I'm glad that it's a feature of Python, because of that uniformity that it can create. I've never had an opportunity where I felt like, this was something that I really should use. But I think that's a large part because all of the stuff that I work on, is usually internal tools. And so even if it is open source, there's not like, public API that I'm building. And so that

00:16:44 right, if you're looking for money, versus creating it, for others, it's very different. Right? Exactly,

00:16:48 exactly. Yeah. And so I think it's always a good thing to keep in the back pocket, when you like, have a particular contract that you really want to enforce with how functions are used and keywords and whatnot.

00:17:00 Yeah, I, I also am glad that is here. And for the same reason as medicine, I don't use it very often. Because to the extent that I do make open source libraries that are pretty basic, and, and don't have tons of like, tutorials or anything about them, maybe I should think more about this, honestly. But I do like the idea that you can say no, this is going to be like this, specifically, for certain things. See, this stuff you cannot use as a keyword argument, you have to just pass positional this stuff, you must it has to go in this order, and so on. Yeah, like it,

00:17:30 I one of the things I see is, is is people looking at other examples. And in saying like, so if you've got a key, if you just have normal arguments, they can be you can you can pass them in as keywords, even if most people use positional, and then you can reorder the keywords and put them in a different order. And then somebody else might look at your code, copy it, and then take off the keywords. And now they're in the wrong order. And that'll mess things up. This is Dean added a comment of so def underscore, yeah, star, this is legit syntax. That's funny. I can't even read it out loud. It's so confusing.

00:18:16 Looks like code golf is what it looks like. Goodness. So anyway, I think I think it's like typing in the sense that it's a good feature that's there. And it can be helpful for making things more explicit and Python. But part of the power of Python is that it's very versatile and approachable. And so it's I think it's nice to that it's not like this is something that you are required to do for every function that you write.

00:18:43 Yeah, yeah, I do like the flexibility there. All right, let me tell you about something that seems a little bit contrary to the Python way, but I think people will find useful. So over on api.org, we have 350,000 plus packages, which is utterly mind blowing. I remember when it was 75,000. And like, Wow, look how many there are, it's insane. So a lot of the superpowers of Python is, you know, the abilities, these packages, and people will say, I'm using Python because it's really great at working with Excel files or like pythons are actually good at working with Excel files. But there are many libraries for Python, which that's true, right? And so you have this sort of spectrum of like, what do people mean when they they say like, Python is great, but I do think these packages clearly are super important. So why do I bring this up to start the section off? I want to talk about a way to not use pi pi, but still do some cool stuff. There's this thing called mew rec as in small requests over here for your by got a name? Yes, if it pulls up. Sure. Sree our RAM. So very cool project here. And the idea is its request like on a drop in replacement for requests but like requests with limited features. But if you're using a limited subset of what requests could you, you could use this library and have zero external dependencies, no virtual environments required no pip install dash r or friends required and just have like a real simple thing and not have to fall back to just URL lib, which is pretty cool. So it does standard stuff I would recommend maybe even from, you know, important you wreck as requests, and then request dot get, see what breaks. Yeah, yeah, exactly, I mean, and then see if it works or not. So you, it does have some limitations, quite a few actually. Like it doesn't support connection pooling, for example. But if you do request get, neither does that you have to create a client session and then use the session to do get and so on if you want. connection pooling apparently uses a lot less memory. But the main reason besides just convenience of like, I want to give you a python file you can run or a set of Python files, you can run the top level one without any external dependencies. So that's, that's pretty nice. The other one is to avoid supply chain attack vulnerabilities. Right? We we've talked before about people putting malicious stuff in the pipeline, we talked about the guy irrevocably was, who had like, sabotaged his NPM packages and those kinds of things. And you know, the cascading change of like, the super dependencies in the JavaScript world meant that was really, really bad, right? So here's a way you could put something that does request like things in your code, and it doesn't have any dependencies it doesn't have, there's no way someone's going to take over that account and put something malicious there. Or even maybe worse is like the dependency of the dependency of the dependency is aware of the problem is, yeah, so I think this is pretty interesting. Yeah,

00:21:41 security is in a lot of people's minds recently, with the log for J stuff. And then yeah, all of these supply chain attacks that are happening, particularly in the JavaScript space, it seems like a lot more happens in that area, more so than like Python. But I feel like the packaging story is really similar in both. So it's useful to take the lessons learned from the JavaScript ecosystem, pull them back into Python, I think something like this is really valuable. Particularly, I know, some companies have just very difficult bureaucratic processes to like, set requirements in. And so if you say like, this is just this one file, it has this license, we just need this makes it a lot easier,

00:22:25 we can review the one file that won't auto update. Exactly, it's gonna Yeah, so that's the good news, there's a couple of things worth pointing out one over in the PR section is a lot of the stuff inside is not PEPP, eight compliant, or other stuff. So if you drop it into your project, it'll give you a bunch of warnings. So you might want to run like black on your on it before you put in your project, I did a PR that suggesting that that should just be part of it. There's an ongoing conversation about that. Also, it doesn't support a couple of the main methods like dot JSON for consuming API's and raise for status, which if you don't get a successful status of raising exceptions, you don't carry on with bad data. So those two are really good. The race for status is supposed to be put in soon, the JSON one is up for debate. With all that said, I have a branch that has all those fixes as PEPP, eight compliant F strings as those two functions that you might use. So you can people can use that as well.

00:23:20 If they want. Did you put a PR to get those back in?

00:23:23 Oh, yeah. Yeah, that's what I was pointing out before that I absolutely. Yeah, they're not. I'm debating with the author whether or not he thinks that those are appropriate to add to it.

00:23:33 Maybe you could rename it medium wreck if

00:23:37 he didn't sidetrack Rec. So anyway, it's not super important. It's not that big of a deal. But I mean, you know, the effect of actually adding those, they're not huge amounts of code that you got to add to make this happen. Like, the JSON one is literally one line of code. Now, you could take it, I mean, do you count the function definition separately, it's two if you got a cabinet def, but it's like super, super small. So people can grab mine, and they can add it or they can grab theirs, and then add it or whatever. So that's the good news for the project

00:24:06 and make Mewtwo Rec.

00:24:09 Right? So much more meal. Yeah, exactly. Now, here's the reality of what I found. I have a lot of projects that have 1020 dependencies, because they're, you know, 10s of 1000s of lines of code. And they do a lot of stuff, every single one of those where I thought, Oh, this would be kind of fun just to like cut down on the dependencies and the dependencies of dependencies. Because what I do with requests is real simple. Usually call an API, get some JSON, get some value out of it, it'd be nice to do something like this. The reality is, so many things depend upon requests. Century, for example, depends on requests. MailChimp, API depends on requests, and etc, etc, etc. So by the time you get a project built up with other stuff, it's already got requests required and installed and so on. So it's like this is for like a smallest app that doesn't have really many other dependencies that I think this makes a lot of sense for because if you depend on a lot of things, you're going to end up with requests as a dependency real quick. Yeah, that's a really solid point. Yeah. Thanks. Lastly, for people out there listening, wouldn't it be fantastic if request itself offered a an official, many requests, and HTTP X, offered a single file version and a IO HTTP client offered a single file version, like yet only has 80% of the functions. But if they don't have those functions, don't have dependencies, maybe just drop those in an offer? I don't know, it would be great.

00:25:32 One of the things I like about actually alternatives either either within a project itself as an alternative, or these forked projects that have the same API is they might have benefits in so you think, but you have to, you have to weigh those. So it does encourage actually, nice software design of a couple things. One of them is isolate your dependencies to the fuse few files as possible. So if if you only have one of your modules, accessing requests, then you only have one place, you need to change it to this new module import. Yeah, absolutely. The other thing is testing, testing your behavior. So instead of implementation, so if you test your behavior, and you've got it isolated, you can drop in thing, run your run your CI, see if it all works, throw it to a couple few beta people and run with it if it works. So

00:26:23 yeah, quite cool. Now, one thing that could be useful, and also potentially extremely dangerous is some like Python level capacity for shimming. A module. So like in this situation that you describe, Michael, where you have a ton of dependencies that all require requests, you could pull in something like mule rack, and then just say, like, this is a requests Python, I want you to think of this as requests. Yeah. But obviously, it has. I mean, it's just an idea. It has some pretty bad security implications with people being able to usurp that. So

00:26:58 yeah, it may cause some unexpected behavior. But yeah, it also could be good. All right, put your entire application inside of a patch statement.

00:27:08 Now. What I'm hearing is that we need to make our entire application one file in every Yes. And that was

00:27:16 just one function actually just

00:27:19 perfect. We don't even need a function on right here.

00:27:23 Yeah, okay. Yeah, no functions.

00:27:25 Survive. Yeah, just run. It just runs once top to bottom. Now, I was dreaming of a world where like, there's a simple use case that you don't have to have a bunch of dependencies dependencies, but it's probably a little extreme. When you take it very far at all. I Brian, what you got for the next one here? Oh, this extra? I know, Madison, you're taking us out for me times.

00:27:45 Yeah. Welcome to open verse. This is not the metaverse, but everything is, you know, I say call the tech industry a song because everything's a first these days. But this is a search engine for openly licensed media. This is something that the WordPress community is supporting. And so what I mean by openly licensed media is images and audio. That's what we have currently. But we're hoping down the line to have things like video, 3d models taxed on all assets and media that you can use without having to pay for them. And just some licenses require Attribution, others don't. A lot of them are free for remix and reuse. And so this used to be called CC search under the Creative Commons, sort of purview. But they've handed it off to us to help shepherd into the future. And so if you are looking for content to use on your blog, or your podcast, or anything, that you're creating any sort of content that you're creating your conference presentation,

00:28:55 your conference, you listen to your courses, whatever, there's a lot of a lot of times I'm like, I need an image, I need to be able to use this

00:29:03 little snippet of audio to throw simply, this is awesome. Yeah, yeah. So

00:29:07 10 examples here in the Livestream, I'm going to type to Twitter, and I have to spell it right, I typed a Jupiter last time. Anyhow, you just get a bunch of pictures of you know, Jupiter, and then also different sound clips that we have mixed in. If you want all of the results. You can also filter by just certain media types, like seeing just images or seeing just the audio results. And then when you click on an image, you'll see the attribution for that image right there alongside it. And so you can just copy that and put it in your website after you link the image. And it has over 600 million images in open verse and more audio and more images and more just media in general to come. Fantastic. Oh, and if we search sorry, we searched you to pi Tur there's some fun like conference, see, you know, screenshot. So there's Yeah, let's let's see us here.

00:29:56 Cool. Alvaro asks, can you search by license type? Yeah, so

00:29:59 um, I'm trying this in the live screen, but our live stream, but on the right, the first filter that we have is by different license types. And a lot of these are her, I believe their creative commons license, but not all of them are we have public domain markered licenses as well. And then you can search by use to depending on how you're using that. Or if you're using a nationally that's going to have different licenses and implications for you, versus modifying and adapting. And then we have I mean, open source services, like an aggregate for different different entities that host some of this openly licensed media. So things like museums, you know, NASA's photos, that sort of thing. And so you can also search by provider, too. So if you're looking for space photos, and you say, I just want NASA's authority on this, then you can sort of filter by that.

00:30:50 By that accurate goal. Yeah. Yeah. This is a constant challenge. And it's great. Like it's a challenge for blogs. It's a challenge for like, all these things, right. But it makes perfect sense why WordPress would be interested in that. Totally.

00:31:02 Yeah. And we're hoping to have it integrated into WordPress down the line. So like, if you're working on a WordPress site, and you want to add an image, one of the blocks that you can pull up this just search on open verse, and then you pull it in and no, pull the attribution in with it. And you Oh, yeah, nice, don't have to do a whole lot of extra work. So we're hoping that that's, that's going to be coming down the line, too. And yeah, it's so easy to just like, go to Google Images and find an image, but it's harder to find the appropriate attribution for that. And particularly, you can get into some very interesting legal spaces if you're making money off of that photo, right?

00:31:38 I mean, it makes perfect sense. If you're like a high school student doing like, research, but who cares, right? But like, it starts to push the limit if you're selling something, or you're making a book or whatever. Yeah,

00:31:48 one of the things I think is interesting is that the difference between free like, non commercial and commercial and, and we think of it like big companies, or blogs, or something in that it's not that cut and dry. Because like your start, say, you're starting a podcast, you started getting sponsors, and you're making like five bucks a week. That's commercial. But it's not like I can afford a huge license. So yeah,

00:32:15 right. Exactly. And

00:32:16 I mean, maybe you started non commercially, and then it became commercial. Yeah. Right. But you'd already used it and stuff like that as well. Yeah. How about a real time feature requests, dealing some ass says, I wish it had a, this is a ping with a transparent background.

00:32:32 Like, I hear it, I hear it. I use that feature all the time in Google Images. Yeah, we actually just finished a redesign of the site. We launched yesterday for this redesign, which is really exciting. But we have, I mean, we have lots of stuff that we want to, we want to start adding to this turns out that making a search engine is not easy. Surprise. So there's, there's a lot of work to be done. But that's yeah, that's a great feature request. All of this, too, is a great plug. So thank you for that comment. All of this is open source. And so if you just search open verse GitHub, like we had mentioned earlier, because if you just search open verse, you'll actually get the site, you can go and make an issue on any one of the number of repos that we have for describing this project. And on top of that, too, if you know of a, a content provider, like a museum or whatnot that has an API that could have its images added to open verse, we're trying to make it really easy to write those, we call them provider ingestion scripts. So even if you just know of one, you can make an issue for us. And we'll write the provider script. But we also love, you know, public contributions. If you have a source that you want to add, and you want to get it into open source.

00:33:45 That's great. Brian, now, are you ready for your extras?

00:33:47 I am. Yeah. So we were talking about security and supply chain for packages. And so I noticed this actually, it just came out like yesterday to yesterday, Brett cannon announced that he's got a he has a GitHub action that called PIP secure install that he published and apparently vs. Code VS code Python uses it. But the thing is, is is it just sort of you pip install something with a requirements file, it could have who knows what all is in there, and and your requirements, and then they have dependencies, and they have dependencies. This, this secure install is allows you to do through GitHub actions, use a requirements file, but you have to have you have to have stuff in it. So you have to have no it doesn't pick up any dependencies, and it requires hashes. So you, so you have to have a full requirements file with all of all of the dependency tree in there with the hashes to eliminate, eliminate these, like supply chain problems. It doesn't eliminate them but once you've done A good package, you can just use put this in there. So I just want a shout out from for this project by Brett. So that was cool. Because the second thing I wanted to shout out which I'm like totally excited, basically, this is a shout out to everybody out there listening to this that has supported the Python testing with PI test book. I was talking right before we started recording that today's the last day I get to touch it, I get to my final edits are going in. But because of all the beta, the beta purchasers it's supported the rewrite and just just been awesome support. And right now it's at number two is the best seller on pragmatics. That's pretty exciting.

00:35:39 Congratulations. That's awesome. That's fantastic.

00:35:41 Yeah. Um, hi,

00:35:43 Madison, back to you. Well, anything want to give a quick shout out to Yeah,

00:35:47 a couple couple quick things. One thing I forgot to mention about open first, it's also written mostly in python two. So if you're familiar with Python, you can you can help contribute. But on top of that PHP? No, no, that's yeah, it's kind of interesting, because most of WordPress is PHP and JavaScript, but open vs. Fun little extra, you know, blob on the side that runs in Python. So beautiful. Speaking of small, Python, web apps, and whatnot. So folks in Seattle recently launched a new police accountability and information tool. And so this is just a tool, it's SPD Dot Watch for the for the URL. And it's a tool that just allows you to search for police officers in the Seattle area and get information on them. So, you know, if you're interacting with an officer, sort of what their what their history is, how long they've been with the force, that sort of thing. And it can be really useful for community safety, and also just accountability. And you all had mentioned, just in Episode 242, I just wanted to give a just wanted to give a shout out to it, I have been using this for every single project that I have touched, when I go to a project that doesn't have just I get very angry. It's so fantastic. I mean, the fact that you can add comments for different recipes, your recipes can build on other recipes. There's a lot of like complexity that you can have in the jest file, which makes it easy for new people to come on and start contributing. And so if you have like, lots of Docker containers that require, you know, certain specialization, in some sense, you don't have to write this big long readme that describes all the steps you say, download just and then just run. And that's it. It's so nice.

00:37:30 I totally forgot about just so

00:37:32 it's so I just I can't sing its praises enough, honestly, although I do have to say its name doesn't make it very difficult to do Google searches. And then lastly, I just want to give a shout out to the GitHub package registry. That's G H C r.io. For GitHub container registry.io. They do free Docker image hosting for open source projects. And I'm not sure what the pricing is for it. There's more we could see the pricing. But yeah, they do. They do free for open source projects, which open versus taking advantage of. And I've used on a number of personal projects. And it's been incredibly helpful to just be able to build and push an image for free with GitHub actions, and then have that hosted for free on GitHub Container Registry. Oh, that's cool. Yeah, like Sandy.

00:38:21 Cool. Nice. Yeah. But you might as well, yeah, I got a couple. Let me go back here. So very kind message came out on Twitter saying, here's a really cool way you can go to the transcripts for the podcast, which is on GitHub, and then you can do like a search, cross them using some nice GitHub search features. Absolutely true. Very nice. I also wanted to point out a couple of things that we actually have some neat features that people can play with. First of all, we have a search engine, you can click in the upper right, this is, look, we're live streaming. So the thing you can search for so I could search for like pi test, and it would come up with the episodes and whatnot. I can search for every single episode. Yeah, exactly. So we get like our Python on the beach. So we did recently and whatnot, I

00:39:03 search for just was a very difficult but through no fault of your own search for gi so yeah. Yeah,

00:39:09 yeah. But it's pretty neat. It also has a JSON API, if people want to consume that they can go and search for stuff. And then it'll come up with, you know, a JSON variant of results. And what else? Yeah, so that it's been there for a while, so people can check that out. And that's cool. But I also wanted to point out something brand new, Brian, I don't know if you've got a chance to play with this. Because I just did. They did. It's so cool. So good. So if you go to a trance, or the transcripts of your on any episode, usually, on the right, it'll say unless the screen is really small than it might be the bottom, it'll say full transcript. And then you go in here and their transcripts, which are searchable and there's a play thing, but there's also now a ability to click on any paragraph or sentence, the little play button next to it. That's it'll just start playing the episode at that time. Sorry, cool. People want to go back and use what we've been doing for four or five years, whatever. Ben has resources. Yeah, that should make it a little bit easier.

00:40:04 Did you backport this to like an old episodes also?

00:40:07 Oh, yeah. Because this is. So let me tell you how I did it. Because the transcripts, if you look at them, they just have a number. They just have like a timestamp there. Yeah. So I use this really cool regular expressions 101 or regex. One Oh, one.com tool website to build up the regex using named groups. And let me just check this out, which is on the screen, you guys, y'all check out the link, if you're listening, you can put the thing you want to search for. And then the groups and the regex. It'll show if it's a match, it'll actually highlight and name the different elements and color code, the syntax of your regular expression elements into like names sections, and all sorts of cool stuff. What do you think of that?

00:40:49 That's awesome. If I if I'm using if I'm writing a regular expression that's longer than like three or four characters that I'm using regex one on one, like this site is so fantastic. It is apps, I totally agree. It's the references not upon them right to for exactly whatever the total

00:41:06 is as legit as well. So it also gives you hope. So if I put it like on the the D plus, which means find one or more numbers, it'll say, exactly, you know, what that kind of stuff means and so on. So you can see like, the down here, and it'll tell you, you know, what does that doing, and so on and so forth. Somewhere, there's a search. But it was nice that it will actually show you which sections and give you extra information about it and all kinds of neat stuff. So

00:41:32 like full descriptions to have like, what each particular thing is doing is so great.

00:41:38 There you go. So if you like hover over the backslash, d plus, or whatever I got here, it says, meta escape matches a digit equivalent to bracket zero to nine. Here's a named group, here's just that matches the character. And just as you hover, you don't start at the start of the text, right for carrot. And as you hover over these things, you get real time, like autocomplete for, like the meaning of that section.

00:42:01 And like, explanation in the top right to which can be really helpful.

00:42:05 Absolutely. Because so often when I look at this kind of stuff, it's right only, you know, like, I got it working, and I can't decipher it again. So you can put it back in here and come to an understanding which is cool. All right. One more thing real quick, a new video on my Python short series that I'm doing. Do you even need loops in Python, people can check that out. So it's really about list comprehensions and fun stuff you can do with list comprehensions in Python, so I've been having a lot of fun with that. And the open verse sounds very interesting for grabbing content. Throw in some of those videos as well. Yeah, absolutely. All right. Well, that brings us to our joke, I do believe All right, y'all ready for it?

00:42:41 I have one. There's, uh, oh, yeah, I found a video. Sorry. This got shared in speaking of Python loops. I don't know that I'm going to be able to show it but well, fingers crossed here. i This video was shared in work channel recently. And I'm not going to be able to show it but it's a snake that is moving around a box. Oh, here we go. Perfect. Speaking of Python loops,

00:43:11 you really don't need these other Yeah, yes, exactly. Oh my god. It's a Python slithering around a box, which is rotating in a circle. Here's a simple loop with Python. And

00:43:21 it also the snake isn't moving anywhere. Because it's so anyway, you really don't need loops.

00:43:29 I love it. That's awesome. Roller out there says the new Python short channels. Great. Thanks, Michael. And Alvaro says I usually test my regex was set in GREP on the command line. This seems easier. Yeah, that thing is awesome. Alright, so I've got a joke. That is not my job, but is from instead Josh Thurston. He set them in a little while ago. So there's kind of three together in sequence. So here we go. How did the hacker get away from the police? He just ransomware Boom. Oh, that joke makes me wanna cry. Oh. Where do you find a hacker in decrypt? Oh, they're so bad. These are full, full. I have a whole lot. I'll add them to the stream as well. Those are full on dad jokes right there.

00:44:12 That's, um, two thumbs down in a good way. Absolutely.

00:44:17 Like overflows. The bad buffer becomes good again. Yeah, wow. Oh, fantastic. All right. Well, speaking of fantastic, great to have you here, Madison. Thanks

00:44:26 so much for having me. It's always

00:44:27 good. Welcome. So yep, talk to you later. Yeah, thanks.

00:44:32 Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYD s. Get the full show notes over at Python bisetta FM. If you have a news item we should cover just visit by them by South FM and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific On Wednesdays over at YouTube on behalf of myself and Brian Aachen This is Michael Kennedy Thank you for listening and sharing this podcast with your friends and colleagues

