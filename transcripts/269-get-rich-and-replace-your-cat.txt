00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 269, recorded February 2 2022. And I'm Brian Aachen. And I will see you.

00:00:14 And I'm Brett cannon. And we have Brett

00:00:16 we so we invited Luciana on. And we decided to have Brett on also. So we got to have some fun. Michael's actually gone this week, but hope hope he enjoys listening. So hi, Michael. And, and we'll talk to him next week. So before we get too into the topics, though, I think people hopefully know who Brett is a break cannon. You've been on the show before?

00:00:43 A couple times. Yeah. And then very much for having me back spontaneously,

00:00:48 spontaneously, like minutes ago, he said, Hey, we should get bread on. So Luciana, welcome to the show. Can you tell people a little bit about who you are?

00:00:57 Thank you. Yes, I am. Well, Fiona, I work with Brett on a Python extension for Visual Studio code. But I'm a program manager. And yeah, I'm very excited to be here to show I was telling Brian that I used to listen to Python by going to work back when we worked out. So it's really, really cool to be here.

00:01:23 Yeah, nice. Well, well, thanks. It's, I'm glad to have you here. So let's jump into the topics. We have a abbreviated list of topics, but we'll make it fun. Anyway. I'm going to start us off with with rich CLI so well, McColgan. We, it seems like we talked about him every show. But this is cool. So I was like, Oh, I'll try it out first. And I'm already hooked. So Rich CLI is it is it seems lame if I describe it. So you install it, I installed it with PIP x, because I just want to use it everywhere. And then what it does is it does like pretty printing of stuff like you can give it a file and miss it. Basically, that's what I use it for. Maybe it does other stuff, but you give it a file like like example.py or example dot markdown or something. And it will, it'll do the rich printing, pretty printing right on the right on your screen in the terminal. That seems like not that big of a deal, right. But it is so cool. Because it's all like nice colors. And you can have themes. And I used what you can, you can do pretty printing of Jason. So it will format your Jason for you without having to reformat it. You can do a dash m flag for markdown. I've been doing that to see my Markdown and it does some cool stuff with Markdown although supposedly like with Python files and C++ files and stuff. It's going to do syntax highlighting based on extension. I'm wondering why he got a pass in a dash M for markdown it seems like dash MD should work fine. But

00:03:04 anyone gonna be my immediate question was Why do you have to specify the dash m just the Markdown

00:03:10 and then like it then there's some flags that's cool. Like, like whether whether or not you want to use it with pipes. So you can for if it doesn't, if it's pipe it to something, it will it'll strip out the formatting stuff like the color codes and whatever. But you can force that to be on. Well, I wanted to I tried to use it with a big file and it just flew past me. And and then so I tried to pipe it to more or less and it it stripped out the formatting. And so well I tried to fix that and then more or less don't handle that. And so this was just yesterday. I'm like kind of really be cool if ritzy like has supported paging with within it. And so today we'll said a I added paging to rich CLI so which CLI now has paging so of course he did like within a day so anyway, pretty pretty cool projects have either of you to check this out

00:04:09 yet? I did the exact same thing you did I use PIP X installed rich yesterday, rich CLI yesterday. One thing is I will say I use a I've actually been using a replacement. So this is kind of like a replacement for the CAT tool on Unix right. And I've been using an alternative called bat bat implemented in rust and has a lot of this as well in terms of color syntax and stuff. But I'm willing to bet riches get rich. I'm willing to bet wills gonna move a bit faster. So I'm just gonna probably switch over to using rich CLI over bat and just see where this goes. But I mean, come on Willie, we made the output look great. So yeah, so what that are for the output for the help it looks phenomenal.

00:04:59 One of the things that I noticed was that the default theme? The coloring was, didn't look quite right on the black background that I was using. So I just I exactly, I was using it for cat. So I just aliased my cat to use a rich with the Monika format format turned on. So Luciana, would you use this for anything?

00:05:25 Yeah, I was gonna say I'm behind haven't tried it yet, but was it salt missing things they have there? It's quite a few. I was, like, excited to try it out. So we'll do it today hopefully.

00:05:38 Cool. Um, well, let's switch over to debugging.

00:05:45 Yeah, so I guess most folks I don't know, at least I when I started learning Python, I used to debug using print statements, which is like no shame in that it works very well. I still do that when it's like for real quick things. But I wanted to bring up this awesome tool that we have the bug pie. It's a debugger for Python. And you can use it like it's a CLI tool. You can also just import it and set breakpoints normally. I'm a big fan of UI debugging. So I actually prefer to use it built into the Python extension for VS code, which is the thing that we work on every single day. So I wanted to bring up a few features that are really, really cool. And I find very helpful, and it save up helps me save up a lot of time when I'm debugging code. So the first one of them is kind of like conditional breakpoints.

00:06:39 Yep. Sorry. Go ahead. No, no, go ahead. Neat. Yeah, it's

00:06:42 super neat. And this conditional breakpoints is something that I bring up, because I guess when you're trying out debugging, for the first time using the UI, you set up a breakpoint. And then you hit it there. And then you're always reload the window or reload it, but debugger sorry to hit the breakpoint again. And it keeps stepping over into hits a condition that you want. And in this case, they're they have an example in TypeScript, but it works on Python files as well once you install the Python extension, but basically, you added the breakpoint, to insert a certain condition, so that the bugger will only stop when that expression is met, or the condition is met. So one example there is hit count. So you can imagine if you have like a for loop, and you really want to stop when, for example, after 10 iterations of that loop, so you don't want to stop at that breakpoint and hit the step over 10 times, you just want to stop at certain when it hits 10 times. So you can do that with the hit point. You can also add expressions. So if you know like, oh, I want this debugger to stop only when this variable gets the value of I don't know, five, then you can also do that. And it's pretty cool saves us a lot of time. And you can also do lock points. Instead, if you're not interested in breaking execution, just want to make sure that line was executed. So it prints out on the output that hey, this is we hit that point. This is like a lock point. So it doesn't really break anything. But it's very informative.

00:08:13 Cool. So this is this is an extension for previous code.

00:08:19 Yes, I believe most IDs support that same feature. But it's a feature that I always recommend folks to look for in their IDs or editors because it does save a lot of time.

00:08:31 So to be clear about the tech stack on this, so it there's a couple layers to this. So that at the bottom layers Pydev de by February two draws me key, we have them on contract as a consultant to do anything we need to have get fixing stuff and just start the project. Because on top of this, we have another project that we have called debug py, which implements what's called the debug adapter Protocol, or dap. It's a meant to be a language agnostic protocol for debuggers. To talk to editors comes out of VS code. It's used by Visual Studio as well. And actually, it's now used by Jupiter. This is Jupiter was able to launch recently with debugger support, because actually run the bug pi. And then on top of that we have support because we're VS code extension, we support the debug adapter. So we shipped a bug pi inbox right now for supporting this although we are talking about breaking extension breaking debugging out to its own extension so that we can actually update it at a better cadence with the bug by because we can do platform specific V six is now extensions for VS code so well to shrink that down a bit for our users.

00:09:45 So is there like a like a tutorial somewhere that has like all the cool Python extensions that I need for VS code to get VS code with Python to work really great. Yeah,

00:09:57 we have our Get Started tutorial it has like doesn't have a lot of extensions. So there's definitely more extensions that I find to be personally cool. Maybe we could have a blog post about this and like cool extensions for Python, specifically in VS code, because there are some of them, I think donja money from. He's the one who created the Python extension, before, it was a Microsoft thing. And Microsoft hire him and everything. So he has a one that I always talk about, which is the Python environments, manager extension. It just displays the environments that it can find your your machine and what packages are installed there. It's kind of like, environment viewer. And it's pretty cool. It's one that I always tell people about. So

00:10:37 you know, a deep dive into all the useful extensions to add would be a great testing code episode. Just say,

00:10:44 I love that idea.

00:10:45 I like it. Okay, well, speaking of plugging stuff, I want to take a moment to thank our sponsor. So this episode is sponsored by data dog. Data dog is a real time monitoring platform that unifies metrics, traces and logs into one tightly integrated platform. Data dog. APM empowers developer teams to identify anomalies, resolve issues and improve application performance, began collecting stack traces, visualizing them as flame graphs and organized organizing them into profile types such as CPU, io, and more. Plus data dog APM. Live Search so you can perform searches across full streams of ingested traces gender generated by your application. Over the last 15 minutes, try data dog APM, free for a 14 day free trial. And David, I will send you a free cheat tree, a free T shirt and actually have one of these purple T shirts, and I love it. So visit Python bytes.fm/data. Dog, we're just click on the link in your podcast player show notes to get started. Awesome. I got to pay the bills. So where are we now? We're back on me again. Unless, Brett, you got some something right out of the blue. You want to talk about? A young spot?

00:12:12 That's okay. I believe you've talked about exception groups on the podcast already?

00:12:19 I don't Oh, yeah, I think so.

00:12:21 Yeah. So just because they did all that sponsor, RC cares about trace packs and stuff. One interesting thing that's coming up in terms of a PEP is not been given to the steering Council yet. But there's actually a pep coming up, that's going to add a Dunder Notes field, potentially to exceptions. This actually came out of the exception group work because Zach from hypothesis was working with it over on that side, and realize that it would be convenient to be able to kind of just base literally, the name says add a note to extensions to kind of help explain why this came about. And so there's a pep coming, that's going to basically just allow libraries and stuff that work with exceptions to just attach a little note saying, this is why this happened more than just a little thing, especially for exception groups, you can kind of get kind of big and murky, by having this single note added to it to help explain why this came about is hopefully gonna help make it easier for users to understand a bit more why something happened.

00:13:25 So that's, that's pretty neat. I like it. Nice. I got some feedback recently that I'm not covering enough test stuff on Python bytes. So I'm gonna try to I'm going to try to try to solve that. I'm not going to cover test stuff every week. But I've got a test thing this week that I'm pretty excited about. So Simon Willison, great guy, he wrote an article called documenting unit tests. And this wow, it's all just came out in 2018. I just noticed it. So yeah, there's the internet for you. But it's like, it's a super cool idea. So the idea is, we've got tests like pi test and other test runners you do anything. He's using PI test, to test your source code, but why not. And Python has all these introspection, things you can do. So he's using introspection, to look at the code, and then introspection to look at the documents with with his test code, and then make some, make sure that there's some items that are definitely in the Docs as an example. So in this, this is example in the in the the doc in the blog post is mentoring data, his project data set. And so the test for this is right there so you can go take a look at what he's doing. But he takes a look at the repo and for instance, for all if he adds a config option, he's got to test to make sure that the config option gets document it, that's cool. So it's just tests or fail if he forgets to document a new option. also plug in hooks, and different views within data set, they all have to make sure that he has special views. Like he wants special pages for each view. So it makes sure that there's a page there. So I just, there's a couple neat things here, just the concept of using tests to make sure that there's things documented, it doesn't tell he makes a comment that it's not telling like a lot of tests, it's not telling you that the documents are good, or documented well, but that they're documented at all, which is, which is good. it same with our code tests don't necessarily tell you that your code is perfect, just that they're tested. The other thing that I wanted to point out about this is there's some nice use of features of, of pi tests. So there's a nice use of fixtures and parameterization. So he's got like a views, for instance, he goes out and looks at generate, like goes and gets a list of views from the code, and then use that list, to have a generated test to make sure that each of those views is tested, or as documented, is a nice idea I've been trying to do that sort of generated generated parameter lists, I'm trying to do that more in my code, because it it's just kind of a cool idea to generate your own test cases. So anyway, good job, Simon.

00:16:27 As someone who spends more time reading code and writing code, I definitely appreciate this initiative, it's very much better to have documented code out there.

00:16:38 Well, the combination of like making sure that the tests, the documents are tested or things are covered. And then also, I think, a few episodes ago, we talked about a project projects using generating documents themselves. So like, for instance, instead, if you're gonna plop your help text in your document, don't copy and paste it use code to generate that. And then it's always going to be correct if you got it in your build system. So nice ideas.

00:17:13 And it was about using cog right. Yeah, that was it. cog I forgot.

00:17:19 Yeah, that's, I and I. And what I really love about that is, when I came across Cogman, a long time ago, I thought, I gotta have a use for this, but I can't think of it. But this is the perfect use, because we always often do that within our like little readme or something is just to plop a little example of code, using your tool in whatever library your half. So having cog generate that for you is great. So I think I need to go back and do it. So I've got a little toy project called cards that I use for teaching testing. And, and I change the interface for it for layout reasons that the the tables that I was using didn't show up in ebooks very well. So I switched the the table format, but then I forgot to change the readme. But if I had had Karg in place, it would already be doing it. So it's a neat, my first thought was to write tests to make sure that the output in my readme was the same as the code. But I think a better idea is to just have the readme generated. So I mean, either one works, but both are good ideas.

00:18:28 Yeah. And to tie this back to this point, Simon's the one that actually started the trend on Twitter of everyone using qog to use this on the readme. At least that's how I first came across it. And then I subsequently saw multiple people do it. And then I finally had the same reaction yet. Ryan's like, oh, yeah, I've been looking for a reason to use cog for ages. I never quite had one like, this is a great one. So I went updated the readme for the Python launcher to use this to generate all the URLs for downloading the built binaries for it. So right.

00:18:57 Gulf binaries, built, built binaries, okay, yes,

00:19:01 because I tried to build the launcher for like, a bazillion different platforms.

00:19:08 And I'm grateful for that, because I'm using the launcher, like almost every day now. Oh, fantastic. Thank you. Well, so let's, let's pop over to talking about ourselves. Oh,

00:19:25 such a good Wow, I'm impressed. Yes. Pep, 673 self type I heard from well, Brett's Cannoneer, that it has been recently accepted. And it's interesting for me, because I'm now learning more about types in Python. I'm very new to it, admittedly. And I thought it was interesting because, well, it's this is a way to enter three methods that return an instance of your class and they give a very cool example there of a class or shape and then we have circled and carrots for shape. And then Shape has this method call set scale that, and then the type returns its shape. And because it returns for circle, it returns self as well. So it's a type circle. And then it shows like there are some, for example, editors, it may throw in error, when you call circle, set scale, which is a method from shape. And then set radius, which is something from circle. But once you call them, it will say error, because shape doesn't have this method that is specific to circle. So to kind of like have this better way to frame to frame that would be to return itself. And it was accepted. And it's very interesting, I feel like it's, it seems very clean to me in a very good solution. So I'm personally excited that it was accepted, it was very well explained as well. And I was thrilled

00:20:58 for people on the podcast who can't see. But Brian scrolling through basically, think of capital S self as the return type for those all those class methods, you write that construct an instance of your object, this is what this is built for it, right? It's fantastic. If you have the, from whatever method class method on your class to construct the innosilicon, that class from something else you didn't know have returned self with a capital S versus specifying the exact class that would have returned. So you don't have to worry about what that's going to look like. And having to worry about spelling or any of that forward depends, forward declaration problems you can have if you don't do from Dunder future import annotations, right, where it's like, oh, I'm referring to a name that doesn't exist yet. And Python throws a fit, because that object doesn't exist yet by that name. So it solves a couple problems like that. But it's it's really basically, if you write class methods that construct instances of that class, it's great.

00:21:59 Well, I don't, but I probably will know when this comes out. So is this is this part of 311? Two 311? Yes. Nice.

00:22:10 Yeah. So you can probably get that probably today, if not in the near future, from the technique extensions package, which kind of tries to do a back port and forward port of anything in the typing world. That's experimental art has been landed, but not in a release yet. And I believe that type checkers, I don't know if they all support it yet. But I'm sure very shortly, they will all support this. So you can you can get to it today.

00:22:34 And then we get we keep people that are writing tools like flake and black on their toes. Catching up with all these changes. Well, luckily, it

00:22:45 won't hit them because it's all typing. So just strings to black and I don't think like it'll care, but but like, my pi pi, right, slash pine, Lance pi type, pyre, all those type checkers are the ones that got to get updated for this. But they were all in on the discussion of even proposing this.

00:23:06 Nice, are they is that we repeat that. So the all these these people brighten these tools were involved with this, these sorts of type processes.

00:23:17 Yeah. So the way typically, decisions around typing happen is, especially from a static typing perspective. I don't want to make statements on pedantic part in the dynamic typing world, because there's kind of two parts to typing. Right? There's the general typing is, and oh, there's the concept of typing now in Python, but there's the people who do static typing, right. And that's the kind of thing where you add your type annotations, your type pins, and you run a tool later that somehow reads them offline as it were, like, like my PI or PI, right or whatever. And then there's the dynamic typing folks. That's like pedantic, we're during runtime to actually look at the annotations. From the static typing perspective, there's something called the typing CIG, it's a mailing list, and all the major static type checkers all work there together, to try to figure out where they want to take things and kind of what gaps there are in terms of typing. Basically, how can they move typing forward in Python? It's also a place people can go to ask for help if they have a generic typing question that isn't too tool specific. But to answer a direct question, Brian, the tools that are involved there, which are basically all the type checkers, static type checkers that I know of. So there's pyrite which under lines, pylons, which is what we use for our completions, vs. Code. There's my PI. There is pi type that comes from Google. And then there's pyre that comes from Mehta.

00:24:45 Okay. Oh, wow. dizzying.

00:24:50 Yeah. Although, I mean, one of the nice things about all the peps right is this is all backed by specs. So there's not a lot of crazy deviation as it were from the semantics. It's more Have a bug if someone disagrees, so they're all pretty consistent, but some of them do a bit more like inferencing, like pi type is, does more like runtime inferencing and other inferencing to try to kind of fill in the gaps. That's actually why Google wrote it, I think to help them, move over to python three, start introducing types of their code base. So they all have slightly different strengths and weaknesses, but they should all these type wise, more or less, once they've all implemented the same specs lead to the same type outcomes as it were. Yeah. Okay. Cool.

00:25:32 See, I learned so much about typing just by listening right now.

00:25:38 Yeah. Well, we're, we're to the end of our normal topics. But Luciana, do you have any extras for us?

00:25:48 Yeah. So it was announced in my team that black is no longer in beta version. So version 2020. Point 1.0 is come out. So it's the first stable release, I believe. So that's very exciting. I really liked the highlights that they have there that python two is no longer supported. Nice. So that's a cool announcement for the week. And the other one that I have is to remind folks about Pakis case, 2022. It's happening this weekend is remote. Tickets are on sale. So if you're interested in joining events, really awesome. It was my first Python conference and the community there is just really amazing. So again, removed, join us this weekend.

00:26:43 Like this case was your first conference.

00:26:45 It was in 2009.

00:26:51 Was that the Portland one?

00:26:53 It was in Seattle, Seattle. Okay.

00:26:58 I guess it was the 2021. It was in Portland. Right before everything shut

00:27:01 down. Yes. 2020. It was? Yeah,

00:27:05 yeah. Cuz that was the one I had to miss because I was out of the country on vacation when it happened. Yeah.

00:27:12 Not in China, I hope.

00:27:15 No, I was in Thailand. For a friend's wedding. Interesting. Nice. That was back back. That was back in the day when we've kept track of what countries do have COVID cases, not how many cases in every country. So it was it was a different time. Yeah.

00:27:31 So I only have like, I guess one, I don't have a anything to show for this. But I did a couple extra things. I wasn't going to talk about it too much. But I didn't notice that PIP is now at 22 version 22 dot something. It's what we're at 22 02. Now. But what one of the neat things about it is there's some some cool stuff around having PIP vendor, there's a couple neat things, there's a one of their vendors, some of rich, so some of the especially the error output. If everything goes great, you probably won't notice much of a difference except for maybe the progress bar if things are slow. But the the error report if something goes wrong, like if it's building something, that's where things apparently show up really neat. And some bear better error outputs and better error outputs are always great. Also interesting that they replaced talks in their development workflow with Knox. And I'm, I don't know if that's worth noting or not, but it's interesting, nonetheless.

00:28:39 Yeah, I know pred Yun, one of the core developers of PIP is a big Knox fan. I'm also a Knox fan. So I think part of that's just kind of the difference. For those of you don't know the difference between talks and Knox, other than the letter, Knox is a bit more of a I would see Gen task runner. So because you can write just It's frightening, just straight Python code. So I think for projects that like to use it for like release process, stuff, like on the packaging project, President wrote an ox file that has like literally a release command that will do everything you need from within Knox. So you don't have to have a separate shell script or something else, it can all be in the same file that you also specify how to run your linter and how to run your tests and stuff.

00:29:24 So that's pretty neat. One of the things that I've and I, I don't remember if there's a way to get around it are not talks operates in a virtual environment. So it creates. So one of the things the default behavior, at least creates a virtual environment. And then runs, runs whatever you're going to have to do within the virtual environment. So like the idea being you're going to have multiple Python versions, so it creates a virtual environment for each Python version that you're running. There's some stuff like this extra stuff, like I just want to publish now. I'm already like I'm already in A virtual environment because I'm always in a virtual environment. I don't really need talks to generate another one just to run a command. Is that sort of do you know if that sort of thing is easier in Knox? Or does Knox also create a virtual environment before it does stuff?

00:30:15 So Knox can create a virtual environment. I can't remember if it does automatically for every command,

00:30:25 putting you on the spot. But it's something I'll look up that she can tell you. Yeah. Yeah, definitely. So

00:30:34 go ahead. Sorry. Speaking of Pip pip being updated, I was trying to use it with PIP tools today. And it seems that pitfalls is not working with the latest version of PIP just FYI. There's an open issue, I'm sure to teams investigating, but for all PIP tools users there are not alone.

00:30:52 Yeah, so the problem? Yeah, so so I can, yeah, so what happened was is Pip tools is using the private API of PIP. And it changed. And so PIP tools broke so petrols, if you use it, you will need to pin to a version, Pip 2021 or older to work with PIP tools until they figure out what they need to do to to use the API, the changes that PIP made to their internal API.

00:31:23 And to be fair to the PIP tools team. Pip 22, just came out like a handful of days ago. So this really new, Yeah,

00:31:31 huge fan of pistols definitely love it so. Well,

00:31:39 one other thing. Yeah, just one of the things on the new PIP release for people to be aware of. So one thing that happened here is to try to cut down on the vendoring pips stops vendoring html5 lib, and now use the HTML parser in the standard library. And that actually broke a bunch of simple repo API into indexes. For those of you don't know the simple repo API, if you go to any URL and PI API for a project and replace the project part of the world with simple, you'll see what I'm talking about. But basically, there's a spec that just says, there's a pep that says, hey, write this HTML, and then packaging installers can read it and figure out where to find all the files in the project for something. It turns out, a lot of people weren't following the spec. And so it also a lot of these index in these indexes broke, because PIP wasn't able to read them anymore, because it couldn't be parsed as pure HTML, they were doing funky things that broke. So they I believe, either have or are planning to roll up back with a flag to let you alternatively use html5 lib. For now, with the goal of getting all these projects that have broken output, they don't follow the spec to fix themselves so that they can go back to not having html5 lib in box. So just a heads up if you use an alternative package index, and it's only broke, that's why they're working on a fix. But I would talk to the project that creates that index for you, and have them work on making sure that that project creates valid HTML file that can be parsed by the HTML parser in the standard library. So that Okay, going because that will probably go away and Pep 23 In Pip 23. But it,

00:33:34 it, it's not broken now. Right. It's just it's flagged,

00:33:39 it was broken, they didn't realize how much of the world was doing invalid HTML for these indexes. So I don't know if it's in 22 dot 0.2, or if it's going to be in the next release. But there is an open issue where there were, I at least was looking at where they were fixing it because I got looped in because I have one of my side projects, mouse Bender that actually wrote some some code around this originally there, there's talking about moving up to packaging up that a lot of back behind the scenes stuff enough. People don't need to care about

00:34:08 it. But yeah, no, go ahead.

00:34:11 Well, I was just gonna say, so the plan is, I think, is to add a flag to say use old HTML parser, or something along those lines for now. So you can say, hey, use the html5 live version of Carson, HTML, but it's just just to be clear here, there will be a fix, but it's a temporary fix, because people should be getting after their projects that create these indexes to do the right thing and actually follow the standard.

00:34:34 Okay, so as someone that got bit by this, because we have an internal peipsi caching server that also we store our own stuff on, and we don't own it, we like it's a third party thing that we're licensed. So I don't know how long it's going to be. So hopefully that hopefully they move quickly but at the same time, hopefully, this extra use the old one flag or whatever will work for a while, I was a little surprised when I saw the flat the warning pop up of like, oh, you're not using a good, you know, it's invalid HTML. And I'm like, What am I supposed to do about it?

00:35:11 But I don't think that developers were expecting it to be so widely broken either, right? It's yeah. What are these projects doing that are creating invalid HTML?

00:35:22 But apparently I did it all the time, though. Like, okay,

00:35:26 if it works, it works.

00:35:28 It works. It's HTML.

00:35:30 Yeah. Well, and that was the problem, right? Is the spec very the the pep that defines it very specifically says it must be valid HTML five. And I think it was specifically so that it could be parsed by the standard library. So it also means none of these, these pages could even been parsed by the standard library. So I think that's what happened, right is people because people because PIP have been using html5 Live, which is obviously way more lacks, in terms of what it can parse. Everyone just like, Okay, it's good enough, and didn't realize that the spec specifically mandated valid HTML five. And so hopefully, all these projects they got caught up, get a fix out over the next year, because as I said, I suspect this will be in until Pip 20, Pip 23, which will come out in 2023. So it's not like it's gonna disappear in a month this flat. So let the fix out. But hopefully everyone can kind of get caught up so that they can get back to not vendor in a small five loop.

00:36:22 Okay. Before we go jump to a joke, I want one last extra is, for the first time in like 1820 months, I'm not writing a book. I'm no longer writing this book, The writing is done, the editing is done. So it's, it's off to all the rest of the cogs that have to go through the process to get it. But the e book right now is really solid. So anybody that grabs a book, now, if you've grabbed it before, it's all the updates are there. But this has got all the copy, edit changes, and the final edits, the rest of its layout and stuff to try to get the physical book form. So that's coming out sometime this month, maybe hopefully. So that's my hope is by the end of February, I'll have a physical copy in my hands.

00:37:10 Well, congratulations. We everyone who listens to this podcast and testing code anywhere else for you know, you put a lot of blood sweat, tears and love into that book. So congratulations, ferruginous.

00:37:21 Well, I just was realizing that my youngest is what my oldest daughter's 12. I spent a year and a half on this book a year and a half on the first edition. So I've been writing about pi test in book form for a quarter of her life. That's pretty weird. Already for Joe, thank

00:37:38 you for your work, right? Well, now I'm going to be reading the physical copy, hopefully.

00:37:43 So one of the one of the goals of the second edition was to try to put it in a format that would be easy to teach easier to teach and learn. So I'm the next step is I'm going to work on trying to teach people in person, teach people in person and through video courses and stuff like that. Turn this into, because I know a lot of people don't read. But your coders, why don't you read? You have to read your code. But still, some people don't read books. How about something funny? Yes. Today's joke brought to you by Luciana, thank you for finding something funny. And we'll add this to the thing. So I love this. So for people listening, there's a picture of an ocean. And you've got a really big ship. It's called I don't know what's on the ship says, big ship. I don't know. But it says, but it looks all efficient, like and everything it says proper software design. And then there's a guy on a surfboard standing up. So it's like a wakeboard thing. And he's holding an umbrella getting pulled by an umbrella on a surfboard and says, whatever I'm doing. So it's funny

00:38:55 how I feel whenever I'm coding.

00:38:59 And sometimes it feels like this going from, from the old days of like these huge design documents to now oh, we're doing Agile. So let's just write some ideas on some post it notes and stick them on board and run from it with their. So it works right. It's got tests, right? Whoa. I think so. It's unit tested. 100% coverage. That's good. Let's ship it. It's a perfect. Nice. Well, first of all, thank you, Luciana for joining the show. I think it's your first time, right?

00:39:36 Yes, it was my first podcast. Awesome. Thank you for having me. And Thanks, Brett for joining last minute.

00:39:45 Yeah, thanks, Brett. It's always good to see you.

00:39:47 I'm happy to play the fake Michael for this episode.

00:39:51 Thanks, everybody on the stream for showing up and we'll see you all next week. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in B YT. S, get the full show notes over at Python bytes.fm. If you have a news item we should cover, just visit Python bytes.fm and click submit in the nav bar, we're always on the lookout for sharing something cool. If you want to join us for the live recording, just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays on YouTube. This is Brian knockin on behalf of myself and Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

