00:00:00 Hello and welcome to python bytes where we deliver Python news headlines directly to your earbud. This is episode 272. Recorded February 23 2022. I'm Michael Kennedy

00:00:11 number Inaka. And I'm Calvin Hendricks.

00:00:13 Parker. Hey, Calvin.

00:00:14 So good to have you here.

00:00:16 I'm excited to be back. Yeah, it's

00:00:18 great to have you back. I also want to say this episode is brought to you by fusion auth, a new sponsor, thank you so much to them for supporting the show. Check them out at Python bisetta FM slash fusion. auth. More on that later. Calvin, it's been a while since you've been here. But you're a frequent guest. How about just tell quickly people about yourself?

00:00:35 Sure, I've been a almost, I guess, nearly lifelong Pythonista at this point, going back a long ways, but started a company back in 1999, called Six feet up, where I am the CTO and co founder. And we are all things Python and all things cloud. So we're doing some cool stuff there. I've been very involved in some open source projects, like the Plone foundation for the Plone. CMS. We're very involved in Django as well. sponsoring the Django Software Foundation. So super excited to be involved in open source and all things Python,

00:01:04 right on to if I was a company, a person said, I need a Python app, I need some help with it. Or maybe some would even build it, I might reach out to you all, and you might build it for me.

00:01:11 Yeah. Now we'd love to talk about those kinds of opportunities. The harder and more challenging the better.

00:01:16 Yeah, but those are the fun ones. Yeah.

00:01:18 I agree. I completely agree. Like easy.

00:01:24 Well, I think this one you got here this for the first one, Brian, maybe not so easy. That's what's up with your mocking, why is it not working?

00:01:33 Well, your mics. So this is a great, actually, this is a rabbit hole. But my Well, mocks are a rabbit hole. So Ned Batchelder, great guy wrote, he writes a lot of great stuff also maintains coverage. But he's he wrote an article called why your mocks still don't work, which, which is a reference to an earlier article he wrote, called the wire mock doesn't work. And he wrote that in 2019. So if you haven't read this first, so I'm going to go back and recommend both of these. So why your mocks don't work. Or why you're not wanting, why your mock doesn't work is an excellent article, it starts it starts talking about just like what well, to think about how mocks work, you really have to understand Python namespaces, and names and how imports work and all of that stuff. And maybe you don't think you should have to but you kind of do. So

00:02:31 in imports, those are not entirely obvious, like the way that that happens. No, compared to other languages, right, we just say I'm using this library, there's like, it's way more direct.

00:02:42 So So Ned starts off with like, this really great example of just basically two variables x and y pointing to a number and if you assign into each other, but you don't really point and another variable, you point at the thing that the variable is pointing to, if you assign x to y, or y to x or something. And this hat, this does have to do with importing because the names that you import are just kind of variable names that point to something. So he talks about namespaces and, and where where things point to talks about importing and the difference be mostly the difference between from from foo import you thing instead of import foo and reference it as foo thing those are completely different names it within within your Python application. So talk walks through that talks about it and why so if you've got a value from one module pointing to an original value, and then another one pointing to the same thing, if you mock the wrong place, you're not going to get what you think is right. So basically, and this is terrible to discuss over podcast so I recommend looking at this because it's a really great example of how mocks work and and why why they act the way they do and you'll you'll be able to fix a lot of your problems so this is a good recommendation. But the one that we're trying to talk about right now why your mock still doesn't work has to do with this cool decorator thing that mock I don't remember when unit test mock added this, but there's a patch decorator examine a link to the show notes somewhere. We talked about the patch decorator and it's it's pretty neat. Actually I'm jumping all around sorry. But if you just say like patch something what happens on your test like in this example he's got to you got patch cool feature dot expensive preparation and patch cool feature dot logger in your patching with anything with this decorator. What happens is your you get these like other variables that you can add as parameters, mock prep and mock lager that you can use those to change it you can change The behavior, the you can use a search on it, you can change the return values on these through that. It's a just a, this is a way to get a handle into your mock object. It's pretty cool. And, but the trick is, they have to be in the right order. And this example looks like it's fine. But you've got lager at the bottom decorator, which is really the first and prep as the above decorator. And it's

00:05:27 the first one Brian, it says the first line says this prep one, the second one says lager,

00:05:32 yeah, but that's not the way it happens. So that's the catch here. And the punch line is it goes bought, when you're reading decorators, it goes bottom up, and left to right, like, I need rameters. Sure,

00:05:47 right. Like there's layers around your code. And like the inner layers, the first one it sees the second.

00:05:52 So if you the way has originally written it just fails, it doesn't work. The second punch line is unless you've got a real good reason to use auto spec, because auto spec would have caught this problem, like right away. And what auto spec does is it says the thing that you're mocking, you have to call it with the same interface that the thing had in the first place. And so if you've got a class or a module that has a function in it, you can't call other functions, whereas normal marks you can call whatever you want. So the default is free for all what you really should do is auto spec equals true and really, a lot of people me included, wish that that was the default to begin with. But for historical reasons. It can't be because it would break other stuff. But anyway.

00:06:43 Yeah. Yeah. It's not the default to start with Have you put that in to say now only behave as if you are the thing that I say you're pretending to be? That's gonna crash a ton of stuff. Yeah, though. And then

00:06:56 the third and final punch line is just don't use mocks. Even a brand mentions in both articles avoid avoid using marks if you can.

00:07:09 Absolutely. Felix out in the audience says tiny feature with a lot of power this auto spec Yes, very much like Yoda would put it. I love it. All right. Well, we got next topic. Thoughts on on mocking real quick for a move on.

00:07:21 We are just diving into that. And I don't do a lot of test work myself. So I'm sure Brian is the super expert on all things by test, of course. So I don't have a huge opinion here on the specific mocking, although I think it is important for folks to realize that yeah, decorators go from like that. closest to the function out it was an important call out there.

00:07:43 Yeah. The other one was from thing, import something. And then you patch the thing inside there is kind of that that I actually that was news to me. That's very interesting. All right. Also news to me. Please, please tell me about this. Chris May Thank you, Chris May for sending this over. And wow. I don't know if you've heard about please, folks, pls as an LS replacement for Linux and Mac OS. But wow, this thing is cool. Was this had either of you heard about this,

00:08:10 not until today. And I went and installed it as part of my demo. So I could see it because it looks pretty darn awesome.

00:08:16 So this is an LS replacement. And I know there are other LS replacements that already exists. So you can do more things. But this is a developer focused one written in Python, that's pretty darn awesome. So if you go look at the image I link to or just go check out the site, you can see that if you say so I've aliased ls to pls. And if I just say LS, it shows you the contents of your directory folders on top, and then it has icons for the types of files that they are. So I did an LS there's a Git ignore. So it has a git branch icon, there's a license with the law, there's a markdown file, there's a python file a Python logo, but it goes beyond that, like it understands your Git ignore, and the files that are considered hidden or the get ignored ones as well. And it won't show you even if you do like a hidden file listing, it won't show you things like the.vs underscore store on Mac OS, because that's in the Git ignore. So the structure that it gives you is related to that also for Python, if you have a virtual environment, it'll treat that directory as hidden. And because the directory is hidden, like it's sort of suppressed and its visibility. So there's really cool features around this that have to do with basically thing aren't your developer at your listing files that are probably developer like now now what do we do? So another part that's cool is you can do and please dash dash details which I aliased L because that's the LS like equivalent, and in this world, it shows you the same types of things, but it also shows you the size in human terms, so instead of like 101121171112 It would say that 10.2 gigabytes, which is nice, but it also shows you the git status in the listing. So like it has a dash m next to a file I modified, and so on. What do you think of

00:10:09 this? I think it's excellent. The I tried to use it and failed and youth to help help me understand why because you? Yes, you have to have fonts, like some special fonts. All right.

00:10:22 So one of the questions when I posted this week was like, how does it have custom icons? What magic is this? Because this will work over like if I SSH into somewhere and install please on the server. As long as my local terminal is set up correctly, this will work and like how does this work? Well, the way it works is you have to have your terminal font set to a nerd font. So I've talked about nerd fonts before. But all these nerd fonts have all these special icons in them. And long as your active terminal font is one of the nerd fonts, then you get all these core behaviors. If you don't you get squares, which are less than awesome.

00:11:00 My only complaint with it, I wish it would have emulated more of the flags from standard LS so that it just kind of worked. Like I installed, the first thing I did was like, Please dash Al. And they had like a no, no l flat. We don't know what that is. Yeah, I didn't know what that was.

00:11:15 Hmm. But yeah, it's kind of its own thing. That's why I did the alias on it. And I'm like, Okay, well, I'll just I'll do do these things. Another thing is interesting, it has a, you can set up these, these Yamo configuration files that control how it looks. And then you can put those kind of like Node js does with Node modules, like you put it at different or the project that JSON, you could put it at different levels. And if you go into a certain project, that you have a configuration file in there somewhere, it'll pick up that configuration, and then use that to like, customize how it looks for those. So that's kind of an interesting thing as well. So that is

00:11:51 awesome. I mean, we need more, we need more like fun stuff in our terminals. As developers, I totally love this. That this is absolutely the way to get people hooked on using the terminal in the console.

00:12:03 Yes. And yeah, I was thinking about like server management, which we'll get to later, right. Yeah. But if you want to go into the server, and so I'm going to ssh in and do a thing like this is your entire user interface. Yeah, to that Sure. World. And so yeah, yeah, this is your world. So this is a way to bring like a little bit more UI information, rather than just raw white text listing a file. I feel like there's like actually a lot of value in this. Oh, totally. Awesome. Let's see Dean out in the audience. And former. Yes. I thought my life was complete until today. I didn't know this was missing from my life, but it is.

00:12:40 Yes. Please, more terminal stuff. Oh, absolutely.

00:12:44 Well, yes, we get more stuff. Yeah. Speaking more terminal stuff. Yeah. Take it away. All right.

00:12:51 So we have over six years, we've been very focused on the developer experience. And so once a week, we get together and talk about just do a cold code review. But really, it's more of a show and tell. And this is something I showed off last week at our code and review in show Intel, which is a terminal that is GPU based, and written in Python. It's called kidding, if you've not used it, it actually is a super awesome, super fast. Basically, I found it to just be a super smooth experience. And the reason I had revisited it was, I'd been using T mux. Forever. And before that I was using screen. And I wanted to like just have the ultimate power tools available to me as a as a developer. And as like, my primary mode of operation is basically hanging out in the shell or an editor all day long. So I want the best tools possible. So I'd highly recommend folks check out Kittie it is absolutely tuned for performance. And you may ask well, why the heck would I want a GPU enabled terminal is just showing me text is because I want the most performance possible out of my my system when I'm using it and texture is going to give a quick little demo here of Kitty. This is actually using pls and I say err, yeah,

00:14:00 I see. I have the right what is Oh my is this Oh, my posh also, what do you got for the whole for the

00:14:07 bullet train down there. So it's actually bullet train core is not maintained anymore. That's probably my next, my next venture is going to be replacing that line or shape or something like that. So exactly some new, you know, system for showing my awesome like prompt up there. But yeah, if you get the right, fonts installed, and all that kitty supports all that stuff seamlessly. It's very, very fast. And one really cool thing since we're all like Python, Easter's and people who are listening to this would totally relate. You can extend kitty with kittens that are basically Python plugins for kitty. So if you actually I'll give you a quick example. It is I love by love and of love it actually. So the you just you invoke kitty with the kitten flag and say like what kitten you want to use. In this case, I'm going to use ikat and I would just basically echo out a Slack emoji that we use Use for Python. Oops. Oh, oh noes. It's like gonna be like the total like Demo gods not not being very kind to me now.

00:15:08 I love that your your prompt has the Python version and stuff in there is great Oh yeah,

00:15:13 if you're in a specific like pi m area, it definitely shows up. Let me just let me just like try it here I had Python. Oh, there we go. So I must have been in the wrong directory, but so you can actually show graphics on the screen. So if I want to look at an image real quick, I don't need to go to finder and open up preview and like do a quick look on an image, I can actually like quick look on any image I want. And I want to things I did want to show off, I go back to the director of

00:15:40 people who are listening, this looks like a full high res image Yeah, in the terminal, based on a png.

00:15:46 So I used ikat, which is a kitten to display an image directly in the terminal. And now if I wanted to do show even cooler, because one of the features of Kitty is it's basically got a graphics subsystem in here. And if I wanted to like look at my markdown files, normally, if I'd use bat to look at my markdown, like for this the readme that's in here, you get the kind of content highlighted markdown kind of cool, not, you know, not super great. But if I do MD cat, which is Kitty enabled, it actually leverages the kitty sub system here, I can actually review my Markdown file with images in line. So you can see that the XKCD cartoon is actually embedded into the readme of that document. And it does a little better job of like coloring and highlighting the syntax. So if you want to preview Markdown documents, without again, not going to preview or not go into like rendering HTML and viewing your browser, you can actually view it right in your terminal with the images shown in line, which is super awesome. And one last thing, one more trick, I'll show you, there is a kitty kitten for viewing diffs in a rich tool. So if I do a git diff tool, I've configured with my dot git config to configure an alternate diff tool for diff. And now I get this really beautiful, you know, high rez graphic representation of my diff my files, so really kind of pretty, you can see there's two two diff, two different files, I can page through the different files, and it shows me, you know, side by side, you know, diffs was that

00:17:11 still in the terminal that is still in terminal,

00:17:14 I did not leave my terminal, it looks like a new window, it did look like a new window, but it's actually all in terminal. So you can stay in your terminal stage or keyboard. And all the all the shortcuts are super nice. One last thing that you that the diff just sold me. So yeah, if you can switch your windows, obviously, you know, other kinds of terminal emulators, like if you're using T max, but then it's got all the layouts built in. So if I wanted like horizontal or vertical or grid, or if I wanted to like just get to the current one I'm on, you've got all that available to you with nice shortcut keys. And you can just get rid of T mux. And started just going all in on kitty owning.

00:17:51 Okay, I got a question. So I've always been confused about this whole windowing thing, because I just open another terminal. So

00:17:59 Oh, I see your question is I don't want to open a terminal. I don't want to reach my mouse when I have to like go between terminal windows. So I'd rather have like multiple tabs and have splits. And so I can have like a paging going on one window or another window. I can like edit these things, make them shorter or taller or split them in a different way. So I feel like just keeping my hands on a keyboard keeps me more productive as a developer, as opposed to reach over the mouse. I know it's not that far away. But I feel like it breaks that flow. If you're you're typing away at code and you want to like quickly, like open up a tail for a log and like, same window right below where you're running the process. You're just a couple keystrokes away, and you've got that open and going.

00:18:41 Cool. Nice. Yeah,

00:18:43 yeah, that's really cool. So I know we're not to the jokes section yet. But you know the joke about how do you generate a random string, put a new computer science student inside Vim and ask them to exit? Yep. So I think the new version is put four of them in these different panes controlled here and ask them the X at the top right one. Or even more random number or word?

00:19:07 There we go. Boom, did it.

00:19:10 I'm gonna try kidding, this looks great.

00:19:12 It's super configurable supports all the nerd bonds, all the color schemes I've had, it's just got a bunch of cool plugins for it. I've added a search plugin, which searches through your back to your terminal and stuff I was. There's nothing in that specific one. But I searched through here and wanted to search backward. It uses FCF to do searching backwards. So if I was looking for like ls, you see it highlighted the word LS, or 2020. And then if I had multiple ones, and I could just arrow back up between them this, so it's all built in St.

00:19:42 Yeah, really cool. Also, a really cool is our new sponsor, fusion auth. They view them for sponsoring this episode. So let me just tell you really quickly about them. They're an authentication and authorization platform built for devs by devs. It solves a problem of building a central user As your security without adding the risk and distraction from your main app, he's an asshat. Fusion auth has all the features you need to, for great support at a price that will break the bank. And you can either do self hosting, or you can get a fully managed solution running in any AWS region. Or if you've got a side project that needs a custom login registration, or multi factor authentication, and social logins or user management, you can download fusion auth and get the Community Edition for free. And the best part is you can have unlimited users, and there's no credit card or subscription required for that. So check them out at Python by Sarafem slash fusion auth or just click the link in your podcast player show notes and let them know you came from us. I want that T

00:20:41 shirt. That's cool.

00:20:43 I know. Yeah, you got to get a cool t shirt cat slash etc. Slash power password. D Yeah. Very cool. Nice. I love when you get a cool t shirt from our sponsors. All right. Well, Susan like cats.

00:20:57 I know.

00:20:58 And kitties. I can tell that you're already a fan of kitties.

00:21:03 Well, so I don't know if Kitty is parallelized. But yeah, so I want to talk about parallels in parallelization. Say that three times. Anyway, I found this article by Jamie Vuelta cool. Last Name, actually. But it's called futures in easy parallelization. And, um, I was like, you know, it was a pretty short article, and it was a can't be that easy. But so this isn't talking about AI Oh, stuff, or async. Io. It's, it's talking about this one is talking about thread futures, futures with threads. And this is it's a, it's pretty cool. The idea is you've got just maybe you've got, it starts off with a simple example. I just have some work that I want done. And I want it done on different threads or different processors. So this, this example, brings up a thread pool, a thread pool executor, and then runs them all at the same time. Doesn't executor submit. And it's just a small snippet of code, just a handful of lines. And I tried this out. So this example actually, is kind of boring. It's just doing like power x to the power of two, or x squared. I'm on a couple of things. I think that's what star star is, isn't it? That power of

00:22:27 remember? Yeah, x to the power of 2x. Yeah,

00:22:30 x squared, x squared. So the the other example seems a bit a bit more down to earth. And that's in the s on our screen on the on the YouTube screen is just a, it's the entire program here. It's just you taking a few, a few websites, and a couple pages to go to and, and then actually just slipping those down with requests, and grabbing something about them. And this example, just as the result, whether it's a 200, or something like that, but it's a really short example in you've got parallelisation going on, and I played with this just downloaded it, the only we'll have it in our show notes, the only error on this that I had to do is it's using, it's using time in here is just like a debug thing. And in the example doesn't import time. So you have to add, add that import time, and it runs just fine like this. And this is a pretty quick way to add parallelisation for some quick task. So I kind of like it, there's occasionally especially like, I would do it. There's a lot of huge log files, I have to parse or, or big data files that I'm looking for stuff on are grabbing, grabbing error logs off of different systems. And this would be a great example to just grab, grab them all at the same time and pull them in. So

00:23:48 yeah, now this nice. One thing that's cool about the the futures you get back from the thread pool executor, as you can say, dot result, and it blocks whereas on async IO it throws an exception says it's not done rather than just blocking.

00:24:03 Oh, yeah. Yeah. And that's the article kind of talks about that. It's one of the simple things as you tell the executor, you call executor submit, and that gets the jobs ready. But that doesn't block those are, you can submit as many as you want. And then in the example he's just using few, like future dot result in a in a in a list comprehension. And that for each of those results, that'll block until the next one's done. And you know, this one's doing it in an order of which when you submitted it, that might not be the order they finish in, but you don't really care because you just want to wait till they're all done anyway. So

00:24:42 yeah, exactly. If you block on the first one, it's not done. The second one might finish first, but those won't be done by the time we get to them. Yeah, yeah.

00:24:50 Yeah, this is a lot more natural for folks who may not be used to like async IO to

00:24:54 I've been deep in the async IO Well, natural years. That's it. And I have scars now.

00:25:03 That's exactly why I wanted to bring up this article is because there's a lot of stuff where like a, like a, maybe a DevOps person or something. They're not they're not writing async programs, but they might have async need or asynchronous needs that can be solved with a simple, simpler code.

00:25:19 So, yeah, this is very, very elegant, easy to understand.

00:25:23 Yeah. Nice article. Good one. All right. Well, I want to talk about databases and more tools. I feel like this is just the tool, focus tool episode. It is still time. Alright. So I did an episode on talk Python with Emily Morehouse, glyph. And Henyk. And Henyk pointed out this thing called PG mustard. Have you heard of this? No. Have you?

00:25:47 Oh, well, it just listened to that excellent episode. And

00:25:51 now, you know, other than that, like, I had not heard of it. But one of the challenges, so many websites, I just don't understand why the world works this way. But you go to the website, and it just spins and spins. And the the clunkier the more internal the thing looks, the more likely it is to take 10 seconds to do whatever it's doing. Right. But you know, it's doing some database query, probably without an index, maybe they gave it an index, but the index is not being used, because it's actually filtering first on some other random thing or whatever. So databases have this cool feature to say, given a query, explain how you're going to execute this MongoDB has this Postgres has this, and so on. Okay. So that's, that comes out as text, whatever, you have a better way that gives you advice. And that's what this tool here is, which does cost money, just to be clear as a commercial thing. But I thought it was cool enough that I wanted to point it out to people. So what you do is you give it your basically, a select statement, and you ask it to explain it, and it will, it'll break down the EXPLAIN statement into different sections, and tell you this part is really good, this part of the query could be improved, and so on, and then it gives you to like it'll, it'll show you this beautiful visual way of explaining it, and you can dive into it. And if you click on it, it'll tell you things like, Okay, this is a nested loop and on this part of the query took 152 milliseconds, you got 100 rows back. And then it actually describes the situation, why it's good or bad. So for example, it says, You got five stars, because you discarded 1.3 million rows, that makes it faster, but you only got 3.2 stars, because the row estimate was out by a factor of 42. You know, try to get that from tax, right? This is this is super helpful if you've got a slow site that you want to say, Okay, this page is slow. These are the three queries that run when we pull this page. Why are they slow? How can I make them better? So it's, you know, we talked about the regex, 101 thing, how it like kind of guided you through and gave you recommendations. This is like the database equivalent.

00:27:57 This is nice. This is awesome. I can't believe I've never seen this before.

00:28:01 Well, I know I have can't either. No, I've never seen it either.

00:28:04 Now from the from the interview, it sounded like it would recommend how you could change your query to make it better. Is that something that has in there? Did I imagine that?

00:28:14 I believe so. And I believe so if you like eggs, open up this 3.2 stars, I think it'll give you descriptions about what could be better in there. So it can give you performance advice, including high index potentials, or index efficiency, disk operations. So like, you've got to read too much off this to answer this question forecast, cache performance, excessive heap fetches read efficiencies, lossy bitmap scans, and on and on and on. Right. So it's pretty cool. It runs on Postgres 9.6, or newer.

00:28:47 I hope you're newer than that. 9.6 That's, that's pretty great. It supports that far back.

00:28:52 Yeah. Anyway, it is a paid tool. But, man, if you could, for $95, make your website and times faster. And people have been complaining to complain, you don't have to rewrite anything, you just put in like a slightly different ant, or index or change the order of a query. Like that's, that's worth a lot. I think. I think

00:29:12 I'm just gonna try to learn this and then set up a page to say I'm a database optimization consultant. Just run this in the background and say,

00:29:21 yeah, it looks $500 an hour. I will absolutely come in there. Yeah. And I've this new business. I dietary said tools that I've I just I can't talk about it, but you let me in there and magics gonna happen.

00:29:34 I shouldn't have said that out loud. Yeah, well,

00:29:36 I get that. The market will be swamped with these folks. Yeah. Anyway, I thought this was cool. So I wanted to give it a shout out. Cool. Super cool. Yeah. All right. Gavin, you're the last one. All right,

00:29:49 last one up, containing the tools parade. Another tool. This is also cross platform. I didn't mention that before. One of the reasons I really like Kitty was the fact I can use it anywhere. Linux BSD Windows Mac, there are downloads for all those platforms. This one doesn't support Windows, but it does support Linux, Mac and FreeBSD. It's be piped up. I used to be a longtime user of glances. And if you didn't know a glance as was you were also missing out these glances is an awesome way to see what's going on in your system, like what is being used, how much memory is being used, how much was being used. And B pie top is kind of the next generation of that. So I will show a quick little demo this one as well. So for those of you who aren't familiar glances, this is what glances looks like. Sorry, little interruption there. But while I'm live here on the podcast, this is glances. It's kind of like more tech, very texty. kind of old school looking. But if you just PIP X Install, that's how I typically install these kinds of tools. Sorry about that. Yeah,

00:30:56 x is the PIP x is the Homebrew Oh, man. It's amazing thing,

00:31:00 right? Yeah, that sounds good. You just pip install the PI top. If you don't have PIP X installed, you should install PIP x, because that'll get you access to all the stuff and your path all set up. But now I just use the pie top. And you get this like nice colorized you know, view of like a dashboard with all really like, just laid out well, and then all the you can kind of see on here, there's like characters that are shaded in a different color. If you you know, hit those characters, you'll be able to like resource. Or if you see the little numbers, I can hide and show the CPU or the memory graph. I don't care about that one so much.

00:31:41 It's just for people are just listening. Here's a terminal app that has like, like Task Manager. Oh, yeah, or Activity Monitor levels of sort of graphs going on of like, here's the CPU over time. Here's the running processes sorted by CPU. Yeah, the network. This is probably more useful than Activity Monitor, honestly,

00:32:01 I think it is. I mean, what's nice is you get the trending metrics over time. So you can see by CPU core or by like kind of aggregated CPU view, how you know, the seeing the spikes, or one of the this is really useful. If you're on a server, and like something's periodically happening, you're not sure what and you can kind of track down like either IO issues or CPU spikes, you can kind of see if they're becoming very, like, periodic, maybe they're happening every minute, or every like five minutes, like on the dot, and you're like, Oh, that's weird. There's something like maybe it's this cron job. So it helps you track that track those kinds of things down, you can also inspect the processes so you can arrow up and down. And you can actually like hit return and see like, what CPU specifically or memory like a specific processes, you can like dig down into a specific process and see what core it's actually running on. It's just, again, for tracking down performance issues. I'm just using it locally on my own laptop right here. But I've used this numerous to every machine I log into for, you know, customers or production type stuff, if they're still using virtual machines. This is absolutely installed so that when they like something slow or something's doing weird, like I just go fire these up and take a look real quick to get kind of a snapshot in real time. What's going on?

00:33:11 I've done that with glances. Yeah, that

00:33:13 used to be my go to but I just done by top was like the super powered version of glances.

00:33:18 Interesting moved area, the graphs are way better. Yeah, like you have progress bars or like meter bars that are graphical in glances if you make it wide enough, but they don't have over time. They're just like snapshots. And

00:33:31 these are like beautiful gradient colors. Like I kind of just expanded the net one so you can see the traffic going across my card. You can also switch back and forth between different interfaces on the system. So if you've got multiple network interfaces, you can see the aggregate or just for a specific interface. Yeah, super helpful when trying to track down you know, weird, you know, in quotes, weird issues.

00:33:52 How's it run on kitty?

00:33:54 runs great on kitty that performance is amazing. There's another thing I didn't show you is like you can actually see with the NVIDIA smi tool like there's kitty using a 20 megabytes of my GPU memory on there. Oh

00:34:06 my goodness. That's pretty awesome. Speaking of beautiful Alvaro it says be pi top has theme yes, they use the dark yellow theme.

00:34:16 I love the fact that it's got themes I can customize like, you know kitty, or even be pie top or my whatever my IDE is. I just trick that stuff out. This is my environment. I want to be as comfortable and as productive as possible. So the more customizable, the better. And the more emojis the better love emojis. Yes.

00:34:36 There's something to be said about if you sit down and you're like, I am excited. Look how cool this is. Yeah, I'm using like an old version of bash with nothing else installed. This is not as much fun as I envisioned it to be.

00:34:46 Well, the the only issue is when you sit down with someone who's like, they fire up text to like edit some text. You're like, what are you doing? Like, come on look like? Let me show you some cool tools. Like let me get you up to speed on here.

00:34:58 Yeah, text editor. The notepad equivalent if you're not a Mac person, yeah, that's, maybe it's a Word Pad. You know, maybe it's a word pad level, like, that's probably worse, which is worse. That's worse than notepad because you're gonna get weird corrupted characters that you're not going to know. Yeah. And

00:35:15 one of the, especially with, with working from home now, a lot of people are working with kids around that walk by and you want your job to look awesome, so that they're interested in what you're doing. Just say,

00:35:27 Yeah, I'm sure my kids think I'm a hacker.

00:35:32 You're not wait, you're not a hacker? And hack on

00:35:35 code? Yes.

00:35:38 The original there is exactly

00:35:40 the original meaning of that word. Yeah.

00:35:44 Frying pan for some extras.

00:35:46 I do have a big extra that I'm really excited about. Yes, the book is, which I've been talking about for about 18 months. And if you add that to the previous 18 months, about three years of this podcast has been talking about this book. But anyway, so it's, there's no longer a beta flag on it. It's not in beta anymore. So it's, it's off to the printers. And in then to celebrate it being officially released. It is there's a coupon code that will link to this page in the show notes. But it's a coupon code. I don't know how long this is going to be good for. But this is for 40% off the ebook. So this is exciting. And I don't have a physical copy yet. I'm still waiting for mine to get delivered. Hopefully, it'll be in the next couple of weeks. So yeah. Anyway, that's, that's one of my extras. The other extra I wanted to bring up is pike camp. Spain, is happening. April 15. Through the 18th. And man, this looks fun.

00:36:47 It's like actual campaign. I love the idea. Well, like I don't

00:36:51 know if it's actual camping. But there's a admission includes four days and three nights including accommodations and breakfast, lunch and dinner provided. This is pretty amazing.

00:37:03 And O'Brien I think karaoke on ls to karaoke talks,

00:37:08 your games ping pong. This looks great. You have to

00:37:11 give your talk in song form. Yeah, oh

00:37:14 man, no one, no one would want to see me do that. Or me either. So this looks great. But doesn't like a lot of fun.

00:37:23 Fantastic, have you got anything extra you want to throw out there?

00:37:26 I do. Coming up next month. And just a little over a month is the Python web conference, oh, I've got the report the slide for it, you've got the screen, I do want to have the screen for it ahead even even pre planned for this to be ready to roll. So it is Python conference time. This is our fourth speakers or fourth annual event. We've got some amazing speakers who are going to join us this year. So I'll actually bring that up. Because I'm really proud of this group. If you scroll down through here, there is just a amazing bunch of people who have signed on for this amazing adventure with all of us over here. So definitely check it out. It's gonna be way bigger than it has been in previous years. So this is the fourth year we've run it. And I believe we've got 90 speakers this year, we're doing five tracks across five days. So there's two app dev tracks a culture track, the cloud track, and PI data track. So there is something for everybody. Get your tickets now is going to be a ton of fun. We will start getting things cranked up a couple days beforehand, we get in the Slack channel is all set up and people can start basically hanging out and we're gonna have some cool socials. I know we've got one of our speakers is going to give a mindfulness social so if you want to come and learn how to decompress as a developer, and she's going to actually be one of our keynotes about burnout. But she's going to give a practical example during one of the socials that I'm super excited to try out. Nice,

00:38:53 fantastic guy. See a bunch of the people in the speaker list have been here on the show.

00:38:57 Yeah, you should this should not be strangers to especially this guy right here. He definitely that guy. Definitely Jamie. Well, yeah,

00:39:05 I'm noticing a lot of these speakers from either this show or talk Python or testing code they've been a lot of people have been Yeah,

00:39:13 one a lot of friendly faces a lot of friendly faces on here. And again, great, great group of people. They're all super excited to participate in the conference. They're all super excited to like, hang out with everybody. And like just be a part.

00:39:24 Yeah, I like that. You're putting the social links up on the page so that people can check that out instead of having a Google forum or something. Yeah,

00:39:32 it's all about the people. For me. I'm I love being a community builder and putting this together for folks. Oh, look, there's another amazing speakers in the in the audience right now.

00:39:43 Fantastic. Yeah, that is awesome.

00:39:45 Well, no, don't mean to cut you off. But I was just curious if my client any extras, you

00:39:51 know that I do. Alright, I got a couple. Let me let me tell you about this little app I got which I meant to do a little video so I could show you I'm a huge fan of Mac OS. And I really enjoy working there. I love that like the terminal tools or like server stuff, but it's not, you know, you got all the nice little tools and whatnot. One of the things that I absolutely just don't understand is switching between Windows is like nearly impossible if it's the same app. If I got one web browser set of tabs, and another I'm gonna cycle between them like command tab, the Alt Tab equivalent, has no effect on that, right? Like, why is this? So I found this cool app called which that lets you do all sorts of stuff like map it like Alt, Tab instead of command tab, and it'll pull up it's very similar, but then you can even like switch between tabs within a browser. So I want to switch to Vivaldi but under this tab of that Vivaldi so how wherever it lives on what Vivaldi window, I don't care, I just want to go to that tab and stuff like that. Super, super cool. Just cycle between the last use window and the last use app, and there's just a, the customizability of it is insane. Like it's it's truly crazy. And what does it cost? It costs $14 watts. So if that frustrated you check that out. Number two, is I did this video called don't use loops, or do you actually need loops in Python is really to say like some of the time you can use comprehensions of various types that already talked about. But in response to that someone said, Oh, I don't really think there's any difference between using a list comprehension and a for loop. They're the same, like, how could you even tell me that they're different? Well, one important this from from this import is just like a disassemble, and you'll see a big difference. But to I put together an example that for 10 million times, basically adds the numbers one to 10 million, even numbers, one to 10 million to a list using a for loop and then using list comprehension. And it is about 25% faster to do the list comprehension than the loop, which isn't gonna change people's world, probably, but it's, you know, something to consider. Yeah, so I'll link it to a very small just there.

00:42:06 I just my pet peeve of mine, if you're gonna do a loop, at the very least don't do for AI in length of something. That's C that's not Python. So

00:42:20 yes, please, or, or create a number count equal, you know, I equals zero while i less than this i plus plus on the inside, right? Like, yeah, there's a lot of bad variations.

00:42:32 Yeah, those are those I intentionally put things like that in interview questions to try to see if people are really Python programmers or if they're, yeah, exactly programmers.

00:42:42 And it might be fine that you're a C programmer coming into Python. But sometimes people will be dishonest with you during the interview, like, Oh, yes, I use flask all the time. All right. How about you create a hello world view? And run that? I can't, can't do that. Okay, well, then you probably don't use flask all the time. You might use it sometimes or not, not eight hours a day, like you told me. Alright, um, another thing, another similar little just thing as I was working on using a database API, that is async only, but I want to use it in the web app that is not async. At all. How do you do that? Right, we talked about like the result of blocking and all how painful that is. So I came up with this little just that it was working great in production in dev. So this really simple thing, you can just wrap up an async call and say, run it internally manages a little loop and it calls or anything. So you've got like a database async call, you can just say, you know, go to the call and just say run, whatever get the thing, I think with the parameters, right? So it's not like a decorator, you just call it really simple in practice. What I found in trying to deploy this to a website was the database back end was doing weird stuff with like, what thread is running on the web server micro whiskey was like shuffling around, like the order of when stuff ran on different threads, and it was freaking out the event loop and you get all these errors about like, this thing has become detached from its its async i o loop where it came from one loop, and it's trying to continue on another loop just like oh, no, what is all this? So I ended up coming up with a massively crazier version that people can check out that basically coordinates all the work to a background thread, runs it all in the same place and puts it back. It works fabulously. It is horrifying. So you can take it for what it is anyway. As part of this conversation, maybe it works really well, but it looks really bad. Bill Jones. So from court, I believe, sent over I think that said one of the problems with async. Io is if it's already running, and then you call a sync version, which internally happens to use the same pattern. It's going to crash and say it's already running. Weird. So there's this thing called nest IO, which allows you to basically have re entrances. So if you get the runtime error, this event loop is already running. But if it is just run, you know, whatever. But that's the error you get. So this will allow you to basically re, like continue on in the same loop. Right? Those are all my extra. So I thought those are all been

00:45:19 nice simply combining threading and async I O and the same little sub modules brave.

00:45:27 I did not get to that position willingly. Not at all, like but everything I had tried. It didn't matter. And people say, oh, you should use async IO dot run that manage that for you. Yeah, except for that it wasn't working in the weird web servers that are doing all sorts of threading. Yes. And just right. Like, it was the only thing that worked and so there was alright, that was not funny. But maybe I've got something funny for you. He's ready for a joke. Yes, always. Okay, so this one is about mistakes that people make with testing for truthiness versus assignment. And so it's a cartoon and there's these humans being ripped apart by robots who says oh no, the robots are killing us. And someone asked why but why we never programmed to do this. And then there's like a computer with some code on the screen in the background you see robots killing people and it says has actually the code for the robot it says void interact with humans. If is crazy robot equals true kill humans else be nice to humans.

00:46:36 But it's an assignment not a god. It's a single equals instead of a double ended the world has come just to me a crazy killer robot. Crazy murdering robot.

00:46:48 Yes, exactly. Anthony would save us from this cartoon Apocalypse by saying this. You'll remember your unit test. Yeah.

00:46:59 And beta testers.

00:47:02 Why do we keep losing QA people? I just don't understand. Where do they go? I don't know.

00:47:09 just ship it to me. Yeah.

00:47:11 Yeah, exactly. Exactly.

00:47:13 What might your population AB test this stuff? Anyway,

00:47:18 no thing. Nice.

00:47:20 But thank you, Calvin for coming on the show. This time. It was totally fun. Love it. Yeah, absolutely. Brian, thank you here. I was always I always see you later. Yep. Bye, everyone. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in byt s. Get the full show notes over at Python by Sarafem. If you have a news item we should cover just visit by them by South FM and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

00:47:20 Transcribed by https://otter.ai

