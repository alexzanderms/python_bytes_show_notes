00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 241, recorded July 7 2021. And I'm Brian knockin. Hey, I'm Michael Kennedy. And I'm I'm new here. I'm Jay. Hi, Jay. Thanks for coming. So, a little bit about who you are. Yeah. So I'm Jay Miller. I'm a developer advocate for elastic, a company that does search using Elastic Search and many other fine tools that we create. And I spend a lot of time working on podcasts, shooting video, helping other podcasters, which we'll talk about later, and I'm yelling at Michael and Brian as their podcasting, and they can't hear me. So yeah, that's, that's what I do. I would totally love to hear one of those just like record yourself yelling in our podcast at the same time. That'd be great. But welcome. Thanks. Um, you're kicking us off today, Michael. So where are we starting? Well, we're gonna start with some automation here. And I previously uncovered that if you go over to GitHub, I'm not logged in, I guess it's not gonna work. But if you go to GitHub, and you forked a repo, so for example, if you've forked C, Python, you forked fast API, you know, whatever project that is you forked, all of those things are under pretty active development. And very quickly, your fork will get out of sync with what's called the upstream the thing that it was forked from, and GitHub recently added disability, which we talked about to go to a repo and press a button, it says your fork is behind, would you like to catch it up? And you can click a button and boom, it'll catch it up. So well, that's neat. But wouldn't it be nicer? If you didn't have to do that? If it just did that on its own, like sometimes you fork something, and you're actively making a bunch of changes to it. And there might be merge conflicts and all sorts of stuff. But a lot of times, I would bet the majority of the time people say that's neat, I want to save that for myself, just so I'm sure I've got it. And I can do whatever I want no matter what happens to it, right? Maybe we depend on flask. And who knows what could happen to flask, probably nothing. But let's just fork it just in case, right? And you just want that to stay in sync. So here is an article or walkthrough by Yosh Walia, oh, it says three easy steps to auto sync your forked repo with ups with the upstream the origin thing that it came from. Now, of course, you could go to the command line and run a bunch of steps to do this. But what this does is it uses GitHub actions. So you come down here and you can go to GitHub actions. And basically, when you're choosing a GitHub action, there's like this marketplace, or this catalog of pre built actions that you can choose from as templates or whatever. And then it opens up a txt file that you basically type in the bits of that you need change. So you go to the GitHub actions, and there's one called fork sync with upstream action from the actions marketplace. And you can see it says on the schedule, once every, every day at 7am, what we're going to do is we're going to run on a boon to guessing Docker image, it's going to check out the your project, and then it's going to pull the upstream changes and add the upstream origin, kind of line up the branches through the checkout, and then just merge that in and push it back. So pretty straightforward to do. I ran this on some projects. And you know, one of the recent changes at GitHub and moves is to get away from like, master branch terminology. And now that's all called main. But I had some that when I forked it previously, and it was mastering them became made, I had some challenges trying like, I think I just chose poor examples to try to work from so I didn't quite get this working perfectly. But people have more GitHub action experience than I have. I'm sure they can make it work. So this seems like a really cool way to just say, Yes, I want to fork something. And please just stay up to date, this, this is definitely need for something where you're, you're actively working on it a lot. I think if you're, if you're just trying to train to train something out and forget it for, like, play, play or thing. I don't, I definitely wouldn't turn this on. But like with a team, where you're all working on same code, you definitely want something like this. So this Oh, I hadn't really thought about it from the team perspective, right? Because a lot of the Git flow with teams thing is fork it, make changes and do a PR, I mean, also sometimes people just create feature branches and do a PR within the repo. But if your mode is to create your own PR or your own repo, and then do the prs back to the main repo, I can see that this been really helpful. Yeah, we use a method and get lab where it's on the, we have to the the main repo has to test to know where all the forks are, but it does a push every time there's an update to protected branches. I see that's cool. I was thinking about using something like this for some of the projects.

00:05:00 I do where there are folks that will take data sets. And they're just stored as CSV files. And they're sitting in repos. And I'm like, Well, if I have access to this data, and I want to do you know, some project with Ilan or another, you know, tool that I use, then I have to then go and just manually download their CSV file and update it every time I'm about to present on that data set. Whereas if I just say, Hey, I can fork their code, and then build my project off of their repo, and then set this up so that anytime they update that one area, it's it's just always up to date. For me, I don't have to think about it. I don't have to go in and go, Oh, hey, was there an update, it's just like, constantly running in the background. And I know, you mentioned Mike, at the beginning, like GitHub is working to make a lot of this easier. I mean, I feel like kind of their mission now that they control, like 90% of the Git surface, out there on the internet is to just make lives easier for the people that are using their products. So I think that you know, stuff like this stuff, like having just a simple notification that says, hey, this, you know, your upstream branches, you know, ahead of you click here, and we'll we'll get everything merged in, and the less GitHub commands I have to try to put in to remember that I am going to mess up 100% of the time, the better. Yeah, it's so close to having this built in, right, you've got the button that says, right now sync this, if you just had a checkbox or something, and just keep doing that, if you when you see these changes, you know, like, basically install this automatically for me, that'd be fantastic. Maybe when you fork it, right, I want to fork it and I want it to stay up to date, I guess probably the hesitation is certain things. It requires certain behaviors, for example, you shouldn't be making direct changes to the branch that you're synching with. Because you might end up with merge conflicts, you have to work on a separate branch. And I don't know, it probably gets complicated. But I would love to see this more automatic scope, right. I'm trying to remember what the next topic was. My memory is not that good. What do you use? You know, don't you? Oh, yeah. Memory Usage? So you actually have a talk about this? Don't you my memory? I do. I've spoken about it before? For sure. Yeah. But so this is a cool article by NMR. I think sneakers everywhere. All right. Anyway, it's a it's a nice, easy to follow discussion. But but there's, there's a cool example it goes through where it's just a, it's kind of a neat one liner to allocate three gigs of memory. And you know, it's kind of thing with NumPy just allocating a, carry a byte array, or three, like 1024 by 1024, by 1024 by three matrix. So, some clever math there to get three gigs. But it actually works. And then he goes through and uses PS utils. to, to read the memory and figure out how much is there. So I had to I actually, I paused at this point, when I was reading the article to go and find out what all this stuff does. So the when allocating like a ones array, you can NumPy as a way to just pre pre allocate a bunch of ones, which is neat. And you give it a shape of what what the vector shape is that you want it in. But then also this process stuff. I it's an RSS, and I'm used to RSS being really Simple Syndication. So no RSS is read was the resident set size, which is essentially translates to the resident memory, which is essentially how much RAM you're using. So anyway, how much RAM Are you using and in we're using three gigs, a little bit more. And then, and then he does something that I was like surprised by goes out and just opens a couple browsers and Windows, and then goes back and checks again, and suddenly it's down. It's like, way down. And I tried this, and I can't get it go to go really far down.

00:08:54 And that's because your computer's is managing memory and taking some stuff out of RAM and putting it on disk, and saving until later. So there's this it's using the memory, but it's not currently actively loaded as as Ram. Yeah, gotcha. Okay, so goes through he basically this is a little bit of a tutorial on how memory works with your computer and what the difference between allocated memory is and peak allocated memory and resident memory. And the allocated and peak allocated is like the max that's allocated at the time. And it's kind of too much to go into in this conversation. But it's a really interesting discussion. And he also talks about how to measure these using what the PSU tell for one. And then also, for the peak allocated memory, you use the profiler called fill. So there was I thought I learned a lot and just a few minutes reading this, so yeah, very nice. Yeah. NMR is doing all sorts of cool stuff, stuff with memory analysis and profilers and whatnot. There's a surprise in here of if if you fill it with ones you actually

00:10:00 To get three gigs, but if you do the same thing with zeros, you get like nothing. So, Python NumPy. figure, it's just zeros, we'll just we'll just remember that there's zeros. And until you actually do something with it, we won't allocate it. I was like a lazy allocation or something. Yeah. Yeah, interesting. So what I was gonna say is, another thing that's tricky is like this is using PSE, to process memory. To analyze it, it's just what how much memory is the process using, which is not always the right way to think about how much memory you're sort of demanding. Because the allocation in Python, you know, you allocate them blocks of big blocks of memory, and then the blocks are managed in pools. And then the pools are managing arenas, and there's a lot of pre allocation, and then reuse, but you end up with like over allocation, and then eventually filling those up with things. And so it gets pretty interesting about actually understanding precisely how much memory and what's using it, it's not quite as straightforward as just how much process memory is being used. But it's still a decent proxy, right. I don't know how I can subscribe to that RSS feed.

00:11:10 I know, I saw that I had the same thought what I thought, well, all right, Jay, you got the next one, what we got here. All right. So this originally came from a video that I saw, trying to solve a problem that I had, and I had to do some deep searching to figure out whether or not we talked about it before Paul talked about it before. But we all know f strings. Now we love f strings, f strings are also f strings can do a lot. Sometimes folks don't realize how much f strings can do. Like for instance, did you know if you put an equal sign after a value, it will actually give you the variable that you've provided equals and then whatever the value is, which I think is awesome when it comes to logging and figuring out other information. But one thing I did not know is that you could use f strings to format date time objects just right in the app string. So you don't have to do you know like date time dot string f tie or you know, string F for matter all that stuff, you can just do f string, the date time variable, and then the F string format code that you would use to format it normally. And that's over here in this you know, if I just scroll down, you can see here where in this example, they use just daytime daytime now and then now colon, the format. And I saw that and my mind was blown because that means I now have to go back through a bunch of code and remove all of the string format, like parsing and just throw it directly into the date time field. I'm kidding. I'll also just throw out there, sometimes you want to have that stuff separated so that it can be used elsewhere. And you don't have to constantly rewrite it. But we now have another way to format our date times. But sadly, it's still probably sucks with dealing with time zones. Because Yeah, the times are hard. They are hard, I think it's totally non obvious that you can have variable colon, some format string and an F string. But it's really nice. The one that I use the most is colon, comma, four digit grouping, Mike, here's, you know, two millions, such and such. And I wanted to do two comma, you know, three digits, comma, three digits, I knew that you could do something like that. I didn't know that. That was how you did it. So thank you for adding that to my list of things you can do with F strings. Yeah, and I know when they spoken about Brian is to do like the variable equals which j alluded to where it prints out the name of the variable equals the value of the variable do use that often. I use it all the time. Because I'm a kind of a printf debugger kind of person. Yep. Yep. Let's see some comments from the live stream Magnus. Hey, Magnus, a string is cool. I find selecting between rapper and string and F stream is really useful. It's very neat. Dean hating, how can I keep from keep the formatting as a variable? Let's just assign it as a variable. Just saying. Can you use it in the upstream?

00:14:16 Probably maybe you've got a call stir of the variable. Now. Oh, man, well, that's, that's where you start getting the bang art, like the exclamation point are to like, just force it to do a wrapper on whatever provided. Again, not saying that you should do it that way. But uh, I mean, probably good. Yeah. Yeah. Definitely. And say I'm out there and livestream just how have I never heard of these? Yes, I know. It's amazing. Amazing. Amazing. All right, I want to throw in a quick thing I want to add to that really quick. f strings. If you find yourself with a bunch of code that has been around for years, pre three, six, and you're like, it's got who knows how many variations of formatting strings in it.

00:15:00 And you just want them all to be f strings. You can use Flint, FL YNT, run that against the top level of your directory, boom, everything's f strings. Looks great. I did this on like 20,000 lines of Python code project had one error. I submitted it to them. They fixed it. And yeah, it was really neat. That's cool. Cool. Cool, indeed. All right. What's the next one here? I guess I got the next one. Don't I right? Yeah. Well, this one, I went back a little bit back and forth on whether or not actually wanted to feature this because it's a little bit recursive, I guess. So I did a talk for Manning. They had a developer productivity conference talk, or a conference. Jay, were you part of that? I was not Part I, I am hearing

00:15:45 part of this. I know, like, how did you not pay me or is your podcast at all? So the conference was interesting. There was some really neat talks, there were some other talks that I'm not really sure of bided by the theme of the conference. They're just like, Well, here's a random Tech Talk. Oh, okay, well, but that's not productivity. Anyway, I tried to abide by the theme. So I came up with a talk called 10 tips and tools you can adopt in 15 minutes or less to level up your developer productivity. So really, what I want to do is just give a quick shout out to like the 10 tips. And people can go if they're really interested, they can seek around the video and go find that, or email me and I'll send you the slides. So one of them is to use a proper shell, like I find every now that I run into people, and they're just running, you know, the whatever comes out of terminal and Mac OS, or they're just using CMD dot txt on Windows, and it's like, how can you go day to day like, there's so much possibility there, right. So you know, consider things like oh, my z shell, or my posh I just installed on my posh on the windows terminal with the new PowerShell on Windows. And that thing is so much nicer than what you had before. That's cool. So get a proper terminal with some of those options. Use if you're doing anything on the web, you secure.pi which just adds all the a wasp secure headers that you're supposed to do like don't allow your site to be embedded in an iframe and cross site scripting and stuff automatically supports like 10 different Python web frameworks. And if you're on some other technology, there's things like in web sec, which does the same thing for a speed or net, or I'm sure you can google another one. Tip number three, pick a nice GUI for your get work. Sometimes it's fine to do stuff on the command shell, but on the COI, but it's really nice to have visual views of like branching and, and whatnot. So think of like source tree or even Python VS code, sync your GitHub forks just talking about that. So keeping that going, use a proper log framework like log guru, or even century use, Let's Encrypt. Number seven, you can go and just get your sitemap and request every URL at that destination in your sitemap. And that's a way to just like make sure your site's not going to die. So you could put that as an integration test, use PageSpeed Insights to make sure your SEO is good. And your site's responding. Well use homebrew or chocolaty on Windows, and then the very last one is set up dependable, or even some of the stuff that we talked about Brian, start using PIP compile with a.in file, and you can tell it to upgrade the requirements whenever you run some CLA command and it'll regenerate your requirements dot txt based on all the dependencies and gives you a really nice organization like this sub dependency is here because of these three things you've installed in your main requirements, not in and so on. Yeah, there's 1010 quick tips that people can go play with and then check out that short video if they're interested. I mean, I know 11 quick tips would have wouldn't have been, you know, an amazing brand. But I feel like virtual environments, like not brought up at all that was Yeah, that's true. That's a good point. Yeah. I mean, you should have been in the conference, I'm pretty sure, man. Yeah, only I know about it. well enough, some people not use virtual environments.

00:19:02 Dean also have as an 11, there may be 12. Now close that Facebook tab. Yeah, I'm surprised at how many people don't use virtual environments still, or even I don't want to say something like using like Pippin, or poetry or anything like that. Mostly just because I don't have a lot of experience with them. But what is it virtual environment rapper or, or even high?

00:19:25 Just really great tools to make sure that everyone's operating on the same Python version. And that, you know, if you need to run Python three, five on one thing, because, you know, your code isn't set up for it yet. And then you want to run three, nine on something else. Having tools like that, that once you once you learn them, they're so phenomenal and just so easy to use. They're wonderful. The overlap of the people that have a Facebook tab up are the same people that don't use virtual environments.

00:19:54 Probably, probably notifications as well turn off notifications like that.

00:20:00 But Outlook or other things like that, like since you don't mind your email send you messages or like patos. Right. Turn on Do Not Disturb. Yeah.

00:20:09 Before we move on, Dean mentions in the chat for the F string thing you can put, you can put layers of curly braces in, like f string within f string. No way. Yeah.

00:20:22 I feel like we're reaching a dangerous point. No, that's awesome. That's so cool. For people who are listening to this Yeah, so for people listening, you would normally have an STD say f quote your curly bracket variable close curly, and with the format as a colon. So Dean is saying that if you put as the format string curly variable that contains the format, curly so like, curlies within curly, that'll do it. That's awesome. Thanks. I had no idea. And I have no idea how you found that out. But that's good. Yo, dawg. I heard you like curly braces.

00:20:55 Cool vehicle. All right. Let's see. Oh, um, next cool.

00:21:01 I want to cover a cool article called from Peter called How to start a production ready Django project. And this is sort of just a fun project, or article because it's focused on Django, definitely. But I think this is a lot of this advice is just good idea for any, any web app or, or other, I guess it's mostly web app stuff. But anyway.

00:21:25 One, it's worth a look, even if you're using to some other framework, he starts out just said at the beginning, when you get started project just started out, right. So one of the things that I thought was neat was making sure that you set up a local environment, a test environment, and a production environment. The low end, the easiest, and most important is the local environment so that new developers can get up really quickly. And, and just start clone and go. And I think that's really important to make sure that that's working well. And, and easy. And then almost as important. And I would say maybe more important, but it is, is a test environment. So if you've got if you've if you're swapping out like different database or something for your test, making sure that that's configured and set up so that the developers when they're contributing can easily run the tests before they submit code to you. So that's really, that's really important. And then the production environment in the setup for that, that is an interesting argument that that can be more complicated, that can be a different thing. Because most of the people involved in the project aren't really going to run that it's just a handful of experienced developers think that's cool. So after setting up the environment, sort of stuff, it covers making sure that you have git, or some other version control setup, and use virtual environments. There you go j,

00:22:47 make sure that you do in a virtual environment. But then I know there's a section on requirements. txt files that I think is amazing. Maybe everybody knew this already, but it hadn't occurred to me is to have a directory instead of just a file and have several of them in the example it has a base one, a test one, a local one, a production one, and they can include each other. So all of them include the base, and like local also includes text. So whatever your environment is, you can just install one of these. And it's the right one. And all the like the project stuff is all in the base. So everybody uses that. That's, that's a pretty cool idea. I've never done that.

00:23:29 either of you use that sort of a model before? Yeah, no, I'm terrible. I just put everything in environment variables, and then I never have to change my code, I just have to change my environment variables, depending on what area system I'm in. Yeah, so that's, so that's the that was discussion was around their requirements. But there's also a similar discussion around the setting. So the setting setup to make sure that you've got, you know, where the database is, where your servers and all that stuff and have those set up for them, and switched for local test and production. And just getting all of that stuff set up ahead of time, right at the beginning of the project. And included a couple things I was surprised to see was making sure that you've got a consistent set of linting and styling tools like black or flay Gator, I sort. And then also editor configurations. They might make the whole team more productive if you just go in and store your editor configurations in the project. I never considered doing that. But yeah, one thing that's really cool is four pi charm. I don't know how VS code works, there's maybe something for it as well. But in PI charm, you can go and customize like the code cleanup and formatting and rules of like, what it inspects and how it'll fix them. And then instead of saying save that in my like user profile, you can say save this in the PI charm project. So other people in the team open it up and it won't show squigglies if like your convention is different than Pep eight or if you format it It won't jump around and stuff does

00:25:00 And then of course, there's some Django specific stuff like application structure stuff. But I think, like I said, even if you're not using Django, this is a good set of things to look through. Yeah, yeah. Well, I guess I do the thing with the requirements have like a dev version that's based on the production version, and whatnot. But you know, what settings? I hadn't really thought about that. That's cool. Did Indeed, indeed. See Jay got the next one. I do. And just as I always try to bring some type of productivity app tipper trick, this time, it's a Mac App, sorry, folks in Windows land, Mac only. But I'm sure you could do something similar with like autohotkey, or one of the similar tools. But I'm talking about a program that a friend of mine, Brett terpstra, made called bunch of it is interesting in how simple yet complex it can get. So those that don't know, I work on, I help Mike out from time to time, more specifically with the talk Python newsletter. And this is literally the bunch that I run every time I start working on the newsletter. So the thing about bunch that's really cool is when it uses frontmatter, to set up a bunch of different settings within the program. So that's what you see at the top. And now here's the title of the thing. I want it to run sequentially, not parallel. And then if I want to open an app, I just type the name of the app, if I want to open windows within that app, I just add a dash and provide the URLs or the file names for those files, if I want to run like Safari, and then it has three nested things that are URLs. So what it does is open Safari, and then launches those three tabs. Yep, perfect. Okay. And I actually don't even have to tell it to run Safari, I just kind of do here to people reading it can make sense of it. If I just put three URLs on there, it would just open up whatever the default browser is, and then open those files. But by putting Safari in front, I tell it specifically open these in Safari. So if you work with, you know, Chrome, or if you want to do something like testing on multiple browsers, you could put, you know, each browser and then dash whatever the URL is for that. But the thing I like about this is it also supports things like x callback URLs, which are kind of a URL structure for running commands in applications that support it. You can add system commands and commands to bunch itself like throwing a pause in, if I wanted to actually go in and type like at the end, whenever I finished the newsletter, I open up messages, I hit Command F, which is that at sign in F pause for a second, because sometimes my Mac is slow. And then I type in Michael Kennedy and hit Enter. And you can even do some conditional stuff, like I have an apple script that just checks the date, if it's in the date range that I need to to make sure that I send bills off properly, then it also will open up you know, stripe and let me do my processing thing. But it's support shell scripts, which means it supports Python, I actually do have a couple that I'm running well haven't ran in a while, but it just opens up. And it kind of does similar to what we were talking about in the first topic of like just going in and making sure that projects are up to date, because I will forget the commands or I will mess them up. And it's easier if I can just follow along with what it's doing. And there's a lot of different tools here, I don't have enough time to talk about all the things it can do. One of Michael's tips that he left off setting Do Not Disturb, I can do that by just typing in parentheses DND like that. And it'll set Do Not Disturb whatever this runs and said something like this as part of your z, your profile shell setup. So when you log in it, like kicks off one of these to configure your environment the way you like it. So that for example, I like one to login and I want the first hour to have no notification. So I can just focus when I got energy in the morning. And then like turn off d&d later or something like that. So that's the cool thing with frontmatter is like you could just say start on at, you know, if I start my day at 7am, I just put start on 7am. And, you know, I would just create a second bunch that says, you know, start on whatever I wanted to end and then it would turn it off like the ad off. I think you can actually even do like a close on that I could even say like close on like 8am like that. And I don't know about that last one that had the test that but there's started so you can have it run on certain days of the week. There is not a way natively to have it run on a certain day of the month. It doesn't have cron support, but there is a workaround that I've highlighted in another video. Which speaking of I talked about this on my YouTube channel, which is youtube.com slash Kj Miller, my handle on everything that I do. That's cool. You got a nice YouTube video that walks through this right people can check that out. Yeah, and I break down everything that's happening.

00:30:00 This particular bunch, like even the apple, the apple script, which is actually JavaScript, but it's,

00:30:07 I would have expected DND to like send out Dungeons and Dragons invites to the brand.

00:30:13 Well, Funny enough, if you had a bunch called d&d, you could just do d&d dot bunch like that, and it would just run it. That is, that is doable.

00:30:23 Yeah. All right. Everybody gets him out and do order a pizza show up. And how's this guy? Exactly, by the way, bunches free. If you got a bunch app, co you can, you can just install it and run it for free. Again, the developer, it's a solo developer, Brett terpstra, he makes other Mad Science on the internet. And I believe he worked. He worked for Oracle now. Just recently. So yeah. And then if you're an Alfred user, which I can't really I don't have a good way of showing you what Alfred is. But if you know, you know, I am the mid laner, the command space for Mac or the PowerShell, like little pop up search in Windows, but like as a dedicated app that does more. Right, exactly. And I am the maintainer of the bunch workflow like the official unofficial bunch workflow for Alfred. So do you ever need help with that? You know, who to yell at? That'd be me. Fantastic. That's a cool one. And I find that cool. I Brian's added for us, our main items is sub that's it for our main items. We have anything extra? I was thinking No. And then Actually, yes, so I just ran across this. We talked about GitHub co pilot, in fact, that was the title of last week was like GitHub, your co pilot, your pilot speaking or something like that, and how both mind blowing and like, good and possibly kind of crazy, not necessarily good ways that copilot was and it was pretty interesting, right? So there's an article over on the verge. And you know, I had pointed out like, what is the license? What is the transitive license? Here was the if you have a GPL license, and then you build your it through ml? Is the transitive property applied to the GPL, basically, was my question, right? So there's an article over on the verge call that says, GitHub automatic coding tool, aka GitHub co pilot rests on untested legal ground. So there's one section in here says, despite GitHub assertion, there's no direct legal precedent in the United States that upholds publicly available training data as fair use. So people are interested in this, they can check it out. I think there's also a caveat there, too, of what GitHub is doing is on untested ground and your usage of what GitHub is doing is also on untested ground.

00:32:45 Not not saying that you can or can't use this, but just know that even if even if GitHub, you know, wins a lawsuit saying that they're good. You may not want to be the person to have to test the lawsuit of whether or not you're going to be good. So and again, I'm not a lawyer, so I don't even pretend to be one. Yeah.

00:33:07 This project, though. Yeah, it is. It is quite cool. It's quite cool. Alright, Dina, always appreciate the help in the comments. So time for some extra extra extra extra extra. This time Actually, no, I almost had no issues at all. I was feeling bad. But I just the one.

00:33:22 Yeah. Okay. So I wanted to share something exciting. So also, one more thing I didn't know if I click this. But Magnus says, I also saw that co pilot spat at API keys. So we've heard of sziget. And other don't put secrets in here. But here's yet another interesting way. You want to connect to AWS here. Here's the API, just the API key. That's awesome to go and try it when you don't know who's paying for that. It's free. It's free for you. Yeah. So I'm continuing to work on the PI test book. Just got the configuration chapter turned in. It's not available in the beta yet, but it will be within the next few days. So configuration stuff. It's all fun. And then I I'm excited to get working the next chapters I'm going to start working on or toxin ci, and the search path and debugging and those will be fun chapters. So yeah, just share where I'm at. They're awesome. You're almost there. Yeah. And then I had an extra two, but it's it's so silly. That's just fun. I have to stop sharing that. And I have to share another window now. Thanks. Thanks.

00:34:26 Thanks, fun, I found a new tool to play with. It's called mano draw, which is a very, very interesting tool. I don't know what most people would use it for. But I've been using it as an outline and planning tool and I'm going to show you what I do with it. I want to add a text here that's going to say, Hi, Python bytes crew and hit done for people listening. This is like kind of drawing on graph paper. Right? Yeah. Okay. So what happens if I expand this

00:35:00 And I tell it I want it to be a banner

00:35:04 was great fun.

00:35:06 It turned it on. And it turned it into like ASCII art and stuff. Yeah. So this is a way to actually build

00:35:15 our outlines. And they have a bunch of different versions. And I mean, I've, I've used this on a couple of projects, trying to see if I have one that I can load up real quick for, like a video that I've made. And when I say it doesn't make sense why this works for my brain, like it truly doesn't. But when it comes to did it, did it not move it to there, it didn't move to the right window, hold on. Thanks. Again, stream yard. Okay. I want to use this for my next status report and just do the entire status report in ASCII art. Yes, so put a comment, check it in. funny you mention that, because when I do my video planning, I do it in this format. And it's great because you can you know, you can move stuff around, you can draw arrows, you can highlight different sections, and, you know, know how everything is going to look there. And when I when I say like I was able to in a normal time it would take for me to do a video I like cut that time in half by just drawing an outline out using the different ASCII art to make things work. I'm going to I'm going to build like presentations with this, I don't know, I'm like, give a conference talk using ASCII art one day, you can copy and paste. But you can also export it as PDF. Let me see what options I have here. You can export as PDF, Scalable Vector Graphics, or I'm sorry, ping text, or SVG, those three for some reason I thought there was a PDF version on there, but there's not. Shawn out there was asking if you could x export the art. And hey, Sean, co host of the teaching Python podcast. And I guess the the thing is, it is $5. And I have a link in the show notes for it as well. But really fun tool. I haven't figured out all of my use cases for it. But I know that creating outlines and stuff has definitely been a very interesting and effective way of using it. And it's called mano draw. And again, it's a Mac only app. I'm sorry, windows, folks, but I'm sure that there's something out there. And if not build it. Yeah, or get one of those weird macco s in the cloud as a service thing. That's true. That That one was Mac only to my knowledge. Yeah. All right. You Yeah, I think it's for a joke. Okay. So imagine that we're here meeting for our startup. And we're trying to figure out, we're going to create, you know, some new API here, and we just are having a bit of trouble. So let's see. So this is like a little bit of a comic strip. And I guess, Jay, you want to be the person that computer? I'll be the bearded dude. And Brian, you can be the guy that glasses, glasses. Alright. Um, do they're trying to think about what to name this this API, right? Or this thing? So data? Not too generic. How about data DB? unclear.

00:38:13 Let's say this completed, already use that array list data completed, then.

00:38:21 We must choose now or the client might cancel the project.

00:38:26 Well, how about ArrayList? completed from form without duplicate? That's too long.

00:38:33 And then the next panel is like a newspaper clipping This is unable to name variable they go bust? Yeah, exactly. go out of business. They could choose names. That is one of the hard problems in computer science, right is naming. Yeah, yeah, definitely. I didn't see completed for or completed form without duplicates. Like, that's, that's what I see. It's almost like the ArrayList which I mean, if if you're making good good, like readable code, you would know that it's an ArrayList. So that's a

00:39:05 completed form without them. They wouldn't while you would have saved them, they'd still be in business, or unique, like, completed unique. Just Just everybody's just use foo bar and Baz and then the no real complaint.

00:39:21 So um, do you remember those like those Microsoft isms where they would like prefix types, variables with their type names, Hungarian notation, like the first string? What the heck was this either flies size or size? That's right. Yeah. Oh my gosh, that was terrible. There was like three characters left over for the actual variable name.

00:39:44 Anyway, cool. Well, this was fun. Thanks, Jay. for showing up today. And thanks, Michael. As always, you bet. Bye guys. Thanks for listen.

